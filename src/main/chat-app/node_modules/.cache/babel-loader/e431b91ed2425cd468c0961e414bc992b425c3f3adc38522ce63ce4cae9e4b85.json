{"ast":null,"code":"import { a as _objectSpread2, e as _toConsumableArray, c as LocalizationContext, w as withSendbirdContext, b as _slicedToArray, u as uuidv4 } from './LocalizationContext-f9cc3a84.js';\nimport React__default, { useContext, useRef, useState, useReducer, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { U as UPDATE_USER_INFO } from './actionTypes-f3a1a3e6.js';\nimport { I as IconButton, M as Modal, T as Type, a as TextButton, C as ContextMenu, b as MenuItems, c as MenuItem, i as CREATE_CHANNEL$1, j as UPDATE_USER_MESSAGE, L as LEAVE_CHANNEL, S as SEND_MESSAGE_START, h as UserProfileProvider } from './index-58bb39c7.js';\nimport { f as filterChannelListParams, g as getChannelsWithUpsertedChannel, t as truncateString } from './index-49fe86ba.js';\nimport { C as ChannelAvatar } from './index-5bed92c4.js';\nimport { B as Badge, i as isBroadcastChannelEnabled, a as isSuperGroupChannelEnabled, I as InviteMembers, c as createDefaultUserListQuery, b as createChannel, L as LeaveChannel } from './LeaveChannel-2edea8f9.js';\nimport { g as LabelStringSet, I as Icon, c as IconTypes, d as IconColors, L as Label, a as LabelTypography, b as LabelColors, A as Avatar, P as PlaceHolder, f as PlaceHolderTypes } from './index-48f41226.js';\nimport { i as isToday, a as isYesterday, f as formatRelative } from './index-d00418ca.js';\nimport { f as format } from './index-e2d20807.js';\nimport { I as InputLabel, a as Input, n as noop$1 } from './index-ccb0a3c2.js';\nimport 'react-dom';\nimport './utils-0e572de6.js';\nvar RESET_CHANNEL_LIST = 'RESET_CHANNEL_LIST';\nvar CREATE_CHANNEL = 'CREATE_CHANNEL';\nvar SET_AUTO_SELECT_CHANNEL_ITEM = 'SET_AUTO_SELECT_CHANNEL_ITEM';\nvar LEAVE_CHANNEL_SUCCESS = 'LEAVE_CHANNEL_SUCCESS';\nvar SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\nvar SHOW_CHANNEL_SETTINGS = 'SHOW_CHANNEL_SETTINGS';\nvar HIDE_CHANNEL_SETTINGS = 'HIDE_CHANNEL_SETTINGS';\nvar FETCH_CHANNELS_START = 'FETCH_CHANNELS_START';\nvar FETCH_CHANNELS_SUCCESS = 'FETCH_CHANNELS_SUCCESS';\nvar FETCH_CHANNELS_FAILURE = 'FETCH_CHANNELS_FAILURE';\nvar INIT_CHANNELS_START = 'INIT_CHANNELS_START';\nvar INIT_CHANNELS_SUCCESS = 'INIT_CHANNELS_SUCCESS';\nvar INIT_CHANNELS_FAILURE = 'INIT_CHANNELS_FAILURE';\nvar ON_USER_JOINED = 'ON_USER_JOINED';\nvar ON_CHANNEL_DELETED = 'ON_CHANNEL_DELETED';\nvar ON_LAST_MESSAGE_UPDATED = 'ON_LAST_MESSAGE_UPDATED';\nvar ON_USER_LEFT = 'ON_USER_LEFT';\nvar ON_CHANNEL_CHANGED = 'ON_CHANNEL_CHANGED';\nvar ON_CHANNEL_ARCHIVED = 'ON_CHANNEL_ARCHIVED';\nvar ON_CHANNEL_FROZEN = 'ON_CHANNEL_FROZEN';\nvar ON_CHANNEL_UNFROZEN = 'ON_CHANNEL_UNFROZEN';\nvar ON_READ_RECEIPT_UPDATED = 'ON_READ_RECEIPT_UPDATED';\nvar ON_DELIVERY_RECEIPT_UPDATED = 'ON_DELIVERY_RECEIPT_UPDATED';\nvar CHANNEL_REPLACED_TO_TOP = 'CHANNEL_REPLACED_TO_TOP';\nvar CHANNEL_LIST_PARAMS_UPDATED = 'CHANNEL_LIST_PARAMS_UPDATED';\nvar channelListInitialState = {\n  // we might not need this initialized state -> should remove\n  initialized: false,\n  loading: false,\n  allChannels: [],\n  currentChannel: null,\n  showSettings: false,\n  channelListQuery: null,\n  currentUserId: '',\n  disableAutoSelect: false\n};\nfunction reducer(state, action) {\n  switch (action.type) {\n    case INIT_CHANNELS_START:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        loading: true\n      });\n    case RESET_CHANNEL_LIST:\n      return channelListInitialState;\n    case INIT_CHANNELS_SUCCESS:\n      {\n        var nextChannel = action.payload && action.payload.length && action.payload.length > 0 ? action.payload[0].url : null;\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          initialized: true,\n          loading: false,\n          allChannels: action.payload,\n          currentChannel: state.disableAutoSelect ? null : nextChannel\n        });\n      }\n    case FETCH_CHANNELS_SUCCESS:\n      {\n        var currentChannels = state.allChannels.map(function (c) {\n          return c.url;\n        });\n        var filteredChannels = action.payload.filter(function (_ref) {\n          var url = _ref.url;\n          return !currentChannels.find(function (c) {\n            return c === url;\n          });\n        });\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: [].concat(_toConsumableArray(state.allChannels), _toConsumableArray(filteredChannels))\n        });\n      }\n    case CREATE_CHANNEL:\n      {\n        var channel = action.payload;\n        if (state.channelListQuery) {\n          if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel)\n            });\n          }\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            currentChannel: channel.url\n          });\n        }\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          currentChannel: channel.url,\n          allChannels: [channel].concat(_toConsumableArray(state.allChannels.filter(function (ch) {\n            return ch.url !== channel.url;\n          })))\n        });\n      }\n    case ON_CHANNEL_ARCHIVED:\n      {\n        var _channel = action.payload;\n        if (state.channelListQuery) {\n          if (filterChannelListParams(state.channelListQuery, _channel, state.currentUserId)) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: getChannelsWithUpsertedChannel(state.allChannels, _channel)\n            });\n          }\n        }\n        var _nextChannel = _channel.url === state.currentChannel ? state.allChannels[state.allChannels[0].url === _channel.url ? 1 : 0].url : state.currentChannel;\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          currentChannel: state.disableAutoSelect ? null : _nextChannel,\n          allChannels: state.allChannels.filter(function (_ref2) {\n            var url = _ref2.url;\n            return url !== _channel.url;\n          })\n        });\n      }\n    case LEAVE_CHANNEL_SUCCESS:\n    case ON_CHANNEL_DELETED:\n      {\n        var channelUrl = action.payload;\n        var _nextChannel2 = channelUrl === state.currentChannel ? state.allChannels[0].url : state.currentChannel;\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          currentChannel: state.disableAutoSelect ? null : _nextChannel2,\n          allChannels: state.allChannels.filter(function (_ref3) {\n            var url = _ref3.url;\n            return url !== channelUrl;\n          })\n        });\n      }\n    case ON_USER_LEFT:\n      {\n        var _action$payload = action.payload,\n          _channel2 = _action$payload.channel,\n          isMe = _action$payload.isMe;\n        if (state.channelListQuery) {\n          if (filterChannelListParams(state.channelListQuery, _channel2, state.currentUserId)) {\n            var _filteredChannels2 = getChannelsWithUpsertedChannel(state.allChannels, _channel2);\n            var _nextChannel5 = isMe && _channel2.url === state.currentChannel ? _filteredChannels2[0].url : state.currentChannel;\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              currentChannel: state.disableAutoSelect ? null : _nextChannel5,\n              allChannels: _filteredChannels2\n            });\n          }\n          var _nextChannel4 = _channel2.url === state.currentChannel ? state.allChannels[0].url : state.currentChannel;\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            currentChannel: state.disableAutoSelect ? null : _nextChannel4,\n            allChannels: state.allChannels.filter(function (_ref4) {\n              var url = _ref4.url;\n              return url !== _channel2.url;\n            })\n          });\n        }\n        var _filteredChannels = state.allChannels.filter(function (c) {\n          return !(c.url === _channel2.url && isMe);\n        });\n        var _nextChannel3 = isMe && _channel2.url === state.currentChannel ? _filteredChannels[0].url : state.currentChannel;\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          currentChannel: state.disableAutoSelect ? null : _nextChannel3,\n          allChannels: _filteredChannels\n        });\n      }\n    case ON_USER_JOINED:\n    case ON_CHANNEL_CHANGED:\n    case ON_READ_RECEIPT_UPDATED:\n    case ON_DELIVERY_RECEIPT_UPDATED:\n      {\n        var _state$allChannels = state.allChannels,\n          allChannels = _state$allChannels === void 0 ? [] : _state$allChannels;\n        var _channel3 = action.payload;\n        var unreadMessageCount = _channel3.unreadMessageCount;\n        if (!_channel3.lastMessage) return state;\n        if (state.channelListQuery) {\n          if (filterChannelListParams(state.channelListQuery, _channel3, state.currentUserId)) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: getChannelsWithUpsertedChannel(allChannels, _channel3)\n            });\n          }\n          var _nextChannel6 = _channel3.url === state.currentChannel ? state.allChannels[state.allChannels[0].url === _channel3.url ? 1 : 0].url // if coming channel is first of channel list, current channel will be the next one\n          : state.currentChannel;\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            currentChannel: state.disableAutoSelect ? null : _nextChannel6,\n            allChannels: state.allChannels.filter(function (_ref5) {\n              var url = _ref5.url;\n              return url !== _channel3.url;\n            })\n          });\n        } // if its only an unread message count change, dont push to top\n\n        if (unreadMessageCount === 0) {\n          var currentChannel = allChannels.find(function (_ref6) {\n            var url = _ref6.url;\n            return url === _channel3.url;\n          });\n          var currentUnreadCount = currentChannel && currentChannel.unreadMessageCount;\n          if (currentUnreadCount === 0) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: state.allChannels.map(function (ch) {\n                return ch.url === _channel3.url ? _channel3 : ch;\n              })\n            });\n          }\n        }\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: [_channel3].concat(_toConsumableArray(state.allChannels.filter(function (_ref7) {\n            var url = _ref7.url;\n            return url !== action.payload.url;\n          })))\n        });\n      }\n    case SET_CURRENT_CHANNEL:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        currentChannel: action.payload\n      });\n    case SHOW_CHANNEL_SETTINGS:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        showSettings: true\n      });\n    case HIDE_CHANNEL_SETTINGS:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        showSettings: false\n      });\n    case ON_LAST_MESSAGE_UPDATED:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        allChannels: state.allChannels.map(function (channel) {\n          return channel.url === action.payload.url ? action.payload : channel;\n        })\n      });\n    case ON_CHANNEL_FROZEN:\n      {\n        var _channel4 = action.payload;\n        if (state.channelListQuery) {\n          if (filterChannelListParams(state.channelListQuery, _channel4, state.currentUserId)) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: getChannelsWithUpsertedChannel(state.allChannels, _channel4)\n            });\n          }\n          var _nextChannel7 = _channel4.url === state.currentChannel ? state.allChannels[state.allChannels[0].url === _channel4.url ? 1 : 0].url // if coming channel is first of channel list, current channel will be the next one\n          : state.currentChannel;\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            currentChannel: state.disableAutoSelect ? null : _nextChannel7,\n            allChannels: state.allChannels.filter(function (_ref8) {\n              var url = _ref8.url;\n              return url !== _channel4.url;\n            })\n          });\n        }\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: state.allChannels.map(function (ch) {\n            if (ch.url === _channel4.url) {\n              // eslint-disable-next-line no-param-reassign\n              ch.isFrozen = true;\n              return ch;\n            }\n            return ch;\n          })\n        });\n      }\n    case ON_CHANNEL_UNFROZEN:\n      {\n        var _channel5 = action.payload;\n        if (state.channelListQuery) {\n          if (filterChannelListParams(state.channelListQuery, _channel5, state.currentUserId)) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: getChannelsWithUpsertedChannel(state.allChannels, _channel5)\n            });\n          }\n          var _nextChannel8 = _channel5.url === state.currentChannel ? state.allChannels[state.allChannels[0].url === _channel5.url ? 1 : 0].url // if coming channel is first of channel list, current channel will be the next one\n          : state.currentChannel;\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            currentChannel: state.disableAutoSelect ? null : _nextChannel8,\n            allChannels: state.allChannels.filter(function (_ref9) {\n              var url = _ref9.url;\n              return url !== _channel5.url;\n            })\n          });\n        }\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: state.allChannels.map(function (ch) {\n            if (ch.url === _channel5.url) {\n              // eslint-disable-next-line no-param-reassign\n              ch.isFrozen = false;\n              return ch;\n            }\n            return ch;\n          })\n        });\n      }\n    case CHANNEL_REPLACED_TO_TOP:\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: [action.payload].concat(_toConsumableArray(state.allChannels.filter(function (channel) {\n            return channel.url !== action.payload.url;\n          })))\n        });\n      }\n    case CHANNEL_LIST_PARAMS_UPDATED:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        currentUserId: action.payload.currentUserId,\n        channelListQuery: action.payload.channelListQuery\n      });\n    case SET_AUTO_SELECT_CHANNEL_ITEM:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        disableAutoSelect: action.payload\n      });\n    default:\n      return state;\n  }\n}\nvar getChannelTitle = function getChannelTitle() {\n  var channel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var currentUserId = arguments.length > 1 ? arguments[1] : undefined;\n  var stringSet = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : LabelStringSet;\n  if (!channel || !channel.name && !channel.members) {\n    return stringSet.NO_TITLE;\n  }\n  if (channel.name && channel.name !== 'Group Channel') {\n    return channel.name;\n  }\n  if (channel.members.length === 1) {\n    return stringSet.NO_MEMBERS;\n  }\n  return channel.members.filter(function (_ref) {\n    var userId = _ref.userId;\n    return userId !== currentUserId;\n  }).map(function (_ref2) {\n    var nickname = _ref2.nickname;\n    return nickname || stringSet.NO_NAME;\n  }).join(', ');\n};\nvar getLastMessageCreatedAt = function getLastMessageCreatedAt(channel, locale) {\n  var _channel$lastMessage;\n  var createdAt = channel === null || channel === void 0 ? void 0 : (_channel$lastMessage = channel.lastMessage) === null || _channel$lastMessage === void 0 ? void 0 : _channel$lastMessage.createdAt;\n  var optionalParam = locale ? {\n    locale: locale\n  } : null;\n  if (!createdAt) {\n    return '';\n  }\n  if (isToday(createdAt)) {\n    return format(createdAt, 'p', optionalParam);\n  }\n  if (isYesterday(createdAt)) {\n    return formatRelative(createdAt, new Date(), optionalParam);\n  }\n  return format(createdAt, 'MMM dd', optionalParam);\n};\nvar getTotalMembers = function getTotalMembers(channel) {\n  return channel && channel.memberCount ? channel.memberCount : 0;\n};\nvar getPrettyLastMessage = function getPrettyLastMessage() {\n  var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var MAXLEN = 30;\n  var messageType = message.messageType,\n    name = message.name;\n  if (messageType === 'file') {\n    return truncateString(name, MAXLEN);\n  }\n  return message.message;\n};\nvar getLastMessage = function getLastMessage(channel) {\n  return channel && channel.lastMessage ? getPrettyLastMessage(channel.lastMessage) : '';\n};\nvar getChannelUnreadMessageCount = function getChannelUnreadMessageCount(channel) {\n  return channel && channel.unreadMessageCount ? channel.unreadMessageCount : 0;\n};\nfunction ChannelPreview(_ref) {\n  var channel = _ref.channel,\n    currentUser = _ref.currentUser,\n    isActive = _ref.isActive,\n    ChannelAction = _ref.ChannelAction,\n    theme = _ref.theme,\n    onClick = _ref.onClick,\n    tabIndex = _ref.tabIndex;\n  var userId = currentUser.userId;\n  var isBroadcast = channel.isBroadcast,\n    isFrozen = channel.isFrozen;\n  var _useContext = useContext(LocalizationContext),\n    stringSet = _useContext.stringSet,\n    dateLocale = _useContext.dateLocale;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: ['sendbird-channel-preview', isActive ? 'sendbird-channel-preview--active' : ''].join(' '),\n    role: \"link\",\n    onClick: onClick,\n    onKeyPress: onClick,\n    tabIndex: tabIndex\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__avatar\"\n  }, /*#__PURE__*/React__default.createElement(ChannelAvatar, {\n    channel: channel,\n    userId: userId,\n    theme: theme\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__content\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__content__upper\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__content__upper__header\"\n  }, isBroadcast && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__content__upper__header__broadcast-icon\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.BROADCAST,\n    fillColor: IconColors.SECONDARY,\n    height: \"16px\",\n    width: \"16px\"\n  })), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-channel-preview__content__upper__header__channel-name\",\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, getChannelTitle(channel, userId, stringSet)), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-channel-preview__content__upper__header__total-members\",\n    type: LabelTypography.CAPTION_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, getTotalMembers(channel)), isFrozen && /*#__PURE__*/React__default.createElement(\"div\", {\n    title: \"Frozen\",\n    className: \"sendbird-channel-preview__content__upper__header__frozen-icon\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.FREEZE,\n    fillColor: IconColors.PRIMARY,\n    height: 12,\n    width: 12\n  }))), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-channel-preview__content__upper__last-message-at\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_2\n  }, getLastMessageCreatedAt(channel, dateLocale))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__content__lower\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-channel-preview__content__lower__last-message\",\n    type: LabelTypography.BODY_2,\n    color: LabelColors.ONBACKGROUND_3\n  }, getLastMessage(channel)), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__content__lower__unread-message-count\"\n  }, getChannelUnreadMessageCount(channel) // return number\n  ? /*#__PURE__*/React__default.createElement(Badge, {\n    count: getChannelUnreadMessageCount(channel)\n  }) : null))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__action\"\n  }, ChannelAction));\n}\nChannelPreview.propTypes = {\n  channel: PropTypes.shape({\n    members: PropTypes.arrayOf(PropTypes.shape({})),\n    coverUrl: PropTypes.string,\n    isBroadcast: PropTypes.bool,\n    isFrozen: PropTypes.bool\n  }),\n  currentUser: PropTypes.shape({\n    userId: PropTypes.string\n  }),\n  isActive: PropTypes.bool,\n  ChannelAction: PropTypes.element.isRequired,\n  theme: PropTypes.string,\n  onClick: PropTypes.func,\n  tabIndex: PropTypes.number\n};\nChannelPreview.defaultProps = {\n  channel: {},\n  currentUser: {},\n  isActive: false,\n  theme: 'light',\n  onClick: function onClick() {},\n  tabIndex: 0\n};\nfunction ChannelHeader(_ref) {\n  var user = _ref.user,\n    renderHeader = _ref.renderHeader,\n    iconButton = _ref.iconButton,\n    onEdit = _ref.onEdit,\n    allowProfileEdit = _ref.allowProfileEdit;\n  var _useContext = useContext(LocalizationContext),\n    stringSet = _useContext.stringSet;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: ['sendbird-channel-header', allowProfileEdit ? 'sendbird-channel-header--allow-edit' : ''].join(' ')\n  }, renderHeader ? renderHeader() : /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-header__title\",\n    role: \"button\",\n    onClick: onEdit,\n    onKeyDown: onEdit,\n    tabIndex: \"0\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-header__title__left\"\n  }, /*#__PURE__*/React__default.createElement(Avatar, {\n    width: \"32px\",\n    height: \"32px\",\n    src: user.profileUrl,\n    alt: user.nickname\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-header__title__right\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-channel-header__title__right__name\",\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, user.nickname || stringSet.NO_NAME), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-channel-header__title__right__user-id\",\n    type: LabelTypography.BODY_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, user.userId))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-header__right-icon\"\n  }, iconButton));\n}\nChannelHeader.propTypes = {\n  user: PropTypes.shape({\n    profileUrl: PropTypes.string,\n    nickname: PropTypes.string,\n    userId: PropTypes.string\n  }),\n  renderHeader: PropTypes.func,\n  iconButton: PropTypes.oneOfType([PropTypes.element, PropTypes.instanceOf(IconButton)]),\n  onEdit: PropTypes.func.isRequired,\n  allowProfileEdit: PropTypes.bool\n};\nChannelHeader.defaultProps = {\n  user: {},\n  renderHeader: null,\n  iconButton: null,\n  allowProfileEdit: false\n};\nfunction EditUserProfile(_a) {\n  var user = _a.user,\n    _b = _a.theme,\n    theme = _b === void 0 ? 'light' : _b,\n    onCancel = _a.onCancel,\n    _onSubmit = _a.onSubmit,\n    _c = _a.changeTheme,\n    changeTheme = _c === void 0 ? noop$1 : _c,\n    _d = _a.onThemeChange,\n    onThemeChange = _d === void 0 ? null : _d;\n  var hiddenInputRef = useRef(null);\n  var inputRef = useRef(null);\n  var formRef = useRef(null);\n  var stringSet = useContext(LocalizationContext).stringSet;\n  var _e = useState(null),\n    currentImg = _e[0],\n    setCurrentImg = _e[1];\n  var _f = useState(null),\n    newFile = _f[0],\n    setNewFile = _f[1];\n  return /*#__PURE__*/React__default.createElement(Modal, {\n    titleText: stringSet.EDIT_PROFILE__TITLE,\n    submitText: stringSet.BUTTON__SAVE,\n    type: Type.PRIMARY,\n    onCancel: onCancel,\n    onSubmit: function onSubmit() {\n      if (user.nickname !== '' && !inputRef.current.value) {\n        if (formRef.current.reportValidity) {\n          // might not work in explorer\n          formRef.current.reportValidity();\n        }\n        return;\n      }\n      _onSubmit(inputRef.current.value, newFile);\n      onCancel();\n    }\n  }, /*#__PURE__*/React__default.createElement(\"form\", {\n    className: \"sendbird-edit-user-profile\",\n    ref: formRef,\n    onSubmit: function onSubmit(e) {\n      e.preventDefault();\n    }\n  }, /*#__PURE__*/React__default.createElement(\"section\", {\n    className: \"sendbird-edit-user-profile__img\"\n  }, /*#__PURE__*/React__default.createElement(InputLabel, null, stringSet.EDIT_PROFILE__IMAGE_LABEL), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-edit-user-profile__img__avatar\"\n  }, /*#__PURE__*/React__default.createElement(Avatar, {\n    width: \"80px\",\n    height: \"80px\",\n    src: currentImg || user.profileUrl\n  })), /*#__PURE__*/React__default.createElement(\"input\", {\n    ref: hiddenInputRef,\n    type: \"file\",\n    accept: \"image/gif, image/jpeg, image/png\",\n    style: {\n      display: 'none'\n    },\n    onChange: function onChange(e) {\n      setCurrentImg(URL.createObjectURL(e.target.files[0]));\n      setNewFile(e.target.files[0]);\n      hiddenInputRef.current.value = '';\n    }\n  }), /*#__PURE__*/React__default.createElement(TextButton, {\n    className: \"sendbird-edit-user-profile__img__avatar-button\",\n    notUnderline: true,\n    onClick: function onClick() {\n      return hiddenInputRef.current.click();\n    }\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.BUTTON_1,\n    color: LabelColors.PRIMARY\n  }, stringSet.EDIT_PROFILE__IMAGE_UPLOAD))), /*#__PURE__*/React__default.createElement(\"section\", {\n    className: \"sendbird-edit-user-profile__name\"\n  }, /*#__PURE__*/React__default.createElement(InputLabel, null, stringSet.EDIT_PROFILE__NICKNAME_LABEL), /*#__PURE__*/React__default.createElement(Input, {\n    required: user.nickname !== '',\n    name: \"sendbird-edit-user-profile__name__input\",\n    ref: inputRef,\n    value: user.nickname,\n    placeHolder: stringSet.EDIT_PROFILE__NICKNAME_PLACEHOLDER\n  })), /*#__PURE__*/React__default.createElement(\"section\", {\n    className: \"sendbird-edit-user-profile__userid\"\n  }, /*#__PURE__*/React__default.createElement(InputLabel, null, stringSet.EDIT_PROFILE__USERID_LABEL), /*#__PURE__*/React__default.createElement(Input, {\n    disabled: true,\n    name: \"sendbird-edit-user-profile__userid__input\",\n    value: user.userId\n  })), /*#__PURE__*/React__default.createElement(\"section\", {\n    className: \"sendbird-edit-user-profile__theme\"\n  }, /*#__PURE__*/React__default.createElement(InputLabel, null, stringSet.EDIT_PROFILE__THEME_LABEL), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-edit-user-profile__theme__theme-icon\"\n  }, theme === 'dark' ? /*#__PURE__*/React__default.createElement(Icon, {\n    onClick: function onClick() {\n      changeTheme('light');\n      if (onThemeChange && typeof onThemeChange === 'function') {\n        onThemeChange('light');\n      }\n    },\n    type: IconTypes.TOGGLE_ON,\n    width: 44,\n    height: 24\n  }) : /*#__PURE__*/React__default.createElement(Icon, {\n    onClick: function onClick() {\n      changeTheme('dark');\n      if (onThemeChange && typeof onThemeChange === 'function') {\n        onThemeChange('dark');\n      }\n    },\n    type: IconTypes.TOGGLE_OFF,\n    width: 44,\n    height: 24\n  })))));\n}\nvar mapStoreToProps = function mapStoreToProps(store) {\n  return {\n    theme: store.config.theme,\n    changeTheme: store.config.setCurrenttheme\n  };\n};\nvar ConnectedEditUserProfile = withSendbirdContext(EditUserProfile, mapStoreToProps);\nfunction AddChannel(_ref) {\n  var sdk = _ref.sdk,\n    disabled = _ref.disabled,\n    channelListDispatcher = _ref.channelListDispatcher,\n    onBeforeCreateChannel = _ref.onBeforeCreateChannel,\n    userId = _ref.userId,\n    userFilledApplicationUserListQuery = _ref.userFilledApplicationUserListQuery,\n    userListQuery = _ref.userListQuery;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    showModal = _useState2[0],\n    setShowModal = _useState2[1];\n  var _useState3 = useState(0),\n    _useState4 = _slicedToArray(_useState3, 2),\n    step = _useState4[0],\n    setStep = _useState4[1];\n  var _useState5 = useState('group'),\n    _useState6 = _slicedToArray(_useState5, 2),\n    type = _useState6[0],\n    setType = _useState6[1];\n  var _useContext = useContext(LocalizationContext),\n    stringSet = _useContext.stringSet;\n  if (!sdk || !sdk.createApplicationUserListQuery) {\n    return null;\n  }\n  var isBroadcastAvailable = isBroadcastChannelEnabled(sdk);\n  var isSupergroupAvailable = isSuperGroupChannelEnabled(sdk);\n  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(IconButton, {\n    height: \"32px\",\n    width: \"32px\",\n    onClick: function onClick() {\n      setShowModal(true);\n    },\n    disabled: disabled\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.CREATE,\n    fillColor: IconColors.PRIMARY,\n    width: \"24px\",\n    height: \"24px\"\n  })), showModal && step === 0 && /*#__PURE__*/React__default.createElement(Modal, {\n    titleText: stringSet.MODAL__CHOOSE_CHANNEL_TYPE__TITLE,\n    hideFooter: true,\n    onCancel: function onCancel() {\n      setShowModal(false);\n    },\n    onSubmit: function onSubmit() {}\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-add-channel__rectangle-wrap\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-add-channel__rectangle\",\n    onClick: function onClick() {\n      setType('group');\n      setStep(1);\n    },\n    role: \"button\",\n    tabIndex: 0,\n    onKeyDown: function onKeyDown() {\n      setType('group');\n      setStep(1);\n    }\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-add-channel__rectangle__chat-icon\",\n    type: IconTypes.CHAT,\n    fillColor: IconColors.PRIMARY,\n    width: \"28px\",\n    height: \"28px\"\n  }), /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.MODAL__CHOOSE_CHANNEL_TYPE__GROUP)), isSupergroupAvailable && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-add-channel__rectangle\",\n    onClick: function onClick() {\n      setType('supergroup');\n      setStep(1);\n    },\n    role: \"button\",\n    tabIndex: 0,\n    onKeyDown: function onKeyDown() {\n      setType('supergroup');\n      setStep(1);\n    }\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-add-channel__rectangle__supergroup-icon\",\n    type: IconTypes.SUPERGROUP,\n    fillColor: IconColors.PRIMARY,\n    width: \"28px\",\n    height: \"28px\"\n  }), /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.MODAL__CHOOSE_CHANNEL_TYPE__SUPER_GROUP)), isBroadcastAvailable && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-add-channel__rectangle\",\n    onClick: function onClick() {\n      setType('broadcast');\n      setStep(1);\n    },\n    role: \"button\",\n    tabIndex: 0,\n    onKeyDown: function onKeyDown() {\n      setType('broadcast');\n      setStep(1);\n    }\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-add-channel__rectangle__broadcast-icon\",\n    type: IconTypes.BROADCAST,\n    fillColor: IconColors.PRIMARY,\n    width: \"28px\",\n    height: \"28px\"\n  }), /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.MODAL__CHOOSE_CHANNEL_TYPE__BROADCAST)))), showModal && step === 1 && /*#__PURE__*/React__default.createElement(InviteMembers, {\n    swapParams: sdk && sdk.getErrorFirstCallback && sdk.getErrorFirstCallback(),\n    titleText: stringSet.MODAL__CREATE_CHANNEL__TITLE,\n    submitText: stringSet.BUTTON__CREATE,\n    closeModal: function closeModal() {\n      setStep(0);\n      setShowModal(false);\n    },\n    idsToFilter: [userId],\n    userQueryCreator: function userQueryCreator() {\n      return userListQuery && typeof userListQuery === 'function' ? userListQuery() : createDefaultUserListQuery({\n        sdk: sdk,\n        userFilledApplicationUserListQuery: userFilledApplicationUserListQuery\n      });\n    },\n    onSubmit: function onSubmit(selectedUsers) {\n      return createChannel(sdk, selectedUsers, onBeforeCreateChannel, userId, type).then(function (channel) {\n        // maybe - do this in event listener\n        channelListDispatcher({\n          type: CREATE_CHANNEL,\n          payload: channel\n        });\n      });\n    }\n  }));\n}\nAddChannel.propTypes = {\n  sdk: PropTypes.shape({\n    getErrorFirstCallback: PropTypes.func,\n    createApplicationUserListQuery: PropTypes.func\n  }).isRequired,\n  disabled: PropTypes.bool,\n  channelListDispatcher: PropTypes.func.isRequired,\n  userFilledApplicationUserListQuery: PropTypes.shape({}),\n  onBeforeCreateChannel: PropTypes.func,\n  userId: PropTypes.string.isRequired,\n  userListQuery: PropTypes.func\n};\nAddChannel.defaultProps = {\n  disabled: false,\n  userFilledApplicationUserListQuery: {},\n  onBeforeCreateChannel: null,\n  userListQuery: null\n};\nfunction ChannelPreviewAction(_ref) {\n  var disabled = _ref.disabled,\n    onLeaveChannel = _ref.onLeaveChannel;\n  var parentRef = useRef(null);\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    showModal = _useState2[0],\n    setShowModal = _useState2[1];\n  var _useContext = useContext(LocalizationContext),\n    stringSet = _useContext.stringSet;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    role: \"button\",\n    style: {\n      display: 'inline-block'\n    },\n    onKeyDown: function onKeyDown(e) {\n      e.stopPropagation();\n    },\n    tabIndex: 0,\n    onClick: function onClick(e) {\n      e.stopPropagation();\n    }\n  }, /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return /*#__PURE__*/React__default.createElement(IconButton, {\n        ref: parentRef,\n        onClick: toggleDropdown,\n        height: \"32px\",\n        width: \"32px\"\n      }, /*#__PURE__*/React__default.createElement(Icon, {\n        type: IconTypes.MORE,\n        fillColor: IconColors.PRIMARY,\n        width: \"24px\",\n        height: \"24px\"\n      }));\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        parentRef: parentRef,\n        parentContainRef: parentRef,\n        closeDropdown: closeDropdown\n      }, /*#__PURE__*/React__default.createElement(MenuItem, {\n        onClick: function onClick() {\n          if (disabled) {\n            return;\n          }\n          setShowModal(true);\n          closeDropdown();\n        }\n      }, stringSet.CHANNEL_SETTING__LEAVE_CHANNEL__TITLE));\n    }\n  }), showModal && /*#__PURE__*/React__default.createElement(LeaveChannel, {\n    onCloseModal: function onCloseModal() {\n      return setShowModal(false);\n    },\n    onLeaveChannel: onLeaveChannel\n  }));\n}\nChannelPreviewAction.propTypes = {\n  disabled: PropTypes.bool,\n  onLeaveChannel: PropTypes.func.isRequired\n};\nChannelPreviewAction.defaultProps = {\n  disabled: false\n};\nfunction ChannelsPlaceholder(_ref) {\n  var type = _ref.type;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-list\"\n  }, /*#__PURE__*/React__default.createElement(PlaceHolder, {\n    type: type\n  }));\n}\nChannelsPlaceholder.propTypes = {\n  type: PropTypes.string.isRequired\n};\nvar DELIVERY_RECIPT$1 = 'delivery_receipt';\nvar createEventHandler = function createEventHandler(_ref) {\n  var sdk = _ref.sdk,\n    sdkChannelHandlerId = _ref.sdkChannelHandlerId,\n    channelListDispatcher = _ref.channelListDispatcher,\n    logger = _ref.logger;\n  var ChannelHandler = new sdk.ChannelHandler();\n  ChannelHandler.onChannelChanged = function (channel) {\n    logger.info('ChannelList: onChannelChanged', channel);\n    channelListDispatcher({\n      type: ON_CHANNEL_CHANGED,\n      payload: channel\n    });\n  };\n  ChannelHandler.onChannelDeleted = function (channelUrl) {\n    logger.info('ChannelList: onChannelDeleted', channelUrl);\n    channelListDispatcher({\n      type: ON_CHANNEL_DELETED,\n      payload: channelUrl\n    });\n  };\n  ChannelHandler.onUserJoined = function (channel) {\n    logger.info('ChannelList: onUserJoined', channel);\n    if (channel.lastMessage) {\n      channelListDispatcher({\n        type: ON_USER_JOINED,\n        payload: channel\n      });\n    }\n  };\n  ChannelHandler.onUserBanned = function (channel, user) {\n    var currentUser = sdk.currentUser;\n    logger.info('Channel | useHandleChannelEvents: onUserBanned', channel);\n    if (user.userId === currentUser.userId) {\n      channelListDispatcher({\n        type: ON_USER_LEFT,\n        payload: {\n          channel: channel,\n          isMe: true\n        }\n      });\n    } else {\n      channelListDispatcher({\n        type: ON_USER_LEFT,\n        payload: {\n          channel: channel,\n          isMe: false\n        }\n      });\n    }\n  };\n  ChannelHandler.onUserLeft = function (channel, leftUser) {\n    var currentUser = sdk.currentUser;\n    var isMe = currentUser.userId === leftUser.userId;\n    logger.info('ChannelList: onUserLeft', channel);\n    channelListDispatcher({\n      type: ON_USER_LEFT,\n      payload: {\n        channel: channel,\n        isMe: isMe\n      }\n    });\n  };\n  ChannelHandler.onReadStatus = function (channel) {\n    logger.info('ChannelList: onReadStatus', channel);\n    channelListDispatcher({\n      type: ON_READ_RECEIPT_UPDATED,\n      payload: channel\n    });\n  };\n  ChannelHandler.onDeliveryReceiptUpdated = function (channel) {\n    logger.info('ChannelList: onDeliveryReceiptUpdated', channel);\n    if (channel.lastMessage) {\n      channelListDispatcher({\n        type: ON_DELIVERY_RECEIPT_UPDATED,\n        payload: channel\n      });\n    }\n  };\n  ChannelHandler.onMessageUpdated = function (channel, message) {\n    if (channel.lastMessage.isEqual(message)) {\n      logger.info('ChannelList: onMessageUpdated', channel);\n      channelListDispatcher({\n        type: ON_LAST_MESSAGE_UPDATED,\n        payload: channel\n      });\n    }\n  };\n  ChannelHandler.onChannelHidden = function (channel) {\n    logger.info('ChannelList: onChannelHidden', channel);\n    channelListDispatcher({\n      type: ON_CHANNEL_ARCHIVED,\n      payload: channel\n    });\n  };\n  ChannelHandler.onChannelFrozen = function (channel) {\n    logger.info('ChannelList: onChannelFrozen', channel);\n    channelListDispatcher({\n      type: ON_CHANNEL_FROZEN,\n      payload: channel\n    });\n  };\n  ChannelHandler.onChannelUnfrozen = function (channel) {\n    logger.info('ChannelList: onChannelUnfrozen', channel);\n    channelListDispatcher({\n      type: ON_CHANNEL_UNFROZEN,\n      payload: channel\n    });\n  };\n  logger.info('ChannelList: Added channelHandler');\n  sdk.addChannelHandler(sdkChannelHandlerId, ChannelHandler);\n};\nvar createChannelListQuery = function createChannelListQuery(_ref2) {\n  var sdk = _ref2.sdk,\n    _ref2$userFilledChann = _ref2.userFilledChannelListQuery,\n    userFilledChannelListQuery = _ref2$userFilledChann === void 0 ? {} : _ref2$userFilledChann;\n  var channelListQuery = sdk.GroupChannel.createMyGroupChannelListQuery();\n  channelListQuery.includeEmpty = false;\n  channelListQuery.order = 'latest_last_message'; // 'chronological', 'latest_last_message', 'channel_name_alphabetical', and 'metadata_value_alphabetical'\n\n  channelListQuery.limit = 20; // The value of pagination limit could be set up to 100.\n\n  if (userFilledChannelListQuery) {\n    Object.keys(userFilledChannelListQuery).forEach(function (key) {\n      channelListQuery[key] = userFilledChannelListQuery[key];\n    });\n  }\n  return channelListQuery;\n};\n/**\r\n * Setup event listener\r\n * create channel source query\r\n * addloading screen\r\n */\n\nfunction setupChannelList(_ref3) {\n  var sdk = _ref3.sdk,\n    sdkChannelHandlerId = _ref3.sdkChannelHandlerId,\n    channelListDispatcher = _ref3.channelListDispatcher,\n    setChannelSource = _ref3.setChannelSource,\n    onChannelSelect = _ref3.onChannelSelect,\n    userFilledChannelListQuery = _ref3.userFilledChannelListQuery,\n    logger = _ref3.logger,\n    sortChannelList = _ref3.sortChannelList,\n    disableAutoSelect = _ref3.disableAutoSelect;\n  if (sdk && sdk.ChannelHandler) {\n    createEventHandler({\n      sdk: sdk,\n      channelListDispatcher: channelListDispatcher,\n      sdkChannelHandlerId: sdkChannelHandlerId,\n      logger: logger\n    });\n  } else {\n    logger.console.warning('ChannelList - createEventHandler: sdk or sdk.ChannelHandler does not exist', sdk);\n  }\n  logger.info('ChannelList - creating query', {\n    userFilledChannelListQuery: userFilledChannelListQuery\n  });\n  var channelListQuery = createChannelListQuery({\n    sdk: sdk,\n    userFilledChannelListQuery: userFilledChannelListQuery\n  });\n  logger.info('ChannelList - created query', channelListQuery);\n  setChannelSource(channelListQuery);\n  channelListDispatcher({\n    type: INIT_CHANNELS_START\n  });\n  if (userFilledChannelListQuery) {\n    logger.info('ChannelList - setting up channelListQuery', channelListQuery);\n    channelListDispatcher({\n      type: CHANNEL_LIST_PARAMS_UPDATED,\n      payload: {\n        channelListQuery: channelListQuery,\n        currentUserId: sdk && sdk.currentUser && sdk.currentUser.userId\n      }\n    });\n  }\n  logger.info('ChannelList - fetching channels');\n  if (channelListQuery.hasNext) {\n    channelListQuery.next(function (response, error) {\n      var _sdk$appInfo, _sdk$appInfo$premiumF;\n      var swapParams = sdk.getErrorFirstCallback();\n      var channelList = response;\n      var err = error;\n      if (swapParams) {\n        channelList = error;\n        err = response;\n      }\n      logger.info('ChannelList - fetched channels', channelList);\n      if (err) {\n        logger.error('ChannelList - couldnt fetch channels', err);\n        channelListDispatcher({\n          type: INIT_CHANNELS_FAILURE\n        });\n        return;\n      } // select first channel\n\n      logger.info('ChannelList - highlight channel', channelList[0]);\n      var sorted = channelList;\n      if (sortChannelList && typeof sortChannelList === 'function') {\n        sorted = sortChannelList(channelList);\n        logger.info('ChannelList - channel list sorted', sorted);\n      }\n      if (!disableAutoSelect) {\n        onChannelSelect(sorted[0]);\n      }\n      channelListDispatcher({\n        type: INIT_CHANNELS_SUCCESS,\n        payload: sorted\n      });\n      var canSetMarkAsDelivered = sdk === null || sdk === void 0 ? void 0 : (_sdk$appInfo = sdk.appInfo) === null || _sdk$appInfo === void 0 ? void 0 : (_sdk$appInfo$premiumF = _sdk$appInfo.premiumFeatureList) === null || _sdk$appInfo$premiumF === void 0 ? void 0 : _sdk$appInfo$premiumF.find(function (feature) {\n        return feature === DELIVERY_RECIPT$1;\n      });\n      if (canSetMarkAsDelivered) {\n        var _channelList;\n        logger.info('ChannelList: Marking all channels as read'); // eslint-disable-next-line no-unused-expressions\n\n        (_channelList = channelList) === null || _channelList === void 0 ? void 0 : _channelList.forEach(function (channel, idx) {\n          // Plan-based rate limits - minimum limit is 5 requests per second\n          setTimeout(function () {\n            // eslint-disable-next-line no-unused-expressions\n            channel === null || channel === void 0 ? void 0 : channel.markAsDelivered();\n          }, 500 * idx);\n        });\n      }\n    });\n  } else {\n    logger.warning('ChannelList - there are no more channels');\n  }\n}\nvar pubSubHandleRemover = function pubSubHandleRemover(subscriber) {\n  subscriber.forEach(function (s) {\n    try {\n      s.remove();\n    } catch (_unused) {//\n    }\n  });\n};\nvar pubSubHandler = function pubSubHandler(pubSub, channelListDispatcher) {\n  var subScriber = new Map();\n  if (!pubSub) return subScriber;\n  subScriber.set(CREATE_CHANNEL$1, pubSub.subscribe(CREATE_CHANNEL$1, function (msg) {\n    var channel = msg.channel;\n    channelListDispatcher({\n      type: 'CREATE_CHANNEL',\n      payload: channel\n    });\n  }));\n  subScriber.set(UPDATE_USER_MESSAGE, pubSub.subscribe(UPDATE_USER_MESSAGE, function (msg) {\n    var _updatedChannel$lastM;\n    var channel = msg.channel,\n      message = msg.message;\n    var updatedChannel = channel;\n    if ((updatedChannel === null || updatedChannel === void 0 ? void 0 : (_updatedChannel$lastM = updatedChannel.lastMessage) === null || _updatedChannel$lastM === void 0 ? void 0 : _updatedChannel$lastM.messageId) === message.messageId) {\n      updatedChannel.lastMessage = message;\n    }\n    if (channel) {\n      channelListDispatcher({\n        type: ON_LAST_MESSAGE_UPDATED,\n        payload: updatedChannel\n      });\n    }\n  }));\n  subScriber.set(LEAVE_CHANNEL, pubSub.subscribe(LEAVE_CHANNEL, function (msg) {\n    var channel = msg.channel;\n    channelListDispatcher({\n      type: LEAVE_CHANNEL_SUCCESS,\n      payload: channel.url\n    });\n  }));\n  subScriber.set(SEND_MESSAGE_START, pubSub.subscribe(SEND_MESSAGE_START, function (msg) {\n    var channel = msg.channel;\n    channelListDispatcher({\n      type: CHANNEL_REPLACED_TO_TOP,\n      payload: channel\n    });\n  }));\n  return subScriber;\n};\nvar noop = function noop() {};\nvar DELIVERY_RECIPT = 'delivery_receipt';\nfunction ChannelList(props) {\n  var _props$stores = props.stores,\n    _props$stores$sdkStor = _props$stores.sdkStore,\n    sdkStore = _props$stores$sdkStor === void 0 ? {} : _props$stores$sdkStor,\n    _props$stores$userSto = _props$stores.userStore,\n    userStore = _props$stores$userSto === void 0 ? {} : _props$stores$userSto,\n    _props$config = props.config,\n    userId = _props$config.userId,\n    isOnline = _props$config.isOnline,\n    userListQuery = _props$config.userListQuery,\n    logger = _props$config.logger,\n    pubSub = _props$config.pubSub,\n    theme = _props$config.theme,\n    userDispatcher = props.dispatchers.userDispatcher,\n    _props$queries = props.queries,\n    queries = _props$queries === void 0 ? {} : _props$queries,\n    renderChannelPreview = props.renderChannelPreview,\n    renderHeader = props.renderHeader,\n    renderUserProfile = props.renderUserProfile,\n    disableUserProfile = props.disableUserProfile,\n    allowProfileEdit = props.allowProfileEdit,\n    sortChannelList = props.sortChannelList,\n    onProfileEditSuccess = props.onProfileEditSuccess,\n    onThemeChange = props.onThemeChange,\n    onBeforeCreateChannel = props.onBeforeCreateChannel,\n    onChannelSelect = props.onChannelSelect,\n    disableAutoSelect = props.disableAutoSelect;\n  var _props$config2 = props.config,\n    config = _props$config2 === void 0 ? {} : _props$config2; // enable if it is true atleast once(both are flase by default)\n\n  var enableEditProfile = allowProfileEdit || config.allowProfileEdit;\n  var userDefinedDisableUserProfile = disableUserProfile || config.disableUserProfile;\n  var userDefinedRenderProfile = renderUserProfile || config.renderUserProfile;\n  var _sdkStore$sdk = sdkStore.sdk,\n    sdk = _sdkStore$sdk === void 0 ? {} : _sdkStore$sdk;\n  var userFilledChannelListQuery = queries.channelListQuery;\n  var userFilledApplicationUserListQuery = queries.applicationUserListQuery;\n  var sdkError = sdkStore.error;\n  var sdkIntialized = sdkStore.initialized;\n  var _useReducer = useReducer(reducer, channelListInitialState),\n    _useReducer2 = _slicedToArray(_useReducer, 2),\n    channelListStore = _useReducer2[0],\n    channelListDispatcher = _useReducer2[1];\n  var _useState = useState({}),\n    _useState2 = _slicedToArray(_useState, 2),\n    user = _useState2[0],\n    setUser = _useState2[1];\n  var _useState3 = useState({}),\n    _useState4 = _slicedToArray(_useState3, 2),\n    channelSource = _useState4[0],\n    setChannelSource = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    showProfileEdit = _useState6[0],\n    setShowProfileEdit = _useState6[1];\n  var _useState7 = useState(null),\n    _useState8 = _slicedToArray(_useState7, 2),\n    sdkChannelHandlerId = _useState8[0],\n    setSdkChannelHandlerId = _useState8[1];\n  var loading = channelListStore.loading,\n    currentChannel = channelListStore.currentChannel;\n  useEffect(function () {\n    setUser(userStore.user);\n  }, [userStore.user]);\n  useEffect(function () {\n    var subscriber = pubSubHandler(pubSub, channelListDispatcher);\n    return function () {\n      pubSubHandleRemover(subscriber);\n    };\n  }, [sdkIntialized]);\n  useEffect(function () {\n    setSdkChannelHandlerId(uuidv4);\n    if (sdkIntialized) {\n      logger.info('ChannelList: Setup channelHandlers');\n      setupChannelList({\n        sdk: sdk,\n        sdkChannelHandlerId: sdkChannelHandlerId,\n        channelListDispatcher: channelListDispatcher,\n        setChannelSource: setChannelSource,\n        onChannelSelect: onChannelSelect,\n        userFilledChannelListQuery: userFilledChannelListQuery,\n        logger: logger,\n        sortChannelList: sortChannelList,\n        disableAutoSelect: disableAutoSelect\n      });\n    } else {\n      logger.info('ChannelList: Removing channelHandlers'); // remove previous channelHandlers\n\n      if (sdk && sdk.removeChannelHandler) {\n        sdk.removeChannelHandler(sdkChannelHandlerId);\n      } // remove channelSource\n\n      setChannelSource({}); // cleanup\n\n      channelListDispatcher({\n        type: RESET_CHANNEL_LIST\n      });\n    }\n    return function () {\n      logger.info('ChannelList: Removing channelHandlers');\n      if (sdk && sdk.removeChannelHandler) {\n        sdk.removeChannelHandler(sdkChannelHandlerId);\n      }\n    };\n  }, [sdkIntialized, userFilledChannelListQuery, sortChannelList]);\n  var allChannels = channelListStore.allChannels;\n  var sortedChannels = sortChannelList && typeof sortChannelList === 'function' ? sortChannelList(allChannels) : allChannels;\n  if (sortedChannels.length !== allChannels.length) {\n    var warning = \"ChannelList: You have removed/added extra channels on sortChannelList\\n      this could cause unexpected problems\"; // eslint-disable-next-line no-console\n\n    console.warn(warning, {\n      before: allChannels,\n      after: sortedChannels\n    });\n    logger.warning(warning, {\n      before: allChannels,\n      after: sortedChannels\n    });\n  }\n  useEffect(function () {\n    channelListDispatcher({\n      type: SET_AUTO_SELECT_CHANNEL_ITEM,\n      payload: disableAutoSelect\n    });\n  }, [disableAutoSelect]);\n  useEffect(function () {\n    if (!sdk || !sdk.GroupChannel || !currentChannel) {\n      return;\n    }\n    sdk.GroupChannel.getChannel(currentChannel, function (groupChannel) {\n      if (groupChannel) {\n        onChannelSelect(groupChannel);\n      } else {\n        onChannelSelect(null);\n      }\n    });\n  }, [currentChannel]);\n  return /*#__PURE__*/React__default.createElement(UserProfileProvider, {\n    className: \"sendbird-channel-list\",\n    disableUserProfile: userDefinedDisableUserProfile,\n    renderUserProfile: userDefinedRenderProfile\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-list__header\"\n  }, /*#__PURE__*/React__default.createElement(ChannelHeader, {\n    renderHeader: renderHeader,\n    user: user,\n    onEdit: function onEdit() {\n      if (enableEditProfile) {\n        setShowProfileEdit(true);\n      }\n    },\n    allowProfileEdit: enableEditProfile,\n    iconButton: /*#__PURE__*/React__default.createElement(AddChannel, {\n      disabled: !isOnline,\n      userListQuery: userListQuery,\n      sdk: sdk,\n      channelListDispatcher: channelListDispatcher,\n      userId: userId,\n      userFilledApplicationUserListQuery: userFilledApplicationUserListQuery,\n      onBeforeCreateChannel: onBeforeCreateChannel\n    })\n  })), showProfileEdit && /*#__PURE__*/React__default.createElement(ConnectedEditUserProfile, {\n    onThemeChange: onThemeChange,\n    user: user,\n    onCancel: function onCancel() {\n      setShowProfileEdit(false);\n    },\n    onSubmit: function onSubmit(newName, newFile) {\n      sdk.updateCurrentUserInfoWithProfileImage(newName, newFile, function (updatedUser) {\n        userDispatcher({\n          type: UPDATE_USER_INFO,\n          payload: updatedUser\n        });\n        if (onProfileEditSuccess && typeof onProfileEditSuccess === 'function') {\n          onProfileEditSuccess(updatedUser);\n        }\n      });\n    }\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-list__body\",\n    onScroll: function onScroll(e) {\n      var fetchMore = e.target.clientHeight + e.target.scrollTop === e.target.scrollHeight;\n      if (fetchMore && channelSource.hasNext) {\n        logger.info('ChannelList: Fetching more channels');\n        channelListDispatcher({\n          type: FETCH_CHANNELS_START\n        });\n        channelSource.next(function (response, error) {\n          var _sdk$appInfo, _sdk$appInfo$premiumF;\n          var swapParams = sdk.getErrorFirstCallback();\n          var channelList = response;\n          var err = error;\n          if (swapParams) {\n            channelList = error;\n            err = response;\n          }\n          if (err) {\n            logger.info('ChannelList: Fetching channels failed', err);\n            channelListDispatcher({\n              type: FETCH_CHANNELS_FAILURE,\n              payload: channelList\n            });\n            return;\n          }\n          logger.info('ChannelList: Fetching channels successful', channelList);\n          channelListDispatcher({\n            type: FETCH_CHANNELS_SUCCESS,\n            payload: channelList\n          });\n          var canSetMarkAsDelivered = sdk === null || sdk === void 0 ? void 0 : (_sdk$appInfo = sdk.appInfo) === null || _sdk$appInfo === void 0 ? void 0 : (_sdk$appInfo$premiumF = _sdk$appInfo.premiumFeatureList) === null || _sdk$appInfo$premiumF === void 0 ? void 0 : _sdk$appInfo$premiumF.find(function (feature) {\n            return feature === DELIVERY_RECIPT;\n          });\n          if (canSetMarkAsDelivered) {\n            var _channelList;\n            logger.info('ChannelList: Marking all channels as read'); // eslint-disable-next-line no-unused-expressions\n\n            (_channelList = channelList) === null || _channelList === void 0 ? void 0 : _channelList.forEach(function (channel, idx) {\n              // Plan-based rate limits - minimum limit is 5 requests per second\n              setTimeout(function () {\n                // eslint-disable-next-line no-unused-expressions\n                channel === null || channel === void 0 ? void 0 : channel.markAsDelivered();\n              }, 500 * idx);\n            });\n          }\n        });\n      }\n    }\n  }, sdkError && /*#__PURE__*/React__default.createElement(ChannelsPlaceholder, {\n    type: PlaceHolderTypes.WRONG\n  }), /*#__PURE__*/React__default.createElement(\"div\", null, sortedChannels && sortedChannels.map(function (channel, idx) {\n    var _onLeaveChannel = function onLeaveChannel(c, cb) {\n      logger.info('ChannelList: Leaving channel', c);\n      c.leave().then(function (res) {\n        logger.info('ChannelList: Leaving channel success', res);\n        if (cb && typeof cb === 'function') {\n          cb(res, null);\n        }\n        channelListDispatcher({\n          type: LEAVE_CHANNEL_SUCCESS,\n          payload: channel.url\n        });\n      }).catch(function (err) {\n        logger.error('ChannelList: Leaving channel failed', err);\n        if (cb && typeof cb === 'function') {\n          cb(null, err);\n        }\n      });\n    };\n    var onClick = function onClick() {\n      if (!isOnline) {\n        return;\n      }\n      logger.info('ChannelList: Clicked on channel:', channel);\n      channelListDispatcher({\n        type: SET_CURRENT_CHANNEL,\n        payload: channel.url\n      });\n    };\n    return renderChannelPreview ? /*#__PURE__*/\n    // eslint-disable-next-line\n    React__default.createElement(\"div\", {\n      key: channel.url,\n      onClick: onClick\n    }, renderChannelPreview({\n      channel: channel,\n      onLeaveChannel: _onLeaveChannel\n    })) : /*#__PURE__*/React__default.createElement(ChannelPreview, {\n      key: channel.url,\n      tabIndex: idx,\n      onClick: onClick,\n      channel: channel,\n      currentUser: user,\n      theme: theme,\n      isActive: channel.url === currentChannel // todo - potential performance hit refactor\n      ,\n\n      ChannelAction: /*#__PURE__*/React__default.createElement(ChannelPreviewAction, {\n        disabled: !isOnline,\n        onLeaveChannel: function onLeaveChannel() {\n          return _onLeaveChannel(channel);\n        }\n      })\n    });\n  })), (!sdkIntialized || loading) && /*#__PURE__*/React__default.createElement(ChannelsPlaceholder, {\n    type: PlaceHolderTypes.LOADING\n  }),\n  //  placeholder\n  (!allChannels || allChannels.length === 0) && /*#__PURE__*/React__default.createElement(ChannelsPlaceholder, {\n    type: PlaceHolderTypes.NO_CHANNELS\n  })));\n}\nChannelList.propTypes = {\n  stores: PropTypes.shape({\n    sdkStore: PropTypes.shape({\n      initialized: PropTypes.bool\n    }),\n    userStore: PropTypes.shape({\n      user: PropTypes.shape({})\n    })\n  }).isRequired,\n  dispatchers: PropTypes.shape({\n    userDispatcher: PropTypes.func\n  }).isRequired,\n  config: PropTypes.shape({\n    userId: PropTypes.string.isRequired,\n    userListQuery: PropTypes.func,\n    theme: PropTypes.string,\n    isOnline: PropTypes.bool,\n    logger: PropTypes.shape({\n      info: PropTypes.func,\n      error: PropTypes.func,\n      warning: PropTypes.func\n    }),\n    pubSub: PropTypes.shape({\n      subscribe: PropTypes.func,\n      publish: PropTypes.func\n    })\n  }).isRequired,\n  queries: PropTypes.shape({\n    channelListQuery: PropTypes.shape({\n      channelNameContainsFilter: PropTypes.string,\n      channelUrlsFilter: PropTypes.arrayOf(PropTypes.string),\n      customTypesFilter: PropTypes.arrayOf(PropTypes.string),\n      customTypeStartsWithFilter: PropTypes.string,\n      hiddenChannelFilter: PropTypes.string,\n      includeEmpty: PropTypes.bool,\n      limit: PropTypes.number,\n      memberStateFilter: PropTypes.string,\n      metadataOrderKeyFilter: PropTypes.string,\n      nicknameContainsFilter: PropTypes.string,\n      order: PropTypes.string,\n      publicChannelFilter: PropTypes.string,\n      superChannelFilter: PropTypes.string,\n      unreadChannelFilter: PropTypes.string,\n      userIdsExactFilter: PropTypes.arrayOf(PropTypes.string),\n      userIdsIncludeFilter: PropTypes.arrayOf(PropTypes.string),\n      userIdsIncludeFilterQueryType: PropTypes.string\n    }),\n    applicationUserListQuery: PropTypes.shape({\n      limit: PropTypes.number,\n      userIdsFilter: PropTypes.arrayOf(PropTypes.string),\n      metaDataKeyFilter: PropTypes.string,\n      metaDataValuesFilter: PropTypes.arrayOf(PropTypes.string)\n    })\n  }),\n  onBeforeCreateChannel: PropTypes.func,\n  renderChannelPreview: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n  disableUserProfile: PropTypes.bool,\n  renderUserProfile: PropTypes.func,\n  allowProfileEdit: PropTypes.bool,\n  sortChannelList: PropTypes.func,\n  onThemeChange: PropTypes.func,\n  onProfileEditSuccess: PropTypes.func,\n  renderHeader: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n  onChannelSelect: PropTypes.func,\n  disableAutoSelect: PropTypes.bool\n};\nChannelList.defaultProps = {\n  onBeforeCreateChannel: null,\n  renderChannelPreview: null,\n  renderHeader: null,\n  disableUserProfile: false,\n  renderUserProfile: null,\n  allowProfileEdit: false,\n  onThemeChange: null,\n  sortChannelList: null,\n  onProfileEditSuccess: null,\n  queries: {},\n  onChannelSelect: noop,\n  disableAutoSelect: false\n};\nvar ChannelList$1 = withSendbirdContext(ChannelList);\nexport { ChannelList$1 as default };","map":{"version":3,"names":["RESET_CHANNEL_LIST","CREATE_CHANNEL","SET_AUTO_SELECT_CHANNEL_ITEM","LEAVE_CHANNEL_SUCCESS","SET_CURRENT_CHANNEL","SHOW_CHANNEL_SETTINGS","HIDE_CHANNEL_SETTINGS","FETCH_CHANNELS_START","FETCH_CHANNELS_SUCCESS","FETCH_CHANNELS_FAILURE","INIT_CHANNELS_START","INIT_CHANNELS_SUCCESS","INIT_CHANNELS_FAILURE","ON_USER_JOINED","ON_CHANNEL_DELETED","ON_LAST_MESSAGE_UPDATED","ON_USER_LEFT","ON_CHANNEL_CHANGED","ON_CHANNEL_ARCHIVED","ON_CHANNEL_FROZEN","ON_CHANNEL_UNFROZEN","ON_READ_RECEIPT_UPDATED","ON_DELIVERY_RECEIPT_UPDATED","CHANNEL_REPLACED_TO_TOP","CHANNEL_LIST_PARAMS_UPDATED","channelListInitialState","initialized","loading","allChannels","currentChannel","showSettings","channelListQuery","currentUserId","disableAutoSelect","reducer","state","action","type","_objectSpread2","nextChannel","payload","length","url","currentChannels","map","c","filteredChannels","filter","_ref","find","concat","_toConsumableArray","channel","filterChannelListParams","getChannelsWithUpsertedChannel","ch","_channel","_nextChannel","_ref2","channelUrl","_nextChannel2","_ref3","_action$payload","_channel2","isMe","_filteredChannels2","_nextChannel5","_nextChannel4","_ref4","_filteredChannels","_nextChannel3","_state$allChannels","_channel3","unreadMessageCount","lastMessage","_nextChannel6","_ref5","_ref6","currentUnreadCount","_ref7","_channel4","_nextChannel7","_ref8","isFrozen","_channel5","_nextChannel8","_ref9","getChannelTitle","arguments","undefined","stringSet","LabelStringSet","name","members","NO_TITLE","NO_MEMBERS","userId","nickname","NO_NAME","join","getLastMessageCreatedAt","locale","_channel$lastMessage","createdAt","optionalParam","isToday","format","isYesterday","formatRelative","Date","getTotalMembers","memberCount","getPrettyLastMessage","message","MAXLEN","messageType","truncateString","getLastMessage","getChannelUnreadMessageCount","ChannelPreview","currentUser","isActive","ChannelAction","theme","onClick","tabIndex","isBroadcast","_useContext","useContext","LocalizationContext","dateLocale","React__default","createElement","className","role","onKeyPress","ChannelAvatar","Icon","IconTypes","BROADCAST","fillColor","IconColors","SECONDARY","height","width","Label","LabelTypography","SUBTITLE_2","color","LabelColors","ONBACKGROUND_1","CAPTION_2","ONBACKGROUND_2","title","FREEZE","PRIMARY","CAPTION_3","BODY_2","ONBACKGROUND_3","Badge","count","propTypes","PropTypes","shape","arrayOf","coverUrl","string","bool","element","isRequired","func","number","defaultProps","ChannelHeader","user","renderHeader","iconButton","onEdit","allowProfileEdit","onKeyDown","Avatar","src","profileUrl","alt","oneOfType","instanceOf","IconButton","EditUserProfile","_a","_b","onCancel","_onSubmit","onSubmit","_c","changeTheme","noop$1","_d","onThemeChange","hiddenInputRef","useRef","inputRef","formRef","_e","useState","currentImg","setCurrentImg","_f","newFile","setNewFile","Modal","titleText","EDIT_PROFILE__TITLE","submitText","BUTTON__SAVE","Type","current","value","reportValidity","ref","e","preventDefault","InputLabel","EDIT_PROFILE__IMAGE_LABEL","accept","style","display","onChange","URL","createObjectURL","target","files","TextButton","notUnderline","click","BUTTON_1","EDIT_PROFILE__IMAGE_UPLOAD","EDIT_PROFILE__NICKNAME_LABEL","Input","required","placeHolder","EDIT_PROFILE__NICKNAME_PLACEHOLDER","EDIT_PROFILE__USERID_LABEL","disabled","EDIT_PROFILE__THEME_LABEL","TOGGLE_ON","TOGGLE_OFF","mapStoreToProps","store","config","setCurrenttheme","ConnectedEditUserProfile","withSendbirdContext","AddChannel","sdk","channelListDispatcher","onBeforeCreateChannel","userFilledApplicationUserListQuery","userListQuery","_useState","_useState2","_slicedToArray","showModal","setShowModal","_useState3","_useState4","step","setStep","_useState5","_useState6","setType","createApplicationUserListQuery","isBroadcastAvailable","isBroadcastChannelEnabled","isSupergroupAvailable","isSuperGroupChannelEnabled","Fragment","CREATE","MODAL__CHOOSE_CHANNEL_TYPE__TITLE","hideFooter","CHAT","SUBTITLE_1","MODAL__CHOOSE_CHANNEL_TYPE__GROUP","SUPERGROUP","MODAL__CHOOSE_CHANNEL_TYPE__SUPER_GROUP","MODAL__CHOOSE_CHANNEL_TYPE__BROADCAST","InviteMembers","swapParams","getErrorFirstCallback","MODAL__CREATE_CHANNEL__TITLE","BUTTON__CREATE","closeModal","idsToFilter","userQueryCreator","createDefaultUserListQuery","selectedUsers","createChannel","then","ChannelPreviewAction","onLeaveChannel","parentRef","stopPropagation","ContextMenu","menuTrigger","toggleDropdown","MORE","menuItems","closeDropdown","MenuItems","parentContainRef","MenuItem","CHANNEL_SETTING__LEAVE_CHANNEL__TITLE","LeaveChannel","onCloseModal","ChannelsPlaceholder","PlaceHolder","DELIVERY_RECIPT$1","createEventHandler","sdkChannelHandlerId","logger","ChannelHandler","onChannelChanged","info","onChannelDeleted","onUserJoined","onUserBanned","onUserLeft","leftUser","onReadStatus","onDeliveryReceiptUpdated","onMessageUpdated","isEqual","onChannelHidden","onChannelFrozen","onChannelUnfrozen","addChannelHandler","createChannelListQuery","_ref2$userFilledChann","userFilledChannelListQuery","GroupChannel","createMyGroupChannelListQuery","includeEmpty","order","limit","Object","keys","forEach","key","setupChannelList","setChannelSource","onChannelSelect","sortChannelList","console","warning","hasNext","next","response","error","_sdk$appInfo","_sdk$appInfo$premiumF","channelList","err","sorted","canSetMarkAsDelivered","appInfo","premiumFeatureList","feature","_channelList","idx","setTimeout","markAsDelivered","pubSubHandleRemover","subscriber","s","remove","_unused","pubSubHandler","pubSub","subScriber","Map","set","CREATE_CHANNEL$1","subscribe","msg","UPDATE_USER_MESSAGE","_updatedChannel$lastM","updatedChannel","messageId","LEAVE_CHANNEL","SEND_MESSAGE_START","noop","DELIVERY_RECIPT","ChannelList","props","_props$stores","stores","_props$stores$sdkStor","sdkStore","_props$stores$userSto","userStore","_props$config","isOnline","userDispatcher","dispatchers","_props$queries","queries","renderChannelPreview","renderUserProfile","disableUserProfile","onProfileEditSuccess","_props$config2","enableEditProfile","userDefinedDisableUserProfile","userDefinedRenderProfile","_sdkStore$sdk","applicationUserListQuery","sdkError","sdkIntialized","_useReducer","useReducer","_useReducer2","channelListStore","setUser","channelSource","showProfileEdit","setShowProfileEdit","_useState7","_useState8","setSdkChannelHandlerId","useEffect","uuidv4","removeChannelHandler","sortedChannels","warn","before","after","getChannel","groupChannel","UserProfileProvider","newName","updateCurrentUserInfoWithProfileImage","updatedUser","UPDATE_USER_INFO","onScroll","fetchMore","clientHeight","scrollTop","scrollHeight","PlaceHolderTypes","WRONG","_onLeaveChannel","cb","leave","res","catch","LOADING","NO_CHANNELS","publish","channelNameContainsFilter","channelUrlsFilter","customTypesFilter","customTypeStartsWithFilter","hiddenChannelFilter","memberStateFilter","metadataOrderKeyFilter","nicknameContainsFilter","publicChannelFilter","superChannelFilter","unreadChannelFilter","userIdsExactFilter","userIdsIncludeFilter","userIdsIncludeFilterQueryType","userIdsFilter","metaDataKeyFilter","metaDataValuesFilter","ChannelList$1"],"sources":["C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\src\\smart-components\\ChannelList\\dux\\actionTypes.js","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\src\\smart-components\\ChannelList\\dux\\initialState.js","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\src\\smart-components\\ChannelList\\dux\\reducers.js","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\src\\ui\\ChannelPreview\\utils.js","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\src\\ui\\ChannelPreview\\index.jsx","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\src\\ui\\ChannelHeader\\index.jsx","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\src\\ui\\EditUserProfile\\index.tsx","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\src\\smart-components\\ChannelList\\components\\AddChannel.jsx","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\src\\smart-components\\ChannelList\\components\\ChannelPreviewAction.jsx","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\src\\smart-components\\ChannelList\\components\\Placeholder.jsx","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\src\\smart-components\\ChannelList\\utils.js","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\src\\smart-components\\ChannelList\\index.jsx"],"sourcesContent":["export const RESET_CHANNEL_LIST = 'RESET_CHANNEL_LIST';\nexport const CREATE_CHANNEL = 'CREATE_CHANNEL';\nexport const UNLOAD_CHANNELS = 'UNLOAD_CHANNELS';\nexport const SET_CHANNEL_LOADING = 'SET_CHANNEL_LOADING';\nexport const SET_AUTO_SELECT_CHANNEL_ITEM = 'SET_AUTO_SELECT_CHANNEL_ITEM';\nexport const LEAVE_CHANNEL_SUCCESS = 'LEAVE_CHANNEL_SUCCESS';\n\nexport const SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\n\nexport const SHOW_CHANNEL_SETTINGS = 'SHOW_CHANNEL_SETTINGS';\nexport const HIDE_CHANNEL_SETTINGS = 'HIDE_CHANNEL_SETTINGS';\n\nexport const FETCH_CHANNELS_START = 'FETCH_CHANNELS_START';\nexport const FETCH_CHANNELS_SUCCESS = 'FETCH_CHANNELS_SUCCESS';\nexport const FETCH_CHANNELS_FAILURE = 'FETCH_CHANNELS_FAILURE';\n\nexport const INIT_CHANNELS_START = 'INIT_CHANNELS_START';\nexport const INIT_CHANNELS_SUCCESS = 'INIT_CHANNELS_SUCCESS';\nexport const INIT_CHANNELS_FAILURE = 'INIT_CHANNELS_FAILURE';\n\nexport const INVITE_MEMBERS_SUCESS = 'INVITE_MEMBERS_SUCESS';\n\nexport const ON_USER_JOINED = 'ON_USER_JOINED';\nexport const ON_CHANNEL_DELETED = 'ON_CHANNEL_DELETED';\nexport const ON_LAST_MESSAGE_UPDATED = 'ON_LAST_MESSAGE_UPDATED';\nexport const ON_USER_LEFT = 'ON_USER_LEFT';\nexport const ON_CHANNEL_CHANGED = 'ON_CHANNEL_CHANGED';\nexport const ON_CHANNEL_ARCHIVED = 'ON_CHANNEL_ARCHIVED';\nexport const ON_CHANNEL_FROZEN = 'ON_CHANNEL_FROZEN';\nexport const ON_CHANNEL_UNFROZEN = 'ON_CHANNEL_UNFROZEN';\n\nexport const ON_READ_RECEIPT_UPDATED = 'ON_READ_RECEIPT_UPDATED';\nexport const ON_DELIVERY_RECEIPT_UPDATED = 'ON_DELIVERY_RECEIPT_UPDATED';\n\nexport const CHANNEL_REPLACED_TO_TOP = 'CHANNEL_REPLACED_TO_TOP';\nexport const CHANNEL_LIST_PARAMS_UPDATED = 'CHANNEL_LIST_PARAMS_UPDATED';\n","export default {\n  // we might not need this initialized state -> should remove\n  initialized: false,\n  loading: false,\n  allChannels: [],\n  currentChannel: null,\n  showSettings: false,\n  channelListQuery: null,\n  currentUserId: '',\n  disableAutoSelect: false,\n};\n","import { filterChannelListParams, getChannelsWithUpsertedChannel } from '../../../utils';\nimport * as actions from './actionTypes';\nimport initialState from './initialState';\n\nexport default function reducer(state, action) {\n  switch (action.type) {\n    case actions.INIT_CHANNELS_START:\n      return {\n        ...state,\n        loading: true,\n      };\n    case actions.RESET_CHANNEL_LIST:\n      return initialState;\n    case actions.INIT_CHANNELS_SUCCESS: {\n      const nextChannel = (action.payload && action.payload.length && action.payload.length > 0)\n        ? action.payload[0].url\n        : null;\n      return {\n        ...state,\n        initialized: true,\n        loading: false,\n        allChannels: action.payload,\n        currentChannel: state.disableAutoSelect ? null : nextChannel,\n      };\n    }\n    case actions.FETCH_CHANNELS_SUCCESS: {\n      const currentChannels = state.allChannels.map((c) => c.url);\n      const filteredChannels = action.payload.filter(\n        ({ url }) => !(currentChannels.find((c) => c === url)),\n      );\n      return {\n        ...state,\n        allChannels: [\n          ...state.allChannels,\n          ...filteredChannels,\n        ],\n      };\n    }\n    case actions.CREATE_CHANNEL: {\n      const channel = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel),\n          };\n        }\n        return {\n          ...state,\n          currentChannel: channel.url,\n        };\n      }\n      return {\n        ...state,\n        currentChannel: channel.url,\n        allChannels: [channel, ...state.allChannels.filter((ch) => ch.url !== channel.url)],\n      };\n    }\n    case actions.ON_CHANNEL_ARCHIVED: {\n      const channel = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel),\n          };\n        }\n      }\n      const nextChannel = (channel.url === state.currentChannel)\n        ? state.allChannels[state.allChannels[0].url === channel.url ? 1 : 0].url\n        : state.currentChannel;\n      return {\n        ...state,\n        currentChannel: state.disableAutoSelect ? null : nextChannel,\n        allChannels: state.allChannels.filter(({ url }) => url !== channel.url),\n      };\n    }\n    case actions.LEAVE_CHANNEL_SUCCESS:\n    case actions.ON_CHANNEL_DELETED: {\n      const channelUrl = action.payload;\n      const nextChannel = (channelUrl === state.currentChannel)\n        ? state.allChannels[0].url\n        : state.currentChannel;\n      return {\n        ...state,\n        currentChannel: state.disableAutoSelect ? null : nextChannel,\n        allChannels: state.allChannels.filter(({ url }) => url !== channelUrl),\n      };\n    }\n    case actions.ON_USER_LEFT: {\n      const { channel, isMe } = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          const filteredChannels = getChannelsWithUpsertedChannel(state.allChannels, channel);\n          const nextChannel = (isMe && (channel.url === state.currentChannel))\n            ? filteredChannels[0].url\n            : state.currentChannel;\n          return {\n            ...state,\n            currentChannel: state.disableAutoSelect ? null : nextChannel,\n            allChannels: filteredChannels,\n          };\n        }\n        const nextChannel = (channel.url === state.currentChannel)\n          ? state.allChannels[0].url\n          : state.currentChannel;\n        return {\n          ...state,\n          currentChannel: state.disableAutoSelect ? null : nextChannel,\n          allChannels: state.allChannels.filter(({ url }) => url !== channel.url),\n        };\n      }\n      const filteredChannels = state.allChannels.filter((c) => !(c.url === channel.url && isMe));\n      const nextChannel = (isMe && (channel.url === state.currentChannel))\n        ? filteredChannels[0].url\n        : state.currentChannel;\n      return {\n        ...state,\n        currentChannel: state.disableAutoSelect ? null : nextChannel,\n        allChannels: filteredChannels,\n      };\n    }\n    case actions.ON_USER_JOINED:\n    case actions.ON_CHANNEL_CHANGED:\n    case actions.ON_READ_RECEIPT_UPDATED:\n    case actions.ON_DELIVERY_RECEIPT_UPDATED: {\n      const { allChannels = [] } = state;\n      const channel = action.payload;\n      const { unreadMessageCount } = channel;\n      if (!channel.lastMessage) return state;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(allChannels, channel),\n          };\n        }\n        const nextChannel = (channel.url === state.currentChannel)\n          ? state.allChannels[state.allChannels[0].url === channel.url ? 1 : 0].url\n          // if coming channel is first of channel list, current channel will be the next one\n          : state.currentChannel;\n        return {\n          ...state,\n          currentChannel: state.disableAutoSelect ? null : nextChannel,\n          allChannels: state.allChannels.filter(({ url }) => url !== channel.url),\n        };\n      }\n      // if its only an unread message count change, dont push to top\n      if (unreadMessageCount === 0) {\n        const currentChannel = allChannels.find(({ url }) => url === channel.url);\n        const currentUnreadCount = currentChannel && currentChannel.unreadMessageCount;\n        if (currentUnreadCount === 0) {\n          return {\n            ...state,\n            allChannels: state.allChannels.map((ch) => (ch.url === channel.url ? channel : ch)),\n          };\n        }\n      }\n      return {\n        ...state,\n        allChannels: [\n          channel,\n          ...state.allChannels.filter(({ url }) => url !== action.payload.url),\n        ],\n      };\n    }\n    case actions.SET_CURRENT_CHANNEL:\n      return {\n        ...state,\n        currentChannel: action.payload,\n      };\n    case actions.SHOW_CHANNEL_SETTINGS:\n      return {\n        ...state,\n        showSettings: true,\n      };\n    case actions.HIDE_CHANNEL_SETTINGS:\n      return {\n        ...state,\n        showSettings: false,\n      };\n    case actions.ON_LAST_MESSAGE_UPDATED:\n      return {\n        ...state,\n        allChannels: state.allChannels.map((channel) => (\n          channel.url === action.payload.url ? action.payload : channel)),\n      };\n    case actions.ON_CHANNEL_FROZEN: {\n      const channel = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel),\n          };\n        }\n        const nextChannel = (channel.url === state.currentChannel)\n          ? state.allChannels[state.allChannels[0].url === channel.url ? 1 : 0].url\n          // if coming channel is first of channel list, current channel will be the next one\n          : state.currentChannel;\n        return {\n          ...state,\n          currentChannel: state.disableAutoSelect ? null : nextChannel,\n          allChannels: state.allChannels.filter(({ url }) => url !== channel.url),\n        };\n      }\n      return {\n        ...state,\n        allChannels: state.allChannels.map((ch) => {\n          if (ch.url === channel.url) {\n            // eslint-disable-next-line no-param-reassign\n            ch.isFrozen = true;\n            return ch;\n          }\n          return ch;\n        }),\n      };\n    }\n    case actions.ON_CHANNEL_UNFROZEN: {\n      const channel = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel),\n          };\n        }\n        const nextChannel = (channel.url === state.currentChannel)\n          ? state.allChannels[state.allChannels[0].url === channel.url ? 1 : 0].url\n          // if coming channel is first of channel list, current channel will be the next one\n          : state.currentChannel;\n        return {\n          ...state,\n          currentChannel: state.disableAutoSelect ? null : nextChannel,\n          allChannels: state.allChannels.filter(({ url }) => url !== channel.url),\n        };\n      }\n      return {\n        ...state,\n        allChannels: state.allChannels.map((ch) => {\n          if (ch.url === channel.url) {\n            // eslint-disable-next-line no-param-reassign\n            ch.isFrozen = false;\n            return ch;\n          }\n          return ch;\n        }),\n      };\n    }\n    case actions.CHANNEL_REPLACED_TO_TOP: {\n      return {\n        ...state,\n        allChannels: [\n          action.payload,\n          ...state.allChannels.filter((channel) => channel.url !== action.payload.url),\n        ],\n      };\n    }\n    case actions.CHANNEL_LIST_PARAMS_UPDATED:\n      return {\n        ...state,\n        currentUserId: action.payload.currentUserId,\n        channelListQuery: action.payload.channelListQuery,\n      };\n    case actions.SET_AUTO_SELECT_CHANNEL_ITEM:\n      return {\n        ...state,\n        disableAutoSelect: action.payload,\n      };\n    default:\n      return state;\n  }\n}\n","import isToday from 'date-fns/isToday';\n\nimport format from 'date-fns/format';\nimport formatRelative from 'date-fns/formatRelative';\nimport isYesterday from 'date-fns/isYesterday';\n\nimport { truncateString } from '../../utils';\nimport { LabelStringSet } from '../Label';\n\nexport const getChannelTitle = (channel = {}, currentUserId, stringSet = LabelStringSet) => {\n  if (!channel || (!channel.name && !channel.members)) {\n    return stringSet.NO_TITLE;\n  }\n  if (channel.name && channel.name !== 'Group Channel') {\n    return channel.name;\n  }\n  if (channel.members.length === 1) {\n    return stringSet.NO_MEMBERS;\n  }\n\n  return channel.members\n    .filter(({ userId }) => userId !== currentUserId)\n    .map(({ nickname }) => (nickname || stringSet.NO_NAME))\n    .join(', ');\n};\n\nexport const getLastMessageCreatedAt = (channel, locale) => {\n  const createdAt = channel?.lastMessage?.createdAt;\n  const optionalParam = locale ? { locale } : null;\n  if (!createdAt) {\n    return '';\n  }\n  if (isToday(createdAt)) {\n    return format(createdAt, 'p', optionalParam);\n  }\n  if (isYesterday(createdAt)) {\n    return formatRelative(createdAt, new Date(), optionalParam);\n  }\n  return format(createdAt, 'MMM dd', optionalParam);\n};\n\nexport const getTotalMembers = (channel) => (\n  channel && channel.memberCount\n    ? channel.memberCount\n    : 0\n);\n\nconst getPrettyLastMessage = (message = {}) => {\n  const MAXLEN = 30;\n  const { messageType, name } = message;\n  if (messageType === 'file') {\n    return truncateString(name, MAXLEN);\n  }\n  return message.message;\n};\n\nexport const getLastMessage = (channel) => (\n  channel && channel.lastMessage\n    ? getPrettyLastMessage(channel.lastMessage)\n    : ''\n);\n\nexport const getChannelUnreadMessageCount = (channel) => (\n  (channel && channel.unreadMessageCount)\n    ? channel.unreadMessageCount\n    : 0\n);\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './index.scss';\n\nimport ChannelAvatar from '../ChannelAvatar/index';\nimport Badge from '../Badge';\nimport Icon, { IconColors, IconTypes } from '../Icon';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\n\nimport * as utils from './utils';\n\nexport default function ChannelPreview({\n  channel,\n  currentUser,\n  isActive,\n  ChannelAction,\n  theme,\n  onClick,\n  tabIndex,\n}) {\n  const {\n    userId,\n  } = currentUser;\n  const { isBroadcast, isFrozen } = channel;\n  const { stringSet, dateLocale } = useContext(LocalizationContext);\n  return (\n    <div\n      className={[\n        'sendbird-channel-preview',\n        isActive ? 'sendbird-channel-preview--active' : '',\n      ].join(' ')}\n      role=\"link\"\n      onClick={onClick}\n      onKeyPress={onClick}\n      tabIndex={tabIndex}\n    >\n      <div\n        className=\"sendbird-channel-preview__avatar\"\n      >\n        <ChannelAvatar\n          channel={channel}\n          userId={userId}\n          theme={theme}\n        />\n      </div>\n      <div className=\"sendbird-channel-preview__content\">\n        <div className=\"sendbird-channel-preview__content__upper\">\n          <div className=\"sendbird-channel-preview__content__upper__header\">\n            {\n              isBroadcast\n              && (\n                <div className=\"sendbird-channel-preview__content__upper__header__broadcast-icon\">\n                  <Icon\n                    type={IconTypes.BROADCAST}\n                    fillColor={IconColors.SECONDARY}\n                    height=\"16px\"\n                    width=\"16px\"\n                  />\n                </div>\n              )\n            }\n            <Label\n              className=\"sendbird-channel-preview__content__upper__header__channel-name\"\n              type={LabelTypography.SUBTITLE_2}\n              color={LabelColors.ONBACKGROUND_1}\n            >\n              {utils.getChannelTitle(channel, userId, stringSet)}\n            </Label>\n            <Label\n              className=\"sendbird-channel-preview__content__upper__header__total-members\"\n              type={LabelTypography.CAPTION_2}\n              color={LabelColors.ONBACKGROUND_2}\n            >\n              {utils.getTotalMembers(channel)}\n            </Label>\n            {\n              isFrozen\n              && (\n                <div title=\"Frozen\" className=\"sendbird-channel-preview__content__upper__header__frozen-icon\">\n                  <Icon\n                    type={IconTypes.FREEZE}\n                    fillColor={IconColors.PRIMARY}\n                    height={12}\n                    width={12}\n                  />\n                </div>\n              )\n            }\n          </div>\n          <Label\n            className=\"sendbird-channel-preview__content__upper__last-message-at\"\n            type={LabelTypography.CAPTION_3}\n            color={LabelColors.ONBACKGROUND_2}\n          >\n            {utils.getLastMessageCreatedAt(channel, dateLocale)}\n          </Label>\n        </div>\n        <div className=\"sendbird-channel-preview__content__lower\">\n          <Label\n            className=\"sendbird-channel-preview__content__lower__last-message\"\n            type={LabelTypography.BODY_2}\n            color={LabelColors.ONBACKGROUND_3}\n          >\n            {utils.getLastMessage(channel)}\n          </Label>\n          <div className=\"sendbird-channel-preview__content__lower__unread-message-count\">\n            {\n              utils.getChannelUnreadMessageCount(channel) // return number\n                ? <Badge count={utils.getChannelUnreadMessageCount(channel)} />\n                : null\n            }\n          </div>\n        </div>\n      </div>\n      <div\n        className=\"sendbird-channel-preview__action\"\n      >\n        {ChannelAction}\n      </div>\n    </div>\n  );\n}\n\nChannelPreview.propTypes = {\n  channel: PropTypes.shape({\n    members: PropTypes.arrayOf(PropTypes.shape({})),\n    coverUrl: PropTypes.string,\n    isBroadcast: PropTypes.bool,\n    isFrozen: PropTypes.bool,\n  }),\n  currentUser: PropTypes.shape({\n    userId: PropTypes.string,\n  }),\n  isActive: PropTypes.bool,\n  ChannelAction: PropTypes.element.isRequired,\n  theme: PropTypes.string,\n  onClick: PropTypes.func,\n  tabIndex: PropTypes.number,\n};\n\nChannelPreview.defaultProps = {\n  channel: {},\n  currentUser: {},\n  isActive: false,\n  theme: 'light',\n  onClick: () => { },\n  tabIndex: 0,\n};\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport IconButton from '../IconButton';\n\nimport './index.scss';\nimport Avatar from '../Avatar/index';\n\nexport default function ChannelHeader({\n  user,\n  renderHeader,\n  iconButton,\n  onEdit,\n  allowProfileEdit,\n}) {\n  const { stringSet } = useContext(LocalizationContext);\n  return (\n    <div\n      className={[\n        'sendbird-channel-header',\n        allowProfileEdit ? 'sendbird-channel-header--allow-edit' : '',\n      ].join(' ')}\n    >\n      {\n        renderHeader\n          ? renderHeader()\n          : (\n            <div\n              className=\"sendbird-channel-header__title\"\n              role=\"button\"\n              onClick={onEdit}\n              onKeyDown={onEdit}\n              tabIndex=\"0\"\n            >\n              <div className=\"sendbird-channel-header__title__left\">\n                <Avatar\n                  width=\"32px\"\n                  height=\"32px\"\n                  src={user.profileUrl}\n                  alt={user.nickname}\n                />\n              </div>\n              <div className=\"sendbird-channel-header__title__right\">\n                <Label\n                  className=\"sendbird-channel-header__title__right__name\"\n                  type={LabelTypography.SUBTITLE_2}\n                  color={LabelColors.ONBACKGROUND_1}\n                >\n                  {user.nickname || stringSet.NO_NAME}\n                </Label>\n                <Label\n                  className=\"sendbird-channel-header__title__right__user-id\"\n                  type={LabelTypography.BODY_2}\n                  color={LabelColors.ONBACKGROUND_2}\n                >\n                  {user.userId}\n                </Label>\n              </div>\n            </div>\n          )\n      }\n      <div className=\"sendbird-channel-header__right-icon\">\n        {iconButton}\n      </div>\n    </div>\n  );\n}\n\nChannelHeader.propTypes = {\n  user: PropTypes.shape({\n    profileUrl: PropTypes.string,\n    nickname: PropTypes.string,\n    userId: PropTypes.string,\n  }),\n  renderHeader: PropTypes.func,\n  iconButton: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.instanceOf(IconButton),\n  ]),\n  onEdit: PropTypes.func.isRequired,\n  allowProfileEdit: PropTypes.bool,\n};\n\nChannelHeader.defaultProps = {\n  user: {},\n  renderHeader: null,\n  iconButton: null,\n  allowProfileEdit: false,\n};\n","import React, {\n  ReactElement,\n  useRef,\n  useState,\n  useContext,\n} from 'react';\nimport './index.scss';\n\nimport Modal from '../Modal';\nimport withSendbirdContext from '../../lib/SendbirdSdkContext';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\n\nimport Input, { InputLabel } from '../Input';\nimport Avatar from '../Avatar';\nimport Icon, { IconTypes } from '../Icon';\nimport { Type as ButtonType } from '../Button/type';\nimport Label, { LabelColors, LabelTypography } from '../Label';\nimport TextButton from '../TextButton';\nimport { SendbirdTypes } from '../../types';\nimport { noop } from '../../utils/utils';\n\ninterface Props {\n  user: SendbirdTypes['User'];\n  theme?: string;\n  onCancel(): void;\n  onSubmit(newFile: File, newNickname: string): void;\n  changeTheme?(theme: string): void;\n  onThemeChange?(theme: string): void;\n}\n\nexport function EditUserProfile({\n  user,\n  theme = 'light',\n  onCancel,\n  onSubmit,\n  changeTheme = noop,\n  onThemeChange = null,\n}: Props): ReactElement {\n  const hiddenInputRef = useRef(null);\n  const inputRef = useRef(null);\n  const formRef = useRef(null);\n  const { stringSet } = useContext(LocalizationContext);\n  const [currentImg, setCurrentImg] = useState(null);\n  const [newFile, setNewFile] = useState(null);\n\n  return (\n    <Modal\n      titleText={stringSet.EDIT_PROFILE__TITLE}\n      submitText={stringSet.BUTTON__SAVE}\n      type={ButtonType.PRIMARY}\n      onCancel={onCancel}\n      onSubmit={() => {\n        if (user.nickname !== '' && !inputRef.current.value) {\n          if (formRef.current.reportValidity) { // might not work in explorer\n            formRef.current.reportValidity();\n          }\n          return;\n        }\n        onSubmit(inputRef.current.value, newFile);\n        onCancel();\n      }}\n    >\n      <form\n        className=\"sendbird-edit-user-profile\"\n        ref={formRef}\n        onSubmit={(e) => { e.preventDefault(); }}\n      >\n        <section className=\"sendbird-edit-user-profile__img\">\n          <InputLabel>\n            {stringSet.EDIT_PROFILE__IMAGE_LABEL}\n          </InputLabel>\n          <div className=\"sendbird-edit-user-profile__img__avatar\">\n            <Avatar\n              width=\"80px\"\n              height=\"80px\"\n              src={currentImg || user.profileUrl}\n            />\n          </div>\n          <input\n            ref={hiddenInputRef}\n            type=\"file\"\n            accept=\"image/gif, image/jpeg, image/png\"\n            style={{ display: 'none' }}\n            onChange={(e) => {\n              setCurrentImg(URL.createObjectURL(e.target.files[0]));\n              setNewFile(e.target.files[0]);\n              hiddenInputRef.current.value = '';\n            }}\n          />\n          <TextButton\n            className=\"sendbird-edit-user-profile__img__avatar-button\"\n            notUnderline\n            onClick={() => hiddenInputRef.current.click()}\n          >\n            <Label type={LabelTypography.BUTTON_1} color={LabelColors.PRIMARY}>\n              {stringSet.EDIT_PROFILE__IMAGE_UPLOAD}\n            </Label>\n          </TextButton>\n        </section>\n        <section className=\"sendbird-edit-user-profile__name\">\n          <InputLabel>\n            {stringSet.EDIT_PROFILE__NICKNAME_LABEL}\n          </InputLabel>\n          <Input\n            required={user.nickname !== ''}\n            name=\"sendbird-edit-user-profile__name__input\"\n            ref={inputRef}\n            value={user.nickname}\n            placeHolder={stringSet.EDIT_PROFILE__NICKNAME_PLACEHOLDER}\n          />\n        </section>\n        <section className=\"sendbird-edit-user-profile__userid\">\n          <InputLabel>\n            {/*  userID */}\n            {stringSet.EDIT_PROFILE__USERID_LABEL}\n          </InputLabel>\n          <Input\n            disabled\n            name=\"sendbird-edit-user-profile__userid__input\"\n            value={user.userId}\n          />\n        </section>\n        <section className=\"sendbird-edit-user-profile__theme\">\n          <InputLabel>\n            {stringSet.EDIT_PROFILE__THEME_LABEL}\n          </InputLabel>\n          <div className=\"sendbird-edit-user-profile__theme__theme-icon\">\n            {\n              theme === 'dark'\n                ? (\n                  <Icon\n                    onClick={() => {\n                      changeTheme('light');\n                      if (onThemeChange && typeof onThemeChange === 'function') {\n                        onThemeChange('light');\n                      }\n                    }}\n                    type={IconTypes.TOGGLE_ON}\n                    width={44}\n                    height={24}\n                  />\n                )\n                : (\n                  <Icon\n                    onClick={() => {\n                      changeTheme('dark');\n                      if (onThemeChange && typeof onThemeChange === 'function') {\n                        onThemeChange('dark');\n                      }\n                    }}\n                    type={IconTypes.TOGGLE_OFF}\n                    width={44}\n                    height={24}\n                  />\n                )\n            }\n          </div>\n        </section>\n      </form>\n    </Modal>\n  );\n}\n\nconst mapStoreToProps = (store) => {\n  return {\n    theme: store.config.theme,\n    changeTheme: store.config.setCurrenttheme,\n  };\n};\n\ninterface ConnectedEditUserProfileProps {\n  user: SendbirdTypes['User'];\n  onCancel(): void;\n  onSubmit(newFile: File, newNickname: string): void;\n  onThemeChange?(theme: string): void;\n}\n\nconst ConnectedEditUserProfile: (\n  props: ConnectedEditUserProfileProps\n) => React.Component = withSendbirdContext(EditUserProfile, mapStoreToProps);\n\nexport default ConnectedEditUserProfile;\n","import './add-channel.scss';\n\nimport React, { useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\nimport IconButton from '../../../ui/IconButton';\nimport Label, { LabelColors, LabelTypography } from '../../../ui/Label';\nimport Icon, { IconTypes, IconColors } from '../../../ui/Icon';\nimport InviteMembers from '../../InviteMembers';\n\nimport {\n  createChannel,\n  createDefaultUserListQuery,\n  isBroadcastChannelEnabled,\n  isSuperGroupChannelEnabled,\n} from './utils';\nimport { CREATE_CHANNEL } from '../dux/actionTypes';\nimport Modal from '../../../ui/Modal';\n\nexport default function AddChannel({\n  sdk,\n  disabled,\n  channelListDispatcher,\n  onBeforeCreateChannel,\n  userId,\n  userFilledApplicationUserListQuery,\n  userListQuery,\n}) {\n  const [showModal, setShowModal] = useState(false);\n  const [step, setStep] = useState(0);\n  const [type, setType] = useState('group');\n  const { stringSet } = useContext(LocalizationContext);\n\n  if (!sdk || !sdk.createApplicationUserListQuery) {\n    return null;\n  }\n\n  const isBroadcastAvailable = isBroadcastChannelEnabled(sdk);\n  const isSupergroupAvailable = isSuperGroupChannelEnabled(sdk);\n\n  return (\n    <>\n      <IconButton\n        height=\"32px\"\n        width=\"32px\"\n        onClick={() => {\n          setShowModal(true);\n        }}\n        disabled={disabled}\n      >\n        <Icon\n          type={IconTypes.CREATE}\n          fillColor={IconColors.PRIMARY}\n          width=\"24px\"\n          height=\"24px\"\n        />\n      </IconButton>\n      {\n        showModal && step === 0 && (\n          <Modal\n            titleText={stringSet.MODAL__CHOOSE_CHANNEL_TYPE__TITLE}\n            hideFooter\n            onCancel={() => { setShowModal(false); }}\n            onSubmit={() => { }}\n          >\n            <div className=\"sendbird-add-channel__rectangle-wrap\">\n              <div\n                className=\"sendbird-add-channel__rectangle\"\n                onClick={() => {\n                  setType('group');\n                  setStep(1);\n                }}\n                role=\"button\"\n                tabIndex={0}\n                onKeyDown={() => {\n                  setType('group');\n                  setStep(1);\n                }}\n              >\n                <Icon\n                  className=\"sendbird-add-channel__rectangle__chat-icon\"\n                  type={IconTypes.CHAT}\n                  fillColor={IconColors.PRIMARY}\n                  width=\"28px\"\n                  height=\"28px\"\n                />\n                <Label type={LabelTypography.SUBTITLE_1} color={LabelColors.ONBACKGROUND_1}>\n                  {stringSet.MODAL__CHOOSE_CHANNEL_TYPE__GROUP}\n                </Label>\n              </div>\n              {\n                isSupergroupAvailable && (\n                  <div\n                    className=\"sendbird-add-channel__rectangle\"\n                    onClick={() => {\n                      setType('supergroup');\n                      setStep(1);\n                    }}\n                    role=\"button\"\n                    tabIndex={0}\n                    onKeyDown={() => {\n                      setType('supergroup');\n                      setStep(1);\n                    }}\n                  >\n                    <Icon\n                      className=\"sendbird-add-channel__rectangle__supergroup-icon\"\n                      type={IconTypes.SUPERGROUP}\n                      fillColor={IconColors.PRIMARY}\n                      width=\"28px\"\n                      height=\"28px\"\n                    />\n                    <Label type={LabelTypography.SUBTITLE_1} color={LabelColors.ONBACKGROUND_1}>\n                      {stringSet.MODAL__CHOOSE_CHANNEL_TYPE__SUPER_GROUP}\n                    </Label>\n                  </div>\n                )\n              }\n              {\n                isBroadcastAvailable && (\n                  <div\n                    className=\"sendbird-add-channel__rectangle\"\n                    onClick={() => {\n                      setType('broadcast');\n                      setStep(1);\n                    }}\n                    role=\"button\"\n                    tabIndex={0}\n                    onKeyDown={() => {\n                      setType('broadcast');\n                      setStep(1);\n                    }}\n                  >\n                    <Icon\n                      className=\"sendbird-add-channel__rectangle__broadcast-icon\"\n                      type={IconTypes.BROADCAST}\n                      fillColor={IconColors.PRIMARY}\n                      width=\"28px\"\n                      height=\"28px\"\n                    />\n                    <Label type={LabelTypography.SUBTITLE_1} color={LabelColors.ONBACKGROUND_1}>\n                      {stringSet.MODAL__CHOOSE_CHANNEL_TYPE__BROADCAST}\n                    </Label>\n                  </div>\n                )\n              }\n            </div>\n          </Modal>\n        )\n      }\n      {\n        showModal && step === 1 && (\n          <InviteMembers\n            swapParams={\n              sdk && sdk.getErrorFirstCallback && sdk.getErrorFirstCallback()\n            }\n            titleText={stringSet.MODAL__CREATE_CHANNEL__TITLE}\n            submitText={stringSet.BUTTON__CREATE}\n            closeModal={() => {\n              setStep(0);\n              setShowModal(false);\n            }}\n            idsToFilter={[userId]}\n            userQueryCreator={() => ((userListQuery && typeof userListQuery === 'function')\n              ? userListQuery()\n              : createDefaultUserListQuery({ sdk, userFilledApplicationUserListQuery })\n            )}\n            onSubmit={(selectedUsers) => createChannel(\n              sdk,\n              selectedUsers,\n              onBeforeCreateChannel,\n              userId,\n              type,\n            ).then((channel) => {\n              // maybe - do this in event listener\n              channelListDispatcher({\n                type: CREATE_CHANNEL,\n                payload: channel,\n              });\n            })}\n          />\n        )\n      }\n    </>\n  );\n}\n\nAddChannel.propTypes = {\n  sdk: PropTypes.shape({\n    getErrorFirstCallback: PropTypes.func,\n    createApplicationUserListQuery: PropTypes.func,\n  }).isRequired,\n  disabled: PropTypes.bool,\n  channelListDispatcher: PropTypes.func.isRequired,\n  userFilledApplicationUserListQuery: PropTypes.shape({}),\n  onBeforeCreateChannel: PropTypes.func,\n  userId: PropTypes.string.isRequired,\n  userListQuery: PropTypes.func,\n};\n\nAddChannel.defaultProps = {\n  disabled: false,\n  userFilledApplicationUserListQuery: {},\n  onBeforeCreateChannel: null,\n  userListQuery: null,\n};\n","import React, {\n  useState,\n  useRef,\n  useContext,\n} from 'react';\nimport PropTypes from 'prop-types';\n\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\nimport ContextMenu, { MenuItem, MenuItems } from '../../../ui/ContextMenu';\nimport IconButton from '../../../ui/IconButton';\nimport Icon, { IconTypes, IconColors } from '../../../ui/Icon';\nimport LeaveChannelModal from '../../ChannelSettings/components/LeaveChannel';\n\nexport default function ChannelPreviewAction({ disabled, onLeaveChannel }) {\n  const parentRef = useRef(null);\n  const [showModal, setShowModal] = useState(false);\n  const { stringSet } = useContext(LocalizationContext);\n\n  return (\n    <div\n      role=\"button\"\n      style={{ display: 'inline-block' }}\n      onKeyDown={(e) => { e.stopPropagation(); }}\n      tabIndex={0}\n      onClick={(e) => { e.stopPropagation(); }}\n    >\n      <ContextMenu\n        menuTrigger={(toggleDropdown) => (\n          <IconButton\n            ref={parentRef}\n            onClick={toggleDropdown}\n            height=\"32px\"\n            width=\"32px\"\n          >\n            <Icon\n              type={IconTypes.MORE}\n              fillColor={IconColors.PRIMARY}\n              width=\"24px\"\n              height=\"24px\"\n            />\n          </IconButton>\n        )}\n        menuItems={(closeDropdown) => (\n          <MenuItems\n            parentRef={parentRef}\n            parentContainRef={parentRef}\n            closeDropdown={closeDropdown}\n          >\n            <MenuItem\n              onClick={() => {\n                if (disabled) { return; }\n                setShowModal(true);\n                closeDropdown();\n              }}\n            >\n              {stringSet.CHANNEL_SETTING__LEAVE_CHANNEL__TITLE}\n            </MenuItem>\n          </MenuItems>\n        )}\n      />\n      {\n        showModal && (\n          <LeaveChannelModal\n            onCloseModal={() => setShowModal(false)}\n            onLeaveChannel={onLeaveChannel}\n          />\n        )\n      }\n    </div>\n  );\n}\n\nChannelPreviewAction.propTypes = {\n  disabled: PropTypes.bool,\n  onLeaveChannel: PropTypes.func.isRequired,\n};\n\nChannelPreviewAction.defaultProps = {\n  disabled: false,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Placeholder from '../../../ui/PlaceHolder';\n\nexport default function ChannelsPlaceholder({\n  type,\n}) {\n  return (\n    <div className=\"sendbird-channel-list\">\n      <Placeholder type={type} />\n    </div>\n  );\n}\n\nChannelsPlaceholder.propTypes = {\n  type: PropTypes.string.isRequired,\n};\n","import * as channelActions from './dux/actionTypes';\nimport * as topics from '../../lib/pubSub/topics';\n\nconst DELIVERY_RECIPT = 'delivery_receipt';\nconst createEventHandler = ({\n  sdk,\n  sdkChannelHandlerId,\n  channelListDispatcher,\n  logger,\n}) => {\n  const ChannelHandler = new sdk.ChannelHandler();\n\n  ChannelHandler.onChannelChanged = (channel) => {\n    logger.info('ChannelList: onChannelChanged', channel);\n    channelListDispatcher({\n      type: channelActions.ON_CHANNEL_CHANGED,\n      payload: channel,\n    });\n  };\n  ChannelHandler.onChannelDeleted = (channelUrl) => {\n    logger.info('ChannelList: onChannelDeleted', channelUrl);\n    channelListDispatcher({\n      type: channelActions.ON_CHANNEL_DELETED,\n      payload: channelUrl,\n    });\n  };\n  ChannelHandler.onUserJoined = (channel) => {\n    logger.info('ChannelList: onUserJoined', channel);\n    if (channel.lastMessage) {\n      channelListDispatcher({\n        type: channelActions.ON_USER_JOINED,\n        payload: channel,\n      });\n    }\n  };\n  ChannelHandler.onUserBanned = (channel, user) => {\n    const { currentUser } = sdk;\n    logger.info('Channel | useHandleChannelEvents: onUserBanned', channel);\n    if (user.userId === currentUser.userId) {\n      channelListDispatcher({\n        type: channelActions.ON_USER_LEFT,\n        payload: {\n          channel,\n          isMe: true,\n        },\n      });\n    } else {\n      channelListDispatcher({\n        type: channelActions.ON_USER_LEFT,\n        payload: {\n          channel,\n          isMe: false,\n        },\n      });\n    }\n  };\n  ChannelHandler.onUserLeft = (channel, leftUser) => {\n    const { currentUser } = sdk;\n    const isMe = (currentUser.userId === leftUser.userId);\n    logger.info('ChannelList: onUserLeft', channel);\n    channelListDispatcher({\n      type: channelActions.ON_USER_LEFT,\n      payload: {\n        channel,\n        isMe,\n      },\n    });\n  };\n\n  ChannelHandler.onReadStatus = (channel) => {\n    logger.info('ChannelList: onReadStatus', channel);\n    channelListDispatcher({\n      type: channelActions.ON_READ_RECEIPT_UPDATED,\n      payload: channel,\n    });\n  };\n\n  ChannelHandler.onDeliveryReceiptUpdated = (channel) => {\n    logger.info('ChannelList: onDeliveryReceiptUpdated', channel);\n    if (channel.lastMessage) {\n      channelListDispatcher({\n        type: channelActions.ON_DELIVERY_RECEIPT_UPDATED,\n        payload: channel,\n      });\n    }\n  };\n\n  ChannelHandler.onMessageUpdated = (channel, message) => {\n    if (channel.lastMessage.isEqual(message)) {\n      logger.info('ChannelList: onMessageUpdated', channel);\n      channelListDispatcher({\n        type: channelActions.ON_LAST_MESSAGE_UPDATED,\n        payload: channel,\n      });\n    }\n  };\n\n  ChannelHandler.onChannelHidden = (channel) => {\n    logger.info('ChannelList: onChannelHidden', channel);\n    channelListDispatcher({\n      type: channelActions.ON_CHANNEL_ARCHIVED,\n      payload: channel,\n    });\n  };\n\n  ChannelHandler.onChannelFrozen = (channel) => {\n    logger.info('ChannelList: onChannelFrozen', channel);\n    channelListDispatcher({\n      type: channelActions.ON_CHANNEL_FROZEN,\n      payload: channel,\n    });\n  };\n\n  ChannelHandler.onChannelUnfrozen = (channel) => {\n    logger.info('ChannelList: onChannelUnfrozen', channel);\n    channelListDispatcher({\n      type: channelActions.ON_CHANNEL_UNFROZEN,\n      payload: channel,\n    });\n  };\n\n  logger.info('ChannelList: Added channelHandler');\n  sdk.addChannelHandler(sdkChannelHandlerId, ChannelHandler);\n};\n\nconst createChannelListQuery = ({ sdk, userFilledChannelListQuery = {} }) => {\n  const channelListQuery = sdk.GroupChannel.createMyGroupChannelListQuery();\n  channelListQuery.includeEmpty = false;\n  channelListQuery.order = 'latest_last_message'; // 'chronological', 'latest_last_message', 'channel_name_alphabetical', and 'metadata_value_alphabetical'\n  channelListQuery.limit = 20; // The value of pagination limit could be set up to 100.\n\n  if (userFilledChannelListQuery) {\n    Object.keys(userFilledChannelListQuery).forEach((key) => {\n      channelListQuery[key] = userFilledChannelListQuery[key];\n    });\n  }\n\n  return channelListQuery;\n};\n\n/**\n * Setup event listener\n * create channel source query\n * addloading screen\n */\nfunction setupChannelList({\n  sdk,\n  sdkChannelHandlerId,\n  channelListDispatcher,\n  setChannelSource,\n  onChannelSelect,\n  userFilledChannelListQuery,\n  logger,\n  sortChannelList,\n  disableAutoSelect,\n}) {\n  if (sdk && sdk.ChannelHandler) {\n    createEventHandler({\n      sdk,\n      channelListDispatcher,\n      sdkChannelHandlerId,\n      logger,\n    });\n  } else {\n    logger.console.warning('ChannelList - createEventHandler: sdk or sdk.ChannelHandler does not exist', sdk);\n  }\n\n  logger.info('ChannelList - creating query', { userFilledChannelListQuery });\n  const channelListQuery = createChannelListQuery({ sdk, userFilledChannelListQuery });\n  logger.info('ChannelList - created query', channelListQuery);\n\n  setChannelSource(channelListQuery);\n\n  channelListDispatcher({\n    type: channelActions.INIT_CHANNELS_START,\n  });\n\n  if (userFilledChannelListQuery) {\n    logger.info('ChannelList - setting up channelListQuery', channelListQuery);\n    channelListDispatcher({\n      type: channelActions.CHANNEL_LIST_PARAMS_UPDATED,\n      payload: {\n        channelListQuery,\n        currentUserId: sdk && sdk.currentUser && sdk.currentUser.userId,\n      },\n    });\n  }\n\n  logger.info('ChannelList - fetching channels');\n  if (channelListQuery.hasNext) {\n    channelListQuery.next((response, error) => {\n      const swapParams = sdk.getErrorFirstCallback();\n      let channelList = response;\n      let err = error;\n      if (swapParams) {\n        channelList = error;\n        err = response;\n      }\n      logger.info('ChannelList - fetched channels', channelList);\n      if (err) {\n        logger.error('ChannelList - couldnt fetch channels', err);\n        channelListDispatcher({\n          type: channelActions.INIT_CHANNELS_FAILURE,\n        });\n        return;\n      }\n      // select first channel\n      logger.info('ChannelList - highlight channel', channelList[0]);\n      let sorted = channelList;\n      if (sortChannelList && typeof sortChannelList === 'function') {\n        sorted = sortChannelList(channelList);\n        logger.info('ChannelList - channel list sorted', sorted);\n      }\n      if (!disableAutoSelect) {\n        onChannelSelect(sorted[0]);\n      }\n      channelListDispatcher({\n        type: channelActions.INIT_CHANNELS_SUCCESS,\n        payload: sorted,\n      });\n      const canSetMarkAsDelivered = sdk?.appInfo?.premiumFeatureList\n        ?.find((feature) => (feature === DELIVERY_RECIPT));\n      if (canSetMarkAsDelivered) {\n        logger.info('ChannelList: Marking all channels as read');\n        // eslint-disable-next-line no-unused-expressions\n        channelList?.forEach((channel, idx) => {\n          // Plan-based rate limits - minimum limit is 5 requests per second\n          setTimeout(() => {\n            // eslint-disable-next-line no-unused-expressions\n            channel?.markAsDelivered();\n          }, 500 * idx);\n        });\n      }\n    });\n  } else {\n    logger.warning('ChannelList - there are no more channels');\n  }\n}\n\nexport const pubSubHandleRemover = (subscriber) => {\n  subscriber.forEach((s) => {\n    try {\n      s.remove();\n    } catch {\n      //\n    }\n  });\n};\n\nexport const pubSubHandler = (pubSub, channelListDispatcher) => {\n  const subScriber = new Map();\n  if (!pubSub) return subScriber;\n  subScriber.set(topics.CREATE_CHANNEL, pubSub.subscribe(topics.CREATE_CHANNEL, (msg) => {\n    const { channel } = msg;\n    channelListDispatcher({\n      type: 'CREATE_CHANNEL',\n      payload: channel,\n    });\n  }));\n\n  subScriber.set(topics.UPDATE_USER_MESSAGE, pubSub.subscribe(topics.UPDATE_USER_MESSAGE, (msg) => {\n    const { channel, message } = msg;\n    const updatedChannel = channel;\n    if (updatedChannel?.lastMessage?.messageId === message.messageId) {\n      updatedChannel.lastMessage = message;\n    }\n    if (channel) {\n      channelListDispatcher({\n        type: channelActions.ON_LAST_MESSAGE_UPDATED,\n        payload: updatedChannel,\n      });\n    }\n  }));\n\n  subScriber.set(topics.LEAVE_CHANNEL, pubSub.subscribe(topics.LEAVE_CHANNEL, (msg) => {\n    const { channel } = msg;\n    channelListDispatcher({\n      type: channelActions.LEAVE_CHANNEL_SUCCESS,\n      payload: channel.url,\n    });\n  }));\n\n  subScriber.set(topics.SEND_MESSAGE_START, pubSub.subscribe(topics.SEND_MESSAGE_START, (msg) => {\n    const { channel } = msg;\n    channelListDispatcher({\n      type: channelActions.CHANNEL_REPLACED_TO_TOP,\n      payload: channel,\n    });\n  }));\n\n  return subScriber;\n};\n\nexport default setupChannelList;\n","import React, { useEffect, useState, useReducer } from 'react';\nimport PropTypes from 'prop-types';\n\nimport withSendbirdContext from '../../lib/SendbirdSdkContext';\nimport * as userActions from '../../lib/dux/user/actionTypes';\nimport { UserProfileProvider } from '../../lib/UserProfileContext';\n\nimport * as channelListActions from './dux/actionTypes';\nimport channelListInitialState from './dux/initialState';\nimport channelListReducers from './dux/reducers';\n\nimport ChannelPreview from '../../ui/ChannelPreview';\nimport ChannelHeader from '../../ui/ChannelHeader';\nimport EditUserProfile from '../../ui/EditUserProfile';\nimport PlaceholderTypes from '../../ui/PlaceHolder/type';\n\nimport AddChannel from './components/AddChannel';\nimport ChannelPreviewAction from './components/ChannelPreviewAction';\nimport PlaceHolder from './components/Placeholder';\n\nimport setupChannelList, {\n  pubSubHandler,\n  pubSubHandleRemover,\n} from './utils';\nimport { uuidv4 } from '../../utils/uuid';\n\nimport './index.scss';\n\nconst noop = () => { };\nconst DELIVERY_RECIPT = 'delivery_receipt';\n\nfunction ChannelList(props) {\n  const {\n    stores: { sdkStore = {}, userStore = {} },\n    config: {\n      userId,\n      isOnline,\n      userListQuery,\n      logger,\n      pubSub,\n      theme,\n    },\n    dispatchers: {\n      userDispatcher,\n    },\n    queries = {},\n    renderChannelPreview,\n    renderHeader,\n    renderUserProfile,\n    disableUserProfile,\n    allowProfileEdit,\n    sortChannelList,\n    onProfileEditSuccess,\n    onThemeChange,\n    onBeforeCreateChannel,\n    onChannelSelect,\n    disableAutoSelect,\n  } = props;\n  const { config = {} } = props;\n  // enable if it is true atleast once(both are flase by default)\n  const enableEditProfile = allowProfileEdit || config.allowProfileEdit;\n  const userDefinedDisableUserProfile = disableUserProfile || config.disableUserProfile;\n  const userDefinedRenderProfile = renderUserProfile || config.renderUserProfile;\n  const { sdk = {} } = sdkStore;\n  const userFilledChannelListQuery = queries.channelListQuery;\n  const userFilledApplicationUserListQuery = queries.applicationUserListQuery;\n\n  const sdkError = sdkStore.error;\n  const sdkIntialized = sdkStore.initialized;\n\n  const [channelListStore, channelListDispatcher] = useReducer(\n    channelListReducers,\n    channelListInitialState,\n  );\n  const [user, setUser] = useState({});\n  const [channelSource, setChannelSource] = useState({});\n  const [showProfileEdit, setShowProfileEdit] = useState(false);\n  const [sdkChannelHandlerId, setSdkChannelHandlerId] = useState(null);\n\n  const { loading, currentChannel } = channelListStore;\n\n  useEffect(() => {\n    setUser(userStore.user);\n  }, [userStore.user]);\n\n  useEffect(() => {\n    const subscriber = pubSubHandler(pubSub, channelListDispatcher);\n    return () => {\n      pubSubHandleRemover(subscriber);\n    };\n  }, [sdkIntialized]);\n\n  useEffect(() => {\n    setSdkChannelHandlerId(uuidv4);\n    if (sdkIntialized) {\n      logger.info('ChannelList: Setup channelHandlers');\n      setupChannelList({\n        sdk,\n        sdkChannelHandlerId,\n        channelListDispatcher,\n        setChannelSource,\n        onChannelSelect,\n        userFilledChannelListQuery,\n        logger,\n        sortChannelList,\n        disableAutoSelect,\n      });\n    } else {\n      logger.info('ChannelList: Removing channelHandlers');\n      // remove previous channelHandlers\n      if (sdk && sdk.removeChannelHandler) {\n        sdk.removeChannelHandler(sdkChannelHandlerId);\n      }\n      // remove channelSource\n      setChannelSource({});\n      // cleanup\n      channelListDispatcher({\n        type: channelListActions.RESET_CHANNEL_LIST,\n      });\n    }\n    return () => {\n      logger.info('ChannelList: Removing channelHandlers');\n      if (sdk && sdk.removeChannelHandler) {\n        sdk.removeChannelHandler(sdkChannelHandlerId);\n      }\n    };\n  }, [sdkIntialized, userFilledChannelListQuery, sortChannelList]);\n\n  const { allChannels } = channelListStore;\n  const sortedChannels = (sortChannelList && typeof sortChannelList === 'function')\n    ? sortChannelList(allChannels)\n    : allChannels;\n\n  if (sortedChannels.length !== allChannels.length) {\n    const warning = `ChannelList: You have removed/added extra channels on sortChannelList\n      this could cause unexpected problems`;\n    // eslint-disable-next-line no-console\n    console.warn(warning, { before: allChannels, after: sortedChannels });\n    logger.warning(warning, { before: allChannels, after: sortedChannels });\n  }\n\n  useEffect(() => {\n    channelListDispatcher({\n      type: channelListActions.SET_AUTO_SELECT_CHANNEL_ITEM,\n      payload: disableAutoSelect,\n    });\n  }, [disableAutoSelect]);\n\n  useEffect(() => {\n    if (!sdk || !sdk.GroupChannel || !currentChannel) { return; }\n    sdk.GroupChannel.getChannel(currentChannel, (groupChannel) => {\n      if (groupChannel) {\n        onChannelSelect(groupChannel);\n      } else {\n        onChannelSelect(null);\n      }\n    });\n  }, [currentChannel]);\n\n  return (\n    <UserProfileProvider\n      className=\"sendbird-channel-list\"\n      disableUserProfile={userDefinedDisableUserProfile}\n      renderUserProfile={userDefinedRenderProfile}\n    >\n      <div className=\"sendbird-channel-list__header\">\n        <ChannelHeader\n          renderHeader={renderHeader}\n          user={user}\n          onEdit={() => {\n            if (enableEditProfile) {\n              setShowProfileEdit(true);\n            }\n          }}\n          allowProfileEdit={enableEditProfile}\n          iconButton={(\n            <AddChannel\n              disabled={!isOnline}\n              userListQuery={userListQuery}\n              sdk={sdk}\n              channelListDispatcher={channelListDispatcher}\n              userId={userId}\n              userFilledApplicationUserListQuery={userFilledApplicationUserListQuery}\n              onBeforeCreateChannel={onBeforeCreateChannel}\n            />\n          )}\n        />\n      </div>\n      {\n        showProfileEdit && (\n          <EditUserProfile\n            onThemeChange={onThemeChange}\n            user={user}\n            onCancel={() => { setShowProfileEdit(false); }}\n            onSubmit={(newName, newFile) => {\n              sdk.updateCurrentUserInfoWithProfileImage(newName, newFile, (updatedUser) => {\n                userDispatcher({ type: userActions.UPDATE_USER_INFO, payload: updatedUser });\n                if (onProfileEditSuccess && typeof onProfileEditSuccess === 'function') {\n                  onProfileEditSuccess(updatedUser);\n                }\n              });\n            }}\n          />\n        )\n      }\n      <div\n        className=\"sendbird-channel-list__body\"\n        onScroll={(e) => {\n          const fetchMore = e.target.clientHeight + e.target.scrollTop === e.target.scrollHeight;\n          if (fetchMore && channelSource.hasNext) {\n            logger.info('ChannelList: Fetching more channels');\n            channelListDispatcher({\n              type: channelListActions.FETCH_CHANNELS_START,\n            });\n            channelSource.next((response, error) => {\n              const swapParams = sdk.getErrorFirstCallback();\n              let channelList = response;\n              let err = error;\n              if (swapParams) {\n                channelList = error;\n                err = response;\n              }\n              if (err) {\n                logger.info('ChannelList: Fetching channels failed', err);\n                channelListDispatcher({\n                  type: channelListActions.FETCH_CHANNELS_FAILURE,\n                  payload: channelList,\n                });\n                return;\n              }\n              logger.info('ChannelList: Fetching channels successful', channelList);\n              channelListDispatcher({\n                type: channelListActions.FETCH_CHANNELS_SUCCESS,\n                payload: channelList,\n              });\n\n              const canSetMarkAsDelivered = sdk?.appInfo?.premiumFeatureList\n                ?.find((feature) => (feature === DELIVERY_RECIPT));\n\n              if (canSetMarkAsDelivered) {\n                logger.info('ChannelList: Marking all channels as read');\n                // eslint-disable-next-line no-unused-expressions\n                channelList?.forEach((channel, idx) => {\n                  // Plan-based rate limits - minimum limit is 5 requests per second\n                  setTimeout(() => {\n                    // eslint-disable-next-line no-unused-expressions\n                    channel?.markAsDelivered();\n                  }, 500 * idx);\n                });\n              }\n            });\n          }\n        }}\n      >\n        {\n          (sdkError) && (\n            <PlaceHolder type={PlaceholderTypes.WRONG} />\n          )\n        }\n        {/*\n          To do: Implement windowing\n          Implement windowing if you are dealing with large number of messages/channels\n          https://github.com/bvaughn/react-window -> recommendation\n          We hesitate to bring one more dependency to our library,\n          we are planning to implement it inside the library\n        */}\n        <div>\n          {\n            sortedChannels && sortedChannels.map((channel, idx) => {\n              const onLeaveChannel = (c, cb) => {\n                logger.info('ChannelList: Leaving channel', c);\n                c.leave()\n                  .then((res) => {\n                    logger.info('ChannelList: Leaving channel success', res);\n                    if (cb && typeof cb === 'function') {\n                      cb(res, null);\n                    }\n                    channelListDispatcher({\n                      type: channelListActions.LEAVE_CHANNEL_SUCCESS,\n                      payload: channel.url,\n                    });\n                  })\n                  .catch((err) => {\n                    logger.error('ChannelList: Leaving channel failed', err);\n                    if (cb && typeof cb === 'function') {\n                      cb(null, err);\n                    }\n                  });\n              };\n\n              const onClick = () => {\n                if (!isOnline) { return; }\n                logger.info('ChannelList: Clicked on channel:', channel);\n                channelListDispatcher({\n                  type: channelListActions.SET_CURRENT_CHANNEL,\n                  payload: channel.url,\n                });\n              };\n\n              return (\n                (renderChannelPreview)\n                  ? (\n                    // eslint-disable-next-line\n                    <div key={channel.url} onClick={onClick}>\n                      {renderChannelPreview({ channel, onLeaveChannel })}\n                    </div>\n                  )\n                  : (\n                    <ChannelPreview\n                      key={channel.url}\n                      tabIndex={idx}\n                      onClick={onClick}\n                      channel={channel}\n                      currentUser={user}\n                      theme={theme}\n                      isActive={channel.url === currentChannel}\n                      // todo - potential performance hit refactor\n                      ChannelAction={(\n                        <ChannelPreviewAction\n                          disabled={!isOnline}\n                          onLeaveChannel={() => onLeaveChannel(channel)}\n                        />\n                      )}\n                    />\n                  )\n              );\n            })\n          }\n        </div>\n        {\n          (!sdkIntialized || loading) && (\n            <PlaceHolder type={PlaceholderTypes.LOADING} />\n          )\n        }\n        {\n          //  placeholder\n          (!allChannels || allChannels.length === 0) && (\n            <PlaceHolder type={PlaceholderTypes.NO_CHANNELS} />\n          )\n        }\n      </div>\n    </UserProfileProvider>\n  );\n}\n\nChannelList.propTypes = {\n  stores: PropTypes.shape({\n    sdkStore: PropTypes.shape({\n      initialized: PropTypes.bool,\n    }),\n    userStore: PropTypes.shape({\n      user: PropTypes.shape({}),\n    }),\n  }).isRequired,\n  dispatchers: PropTypes.shape({\n    userDispatcher: PropTypes.func,\n  }).isRequired,\n  config: PropTypes.shape({\n    userId: PropTypes.string.isRequired,\n    userListQuery: PropTypes.func,\n    theme: PropTypes.string,\n    isOnline: PropTypes.bool,\n    logger: PropTypes.shape({\n      info: PropTypes.func,\n      error: PropTypes.func,\n      warning: PropTypes.func,\n    }),\n    pubSub: PropTypes.shape({\n      subscribe: PropTypes.func,\n      publish: PropTypes.func,\n    }),\n  }).isRequired,\n  queries: PropTypes.shape({\n    channelListQuery: PropTypes.shape({\n      channelNameContainsFilter: PropTypes.string,\n      channelUrlsFilter: PropTypes.arrayOf(PropTypes.string),\n      customTypesFilter: PropTypes.arrayOf(PropTypes.string),\n      customTypeStartsWithFilter: PropTypes.string,\n      hiddenChannelFilter: PropTypes.string,\n      includeEmpty: PropTypes.bool,\n      limit: PropTypes.number,\n      memberStateFilter: PropTypes.string,\n      metadataOrderKeyFilter: PropTypes.string,\n      nicknameContainsFilter: PropTypes.string,\n      order: PropTypes.string,\n      publicChannelFilter: PropTypes.string,\n      superChannelFilter: PropTypes.string,\n      unreadChannelFilter: PropTypes.string,\n      userIdsExactFilter: PropTypes.arrayOf(PropTypes.string),\n      userIdsIncludeFilter: PropTypes.arrayOf(PropTypes.string),\n      userIdsIncludeFilterQueryType: PropTypes.string,\n    }),\n    applicationUserListQuery: PropTypes.shape({\n      limit: PropTypes.number,\n      userIdsFilter: PropTypes.arrayOf(PropTypes.string),\n      metaDataKeyFilter: PropTypes.string,\n      metaDataValuesFilter: PropTypes.arrayOf(PropTypes.string),\n    }),\n  }),\n  onBeforeCreateChannel: PropTypes.func,\n  renderChannelPreview: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.func,\n  ]),\n  disableUserProfile: PropTypes.bool,\n  renderUserProfile: PropTypes.func,\n  allowProfileEdit: PropTypes.bool,\n  sortChannelList: PropTypes.func,\n  onThemeChange: PropTypes.func,\n  onProfileEditSuccess: PropTypes.func,\n  renderHeader: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.func,\n  ]),\n  onChannelSelect: PropTypes.func,\n  disableAutoSelect: PropTypes.bool,\n};\n\nChannelList.defaultProps = {\n  onBeforeCreateChannel: null,\n  renderChannelPreview: null,\n  renderHeader: null,\n  disableUserProfile: false,\n  renderUserProfile: null,\n  allowProfileEdit: false,\n  onThemeChange: null,\n  sortChannelList: null,\n  onProfileEditSuccess: null,\n  queries: {},\n  onChannelSelect: noop,\n  disableAutoSelect: false,\n};\n\nexport default withSendbirdContext(ChannelList);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}