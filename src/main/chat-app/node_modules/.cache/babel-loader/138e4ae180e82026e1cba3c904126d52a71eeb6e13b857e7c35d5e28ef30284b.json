{"ast":null,"code":"import React__default, { useContext, useMemo, useRef, useState, useEffect } from 'react';\nimport { M as Modal, T as Type, a as TextButton, B as Button, d as ButtonTypes, e as ButtonSizes, U as UserProfileContext, C as ContextMenu, b as MenuItems, f as ConnectedUserProfile, s as selectors, h as UserProfileProvider } from './index-58bb39c7.js';\nimport { c as LocalizationContext, d as __spreadArray, w as withSendbirdContext } from './LocalizationContext-f9cc3a84.js';\nimport { n as copyToClipboard } from './index-49fe86ba.js';\nimport { A as Avatar, L as Label, a as LabelTypography, b as LabelColors, I as Icon, c as IconTypes, d as IconColors, P as PlaceHolder, f as PlaceHolderTypes } from './index-48f41226.js';\nimport { g as getOpenChannelAvatar } from './utils-0e572de6.js';\nimport { I as InputLabel, a as Input, n as noop, U as UserListItem$1 } from './index-ccb0a3c2.js';\nimport { a as Accordion, A as AccordionGroup } from './index-fc337826.js';\nimport 'prop-types';\nimport 'react-dom';\nfunction ChannelAvatar(_a) {\n  var channel = _a.channel,\n    theme = _a.theme,\n    _b = _a.height,\n    height = _b === void 0 ? 56 : _b,\n    _c = _a.width,\n    width = _c === void 0 ? 56 : _c;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  var memoizedAvatar = useMemo(function () {\n    return /*#__PURE__*/React__default.createElement(Avatar, {\n      className: \"sendbird-chat-header__avatar--open-channel\",\n      src: getOpenChannelAvatar(channel),\n      width: width + \"px\",\n      height: height + \"px\",\n      alt: channel.name || stringSet.OPEN_CHANNEL_SETTINGS__NO_TITLE\n    });\n  }, [channel.coverUrl, theme]);\n  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, memoizedAvatar);\n}\nvar EditDetails = function EditDetails(props) {\n  var _onSubmit = props.onSubmit,\n    onCancel = props.onCancel,\n    channel = props.channel,\n    theme = props.theme;\n  var inputRef = useRef(null);\n  var formRef = useRef(null);\n  var hiddenInputRef = useRef(null);\n  var _a = useState(null),\n    currentImg = _a[0],\n    setCurrentImg = _a[1];\n  var _b = useState(null),\n    newFile = _b[0],\n    setNewFile = _b[1];\n  var stringSet = useContext(LocalizationContext).stringSet;\n  var title = channel.name;\n  return /*#__PURE__*/React__default.createElement(Modal, {\n    titleText: stringSet.MODAL__CHANNEL_INFORMATION__TITLE,\n    submitText: stringSet.BUTTON__SAVE,\n    onCancel: onCancel,\n    onSubmit: function onSubmit() {\n      if (title !== '' && !inputRef.current.value) {\n        if (formRef.current.reportValidity) {\n          // might not work in explorer\n          formRef.current.reportValidity();\n        }\n        return;\n      }\n      _onSubmit(newFile, inputRef.current.value);\n      onCancel();\n    },\n    type: Type.PRIMARY\n  }, /*#__PURE__*/React__default.createElement(\"form\", {\n    className: \"channel-profile-form\",\n    ref: formRef,\n    onSubmit: function onSubmit(e) {\n      e.preventDefault();\n    }\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"channel-profile-form__img-section\"\n  }, /*#__PURE__*/React__default.createElement(InputLabel, null, stringSet.MODAL__CHANNEL_INFORMATION__CHANNEL_IMAGE), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"channel-profile-form__avatar\"\n  }, currentImg ? /*#__PURE__*/React__default.createElement(Avatar, {\n    height: \"80px\",\n    width: \"80px\",\n    src: currentImg\n  }) : /*#__PURE__*/React__default.createElement(ChannelAvatar, {\n    height: 80,\n    width: 80,\n    channel: channel,\n    theme: theme\n  })), /*#__PURE__*/React__default.createElement(\"input\", {\n    ref: hiddenInputRef,\n    type: \"file\",\n    accept: \"image/gif, image/jpeg, image/png\",\n    style: {\n      display: 'none'\n    },\n    onChange: function onChange(e) {\n      setCurrentImg(URL.createObjectURL(e.target.files[0]));\n      setNewFile(e.target.files[0]);\n      hiddenInputRef.current.value = '';\n    }\n  }), /*#__PURE__*/React__default.createElement(TextButton, {\n    className: \"channel-profile-form__avatar-button\",\n    onClick: function onClick() {\n      return hiddenInputRef.current.click();\n    },\n    notUnderline: true\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.BUTTON_1,\n    color: LabelColors.PRIMARY\n  }, stringSet.MODAL__CHANNEL_INFORMATION__UPLOAD))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"channel-profile-form__name-section\"\n  }, /*#__PURE__*/React__default.createElement(InputLabel, null, stringSet.MODAL__CHANNEL_INFORMATION__CHANNEL_NAME), /*#__PURE__*/React__default.createElement(Input, {\n    required: title !== '',\n    name: \"channel-profile-form__name\",\n    ref: inputRef,\n    value: title,\n    placeHolder: stringSet.MODAL__CHANNEL_INFORMATION__INPUT__PLACE_HOLDER\n  }))));\n};\nfunction ChannelProfile(props) {\n  var disabled = props.disabled,\n    channel = props.channel,\n    theme = props.theme,\n    onChannelInfoChange = props.onChannelInfoChange;\n  var title = channel.name;\n  var _a = useState(false),\n    showModal = _a[0],\n    setShowModal = _a[1];\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-profile\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-profile--inner\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-profile__avatar\"\n  }, /*#__PURE__*/React__default.createElement(ChannelAvatar, {\n    channel: channel,\n    theme: theme,\n    height: 80,\n    width: 80\n  })), /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_1,\n    className: \"sendbird-openchannel-profile__title\"\n  }, title || stringSet.OPEN_CHANNEL_SETTINGS__NO_TITLE), /*#__PURE__*/React__default.createElement(TextButton, {\n    disabled: disabled,\n    className: \"sendbird-openchannel-profile__edit\",\n    onClick: function onClick() {\n      if (disabled) {\n        return;\n      }\n      setShowModal(true);\n    },\n    notUnderline: true\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.BUTTON_1,\n    color: disabled ? LabelColors.ONBACKGROUND_2 : LabelColors.PRIMARY\n  }, stringSet.CHANNEL_SETTING__PROFILE__EDIT)), showModal && /*#__PURE__*/React__default.createElement(EditDetails, {\n    onCancel: function onCancel() {\n      return setShowModal(false);\n    },\n    onSubmit: onChannelInfoChange,\n    channel: channel,\n    theme: theme\n  })));\n}\nfunction ParticipantsModal(_a) {\n  var hideModal = _a.hideModal,\n    channel = _a.channel;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  var _b = useState([]),\n    participants = _b[0],\n    setParticipants = _b[1];\n  var _c = useState(null),\n    participantListQuery = _c[0],\n    setParticipantListQuery = _c[1];\n  useEffect(function () {\n    if (!channel || !channel.createParticipantListQuery) {\n      return;\n    }\n    var participantListQuery = channel.createParticipantListQuery();\n    setParticipantListQuery(participantListQuery);\n    participantListQuery.next(function (participantList, error) {\n      if (error) {\n        return;\n      }\n      setParticipants(participantList);\n    });\n  }, []);\n  return /*#__PURE__*/React__default.createElement(\"div\", null, /*#__PURE__*/React__default.createElement(Modal, {\n    hideFooter: true,\n    onCancel: function onCancel() {\n      return hideModal();\n    },\n    onSubmit: noop,\n    titleText: stringSet.OPEN_CHANNEL_SETTINGS__ALL_PARTICIPANTS_TITLE\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-more-members__popup-scroll\",\n    onScroll: function onScroll(e) {\n      var hasNext = participantListQuery.hasNext;\n      var target = e.target;\n      var fetchMore = target.clientHeight + target.scrollTop === target.scrollHeight;\n      if (hasNext && fetchMore) {\n        participantListQuery.next(function (fetchedParticipants, error) {\n          if (error) {\n            return;\n          }\n          setParticipants(__spreadArray(__spreadArray([], participants, true), fetchedParticipants, true));\n        });\n      }\n    }\n  }, participants.map(function (p) {\n    return /*#__PURE__*/React__default.createElement(UserListItem$1, {\n      user: p,\n      key: p.userId\n    });\n  }))));\n}\nvar SHOWN_MEMBER_MAX = 10;\nvar UserListItem = function UserListItem(_a) {\n  var member = _a.member,\n    _b = _a.currentUser,\n    currentUser = _b === void 0 ? '' : _b;\n  var avatarRef = useRef(null);\n  var _c = useContext(UserProfileContext),\n    disableUserProfile = _c.disableUserProfile,\n    renderUserProfile = _c.renderUserProfile;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-participants-accordion__member\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-participants-accordion__member-avatar\"\n  }, /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return /*#__PURE__*/React__default.createElement(Avatar, {\n        onClick: function onClick() {\n          if (!disableUserProfile) {\n            toggleDropdown();\n          }\n        },\n        ref: avatarRef,\n        src: member.profileUrl,\n        width: 24,\n        height: 24\n      });\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        openLeft: true,\n        parentRef: avatarRef // for catching location(x, y) of MenuItems\n        ,\n\n        parentContainRef: avatarRef // for toggling more options(menus & reactions)\n        ,\n\n        closeDropdown: closeDropdown,\n        style: {\n          paddingTop: 0,\n          paddingBottom: 0\n        }\n      }, renderUserProfile ? renderUserProfile({\n        user: member,\n        currentUserId: currentUser,\n        close: closeDropdown\n      }) : /*#__PURE__*/React__default.createElement(ConnectedUserProfile, {\n        disableMessaging: true,\n        user: member,\n        currentUserId: currentUser,\n        onSuccess: closeDropdown\n      }));\n    }\n  })), /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, member.nickname || stringSet.NO_NAME, currentUser === member.userId && stringSet.CHANNEL_SETTING__MEMBERS__YOU));\n};\nfunction ParticipantsAccordion(_a) {\n  var channel = _a.channel,\n    currentUser = _a.currentUser;\n  var _b = useState([]),\n    participants = _b[0],\n    setParticipants = _b[1];\n  var _c = useState(false),\n    showMoreModal = _c[0],\n    setShowMoreModal = _c[1];\n  var stringSet = useContext(LocalizationContext).stringSet;\n  useEffect(function () {\n    if (!channel || !channel.createParticipantListQuery) {\n      return;\n    }\n    var participantListQuery = channel.createParticipantListQuery();\n    participantListQuery.next(function (participantList, error) {\n      if (error) {\n        return;\n      }\n      setParticipants(participantList);\n    });\n  }, [channel]);\n  return /*#__PURE__*/React__default.createElement(Accordion, {\n    className: \"sendbird-participants-accordion\",\n    id: \"participants\",\n    renderTitle: function renderTitle() {\n      return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(Icon, {\n        type: IconTypes.MEMBERS,\n        fillColor: IconColors.PRIMARY,\n        width: 24,\n        height: 24,\n        className: \"sendbird-openchannel-settings__accordion-icon\"\n      }), /*#__PURE__*/React__default.createElement(Label, {\n        type: LabelTypography.SUBTITLE_1,\n        color: LabelColors.ONBACKGROUND_1\n      }, stringSet.OPEN_CHANNEL_SETTINGS__PARTICIPANTS_ACCORDION_TITLE));\n    },\n    renderContent: function renderContent() {\n      return /*#__PURE__*/React__default.createElement(\"div\", {\n        className: \"\"\n      }, /*#__PURE__*/React__default.createElement(\"div\", {\n        className: \"sendbird-participants-accordion__list\"\n      }, participants.slice(0, SHOWN_MEMBER_MAX).map(function (p) {\n        return /*#__PURE__*/React__default.createElement(UserListItem, {\n          member: p,\n          currentUser: currentUser,\n          key: p.userId\n        });\n      }), participants && participants.length === 0 ? /*#__PURE__*/React__default.createElement(Label, {\n        className: \"sendbird-channel-settings__empty-list\",\n        type: LabelTypography.SUBTITLE_2,\n        color: LabelColors.ONBACKGROUND_3\n      }, stringSet.OPEN_CHANNEL_SETTINGS__EMPTY_LIST) : null), participants.length >= SHOWN_MEMBER_MAX && /*#__PURE__*/React__default.createElement(\"div\", {\n        className: \"sendbird-participants-accordion__footer\"\n      }, /*#__PURE__*/React__default.createElement(Button, {\n        className: \"sendbird-participants-accordion__footer__all-participants\",\n        type: ButtonTypes.SECONDARY,\n        size: ButtonSizes.SMALL,\n        onClick: function onClick() {\n          return setShowMoreModal(true);\n        }\n      }, stringSet.OPEN_CHANNEL_SETTINGS__SEE_ALL), showMoreModal && /*#__PURE__*/React__default.createElement(ParticipantsModal, {\n        currentUser: currentUser,\n        hideModal: function hideModal() {\n          setShowMoreModal(false);\n        },\n        channel: channel\n      })));\n    }\n  });\n}\nfunction DeleteChannel(_a) {\n  var isOnline = _a.isOnline,\n    onDeleteChannel = _a.onDeleteChannel;\n  var _b = useState(false),\n    showDeleteChannelModal = _b[0],\n    setShowDeleteChannelModal = _b[1];\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings__panel-item\\n          sendbird-openchannel-settings__delete-channel\\n            \" + (!isOnline ? 'sendbird-openchannel-settings__panel-item__disabled' : ''),\n    role: \"button\",\n    tabIndex: 0,\n    onKeyDown: function onKeyDown() {\n      if (!isOnline) {\n        return;\n      }\n      setShowDeleteChannelModal(true);\n    },\n    onClick: function onClick() {\n      if (!isOnline) {\n        return;\n      }\n      setShowDeleteChannelModal(true);\n    }\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.DELETE,\n    className: ['sendbird-openchannel-settings__panel-icon-left', 'sendbird-openchannel-settings__panel-icon__delete'].join(' '),\n    height: \"24px\",\n    width: \"24px\"\n  }), /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_PANEL)), showDeleteChannelModal && /*#__PURE__*/React__default.createElement(Modal, {\n    onCancel: function onCancel() {\n      setShowDeleteChannelModal(false);\n    },\n    onSubmit: function onSubmit() {\n      onDeleteChannel();\n    },\n    submitText: stringSet.OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_SUBMIT,\n    titleText: stringSet.OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_TITLE\n  }));\n}\nfunction ParticipantsList(_a) {\n  var channel = _a.channel,\n    onCloseClick = _a.onCloseClick,\n    currentUser = _a.currentUser;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  var _b = useState([]),\n    participants = _b[0],\n    setParticipants = _b[1];\n  var _c = useState(null),\n    participantListQuery = _c[0],\n    setParticipantListQuery = _c[1];\n  useEffect(function () {\n    if (!channel || !channel.createParticipantListQuery) {\n      return;\n    }\n    var participantListQuery = channel.createParticipantListQuery();\n    setParticipantListQuery(participantListQuery);\n    participantListQuery.next(function (participantList, error) {\n      if (error) {\n        return;\n      }\n      setParticipants(participantList);\n    });\n  }, [channel]);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings__participant\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings__header\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.H_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.OPEN_CHANNEL_SETTINGS__PARTICIPANTS_TITLE), /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.CLOSE,\n    className: \"sendbird-openchannel-settings__close-icon\",\n    height: \"24px\",\n    width: \"24px\",\n    onClick: function onClick() {\n      onCloseClick();\n    }\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings__participants-list\",\n    onScroll: function onScroll(e) {\n      var hasNext = participantListQuery.hasNext;\n      var target = e.target;\n      var fetchMore = target.clientHeight + target.scrollTop === target.scrollHeight;\n      if (hasNext && fetchMore) {\n        participantListQuery.next(function (fetchedParticipants, error) {\n          if (error) {\n            return;\n          }\n          setParticipants(__spreadArray(__spreadArray([], participants, true), fetchedParticipants, true));\n        });\n      }\n    }\n  }, /*#__PURE__*/React__default.createElement(\"div\", null, participants.map(function (p) {\n    return /*#__PURE__*/React__default.createElement(UserListItem, {\n      member: p,\n      currentUser: currentUser,\n      key: p.userId\n    });\n  }), participants && participants.length === 0 ? /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-channel-settings__empty-list\",\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_3\n  }, stringSet.OPEN_CHANNEL_SETTINGS__EMPTY_LIST) : null)));\n}\nfunction InvalidChannel(_a) {\n  var onCloseClick = _a.onCloseClick;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings__header\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.H_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.CHANNEL_SETTING__HEADER__TITLE), /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.CLOSE,\n    className: \"sendbird-openchannel-settings__close-icon\",\n    height: \"24px\",\n    width: \"24px\",\n    onClick: function onClick() {\n      onCloseClick();\n    }\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings__placeholder\"\n  }, /*#__PURE__*/React__default.createElement(PlaceHolder, {\n    type: PlaceHolderTypes.WRONG\n  })));\n}\nvar emptyLogger = function emptyLogger() {\n  return {\n    info: noop,\n    error: noop,\n    warning: noop\n  };\n};\nfunction OpenChannelSettings(props) {\n  var channelUrl = props.channelUrl,\n    _a = props.onCloseClick,\n    _onCloseClick = _a === void 0 ? noop : _a,\n    onBeforeUpdateChannel = props.onBeforeUpdateChannel,\n    _b = props.onChannelModified,\n    onChannelModified = _b === void 0 ? noop : _b,\n    renderChannelProfile = props.renderChannelProfile,\n    renderUserProfile = props.renderUserProfile,\n    _onDeleteChannel = props.onDeleteChannel,\n    _c = props.disableUserProfile,\n    disableUserProfile = _c === void 0 ? false : _c,\n    _d = props.logger,\n    logger = _d === void 0 ? emptyLogger() : _d,\n    sdk = props.sdk,\n    theme = props.theme,\n    user = props.user,\n    isOnline = props.isOnline;\n  var currentUser = user.userId;\n  var _e = useState(null),\n    channel = _e[0],\n    setChannel = _e[1];\n  var stringSet = useContext(LocalizationContext).stringSet;\n  useEffect(function () {\n    if (!channelUrl || !sdk || !sdk.getConnectionState) {\n      setChannel(null);\n      return;\n    }\n    sdk.OpenChannel.getChannel(channelUrl, function (openChannel, error) {\n      if (!error) {\n        setChannel(openChannel);\n      } else {\n        setChannel(null);\n      }\n    });\n  }, [channelUrl, sdk]);\n  if (!channel) {\n    return /*#__PURE__*/React__default.createElement(InvalidChannel, {\n      onCloseClick: function onCloseClick() {\n        logger.info('OpenChannelSettings: Click close');\n        if (_onCloseClick) {\n          _onCloseClick();\n        }\n      }\n    });\n  }\n  return /*#__PURE__*/React__default.createElement(UserProfileProvider, {\n    className: \"sendbird-openchannel-settings\",\n    disableUserProfile: disableUserProfile,\n    renderUserProfile: renderUserProfile\n  }, channel.isOperator(user) ? /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings__header\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.H_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.CHANNEL_SETTING__HEADER__TITLE), /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-settings__close-icon\",\n    type: IconTypes.CLOSE,\n    height: \"24px\",\n    width: \"24px\",\n    onClick: function onClick() {\n      _onCloseClick();\n    }\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings__profile\"\n  }, renderChannelProfile ? renderChannelProfile({\n    channel: channel,\n    user: user\n  }) : /*#__PURE__*/React__default.createElement(ChannelProfile, {\n    disabled: !isOnline,\n    channel: channel,\n    theme: theme,\n    onChannelInfoChange: function onChannelInfoChange(currentImg, currentTitle) {\n      logger.info('ChannelSettings: Channel information being updated');\n      if (onBeforeUpdateChannel) {\n        var params = onBeforeUpdateChannel(currentTitle, currentImg, channel.data);\n        logger.info('ChannelSettings: onBeforeUpdateChannel', params);\n        channel.updateChannel(params, function (openChannel) {\n          onChannelModified(openChannel); // setChannel(openChannel) => alone not working\n\n          setChannel(null);\n          setChannel(openChannel);\n        });\n      } else {\n        channel.updateChannel(currentTitle, currentImg, channel.data, function (openChannel) {\n          logger.info('ChannelSettings: Channel information updated', openChannel);\n          onChannelModified(openChannel); // setChannel(openChannel) => alone not working\n\n          setChannel(null);\n          setChannel(openChannel);\n        });\n      }\n    }\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-settings__url\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-settings__copy-icon\",\n    type: IconTypes.COPY,\n    height: \"22px\",\n    width: \"22px\",\n    onClick: function onClick() {\n      copyToClipboard(channel.url);\n    }\n  }), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-settings__url-label\",\n    type: LabelTypography.CAPTION_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, stringSet.OPEN_CHANNEL_SETTINGS__OPERATOR_URL), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-settings__url-value\",\n    type: LabelTypography.SUBTITLE_2\n  }, channel.url)), /*#__PURE__*/React__default.createElement(AccordionGroup, null, /*#__PURE__*/React__default.createElement(ParticipantsAccordion, {\n    channel: channel,\n    currentUser: currentUser\n  })), /*#__PURE__*/React__default.createElement(DeleteChannel, {\n    isOnline: isOnline,\n    onDeleteChannel: function onDeleteChannel() {\n      channel.delete(function (response, error) {\n        if (error) {\n          logger.warning('OpenChannelSettings: Delete channel failed', error);\n          return;\n        }\n        logger.info('OpenChannelSettings: Delete channel success', response);\n        if (_onDeleteChannel) {\n          _onDeleteChannel(channel);\n        }\n      });\n    }\n  })) : /*#__PURE__*/React__default.createElement(ParticipantsList, {\n    currentUser: currentUser,\n    channel: channel,\n    onCloseClick: function onCloseClick() {\n      _onCloseClick();\n    }\n  }));\n}\nvar ChannelSettingsWithSendbird = withSendbirdContext(OpenChannelSettings, function (store) {\n  var logger = store && store.config && store.config.logger;\n  var theme = store && store.config && store.config.theme || 'light';\n  var isOnline = store && store.config && store.config.isOnline;\n  var user = store && store.stores && store.stores.userStore && store.stores.userStore.user;\n  return {\n    sdk: selectors.getSdk(store),\n    logger: logger,\n    theme: theme,\n    isOnline: isOnline,\n    user: user\n  };\n});\nexport { ChannelSettingsWithSendbird as default };","map":{"version":3,"names":["ChannelAvatar","_a","channel","theme","_b","height","_c","width","stringSet","useContext","LocalizationContext","memoizedAvatar","useMemo","React__default","createElement","Avatar","className","src","getOpenChannelAvatar","alt","name","OPEN_CHANNEL_SETTINGS__NO_TITLE","coverUrl","Fragment","EditDetails","props","_onSubmit","onSubmit","onCancel","inputRef","useRef","formRef","hiddenInputRef","useState","currentImg","setCurrentImg","newFile","setNewFile","title","Modal","titleText","MODAL__CHANNEL_INFORMATION__TITLE","submitText","BUTTON__SAVE","current","value","reportValidity","type","Type","PRIMARY","ref","e","preventDefault","InputLabel","MODAL__CHANNEL_INFORMATION__CHANNEL_IMAGE","accept","style","display","onChange","URL","createObjectURL","target","files","TextButton","onClick","click","notUnderline","Label","LabelTypography","BUTTON_1","color","LabelColors","MODAL__CHANNEL_INFORMATION__UPLOAD","MODAL__CHANNEL_INFORMATION__CHANNEL_NAME","Input","required","placeHolder","MODAL__CHANNEL_INFORMATION__INPUT__PLACE_HOLDER","ChannelProfile","disabled","onChannelInfoChange","showModal","setShowModal","SUBTITLE_2","ONBACKGROUND_1","ONBACKGROUND_2","CHANNEL_SETTING__PROFILE__EDIT","ParticipantsModal","hideModal","participants","setParticipants","participantListQuery","setParticipantListQuery","useEffect","createParticipantListQuery","next","participantList","error","hideFooter","noop","OPEN_CHANNEL_SETTINGS__ALL_PARTICIPANTS_TITLE","onScroll","hasNext","fetchMore","clientHeight","scrollTop","scrollHeight","fetchedParticipants","__spreadArray","map","p","UserListItem$1","user","key","userId","SHOWN_MEMBER_MAX","UserListItem","member","currentUser","avatarRef","UserProfileContext","disableUserProfile","renderUserProfile","ContextMenu","menuTrigger","toggleDropdown","profileUrl","menuItems","closeDropdown","MenuItems","openLeft","parentRef","parentContainRef","paddingTop","paddingBottom","currentUserId","close","ConnectedUserProfile","disableMessaging","onSuccess","nickname","NO_NAME","CHANNEL_SETTING__MEMBERS__YOU","ParticipantsAccordion","showMoreModal","setShowMoreModal","Accordion","id","renderTitle","Icon","IconTypes","MEMBERS","fillColor","IconColors","SUBTITLE_1","OPEN_CHANNEL_SETTINGS__PARTICIPANTS_ACCORDION_TITLE","renderContent","slice","length","ONBACKGROUND_3","OPEN_CHANNEL_SETTINGS__EMPTY_LIST","Button","ButtonTypes","SECONDARY","size","ButtonSizes","SMALL","OPEN_CHANNEL_SETTINGS__SEE_ALL","DeleteChannel","isOnline","onDeleteChannel","showDeleteChannelModal","setShowDeleteChannelModal","role","tabIndex","onKeyDown","DELETE","join","OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_PANEL","OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_SUBMIT","OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_TITLE","ParticipantsList","onCloseClick","H_2","OPEN_CHANNEL_SETTINGS__PARTICIPANTS_TITLE","CLOSE","InvalidChannel","CHANNEL_SETTING__HEADER__TITLE","PlaceHolder","PlaceHolderTypes","WRONG","emptyLogger","info","warning","OpenChannelSettings","channelUrl","_onCloseClick","onBeforeUpdateChannel","onChannelModified","renderChannelProfile","_onDeleteChannel","_d","logger","sdk","_e","setChannel","getConnectionState","OpenChannel","getChannel","openChannel","UserProfileProvider","isOperator","currentTitle","params","data","updateChannel","COPY","copyToClipboard","url","CAPTION_2","OPEN_CHANNEL_SETTINGS__OPERATOR_URL","AccordionGroup","delete","response","ChannelSettingsWithSendbird","withSendbirdContext","store","config","stores","userStore","selectors","getSdk"],"sources":["C:\\Users\\이경민\\node_modules\\sendbird-uikit\\src\\ui\\ChannelAvatar\\OpenChannelAvatar.tsx","C:\\Users\\이경민\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenChannelSettings\\components\\EditDetailsModal.tsx","C:\\Users\\이경민\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenChannelSettings\\components\\ChannelProfile.tsx","C:\\Users\\이경민\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenChannelSettings\\components\\ParticipantsModal.tsx","C:\\Users\\이경민\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenChannelSettings\\components\\ParticipantsAccordion.tsx","C:\\Users\\이경민\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenChannelSettings\\components\\DeleteChannel.tsx","C:\\Users\\이경민\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenChannelSettings\\components\\ParticipantsList.tsx","C:\\Users\\이경민\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenChannelSettings\\components\\InvalidChannel.tsx","C:\\Users\\이경민\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenChannelSettings\\index.tsx"],"sourcesContent":["import React, { useMemo, useContext } from 'react';\n\nimport Avatar from '../Avatar/index';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\n\nimport * as utils from './utils';\n\ninterface Props {\n  channel: SendBird.OpenChannel;\n  theme: string;\n  height?: number;\n  width?: number;\n}\n\nfunction ChannelAvatar({\n  channel,\n  theme,\n  height = 56,\n  width = 56,\n}: Props): JSX.Element{\n  const { stringSet } = useContext(LocalizationContext);\n  const memoizedAvatar = useMemo(() => {\n    return (\n      <Avatar\n        className=\"sendbird-chat-header__avatar--open-channel\"\n        src={utils.getOpenChannelAvatar(channel)}\n        width={`${width}px`}\n        height={`${height}px`}\n        alt={channel.name || stringSet.OPEN_CHANNEL_SETTINGS__NO_TITLE}\n      />\n    );\n  }, [channel.coverUrl, theme]);\n  return (\n    <>{ memoizedAvatar }</>\n  );\n}\n\nexport default ChannelAvatar;\n","import React, {\n  useState,\n  useRef,\n  useContext,\n  ReactElement,\n} from 'react';\n\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\nimport Modal from '../../../ui/Modal';\nimport Input, { InputLabel } from '../../../ui/Input';\nimport Avatar from '../../../ui/Avatar/index';\nimport { Type as ButtonType } from '../../../ui/Button/type';\nimport Label, { LabelColors, LabelTypography } from '../../../ui/Label';\nimport TextButton from '../../../ui/TextButton';\nimport OpenChannelAvatar from '../../../ui/ChannelAvatar/OpenChannelAvatar';\n\ninterface Props {\n  onSubmit(newFile: File, newTitle: string): void;\n  onCancel(): void;\n  channel: SendBird.OpenChannel;\n  theme: string;\n}\n\nconst EditDetails = (props: Props): ReactElement => {\n  const {\n    onSubmit,\n    onCancel,\n    channel,\n    theme,\n  } = props;\n  const inputRef = useRef(null);\n  const formRef = useRef(null);\n  const hiddenInputRef = useRef(null);\n  const [currentImg, setCurrentImg] = useState(null);\n  const [newFile, setNewFile] = useState(null);\n  const { stringSet } = useContext(LocalizationContext);\n  const title = channel.name;\n  return (\n    <Modal\n      titleText={stringSet.MODAL__CHANNEL_INFORMATION__TITLE}\n      submitText={stringSet.BUTTON__SAVE}\n      onCancel={onCancel}\n      onSubmit={() => {\n        if (title !== '' && !inputRef.current.value) {\n          if (formRef.current.reportValidity) { // might not work in explorer\n            formRef.current.reportValidity();\n          }\n          return;\n        }\n        onSubmit(newFile, inputRef.current.value);\n        onCancel();\n      }}\n      type={ButtonType.PRIMARY}\n    >\n      <form\n        className=\"channel-profile-form\"\n        ref={formRef}\n        onSubmit={(e) => { e.preventDefault(); }}\n      >\n        <div className=\"channel-profile-form__img-section\">\n          <InputLabel>\n            {stringSet.MODAL__CHANNEL_INFORMATION__CHANNEL_IMAGE}\n          </InputLabel>\n          <div className=\"channel-profile-form__avatar\">\n            {\n              currentImg\n                ? (\n                  <Avatar\n                    height=\"80px\"\n                    width=\"80px\"\n                    src={currentImg}\n                  />\n                ) : (\n                  <OpenChannelAvatar\n                    height={80}\n                    width={80}\n                    channel={channel}\n                    theme={theme}\n                  />\n                )\n              }\n          </div>\n          <input\n            ref={hiddenInputRef}\n            type=\"file\"\n            accept=\"image/gif, image/jpeg, image/png\"\n            style={{ display: 'none' }}\n            onChange={(e) => {\n              setCurrentImg(URL.createObjectURL(e.target.files[0]));\n              setNewFile(e.target.files[0]);\n              hiddenInputRef.current.value = '';\n            }}\n          />\n          <TextButton\n            className=\"channel-profile-form__avatar-button\"\n            onClick={() => hiddenInputRef.current.click()}\n            notUnderline\n          >\n            <Label type={LabelTypography.BUTTON_1} color={LabelColors.PRIMARY}>\n              {stringSet.MODAL__CHANNEL_INFORMATION__UPLOAD}\n            </Label>\n          </TextButton>\n        </div>\n        <div className=\"channel-profile-form__name-section\">\n          <InputLabel>\n            {stringSet.MODAL__CHANNEL_INFORMATION__CHANNEL_NAME}\n          </InputLabel>\n          <Input\n            required={title !== ''}\n            name=\"channel-profile-form__name\"\n            ref={inputRef}\n            value={title}\n            placeHolder={stringSet.MODAL__CHANNEL_INFORMATION__INPUT__PLACE_HOLDER}\n          />\n        </div>\n      </form>\n    </Modal>\n  );\n};\n\nexport default EditDetails;\n","import React, {\n  ReactElement,\n  useContext,\n  useState,\n} from 'react';\n\nimport './channel-profile.scss';\n\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\nimport Label, { LabelColors, LabelTypography } from '../../../ui/Label';\nimport TextButton from '../../../ui/TextButton';\nimport OpenChannelAvatar from '../../../ui/ChannelAvatar/OpenChannelAvatar';\nimport EditDetailsModal from './EditDetailsModal';\n\ninterface Props {\n  channel: SendBird.OpenChannel;\n  disabled: boolean;\n  theme: string;\n  onChannelInfoChange(currentImg: File, currentTitle: string): void;\n}\n\nexport default function ChannelProfile(props: Props): ReactElement {\n  const {\n    disabled,\n    channel,\n    theme,\n    onChannelInfoChange,\n  } = props;\n  const title = channel.name;\n  const [showModal, setShowModal] = useState(false);\n  const { stringSet } = useContext(LocalizationContext);\n\n  return (\n    <div className=\"sendbird-openchannel-profile\">\n      <div className=\"sendbird-openchannel-profile--inner\">\n        <div className=\"sendbird-openchannel-profile__avatar\">\n          <OpenChannelAvatar\n            channel={channel}\n            theme={theme}\n            height={80}\n            width={80}\n          />\n        </div>\n        <Label\n          type={LabelTypography.SUBTITLE_2}\n          color={LabelColors.ONBACKGROUND_1}\n          className=\"sendbird-openchannel-profile__title\"\n        >\n          {title || stringSet.OPEN_CHANNEL_SETTINGS__NO_TITLE}\n        </Label>\n        <TextButton\n          disabled={disabled}\n          className=\"sendbird-openchannel-profile__edit\"\n          onClick={() => {\n            if (disabled) { return; }\n            setShowModal(true);\n          }}\n          notUnderline\n        >\n          <Label\n            type={LabelTypography.BUTTON_1}\n            color={disabled ? LabelColors.ONBACKGROUND_2 : LabelColors.PRIMARY}\n          >\n            {stringSet.CHANNEL_SETTING__PROFILE__EDIT}\n          </Label>\n        </TextButton>\n        {\n          showModal && (\n            <EditDetailsModal\n              onCancel={() => setShowModal(false)}\n              onSubmit={onChannelInfoChange}\n              channel={channel}\n              theme={theme}\n            />\n          )\n        }\n      </div>\n    </div>\n  );\n}\n","import React, {\n  ReactElement,\n  useEffect,\n  useState,\n  useContext,\n} from 'react';\n\nimport Modal from '../../../ui/Modal';\nimport UserListItem from '../../../ui/UserListItem';\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\nimport { noop } from '../../../utils/utils';\n\ninterface Props {\n  currentUser: string;\n  hideModal(): void;\n  channel: SendBird.OpenChannel;\n}\n\nexport default function ParticipantsModal({\n  hideModal,\n  channel,\n}: Props): ReactElement {\n  const { stringSet } = useContext(LocalizationContext);\n  const [participants, setParticipants] = useState<Array<SendBird.User>|null>([]);\n  const [participantListQuery, setParticipantListQuery] = useState<SendBird.ParticipantListQuery | null>(null);\n  useEffect(() => {\n    if (!channel || !channel.createParticipantListQuery) {\n      return;\n    }\n    const participantListQuery = channel.createParticipantListQuery();\n    setParticipantListQuery(participantListQuery);\n    participantListQuery.next((participantList, error) => {\n      if (error) {\n        return;\n      }\n      setParticipants(participantList);\n    });\n  }, []);\n  return (\n    <div>\n      <Modal\n        hideFooter\n        onCancel={() => hideModal()}\n        onSubmit={noop}\n        titleText={stringSet.OPEN_CHANNEL_SETTINGS__ALL_PARTICIPANTS_TITLE}\n      >\n        <div\n          className=\"sendbird-more-members__popup-scroll\"\n          onScroll={(e) => {\n            const { hasNext } = participantListQuery;\n            const target = e.target as HTMLTextAreaElement;\n            const fetchMore = (\n              target.clientHeight + target.scrollTop === target.scrollHeight\n            );\n\n            if (hasNext && fetchMore) {\n              participantListQuery.next((fetchedParticipants, error) => {\n                if (error) {\n                  return;\n                }\n                setParticipants([\n                  ...participants,\n                  ...fetchedParticipants,\n                ])\n              });\n            }\n          }}\n        >\n          { participants.map((p) => (\n            <UserListItem\n              user={p}\n              key={p.userId}\n            />\n          ))}\n        </div>\n      </Modal>\n    </div>\n  )\n}\n","import React, {\n  ReactElement,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from 'react'\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\n\nimport { UserProfileContext } from '../../../lib/UserProfileContext';\nimport Button, { ButtonTypes, ButtonSizes } from '../../../ui/Button';\nimport Accordion from '../../../ui/Accordion';\nimport Icon, { IconTypes, IconColors } from '../../../ui/Icon';\nimport Avatar from '../../../ui/Avatar/index';\nimport Label, { LabelTypography, LabelColors } from '../../../ui/Label';\nimport ParticipantsModal from './ParticipantsModal';\nimport UserProfile from '../../../ui/UserProfile';\nimport ContextMenu, { MenuItems } from '../../../ui/ContextMenu';\n\nconst SHOWN_MEMBER_MAX = 10;\n\ninterface UserListItemProps {\n  member: SendBird.User;\n  currentUser?: string;\n}\n\nexport const UserListItem = ({\n  member,\n  currentUser = '',\n}: UserListItemProps): ReactElement => {\n  const avatarRef = useRef(null);\n  const {\n    disableUserProfile,\n    renderUserProfile,\n  } = useContext(UserProfileContext);\n  const { stringSet } = useContext(LocalizationContext);\n  return (\n    <div className=\"sendbird-participants-accordion__member\">\n      <div className=\"sendbird-participants-accordion__member-avatar\">\n        <ContextMenu\n          menuTrigger={(toggleDropdown) => (\n            <Avatar\n              onClick={() => {\n                if (!disableUserProfile) {\n                  toggleDropdown();\n                }\n              }}\n              ref={avatarRef}\n              src={member.profileUrl}\n              width={24}\n              height={24}\n            />\n          )}\n          menuItems={(closeDropdown) => (\n            <MenuItems\n              openLeft\n              parentRef={avatarRef}\n              // for catching location(x, y) of MenuItems\n              parentContainRef={avatarRef}\n              // for toggling more options(menus & reactions)\n              closeDropdown={closeDropdown}\n              style={{ paddingTop: 0, paddingBottom: 0 }}\n            >\n              {\n                renderUserProfile\n                  ? renderUserProfile({\n                    user: member,\n                    currentUserId: currentUser,\n                    close: closeDropdown,\n                  })\n                  : (\n                    <UserProfile\n                      disableMessaging\n                      user={member}\n                      currentUserId={currentUser}\n                      onSuccess={closeDropdown}\n                    />\n                  )\n              }\n            </MenuItems>\n          )}\n        />\n      </div>\n      <Label type={LabelTypography.SUBTITLE_2} color={LabelColors.ONBACKGROUND_1}>\n        {member.nickname || stringSet.NO_NAME}\n        {\n          (currentUser === member.userId) && (\n            stringSet.CHANNEL_SETTING__MEMBERS__YOU\n          )\n        }\n      </Label>\n    </div>\n  );\n};\n\ninterface Props {\n  channel: SendBird.OpenChannel;\n  currentUser: string;\n}\n\nexport default function ParticipantsAccordion({ channel, currentUser }: Props): ReactElement {\n  const [participants, setParticipants] = useState([]);\n  const [showMoreModal, setShowMoreModal] = useState(false);\n  const { stringSet } = useContext(LocalizationContext);\n\n  useEffect(() => {\n    if (!channel || !channel.createParticipantListQuery) {\n      return;\n    }\n    const participantListQuery = channel.createParticipantListQuery();\n    participantListQuery.next((participantList, error) => {\n      if (error) {\n        return;\n      }\n      setParticipants(participantList);\n    });\n  }, [channel]);\n\n  return (\n    <Accordion\n      className=\"sendbird-participants-accordion\"\n      id=\"participants\"\n      renderTitle={() => (\n        <>\n          <Icon\n            type={IconTypes.MEMBERS}\n            fillColor={IconColors.PRIMARY}\n            width={24}\n            height={24}\n            className=\"sendbird-openchannel-settings__accordion-icon\"\n          />\n          <Label\n            type={LabelTypography.SUBTITLE_1}\n            color={LabelColors.ONBACKGROUND_1}\n          >\n            {stringSet.OPEN_CHANNEL_SETTINGS__PARTICIPANTS_ACCORDION_TITLE}\n          </Label>\n        </>\n      )}\n      renderContent={() => (\n        <div className=\"\">\n          <div className=\"sendbird-participants-accordion__list\">\n            {\n              participants.slice(0, SHOWN_MEMBER_MAX).map((p) => (\n                <UserListItem\n                  member={p}\n                  currentUser={currentUser}\n                  key={p.userId}\n                />\n              ))\n            }\n            {\n              (participants && participants.length === 0)\n                ? (\n                    <Label\n                      className=\"sendbird-channel-settings__empty-list\"\n                      type={LabelTypography.SUBTITLE_2}\n                      color={LabelColors.ONBACKGROUND_3}\n                    >\n                      {stringSet.OPEN_CHANNEL_SETTINGS__EMPTY_LIST}\n                    </Label>\n                ): null\n            }\n          </div>\n          {\n            participants.length >= SHOWN_MEMBER_MAX && (\n              <div className=\"sendbird-participants-accordion__footer\">\n                <Button\n                  className=\"sendbird-participants-accordion__footer__all-participants\"\n                  type={ButtonTypes.SECONDARY}\n                  size={ButtonSizes.SMALL}\n                  onClick={() => setShowMoreModal(true)}\n                >\n                  {stringSet.OPEN_CHANNEL_SETTINGS__SEE_ALL}\n                </Button>\n                {\n                  showMoreModal && (\n                    <ParticipantsModal\n                      currentUser={currentUser}\n                      hideModal={() => {\n                        setShowMoreModal(false);\n                      }}\n                      channel={channel}\n                    />\n                  )\n                }\n              </div>\n            )\n          }\n        </div>\n      )}\n    />\n  );\n}\n","import React, {\n  ReactElement,\n  useState,\n  useContext,\n} from 'react';\n\nimport Modal from '../../../ui/Modal';\nimport Label, { LabelTypography, LabelColors } from '../../../ui/Label';\nimport Icon, { IconTypes } from '../../../ui/Icon';\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\n\ninterface Props {\n  isOnline: boolean;\n  onDeleteChannel(): void;\n}\n\nexport default function DeleteChannel({\n  isOnline,\n  onDeleteChannel,\n}: Props): ReactElement {\n  const [showDeleteChannelModal, setShowDeleteChannelModal] = useState(false);\n  const { stringSet } = useContext(LocalizationContext);\n  return (\n    <>\n      <div\n        className={\n          `sendbird-openchannel-settings__panel-item\n          sendbird-openchannel-settings__delete-channel\n            ${!isOnline ? 'sendbird-openchannel-settings__panel-item__disabled' : ''}`\n        }\n        role=\"button\"\n        tabIndex={0}\n        onKeyDown={() => {\n          if (!isOnline) { return; }\n          setShowDeleteChannelModal(true);\n        }}\n        onClick={() => {\n          if (!isOnline) { return; }\n          setShowDeleteChannelModal(true);\n        }}\n      >\n        <Icon\n          type={IconTypes.DELETE}\n          className={[\n            'sendbird-openchannel-settings__panel-icon-left',\n            'sendbird-openchannel-settings__panel-icon__delete',\n          ].join(' ')}\n          height=\"24px\"\n          width=\"24px\"\n        />\n        <Label\n          type={LabelTypography.SUBTITLE_1}\n          color={LabelColors.ONBACKGROUND_1}\n        >\n          {stringSet.OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_PANEL}\n        </Label>\n      </div>\n      {\n        showDeleteChannelModal && (\n          <Modal\n            onCancel={() => {\n              setShowDeleteChannelModal(false);\n            }}\n            onSubmit={() => {\n              onDeleteChannel();\n            }}\n            submitText={stringSet.OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_SUBMIT}\n            titleText={stringSet.OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_TITLE}\n          />\n        )\n      }\n    </>\n  )\n}\n","import React, {\n  ReactElement,\n  useContext,\n  useState,\n  useEffect,\n} from 'react';\n\nimport Label, { LabelTypography, LabelColors } from '../../../ui/Label';\nimport Icon, { IconTypes } from '../../../ui/Icon';\n\nimport { UserListItem } from './ParticipantsAccordion';\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\n\ninterface Props {\n  channel: SendBird.OpenChannel;\n  onCloseClick(): void;\n  currentUser: string;\n}\n\nexport default function ParticipantsList({\n  channel,\n  onCloseClick,\n  currentUser,\n}: Props): ReactElement {\n  const { stringSet } = useContext(LocalizationContext);\n  const [participants, setParticipants] = useState<Array<SendBird.User>|null>([]);\n  const [participantListQuery, setParticipantListQuery] = useState<SendBird.ParticipantListQuery | null>(null);\n  useEffect(() => {\n    if (!channel || !channel.createParticipantListQuery) {\n      return;\n    }\n    const participantListQuery = channel.createParticipantListQuery();\n    setParticipantListQuery(participantListQuery);\n    participantListQuery.next((participantList, error) => {\n      if (error) {\n        return;\n      }\n      setParticipants(participantList);\n    });\n  }, [channel]);\n  return (\n    <div className=\"sendbird-openchannel-settings__participant\">\n      <div className=\"sendbird-openchannel-settings__header\">\n        <Label type={LabelTypography.H_2} color={LabelColors.ONBACKGROUND_1}>\n          {stringSet.OPEN_CHANNEL_SETTINGS__PARTICIPANTS_TITLE}\n        </Label>\n        <Icon\n          type={IconTypes.CLOSE}\n          className=\"sendbird-openchannel-settings__close-icon\"\n          height=\"24px\"\n          width=\"24px\"\n          onClick={() => {\n            onCloseClick();\n          }}\n        />\n      </div>\n      <div\n        className=\"sendbird-openchannel-settings__participants-list\"\n        onScroll={(e) => {\n          const { hasNext } = participantListQuery;\n          const target = e.target as HTMLTextAreaElement;\n          const fetchMore = (\n            target.clientHeight + target.scrollTop === target.scrollHeight\n          );\n\n          if (hasNext && fetchMore) {\n            participantListQuery.next((fetchedParticipants, error) => {\n              if (error) {\n                return;\n              }\n              setParticipants([\n                ...participants,\n                ...fetchedParticipants,\n              ])\n            });\n          }\n        }}\n      >\n        <div>\n          {\n            participants.map((p: SendBird.User) => (\n              <UserListItem\n                member={p}\n                currentUser={currentUser}\n                key={p.userId}\n              />\n            ))\n          }\n          {\n            (participants && participants.length === 0)\n              ? (\n                  <Label\n                    className=\"sendbird-channel-settings__empty-list\"\n                    type={LabelTypography.SUBTITLE_2}\n                    color={LabelColors.ONBACKGROUND_3}\n                  >\n                    {stringSet.OPEN_CHANNEL_SETTINGS__EMPTY_LIST}\n                  </Label>\n              ): null\n          }\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React, { ReactElement, useContext } from 'react'\n\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\n\nimport Label, { LabelTypography, LabelColors } from '../../../ui/Label';\nimport Icon, { IconTypes } from '../../../ui/Icon';\n\nimport PlaceHolder from '../../../ui/PlaceHolder';\nimport PlaceHolderTypes from '../../../ui/PlaceHolder/type';\n\ninterface Props {\n  onCloseClick?(): void;\n}\n\nexport default function InvalidChannel({\n  onCloseClick,\n}: Props): ReactElement {\n  const { stringSet } = useContext(LocalizationContext);\n  return (\n    <div className=\"sendbird-openchannel-settings\">\n      <div className=\"sendbird-openchannel-settings__header\">\n        <Label type={LabelTypography.H_2} color={LabelColors.ONBACKGROUND_1}>\n          {stringSet.CHANNEL_SETTING__HEADER__TITLE}\n        </Label>\n        <Icon\n          type={IconTypes.CLOSE}\n          className=\"sendbird-openchannel-settings__close-icon\"\n          height=\"24px\"\n          width=\"24px\"\n          onClick={() => {\n            onCloseClick();\n          }}\n        />\n      </div>\n      <div className=\"sendbird-openchannel-settings__placeholder\">\n        <PlaceHolder type={PlaceHolderTypes.WRONG} />\n      </div>\n    </div>\n  )\n}\n","import React, {\n  useContext,\n  useState,\n  useEffect,\n} from 'react';\nimport { OpenChannelSettingsProps } from '../../index';\n\nimport { UserProfileProvider } from '../../lib/UserProfileContext';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport withSendbirdContext from '../../lib/SendbirdSdkContext';\nimport selectors from '../../lib/selectors';\n\nimport { copyToClipboard } from '../../utils'\n\nimport './index.scss';\nimport Label, { LabelTypography, LabelColors } from '../../ui/Label';\nimport Icon, { IconTypes } from '../../ui/Icon';\nimport ChannelProfile from './components/ChannelProfile';\nimport ParticipantsAccordion from './components/ParticipantsAccordion';\nimport DeleteChannel from './components/DeleteChannel';\nimport ParticipantsList from './components/ParticipantsList';\nimport InvalidChannel from './components/InvalidChannel';\nimport { AccordionGroup } from '../../ui/Accordion';\nimport { noop } from '../../utils/utils';\n\nconst emptyLogger = () => ({\n  info: noop,\n  error: noop,\n  warning: noop,\n});\n\ninterface Props extends OpenChannelSettingsProps {\n  logger: SendbirdUIKit.Logger;\n  sdk: SendBird.SendBirdInstance;\n  theme: string;\n  user: SendBird.User;\n  isOnline: boolean;\n}\n\nfunction OpenChannelSettings(props: Props) {\n  const {\n    channelUrl,\n    onCloseClick = noop,\n    onBeforeUpdateChannel,\n    onChannelModified = noop,\n    renderChannelProfile,\n    renderUserProfile,\n    onDeleteChannel,\n    disableUserProfile = false,\n    logger = emptyLogger(),\n    sdk,\n    theme,\n    user,\n    isOnline,\n  } = props;\n\n  const currentUser = user.userId;\n  const [channel, setChannel] = useState<SendBird.OpenChannel | null>(null);\n  const { stringSet } = useContext(LocalizationContext);\n  useEffect(() => {\n    if (!channelUrl || !sdk || !sdk.getConnectionState) {\n      setChannel(null);\n      return;\n    }\n\n    sdk.OpenChannel.getChannel(channelUrl, (openChannel, error) => {\n      if (!error) {\n        setChannel(openChannel);\n      } else {\n        setChannel(null);\n      }\n    });\n  }, [channelUrl, sdk])\n  if (!channel) {\n    return (\n      <InvalidChannel\n        onCloseClick={() => {\n          logger.info('OpenChannelSettings: Click close');\n          if (onCloseClick) {\n            onCloseClick();\n          }\n        }}\n      />\n    );\n  }\n  return (\n    <UserProfileProvider\n      className=\"sendbird-openchannel-settings\"\n      disableUserProfile={disableUserProfile}\n      renderUserProfile={renderUserProfile}\n    >\n      {\n        channel.isOperator(user)\n          ? (\n            <>\n              <div className=\"sendbird-openchannel-settings__header\">\n                <Label type={LabelTypography.H_2} color={LabelColors.ONBACKGROUND_1}>\n                  {stringSet.CHANNEL_SETTING__HEADER__TITLE}\n                </Label>\n                <Icon\n                  className=\"sendbird-openchannel-settings__close-icon\"\n                  type={IconTypes.CLOSE}\n                  height=\"24px\"\n                  width=\"24px\"\n                  onClick={() => {\n                    onCloseClick();\n                  }}\n                />\n              </div>\n              <div className=\"sendbird-openchannel-settings__profile\">\n              {\n                renderChannelProfile\n                  ? renderChannelProfile({ channel, user })\n                  : (\n                    <ChannelProfile\n                      disabled={!isOnline}\n                      channel={channel}\n                      theme={theme}\n                      onChannelInfoChange={(currentImg: File, currentTitle: string) => {\n                        logger.info('ChannelSettings: Channel information being updated');\n                        if (onBeforeUpdateChannel) {\n                          const params = onBeforeUpdateChannel(currentTitle, currentImg, channel.data);\n                          logger.info('ChannelSettings: onBeforeUpdateChannel', params);\n                          channel.updateChannel(params, (openChannel) => {\n                            onChannelModified(openChannel);\n                            // setChannel(openChannel) => alone not working\n                            setChannel(null);\n                            setChannel(openChannel);\n                          });\n                        } else {\n                          channel.updateChannel(\n                            currentTitle,\n                            currentImg,\n                            channel.data,\n                            (openChannel) => {\n                              logger.info('ChannelSettings: Channel information updated', openChannel);\n                              onChannelModified(openChannel);\n                              // setChannel(openChannel) => alone not working\n                              setChannel(null);\n                              setChannel(openChannel);\n                            },\n                          );\n                        }\n                      }}\n                    />\n                  )\n                }\n              </div>\n              <div className=\"sendbird-openchannel-settings__url\">\n                <Icon\n                  className=\"sendbird-openchannel-settings__copy-icon\"\n                  type={IconTypes.COPY}\n                  height=\"22px\"\n                  width=\"22px\"\n                  onClick={() => {\n                    copyToClipboard(channel.url);\n                  }}\n                />\n                <Label\n                  className=\"sendbird-openchannel-settings__url-label\"\n                  type={LabelTypography.CAPTION_2}\n                  color={LabelColors.ONBACKGROUND_2}\n                >\n                  {stringSet.OPEN_CHANNEL_SETTINGS__OPERATOR_URL}\n                </Label>\n                <Label\n                  className=\"sendbird-openchannel-settings__url-value\"\n                  type={LabelTypography.SUBTITLE_2}\n                >\n                  {channel.url}\n                </Label>\n              </div>\n              <AccordionGroup>\n                <ParticipantsAccordion\n                  channel={channel}\n                  currentUser={currentUser}\n                />\n              </AccordionGroup>\n              <DeleteChannel\n                isOnline={isOnline}\n                onDeleteChannel={() => {\n                  channel.delete((response, error) => {\n                    if (error) {\n                      logger.warning('OpenChannelSettings: Delete channel failed', error);\n                      return;\n                    }\n                    logger.info('OpenChannelSettings: Delete channel success', response);\n                    if (onDeleteChannel) {\n                      onDeleteChannel(channel);\n                    }\n                  });\n                }}\n              />\n            </>\n          ) : (\n            <ParticipantsList\n              currentUser={currentUser}\n              channel={channel}\n              onCloseClick={() => {\n                onCloseClick();\n              }}\n            />\n          )\n      }\n    </UserProfileProvider>\n  )\n}\n\nconst ChannelSettingsWithSendbird = withSendbirdContext(OpenChannelSettings, (store) => {\n  const logger = (store && store.config && store.config.logger);\n  const theme = (store && store.config && store.config.theme) || 'light';\n  const isOnline = (store && store.config && store.config.isOnline);\n  const user = (store && store.stores && store.stores.userStore\n    && store.stores.userStore.user);\n  return {\n    sdk: selectors.getSdk(store),\n    logger,\n    theme,\n    isOnline,\n    user,\n  };\n});\n\nexport default ChannelSettingsWithSendbird;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}