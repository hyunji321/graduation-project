{"ast":null,"code":"import React__default, { useContext, useRef, useState, useMemo, useEffect, useCallback, useReducer } from 'react';\nimport { f as format, i as isSameDay } from './index-e2d20807.js';\nimport { c as LocalizationContext, u as uuidv4, d as __spreadArray, _ as __assign, w as withSendbirdContext } from './LocalizationContext-f9cc3a84.js';\nimport { M as MessageInput, L as LinkLabel, D as DateSeparator, F as FileViewer, c as compareIds } from './index-23738504.js';\nimport { L as Label, a as LabelTypography, A as Avatar, I as Icon, c as IconTypes, d as IconColors, b as LabelColors, e as Loader, h as ImageRenderer, P as PlaceHolder, i as PlaceHolderTypes } from './index-48f41226.js';\nimport { I as IconButton, U as UserProfileContext, C as ContextMenu, b as MenuItems, f as ConnectedUserProfile, c as MenuItem, a as TextButton, M as Modal, k as SEND_USER_MESSAGE, S as SEND_MESSAGE_START, l as SEND_FILE_MESSAGE, j as UPDATE_USER_MESSAGE, D as DELETE_MESSAGE, h as UserProfileProvider } from './index-58bb39c7.js';\nimport 'prop-types';\nimport './index-49fe86ba.js';\nimport 'react-dom';\nvar getMessageCreatedAt = function getMessageCreatedAt(message) {\n  return format(message.createdAt, 'p');\n};\nvar shouldFetchMore = function shouldFetchMore(messageLength, maxMessages) {\n  if (typeof maxMessages !== 'number') {\n    return true;\n  }\n  if (typeof maxMessages === 'number' && maxMessages > messageLength) {\n    return true;\n  }\n  return false;\n};\nvar scrollIntoLast = function scrollIntoLast(intialTry) {\n  if (intialTry === void 0) {\n    intialTry = 0;\n  }\n  var MAX_TRIES = 10;\n  var currentTry = intialTry;\n  if (currentTry > MAX_TRIES) {\n    return;\n  }\n  try {\n    var scrollDOM = document.querySelector('.sendbird-openchannel-conversation-scroll'); // eslint-disable-next-line no-multi-assign\n\n    scrollDOM.scrollTop = scrollDOM.scrollHeight;\n  } catch (error) {\n    setTimeout(function () {\n      scrollIntoLast(currentTry + 1);\n    }, 500 * currentTry);\n  }\n};\nvar isSameGroup = function isSameGroup(message, comparingMessage) {\n  var _a, _b, _c, _d;\n  if (!(message && comparingMessage && (message === null || message === void 0 ? void 0 : message.messageType) !== 'admin' && (comparingMessage === null || comparingMessage === void 0 ? void 0 : comparingMessage.messageType) !== 'admin' && (message === null || message === void 0 ? void 0 : message.sender) && (comparingMessage === null || comparingMessage === void 0 ? void 0 : comparingMessage.sender) && (message === null || message === void 0 ? void 0 : message.createdAt) && (comparingMessage === null || comparingMessage === void 0 ? void 0 : comparingMessage.createdAt) && ((_a = message === null || message === void 0 ? void 0 : message.sender) === null || _a === void 0 ? void 0 : _a.userId) && ((_b = comparingMessage === null || comparingMessage === void 0 ? void 0 : comparingMessage.sender) === null || _b === void 0 ? void 0 : _b.userId))) {\n    return false;\n  }\n  return (message === null || message === void 0 ? void 0 : message.sendingStatus) === (comparingMessage === null || comparingMessage === void 0 ? void 0 : comparingMessage.sendingStatus) && ((_c = message === null || message === void 0 ? void 0 : message.sender) === null || _c === void 0 ? void 0 : _c.userId) === ((_d = comparingMessage === null || comparingMessage === void 0 ? void 0 : comparingMessage.sender) === null || _d === void 0 ? void 0 : _d.userId) && getMessageCreatedAt(message) === getMessageCreatedAt(comparingMessage);\n};\nvar compareMessagesForGrouping = function compareMessagesForGrouping(prevMessage, currMessage, nextMessage) {\n  return [isSameGroup(prevMessage, currMessage), isSameGroup(currMessage, nextMessage)];\n};\nvar kFormatter = function kFormatter(num) {\n  if (Math.abs(num) > 999999) {\n    return (Math.abs(num) / 1000000).toFixed(1) + \"M\";\n  }\n  if (Math.abs(num) > 999) {\n    return (Math.abs(num) / 1000).toFixed(1) + \"K\";\n  }\n  return \"\" + num;\n};\nvar isOperator = function isOperator(openChannel, userId) {\n  var operators = openChannel.operators;\n  if (operators.map(function (operator) {\n    return operator.userId;\n  }).indexOf(userId) < 0) {\n    return false;\n  }\n  return true;\n};\nvar isDisabledBecauseFrozen = function isDisabledBecauseFrozen(openChannel, userId) {\n  var isFrozen = openChannel.isFrozen;\n  return isFrozen && !isOperator(openChannel, userId);\n};\nvar fetchWithListQuery = function fetchWithListQuery(listQuery, logger, eachQueryNextCallback) {\n  var fetchList = function fetchList(query) {\n    var hasNext = query.hasNext;\n    if (hasNext) {\n      query.next(function (error, users) {\n        if (!error) {\n          eachQueryNextCallback(users);\n          fetchList(query);\n        } else {\n          logger.warning('OpenChannel | FetchUserList failed', error);\n        }\n      });\n    } else {\n      logger.info('OpenChannel | FetchUserList finished');\n    }\n  };\n  logger.info('OpenChannel | FetchUserList start', listQuery);\n  fetchList(listQuery);\n};\nvar pxToNumber = function pxToNumber(px) {\n  if (typeof px === 'number') {\n    return px;\n  }\n  if (typeof px === 'string') {\n    var parsed = Number.parseFloat(px);\n    if (!Number.isNaN(parsed)) {\n      return parsed;\n    }\n  }\n  return null;\n};\nvar MessageInputWrapper = function MessageInputWrapper(_a, ref) {\n  var channel = _a.channel,\n    user = _a.user,\n    disabled = _a.disabled,\n    onSendMessage = _a.onSendMessage,\n    onFileUpload = _a.onFileUpload,\n    renderMessageInput = _a.renderMessageInput;\n  if (!channel) {\n    return;\n  }\n  var stringSet = useContext(LocalizationContext).stringSet;\n  if (renderMessageInput) {\n    return renderMessageInput({\n      channel: channel,\n      user: user,\n      disabled: disabled\n    });\n  }\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-footer\"\n  }, /*#__PURE__*/React__default.createElement(MessageInput, {\n    ref: ref,\n    disabled: disabled,\n    onSendMessage: onSendMessage,\n    onFileUpload: onFileUpload,\n    placeholder: disabled && stringSet.MESSAGE_INPUT__PLACE_HOLDER__DISABLED // add disabled because of muted state\n  }));\n};\n\nvar MessageInputWrapper$1 = /*#__PURE__*/React__default.forwardRef(MessageInputWrapper);\nvar FrozenNotification = function FrozenNotification() {\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-frozen-channel-notification\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-frozen-channel-notification__text\",\n    type: LabelTypography.CAPTION_2\n  }, stringSet.CHANNEL_FROZEN));\n};\nfunction OpenchannelConversationHeader(_a) {\n  var coverImage = _a.coverImage,\n    title = _a.title,\n    subTitle = _a.subTitle,\n    amIOperator = _a.amIOperator,\n    onActionClick = _a.onActionClick;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-conversation-header\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-conversation-header__left\"\n  }, coverImage ? /*#__PURE__*/React__default.createElement(Avatar, {\n    className: \"sendbird-openchannel-conversation-header__left__cover-image\",\n    src: coverImage,\n    alt: \"channel cover image\",\n    width: \"32px\",\n    height: \"32px\"\n  }) : /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-conversation-header__left__cover-image--icon\",\n    style: {\n      width: 32,\n      height: 32\n    }\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.CHANNELS,\n    fillColor: IconColors.CONTENT,\n    width: \"18px\",\n    height: \"18px\"\n  })), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-conversation-header__left__title\",\n    type: LabelTypography.H_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, title || stringSet.NO_TITLE), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-conversation-header__left__sub-title\",\n    type: LabelTypography.BODY_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, subTitle || stringSet.NO_TITLE)), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-conversation-header__right\"\n  }, /*#__PURE__*/React__default.createElement(IconButton, {\n    className: \"sendbird-openchannel-conversation-header__right__trigger\",\n    width: \"32px\",\n    height: \"32px\",\n    onClick: onActionClick\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: amIOperator ? IconTypes.INFO : IconTypes.MEMBERS,\n    fillColor: IconColors.PRIMARY,\n    width: \"24px\",\n    height: \"24px\"\n  }))));\n}\nvar copyToClipboard = function copyToClipboard(text) {\n  // @ts-ignore: Unreachable code error\n  if (window.clipboardData && window.clipboardData.setData) {\n    // Internet Explorer-specific code path to prevent textarea being shown while dialog is visible.\n    // @ts-ignore: Unreachable code error\n    return window.clipboardData.setData('Text', text);\n  }\n  if (document.queryCommandSupported && document.queryCommandSupported('copy')) {\n    var textarea = document.createElement('textarea');\n    textarea.textContent = text;\n    textarea.style.position = 'fixed'; // Prevent scrolling to bottom of page in Microsoft Edge.\n\n    document.body.appendChild(textarea);\n    textarea.select();\n    try {\n      return document.execCommand('copy'); // Security exception may be thrown by some browsers.\n    } catch (ex) {\n      return false;\n    } finally {\n      document.body.removeChild(textarea);\n    }\n  }\n  return false;\n};\nvar OpenChannelMessageStatusTypes = {\n  NONE: 'none',\n  PENDING: 'pending',\n  FAILED: 'failed',\n  CANCELED: 'canceled',\n  SUCCEEDED: 'succeeded'\n};\nvar getSenderFromMessage = function getSenderFromMessage(message) {\n  return message.sender || message._sender;\n};\nvar checkIsSent = function checkIsSent(status) {\n  return status === OpenChannelMessageStatusTypes.SUCCEEDED;\n};\nvar checkIsPending = function checkIsPending(status) {\n  return status === OpenChannelMessageStatusTypes.PENDING;\n};\nvar checkIsFailed = function checkIsFailed(status) {\n  return status === OpenChannelMessageStatusTypes.FAILED;\n};\nvar checkIsByMe = function checkIsByMe(message, userId) {\n  return getSenderFromMessage(message).userId === userId;\n};\nvar isFineCopy = function isFineCopy(_a) {\n  var message = _a.message;\n  return message.messageType === 'user' && message.message.length > 0;\n};\nvar isFineResend = function isFineResend(_a) {\n  var message = _a.message,\n    status = _a.status,\n    userId = _a.userId;\n  return checkIsByMe(message, userId) && checkIsFailed(status) && message.isResendable && message.isResendable();\n};\nvar isFineEdit = function isFineEdit(_a) {\n  var message = _a.message,\n    status = _a.status,\n    userId = _a.userId;\n  return checkIsByMe(message, userId) && checkIsSent(status);\n};\nvar isFineDelete = function isFineDelete(_a) {\n  var message = _a.message,\n    userId = _a.userId;\n  return checkIsByMe(message, userId);\n};\nvar showMenuTrigger = function showMenuTrigger(props) {\n  var message = props.message,\n    status = props.status,\n    userId = props.userId;\n  if (message.messageType === 'user') {\n    return isFineDelete({\n      message: message,\n      status: status,\n      userId: userId\n    }) || isFineEdit({\n      message: message,\n      status: status,\n      userId: userId\n    }) || isFineCopy({\n      message: message,\n      status: status,\n      userId: userId\n    }) || isFineResend({\n      message: message,\n      status: status,\n      userId: userId\n    });\n  } else {\n    return isFineDelete({\n      message: message,\n      status: status,\n      userId: userId\n    }) || isFineResend({\n      message: message,\n      status: status,\n      userId: userId\n    });\n  }\n};\nfunction OpenchannelUserMessage(_a) {\n  var className = _a.className,\n    message = _a.message,\n    userId = _a.userId,\n    resendMessage = _a.resendMessage,\n    disabled = _a.disabled,\n    showEdit = _a.showEdit,\n    showRemove = _a.showRemove,\n    chainTop = _a.chainTop,\n    status = _a.status;\n  if (!message || message.messageType !== 'user') {\n    return null;\n  } // hooks\n\n  var _b = useContext(LocalizationContext),\n    stringSet = _b.stringSet,\n    dateLocale = _b.dateLocale;\n  var _c = useContext(UserProfileContext),\n    disableUserProfile = _c.disableUserProfile,\n    renderUserProfile = _c.renderUserProfile;\n  var messageRef = useRef(null);\n  var avatarRef = useRef(null);\n  var contextMenuRef = useRef(null);\n  var _d = useState({}),\n    contextStyle = _d[0],\n    setContextStyle = _d[1]; // consts\n\n  var isByMe = checkIsByMe(message, userId);\n  var isPending = checkIsPending(status);\n  var isFailed = checkIsFailed(status);\n  var sender = getSenderFromMessage(message);\n  var MemoizedMessageText = useMemo(function () {\n    return function () {\n      var splitMessage = message.message.split(/\\r/);\n      var matchedMessage = splitMessage.map(function (word) {\n        return word !== '' ? word : /*#__PURE__*/React__default.createElement(\"br\", null);\n      });\n      if (message.updatedAt > 0) {\n        matchedMessage.push( /*#__PURE__*/React__default.createElement(Label, {\n          key: uuidv4(),\n          type: LabelTypography.BODY_1,\n          color: LabelColors.ONBACKGROUND_2,\n          calssName: \"sendbird-openchannel-user-message-word\"\n        }, \" \" + stringSet.MESSAGE_EDITED + \" \"));\n      }\n      return matchedMessage;\n    };\n  }, [message, message.updatedAt]); // place context menu top depending clientHeight of message component\n\n  useEffect(function () {\n    var _a;\n    if (((_a = messageRef === null || messageRef === void 0 ? void 0 : messageRef.current) === null || _a === void 0 ? void 0 : _a.clientHeight) > 36) {\n      setContextStyle({\n        top: '8px '\n      });\n    } else {\n      setContextStyle({\n        top: '2px'\n      });\n    }\n  }, [window.innerWidth]);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), ['sendbird-openchannel-user-message'], false).join(' '),\n    ref: messageRef\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-user-message__left\"\n  }, !chainTop && /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return /*#__PURE__*/React__default.createElement(Avatar, {\n        className: \"sendbird-openchannel-user-message__left__avatar\",\n        src: sender.profileUrl || '',\n        ref: avatarRef,\n        width: \"28px\",\n        height: \"28px\",\n        onClick: function onClick() {\n          if (!disableUserProfile) {\n            toggleDropdown();\n          }\n        }\n      });\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        parentRef: avatarRef,\n        parentContainRef: avatarRef,\n        closeDropdown: closeDropdown,\n        style: {\n          paddingTop: 0,\n          paddingBottom: 0\n        }\n      }, renderUserProfile ? renderUserProfile({\n        user: sender,\n        close: closeDropdown\n      }) : /*#__PURE__*/React__default.createElement(ConnectedUserProfile, {\n        user: sender,\n        onSuccess: closeDropdown,\n        disableMessaging: true\n      }));\n    }\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-user-message__right\"\n  }, !chainTop && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-user-message__right__top\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-user-message__right__top__sender-name\",\n    type: LabelTypography.CAPTION_2,\n    color: isByMe ? LabelColors.SECONDARY_3 : LabelColors.ONBACKGROUND_2\n  }, sender && (sender.friendName || sender.nickname || sender.userId)), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-user-message__right__top__sent-at\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_3\n  }, format(message.createdAt, 'p', {\n    locale: dateLocale\n  }))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-user-message__right__bottom\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-user-message__right__bottom__message\",\n    type: LabelTypography.BODY_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, MemoizedMessageText())), (isPending || isFailed) && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-user-message__right__tail\"\n  }, isPending && /*#__PURE__*/React__default.createElement(Loader, {\n    width: \"16px\",\n    height: \"16px\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-user-message__right__tail__pending\",\n    type: IconTypes.SPINNER,\n    fillColor: IconColors.PRIMARY,\n    width: \"16px\",\n    height: \"16px\"\n  })), isFailed && /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-user-message__right__tail__failed\",\n    type: IconTypes.ERROR,\n    width: \"16px\",\n    height: \"16px\"\n  }))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-user-message__context-menu\",\n    ref: contextMenuRef,\n    style: contextStyle\n  }, /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return showMenuTrigger({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(IconButton, {\n        className: \"sendbird-openchannel-user-message__context-menu--icon\",\n        width: \"32px\",\n        height: \"32px\",\n        onClick: function onClick() {\n          toggleDropdown();\n        }\n      }, /*#__PURE__*/React__default.createElement(Icon, {\n        type: IconTypes.MORE,\n        fillColor: IconColors.CONTENT_INVERSE,\n        width: \"24px\",\n        height: \"24px\"\n      }));\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        parentRef: contextMenuRef,\n        parentContainRef: contextMenuRef,\n        closeDropdown: closeDropdown,\n        openLeft: true\n      }, isFineCopy({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-openchannel-user-message__context-menu__copy\",\n        onClick: function onClick() {\n          copyToClipboard(message.message);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__COPY), isFineEdit({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-openchannel-user-message__context-menu__edit\",\n        onClick: function onClick() {\n          if (disabled) {\n            return;\n          }\n          showEdit(true);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__EDIT), isFineResend({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-openchannel-user-message__context-menu__resend\",\n        onClick: function onClick() {\n          resendMessage(message);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__RESEND), isFineDelete({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-openchannel-user-message__context-menu__delete\",\n        onClick: function onClick() {\n          if (disabled) {\n            return;\n          }\n          showRemove(true);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__DELETE));\n    }\n  })));\n}\nfunction OpenChannelAdminMessage(_a) {\n  var className = _a.className,\n    message = _a.message;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), ['sendbird-openchannel-admin-message'], false).join(' ')\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-admin-message__text\",\n    type: LabelTypography.CAPTION_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, message.message || ''));\n}\nvar URL_REG = /[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/;\nvar createUrlTester = function createUrlTester(regexp) {\n  return function (text) {\n    return regexp.test(text);\n  };\n};\nvar checkOGIsEnalbed = function checkOGIsEnalbed(message) {\n  var ogMetaData = message.ogMetaData;\n  if (!ogMetaData) {\n    return false;\n  }\n  var url = ogMetaData.url;\n  if (!url) {\n    return false;\n  }\n  return true;\n};\nfunction OpenchannelOGMessage(_a) {\n  var message = _a.message,\n    className = _a.className,\n    disabled = _a.disabled,\n    showEdit = _a.showEdit,\n    showRemove = _a.showRemove,\n    resendMessage = _a.resendMessage,\n    chainTop = _a.chainTop,\n    status = _a.status,\n    userId = _a.userId;\n  if (!message || message.messageType !== 'user') {\n    return null;\n  }\n  var ogMetaData = message.ogMetaData;\n  var defaultImage = ogMetaData.defaultImage;\n  var _b = useContext(LocalizationContext),\n    stringSet = _b.stringSet,\n    dateLocale = _b.dateLocale;\n  var _c = useContext(UserProfileContext),\n    disableUserProfile = _c.disableUserProfile,\n    renderUserProfile = _c.renderUserProfile;\n  var _d = useState({}),\n    contextStyle = _d[0],\n    setContextStyle = _d[1];\n  var messageComponentRef = useRef(null);\n  var contextMenuRef = useRef(null);\n  var avatarRef = useRef(null);\n  var isUrl = createUrlTester(URL_REG);\n  var isByMe = checkIsByMe(message, userId);\n  var isPending = checkIsPending(status);\n  var isFailed = checkIsFailed(status);\n  var sender = getSenderFromMessage(message);\n  var MemoizedMessageText = useMemo(function () {\n    return function () {\n      var wordClassName = 'sendbird-openchannel-og-message--word';\n      var splitMessage = message.message.split(' ');\n      var matchedMessage = splitMessage.map(function (word) {\n        return isUrl(word) ? /*#__PURE__*/React__default.createElement(LinkLabel, {\n          key: uuidv4(),\n          className: [wordClassName, 'sendbird-openchannel-og-message--word--link'],\n          src: word,\n          type: LabelTypography.BODY_1,\n          color: LabelColors.PRIMARY\n        }, word) : /*#__PURE__*/React__default.createElement(Label, {\n          key: uuidv4(),\n          className: wordClassName,\n          type: LabelTypography.BODY_1,\n          color: LabelColors.ONBACKGROUND_1\n        }, word);\n      });\n      if (message.updatedAt > 0) {\n        matchedMessage.push( /*#__PURE__*/React__default.createElement(Label, {\n          key: uuidv4(),\n          className: wordClassName,\n          type: LabelTypography.BODY_1,\n          color: LabelColors.ONBACKGROUND_2\n        }, stringSet.MESSAGE_EDITED));\n      }\n      return matchedMessage;\n    };\n  }, [message, message.updatedAt]);\n  var openLink = function openLink() {\n    if (checkOGIsEnalbed(message)) {\n      var url = ogMetaData.url;\n      window.open(url);\n    }\n  }; // place conxt menu top depending clientHeight of message component\n\n  useEffect(function () {\n    var _a;\n    if (((_a = messageComponentRef === null || messageComponentRef === void 0 ? void 0 : messageComponentRef.current) === null || _a === void 0 ? void 0 : _a.clientHeight) > 36) {\n      setContextStyle({\n        top: '8px '\n      });\n    } else {\n      setContextStyle({\n        top: '2px'\n      });\n    }\n  }, [window.innerWidth]);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), ['sendbird-openchannel-og-message'], false).join(' '),\n    ref: messageComponentRef\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__top\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__top__left\"\n  }, !chainTop && /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return /*#__PURE__*/React__default.createElement(Avatar, {\n        className: \"sendbird-openchannel-og-message__top__left__avatar\",\n        src: sender.profileUrl || '',\n        ref: avatarRef,\n        width: \"28px\",\n        height: \"28px\",\n        onClick: function onClick() {\n          if (!disableUserProfile) {\n            toggleDropdown();\n          }\n        }\n      });\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        parentRef: avatarRef,\n        parentContainRef: avatarRef,\n        closeDropdown: closeDropdown,\n        style: {\n          paddingTop: 0,\n          paddingBottom: 0\n        }\n      }, renderUserProfile ? renderUserProfile({\n        user: sender,\n        close: closeDropdown\n      }) : /*#__PURE__*/React__default.createElement(ConnectedUserProfile, {\n        user: sender,\n        onSuccess: closeDropdown,\n        disableMessaging: true\n      }));\n    }\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__top__right\"\n  }, !chainTop && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__top__right__title\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-og-message__top__right__title__sender-name\",\n    type: LabelTypography.CAPTION_2,\n    color: isByMe ? LabelColors.SECONDARY_3 : LabelColors.ONBACKGROUND_2\n  }, sender && (sender.friendName || sender.nickname || sender.userId)), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-og-message__top__right__title__sent-at\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_3\n  }, format(message.createdAt, 'p', {\n    locale: dateLocale\n  }))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__top__right__description\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-og-message__top__right__description__message\",\n    type: LabelTypography.BODY_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, MemoizedMessageText()))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__top__context-menu\",\n    ref: contextMenuRef,\n    style: contextStyle\n  }, /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return showMenuTrigger({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(IconButton, {\n        className: \"sendbird-openchannel-og-message__top__context-menu--icon\",\n        width: \"32px\",\n        height: \"32px\",\n        onClick: function onClick() {\n          toggleDropdown();\n        }\n      }, /*#__PURE__*/React__default.createElement(Icon, {\n        type: IconTypes.MORE,\n        fillColor: IconColors.CONTENT_INVERSE,\n        width: \"24px\",\n        height: \"24px\"\n      }));\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        parentRef: contextMenuRef,\n        parentContainRef: contextMenuRef,\n        closeDropdown: closeDropdown,\n        openLeft: true\n      }, isFineCopy({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-openchannel-og-message__top__context-menu__copy\",\n        onClick: function onClick() {\n          copyToClipboard(message.message);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__COPY), isFineEdit({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-openchannel-og-message__top__context-menu__edit\",\n        onClick: function onClick() {\n          if (disabled) {\n            return;\n          }\n          showEdit(true);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__EDIT), isFineResend({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-openchannel-og-message__top__context-menu__resend\",\n        onClick: function onClick() {\n          resendMessage(message);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__RESEND), isFineDelete({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-openchannel-og-message__top__context-menu__delete\",\n        onClick: function onClick() {\n          if (disabled) {\n            return;\n          }\n          showRemove(true);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__DELETE));\n    }\n  }))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__bottom\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__bottom__og-tag\"\n  }, ogMetaData.url && /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-og-message__bottom__og-tag__url\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_2\n  }, ogMetaData.url), ogMetaData.title && /*#__PURE__*/React__default.createElement(LinkLabel, {\n    className: \"sendbird-openchannel-og-message__bottom__og-tag__title\",\n    src: ogMetaData.url,\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.PRIMARY\n  }, ogMetaData.title), ogMetaData.description && /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-og-message__bottom__og-tag__description\",\n    type: LabelTypography.BODY_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, ogMetaData.description), ogMetaData.url && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__bottom__og-tag__thumbnail\",\n    role: \"button\",\n    onClick: openLink,\n    onKeyDown: openLink,\n    tabIndex: 0\n  }, defaultImage && /*#__PURE__*/React__default.createElement(ImageRenderer, {\n    className: \"sendbird-openchannel-og-message__bottom__og-tag__thumbnail__image\",\n    url: defaultImage.url || '',\n    alt: defaultImage.alt || '',\n    height: \"189px\",\n    defaultComponent: /*#__PURE__*/React__default.createElement(\"div\", {\n      className: \"sendbird-openchannel-og-message__bottom__og-tag__thumbnail__image--placeholder\"\n    }, /*#__PURE__*/React__default.createElement(Icon, {\n      type: IconTypes.THUMBNAIL_NONE,\n      width: \"56px\",\n      height: \"56px\"\n    }))\n  }))), (isPending || isFailed) && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-og-message__top__right__tail\"\n  }, isPending && /*#__PURE__*/React__default.createElement(Loader, {\n    width: \"16px\",\n    height: \"16px\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-og-message__top__right__tail__pending\",\n    type: IconTypes.SPINNER,\n    fillColor: IconColors.PRIMARY,\n    width: \"16px\",\n    height: \"16px\"\n  })), isFailed && /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-og-message__top__right__tail__failed\",\n    type: IconTypes.ERROR,\n    width: \"16px\",\n    height: \"16px\"\n  }))));\n}\nvar SUPPORTING_TYPES = {\n  IMAGE: 'IMAGE',\n  VIDEO: 'VIDEO',\n  UNSUPPORTED: 'UNSUPPORTED'\n};\nvar SUPPORTED_MIMES$1 = {\n  IMAGE: ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'],\n  VIDEO: ['video/mpeg', 'video/ogg', 'video/webm', 'video/mp4']\n};\nvar getSupportingFileType = function getSupportingFileType(type) {\n  if (SUPPORTED_MIMES$1.IMAGE.indexOf(type) >= 0) {\n    return SUPPORTING_TYPES.IMAGE;\n  }\n  if (SUPPORTED_MIMES$1.VIDEO.indexOf(type) >= 0) {\n    return SUPPORTING_TYPES.VIDEO;\n  }\n  return SUPPORTING_TYPES.UNSUPPORTED;\n};\nfunction OpenchannelThumbnailMessage(_a) {\n  var _b;\n  var className = _a.className,\n    message = _a.message,\n    disabled = _a.disabled,\n    userId = _a.userId,\n    status = _a.status,\n    chainTop = _a.chainTop,\n    _onClick = _a.onClick,\n    showRemove = _a.showRemove,\n    resendMessage = _a.resendMessage;\n  var type = message.type,\n    url = message.url,\n    localUrl = message.localUrl,\n    thumbnails = message.thumbnails;\n  var thumbnailUrl = thumbnails && thumbnails.length > 0 && thumbnails[0].url || null;\n  var _c = useContext(LocalizationContext),\n    stringSet = _c.stringSet,\n    dateLocale = _c.dateLocale;\n  var _d = useContext(UserProfileContext),\n    disableUserProfile = _d.disableUserProfile,\n    renderUserProfile = _d.renderUserProfile;\n  var _e = useState(360),\n    messageWidth = _e[0],\n    setMessageWidth = _e[1];\n  var messageRef = useRef(null);\n  var contextMenuRef = useRef(null);\n  var avatarRef = useRef(null);\n  var memorizedThumbnailPlaceHolder = useMemo(function () {\n    return function (type) {\n      return function (_a) {\n        var style = _a.style;\n        return /*#__PURE__*/(\n          // eslint-disable-line\n          React__default.createElement(\"div\", {\n            style: style\n          }, /*#__PURE__*/React__default.createElement(Icon, {\n            type: type,\n            fillColor: IconColors.ON_BACKGROUND_2,\n            width: \"56px\",\n            height: \"56px\"\n          }))\n        );\n      };\n    };\n  }, []);\n  var isByMe = checkIsByMe(message, userId);\n  var isMessageSent = checkIsSent(status);\n  var isPending = checkIsPending(status);\n  var isFailed = checkIsFailed(status);\n  var sender = getSenderFromMessage(message);\n  useEffect(function () {\n    var _a;\n    var thumbnailWidth = ((_a = messageRef === null || messageRef === void 0 ? void 0 : messageRef.current) === null || _a === void 0 ? void 0 : _a.clientWidth) - 80;\n    setMessageWidth(thumbnailWidth > 360 ? 360 : thumbnailWidth);\n  }, []);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), ['sendbird-openchannel-thumbnail-message'], false).join(' '),\n    ref: messageRef\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__left\"\n  }, !chainTop && /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return /*#__PURE__*/React__default.createElement(Avatar, {\n        className: \"sendbird-openchannel-thumbnail-message__left__avatar\",\n        src: sender.profileUrl || '',\n        ref: avatarRef,\n        width: \"28px\",\n        height: \"28px\",\n        onClick: function onClick() {\n          if (!disableUserProfile) {\n            toggleDropdown();\n          }\n        }\n      });\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        parentRef: avatarRef,\n        parentContainRef: avatarRef,\n        closeDropdown: closeDropdown,\n        style: {\n          paddingTop: 0,\n          paddingBottom: 0\n        }\n      }, renderUserProfile ? renderUserProfile({\n        user: sender,\n        close: closeDropdown\n      }) : /*#__PURE__*/React__default.createElement(ConnectedUserProfile, {\n        user: sender,\n        onSuccess: closeDropdown,\n        disableMessaging: true\n      }));\n    }\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__right\"\n  }, !chainTop && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__right__title\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-thumbnail-message__right__title__sender-name\",\n    type: LabelTypography.CAPTION_2,\n    color: isByMe ? LabelColors.SECONDARY_3 : LabelColors.ONBACKGROUND_2\n  }, sender && (sender.friendName || sender.nickname || sender.userId)), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-thumbnail-message__right__title__sent-at\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_3\n  }, format(message.createdAt, 'p', {\n    locale: dateLocale\n  }))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__right__body\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap\",\n    role: \"button\",\n    onClick: function onClick() {\n      if (isMessageSent) {\n        _onClick(true);\n      }\n    },\n    onKeyDown: function onKeyDown() {\n      if (isMessageSent) {\n        _onClick(true);\n      }\n    },\n    tabIndex: 0\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__overlay\"\n  }), (_b = {}, _b[SUPPORTING_TYPES.VIDEO] = url || localUrl ? /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__video\"\n  }, thumbnailUrl ? /*#__PURE__*/React__default.createElement(ImageRenderer, {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__video\",\n    url: thumbnailUrl,\n    width: messageWidth,\n    height: \"270px\",\n    alt: \"image\",\n    placeHolder: memorizedThumbnailPlaceHolder(IconTypes.PLAY)\n  }) : /*#__PURE__*/React__default.createElement(\"video\", {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__video__video\"\n  }, /*#__PURE__*/React__default.createElement(\"source\", {\n    src: url || localUrl,\n    type: type\n  })), /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__video__icon\",\n    type: IconTypes.PLAY,\n    fillColor: IconColors.ON_BACKGROUND_2,\n    width: \"56px\",\n    height: \"56px\"\n  })) : /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__video--icon\",\n    type: IconTypes.PHOTO,\n    fillColor: IconColors.ON_BACKGROUND_2,\n    width: \"56px\",\n    height: \"56px\"\n  }), _b[SUPPORTING_TYPES.IMAGE] = url || localUrl ? /*#__PURE__*/React__default.createElement(ImageRenderer, {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__image\",\n    url: thumbnailUrl || url || localUrl,\n    alt: \"image\",\n    width: messageWidth,\n    height: \"270px\",\n    placeHolder: memorizedThumbnailPlaceHolder(IconTypes.PHOTO)\n  }) : /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__image--icon\",\n    type: IconTypes.PHOTO,\n    fillColor: IconColors.ON_BACKGROUND_2,\n    width: \"56px\",\n    height: \"56px\"\n  }), _b[SUPPORTING_TYPES.UNSUPPORTED] = /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-thumbnail-message__right__body__wrap__unknown\",\n    type: IconTypes.PHOTO,\n    fillColor: IconColors.ON_BACKGROUND_2,\n    width: \"56px\",\n    height: \"56px\"\n  }), _b)[getSupportingFileType(type)])), (isPending || isFailed) && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__right__tail\"\n  }, isPending && /*#__PURE__*/React__default.createElement(Loader, {\n    width: \"16px\",\n    height: \"16px\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-thumbnail-message__right__tail__pending\",\n    type: IconTypes.SPINNER,\n    fillColor: IconColors.PRIMARY,\n    width: \"16px\",\n    height: \"16px\"\n  })), isFailed && /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-thumbnail-message__right__tail__failed\",\n    type: IconTypes.ERROR,\n    width: \"16px\",\n    height: \"16px\"\n  }))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-thumbnail-message__context-menu\",\n    ref: contextMenuRef\n  }, /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return showMenuTrigger({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(IconButton, {\n        className: \"sendbird-openchannel-thumbnail-message__context-menu--icon\",\n        width: \"32px\",\n        height: \"32px\",\n        onClick: toggleDropdown\n      }, /*#__PURE__*/React__default.createElement(Icon, {\n        type: IconTypes.MORE,\n        fillColor: IconColors.CONTENT_INVERSE,\n        width: \"24px\",\n        height: \"24px\"\n      }));\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        parentRef: contextMenuRef,\n        parentContainRef: contextMenuRef,\n        closeDropdown: closeDropdown,\n        openLeft: true\n      }, isFineResend({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        onClick: function onClick() {\n          resendMessage(message);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__RESEND), isFineDelete({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        onClick: function onClick() {\n          if (disabled) {\n            return;\n          }\n          showRemove(true);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__DELETE));\n    }\n  })));\n}\nvar checkFileType = function checkFileType(fileUrl) {\n  var audioFile = /(\\.mp3)$/i;\n  var gifFile = /(\\.gif)$/i;\n  if (audioFile.test(fileUrl)) {\n    return IconTypes.FILE_AUDIO;\n  }\n  if (gifFile.test(fileUrl)) {\n    return IconTypes.GIF;\n  }\n  return IconTypes.FILE_DOCUMENT;\n};\nvar truncate = function truncate(fullStr, strLen) {\n  if (fullStr === null || fullStr === undefined) return '';\n  if (fullStr.length <= strLen) return fullStr;\n  var separator = '...';\n  var sepLen = separator.length;\n  var charsToShow = strLen - sepLen;\n  var frontChars = Math.ceil(charsToShow / 2);\n  var backChars = Math.floor(charsToShow / 2);\n  return fullStr.substr(0, frontChars) + separator + fullStr.substr(fullStr.length - backChars);\n};\nfunction OpenchannelFileMessage(_a) {\n  var className = _a.className,\n    message = _a.message,\n    userId = _a.userId,\n    disabled = _a.disabled,\n    chainTop = _a.chainTop,\n    status = _a.status,\n    showRemove = _a.showRemove,\n    resendMessage = _a.resendMessage;\n  var contextMenuRef = useRef(null);\n  var avatarRef = useRef(null);\n  var _b = useContext(LocalizationContext),\n    stringSet = _b.stringSet,\n    dateLocale = _b.dateLocale;\n  var _c = useContext(UserProfileContext),\n    disableUserProfile = _c.disableUserProfile,\n    renderUserProfile = _c.renderUserProfile;\n  var openFileUrl = function openFileUrl() {\n    window.open(message.url);\n  };\n  var isByMe = checkIsByMe(message, userId);\n  var isPending = checkIsPending(status);\n  var isFailed = checkIsFailed(status);\n  var sender = getSenderFromMessage(message);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), ['sendbird-openchannel-file-message'], false).join(' ')\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-file-message__left\"\n  }, !chainTop && /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return /*#__PURE__*/React__default.createElement(Avatar, {\n        className: \"sendbird-openchannel-file-message__left__avatar\",\n        src: sender.profileUrl || '',\n        ref: avatarRef,\n        width: \"28px\",\n        height: \"28px\",\n        onClick: function onClick() {\n          if (!disableUserProfile) {\n            toggleDropdown();\n          }\n        }\n      });\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        parentRef: avatarRef,\n        parentContainRef: avatarRef,\n        closeDropdown: closeDropdown,\n        style: {\n          paddingTop: 0,\n          paddingBottom: 0\n        }\n      }, renderUserProfile ? renderUserProfile({\n        user: sender,\n        close: closeDropdown\n      }) : /*#__PURE__*/React__default.createElement(ConnectedUserProfile, {\n        user: sender,\n        onSuccess: closeDropdown,\n        disableMessaging: true\n      }));\n    }\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-file-message__right\"\n  }, !chainTop && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-file-message__right__title\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-file-message__right__title__sender-name\",\n    type: LabelTypography.CAPTION_2,\n    color: isByMe ? LabelColors.SECONDARY_3 : LabelColors.ONBACKGROUND_2\n  }, sender && (sender.friendName || sender.nickname || sender.userId)), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-openchannel-file-message__right__title__sent-at\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_3\n  }, format(message.createdAt, 'p', {\n    locale: dateLocale\n  }))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-file-message__right__body\"\n  }, checkFileType(message.url) && /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-file-message__right__body__icon\",\n    type: checkFileType(message.url),\n    fillColor: IconColors.PRIMARY,\n    width: \"48px\",\n    height: \"48px\"\n  }), /*#__PURE__*/React__default.createElement(TextButton, {\n    className: \"sendbird-openchannel-file-message__right__body__file-name\",\n    onClick: openFileUrl\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.BODY_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, truncate(message.name || message.url, 40)))), (isPending || isFailed) && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-file-message__right__tail\"\n  }, isPending && /*#__PURE__*/React__default.createElement(Loader, {\n    width: \"16px\",\n    height: \"16px\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-file-message__right__tail__pending\",\n    type: IconTypes.SPINNER,\n    fillColor: IconColors.PRIMARY,\n    width: \"16px\",\n    height: \"16px\"\n  })), isFailed && /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-openchannel-file-message__right__tail__failed\",\n    type: IconTypes.ERROR,\n    width: \"16px\",\n    height: \"16px\"\n  }))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-file-message__context-menu\",\n    ref: contextMenuRef\n  }, /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return showMenuTrigger({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(IconButton, {\n        className: \"sendbird-openchannel-file-message__context-menu__icon\",\n        width: \"32px\",\n        height: \"32px\",\n        onClick: toggleDropdown\n      }, /*#__PURE__*/React__default.createElement(Icon, {\n        type: IconTypes.MORE,\n        width: \"24px\",\n        height: \"24px\"\n      }));\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        parentRef: contextMenuRef,\n        parentContainRef: contextMenuRef,\n        closeDropdown: closeDropdown,\n        openLeft: true\n      }, isFineResend({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        onClick: function onClick() {\n          if (disabled) {\n            return;\n          }\n          resendMessage(message);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__RESEND), isFineDelete({\n        message: message,\n        userId: userId,\n        status: status\n      }) && /*#__PURE__*/React__default.createElement(MenuItem, {\n        onClick: function onClick() {\n          if (disabled) {\n            return;\n          }\n          showRemove(true);\n          closeDropdown();\n        }\n      }, stringSet.CONTEXT_MENU_DROPDOWN__DELETE));\n    }\n  })));\n}\nfunction RemoveMessageModal(_a) {\n  var onCloseModal = _a.onCloseModal,\n    onDeleteMessage = _a.onDeleteMessage;\n  var stringSet = useContext(LocalizationContext).stringSet;\n  return /*#__PURE__*/React__default.createElement(Modal, {\n    onCancel: onCloseModal,\n    onSubmit: onDeleteMessage,\n    submitText: \"Delete\",\n    titleText: stringSet.MODAL__DELETE_MESSAGE__TITLE\n  });\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Complete_list_of_MIME_types\nvar SUPPORTED_MIMES = {\n  IMAGE: ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/svg+xml', 'image/webp' // not supported in IE\n  ],\n\n  VIDEO: ['video/mpeg', 'video/ogg', 'video/webm', 'video/mp4']\n};\nvar isImage = function isImage(type) {\n  return SUPPORTED_MIMES.IMAGE.indexOf(type) >= 0;\n};\nvar isVideo = function isVideo(type) {\n  return SUPPORTED_MIMES.VIDEO.indexOf(type) >= 0;\n};\nvar MessageTypes = {\n  ADMIN: 'ADMIN',\n  USER: 'USER',\n  FILE: 'FILE',\n  THUMBNAIL: 'THUMBNAIL',\n  OG: 'OG',\n  UNKNOWN: 'UNKNOWN'\n};\nvar SendingMessageStatus = {\n  NONE: 'none',\n  SUCCEEDED: 'succeeded',\n  FAILED: 'failed',\n  PENDING: 'pending'\n};\nvar getMessageType = function getMessageType(message) {\n  if (message.isUserMessage && message.isUserMessage() || message.messageType === 'user') {\n    return message.ogMetaData ? MessageTypes.OG : MessageTypes.USER;\n  }\n  if (message.isAdminMessage && message.isAdminMessage()) {\n    return MessageTypes.ADMIN;\n  }\n  if (message.messageType === 'file') {\n    return isImage(message.type) || isVideo(message.type) ? MessageTypes.THUMBNAIL : MessageTypes.FILE;\n  }\n  return MessageTypes.UNKNOWN;\n};\nfunction MessageHoc(_a) {\n  var _b;\n  var message = _a.message,\n    userId = _a.userId,\n    disabled = _a.disabled,\n    editDisabled = _a.editDisabled,\n    hasSeparator = _a.hasSeparator,\n    channel = _a.channel,\n    renderCustomMessage = _a.renderCustomMessage,\n    deleteMessage = _a.deleteMessage,\n    updateMessage = _a.updateMessage,\n    resendMessage = _a.resendMessage,\n    status = _a.status,\n    chainTop = _a.chainTop,\n    chainBottom = _a.chainBottom;\n  var sender = null;\n  if (message.messageType !== 'admin') {\n    sender = message.sender;\n  }\n  var dateLocale = useContext(LocalizationContext).dateLocale;\n  var RenderedMessage = useMemo(function () {\n    if (renderCustomMessage) {\n      return renderCustomMessage(message, channel, chainTop, chainBottom);\n    }\n    return null;\n  }, [message, renderCustomMessage]);\n  var _c = useState(false),\n    showEdit = _c[0],\n    setShowEdit = _c[1];\n  var _d = useState(false),\n    showRemove = _d[0],\n    setShowRemove = _d[1];\n  var _e = useState(false),\n    showFileViewer = _e[0],\n    setShowFileViewer = _e[1];\n  var editMessageInputRef = useRef(null);\n  var isByMe = false;\n  if (sender && message.messageType !== 'admin') {\n    // pending and failed messages are by me\n    isByMe = userId === sender.userId || message.requestState === SendingMessageStatus.PENDING || message.requestState === SendingMessageStatus.FAILED;\n  }\n  if (RenderedMessage) {\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      className: \"sendbird-msg-hoc sendbird-msg--scroll-ref\"\n    }, /*#__PURE__*/React__default.createElement(RenderedMessage, {\n      message: message\n    }));\n  }\n  if (message.messageType === 'user' && showEdit) {\n    return /*#__PURE__*/React__default.createElement(MessageInput, {\n      isEdit: true,\n      disabled: editDisabled,\n      ref: editMessageInputRef,\n      name: message.messageId,\n      onSendMessage: updateMessage,\n      onCancelEdit: function onCancelEdit() {\n        setShowEdit(false);\n      },\n      value: message.message\n    });\n  }\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-msg-hoc sendbird-msg--scroll-ref\"\n  }, hasSeparator && /*#__PURE__*/React__default.createElement(DateSeparator, null, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.CAPTION_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, format(message.createdAt, 'MMMM dd, yyyy', {\n    locale: dateLocale\n  }))), (_b = {}, _b[MessageTypes.ADMIN] = function () {\n    if (message.messageType === 'admin') {\n      return /*#__PURE__*/React__default.createElement(OpenChannelAdminMessage, {\n        message: message\n      });\n    }\n  }(), _b[MessageTypes.FILE] = function () {\n    if (message.messageType === 'file') {\n      return /*#__PURE__*/React__default.createElement(OpenchannelFileMessage, {\n        message: message,\n        disabled: disabled,\n        userId: userId,\n        showRemove: setShowRemove,\n        resendMessage: resendMessage,\n        status: status,\n        chainTop: chainTop,\n        chainBottom: chainBottom\n      });\n    }\n    return;\n  }(), _b[MessageTypes.OG] = function () {\n    if (message.messageType === 'user') {\n      return /*#__PURE__*/React__default.createElement(OpenchannelOGMessage, {\n        message: message,\n        status: status,\n        userId: userId,\n        showEdit: setShowEdit,\n        disabled: disabled,\n        showRemove: setShowRemove,\n        resendMessage: resendMessage,\n        chainTop: chainTop,\n        chainBottom: chainBottom\n      });\n    }\n    return;\n  }(), _b[MessageTypes.THUMBNAIL] = function () {\n    if (message.messageType === 'file') {\n      return /*#__PURE__*/React__default.createElement(OpenchannelThumbnailMessage, {\n        message: message,\n        disabled: disabled,\n        userId: userId,\n        showRemove: setShowRemove,\n        resendMessage: resendMessage,\n        onClick: setShowFileViewer,\n        status: status,\n        chainTop: chainTop,\n        chainBottom: chainBottom\n      });\n    }\n    return;\n  }(), _b[MessageTypes.USER] = function () {\n    if (message.messageType === 'user') {\n      return /*#__PURE__*/React__default.createElement(OpenchannelUserMessage, {\n        message: message,\n        userId: userId,\n        disabled: disabled,\n        showEdit: setShowEdit,\n        showRemove: setShowRemove,\n        resendMessage: resendMessage,\n        status: status,\n        chainTop: chainTop,\n        chainBottom: chainBottom\n      });\n    }\n    return;\n  }(), _b[MessageTypes.UNKNOWN] = function () {\n    return; // return (\n    //   <OpenChannelUnknownMessage message={message} />\n    // );\n  }(), _b)[getMessageType(message)], showRemove && /*#__PURE__*/React__default.createElement(RemoveMessageModal, {\n    onCloseModal: function onCloseModal() {\n      return setShowRemove(false);\n    },\n    onDeleteMessage: function onDeleteMessage() {\n      if (message.messageType !== 'admin') {\n        deleteMessage(message);\n      }\n    }\n  }), showFileViewer && message.messageType === 'file' && /*#__PURE__*/React__default.createElement(FileViewer, {\n    onClose: function onClose() {\n      return setShowFileViewer(false);\n    },\n    message: message,\n    onDelete: function onDelete() {\n      return deleteMessage(message);\n    },\n    isByMe: isByMe\n  }));\n}\nfunction OpenchannelConversationScroll(_a, ref) {\n  var _b = _a.useMessageGrouping,\n    useMessageGrouping = _b === void 0 ? true : _b,\n    openchannel = _a.openchannel,\n    user = _a.user,\n    allMessages = _a.allMessages,\n    _c = _a.isOnline,\n    isOnline = _c === void 0 ? true : _c,\n    hasMore = _a.hasMore,\n    onScroll = _a.onScroll,\n    renderCustomMessage = _a.renderCustomMessage,\n    updateMessage = _a.updateMessage,\n    deleteMessage = _a.deleteMessage,\n    resendMessage = _a.resendMessage;\n  var scrollRef = ref || useRef(null);\n  var _d = useState(false),\n    showScrollDownButton = _d[0],\n    setShowScrollDownButton = _d[1];\n  var handleOnScroll = function handleOnScroll(e) {\n    var element = e.target;\n    var scrollTop = element.scrollTop,\n      scrollHeight = element.scrollHeight,\n      clientHeight = element.clientHeight;\n    if (scrollHeight > scrollTop + clientHeight && window.navigator.userAgent.indexOf('MSIE ') < 0 // don't show button in IE\n    ) {\n      setShowScrollDownButton(true);\n    } else {\n      setShowScrollDownButton(false);\n    }\n    if (!hasMore) {\n      return;\n    }\n    if (scrollTop === 0) {\n      var nodes = scrollRef.current.querySelectorAll('.sendbird-msg--scroll-ref');\n      var first_1 = nodes && nodes[0];\n      onScroll(function () {\n        try {\n          first_1.scrollIntoView();\n        } catch (error) {}\n      });\n    }\n  };\n  var scrollToBottom = function scrollToBottom() {\n    if (scrollRef && scrollRef.current) {\n      scrollRef.current.scrollTo(0, scrollRef.current.scrollHeight);\n      setShowScrollDownButton(false);\n    }\n  };\n  var hasMessage = useMemo(function () {\n    return allMessages.length > 0;\n  }, [allMessages.length]);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-conversation-scroll\",\n    onScroll: handleOnScroll,\n    ref: scrollRef\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-conversation-scroll__container\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-conversation-scroll__container__padding\"\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-conversation-scroll__container__item-container\" + (hasMessage ? '' : '--no-messages')\n  }, hasMessage ? allMessages.map(function (message, index) {\n    var status;\n    if (message.messageType !== 'admin') {\n      status = message.sendingStatus;\n    }\n    var previousMessage = allMessages[index - 1];\n    var nextMessage = allMessages[index - 1];\n    var previousMessageCreatedAt = previousMessage && previousMessage.createdAt;\n    var currentCreatedAt = message.createdAt; // https://stackoverflow.com/a/41855608\n\n    var hasSeparator = !(previousMessageCreatedAt && isSameDay(currentCreatedAt, previousMessageCreatedAt));\n    var _a = useMessageGrouping ? compareMessagesForGrouping(previousMessage, message, nextMessage) : [false, false],\n      chainTop = _a[0],\n      chainBottom = _a[1];\n    return /*#__PURE__*/React__default.createElement(MessageHoc, {\n      renderCustomMessage: renderCustomMessage,\n      channel: openchannel,\n      key: message.messageId,\n      message: message,\n      status: status,\n      userId: user.userId,\n      disabled: !isOnline,\n      editDisabled: openchannel.isFrozen,\n      hasSeparator: hasSeparator,\n      chainTop: chainTop,\n      chainBottom: chainBottom,\n      deleteMessage: deleteMessage,\n      updateMessage: updateMessage,\n      resendMessage: resendMessage\n    });\n  }) : /*#__PURE__*/React__default.createElement(PlaceHolder, {\n    className: \"sendbird-openchannel-conversation-scroll__container__place-holder\",\n    type: PlaceHolderTypes.NO_MESSAGES\n  })), showScrollDownButton && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-conversation-scroll__container__scroll-bottom-button\",\n    onClick: scrollToBottom,\n    onKeyDown: scrollToBottom,\n    tabIndex: 0,\n    role: \"button\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    width: \"24px\",\n    height: \"24px\",\n    type: IconTypes.CHEVRON_DOWN,\n    fillColor: IconColors.CONTENT\n  }))));\n}\nvar OpenchannelConversationScroll$1 = /*#__PURE__*/React__default.forwardRef(OpenchannelConversationScroll);\nvar SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\nvar SET_CHANNEL_INVALID = 'SET_CHANNEL_INVALID';\nvar RESET_MESSAGES = 'RESET_MESSAGES';\nvar GET_PREV_MESSAGES_START = 'GET_PREV_MESSAGES_START';\nvar GET_PREV_MESSAGES_SUCESS = 'GET_PREV_MESSAGES_SUCESS';\nvar GET_PREV_MESSAGES_FAIL = 'GET_PREV_MESSAGES_FAIL';\nvar SENDING_MESSAGE_FAILED = 'SENDING_MESSAGE_FAILED';\nvar SENDING_MESSAGE_SUCCEEDED = 'SENDING_MESSAGE_SUCCEEDED';\nvar SENDING_MESSAGE_START = 'SENDING_MESSAGE_START';\nvar RESENDING_MESSAGE_START = 'RESENDING_MESSAGE_START';\nvar FETCH_PARTICIPANT_LIST = 'FETCH_PARTICIPANT_LIST';\nvar FETCH_BANNED_USER_LIST = 'FETCH_BANNED_USER_LIST';\nvar FETCH_MUTED_USER_LIST = 'FETCH_MUTED_USER_LIST';\nvar TRIM_MESSAGE_LIST = 'TRIM_MESSAGE_LIST'; // event handlers\n\nvar ON_MESSAGE_RECEIVED = 'ON_MESSAGE_RECEIVED';\nvar ON_MESSAGE_UPDATED = 'ON_MESSAGE_UPDATED';\nvar ON_MESSAGE_DELETED = 'ON_MESSAGE_DELETED';\nvar ON_MESSAGE_DELETED_BY_REQ_ID = 'ON_MESSAGE_DELETED_BY_REQ_ID';\nvar ON_OPERATOR_UPDATED = 'ON_OPERATOR_UPDATED';\nvar ON_USER_ENTERED = 'ON_USER_ENTERED';\nvar ON_USER_EXITED = 'ON_USER_EXITED';\nvar ON_USER_MUTED = 'ON_USER_MUTED';\nvar ON_USER_UNMUTED = 'ON_USER_UNMUTED';\nvar ON_USER_BANNED = 'ON_USER_BANNED';\nvar ON_USER_UNBANNED = 'ON_USER_UNBANNED';\nvar ON_CHANNEL_FROZEN = 'ON_CHANNEL_FROZEN';\nvar ON_CHANNEL_UNFROZEN = 'ON_CHANNEL_UNFROZEN';\nvar ON_CHANNEL_CHANGED = 'ON_CHANNEL_CHANGED';\nvar ON_META_DATA_CREATED = 'ON_META_DATA_CREATED';\nvar ON_META_DATA_UPDATED = 'ON_META_DATA_UPDATED';\nvar ON_META_DATA_DELETED = 'ON_META_DATA_DELETED';\nvar ON_META_COUNTERS_CREATED = 'ON_META_COUNTERS_CREATED';\nvar ON_META_COUNTERS_UPDATED = 'ON_META_COUNTERS_UPDATED';\nvar ON_META_COUNTERS_DELETED = 'ON_META_COUNTERS_DELETED';\nvar ON_MENTION_RECEIVED = 'ON_MENTION_RECEIVED';\nvar messageActionTypes = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  SET_CURRENT_CHANNEL: SET_CURRENT_CHANNEL,\n  SET_CHANNEL_INVALID: SET_CHANNEL_INVALID,\n  RESET_MESSAGES: RESET_MESSAGES,\n  GET_PREV_MESSAGES_START: GET_PREV_MESSAGES_START,\n  GET_PREV_MESSAGES_SUCESS: GET_PREV_MESSAGES_SUCESS,\n  GET_PREV_MESSAGES_FAIL: GET_PREV_MESSAGES_FAIL,\n  SENDING_MESSAGE_FAILED: SENDING_MESSAGE_FAILED,\n  SENDING_MESSAGE_SUCCEEDED: SENDING_MESSAGE_SUCCEEDED,\n  SENDING_MESSAGE_START: SENDING_MESSAGE_START,\n  RESENDING_MESSAGE_START: RESENDING_MESSAGE_START,\n  FETCH_PARTICIPANT_LIST: FETCH_PARTICIPANT_LIST,\n  FETCH_BANNED_USER_LIST: FETCH_BANNED_USER_LIST,\n  FETCH_MUTED_USER_LIST: FETCH_MUTED_USER_LIST,\n  TRIM_MESSAGE_LIST: TRIM_MESSAGE_LIST,\n  ON_MESSAGE_RECEIVED: ON_MESSAGE_RECEIVED,\n  ON_MESSAGE_UPDATED: ON_MESSAGE_UPDATED,\n  ON_MESSAGE_DELETED: ON_MESSAGE_DELETED,\n  ON_MESSAGE_DELETED_BY_REQ_ID: ON_MESSAGE_DELETED_BY_REQ_ID,\n  ON_OPERATOR_UPDATED: ON_OPERATOR_UPDATED,\n  ON_USER_ENTERED: ON_USER_ENTERED,\n  ON_USER_EXITED: ON_USER_EXITED,\n  ON_USER_MUTED: ON_USER_MUTED,\n  ON_USER_UNMUTED: ON_USER_UNMUTED,\n  ON_USER_BANNED: ON_USER_BANNED,\n  ON_USER_UNBANNED: ON_USER_UNBANNED,\n  ON_CHANNEL_FROZEN: ON_CHANNEL_FROZEN,\n  ON_CHANNEL_UNFROZEN: ON_CHANNEL_UNFROZEN,\n  ON_CHANNEL_CHANGED: ON_CHANNEL_CHANGED,\n  ON_META_DATA_CREATED: ON_META_DATA_CREATED,\n  ON_META_DATA_UPDATED: ON_META_DATA_UPDATED,\n  ON_META_DATA_DELETED: ON_META_DATA_DELETED,\n  ON_META_COUNTERS_CREATED: ON_META_COUNTERS_CREATED,\n  ON_META_COUNTERS_UPDATED: ON_META_COUNTERS_UPDATED,\n  ON_META_COUNTERS_DELETED: ON_META_COUNTERS_DELETED,\n  ON_MENTION_RECEIVED: ON_MENTION_RECEIVED\n});\nfunction reducer(state, action) {\n  var _a;\n  switch (action.type) {\n    case RESET_MESSAGES:\n      {\n        return __assign(__assign({}, state), {\n          allMessages: []\n        });\n      }\n    case SET_CURRENT_CHANNEL:\n      {\n        var gottenChannel = action.payload;\n        var operators = gottenChannel.operators;\n        if (!state.isInvalid && state.currentOpenChannel && state.currentOpenChannel.url && state.currentOpenChannel.url === gottenChannel.url) {\n          return state;\n        }\n        return __assign(__assign({}, state), {\n          currentOpenChannel: gottenChannel,\n          isInvalid: false,\n          operators: operators,\n          participants: operators,\n          bannedParticipantIds: [],\n          mutedParticipantIds: []\n        });\n      }\n    case SET_CHANNEL_INVALID:\n      {\n        return __assign(__assign({}, state), {\n          isInvalid: true\n        });\n      }\n    case GET_PREV_MESSAGES_START:\n      {\n        return __assign(__assign({}, state), {\n          loading: true\n        });\n      }\n    case GET_PREV_MESSAGES_SUCESS:\n    case GET_PREV_MESSAGES_FAIL:\n      {\n        var isFailed = action.type === GET_PREV_MESSAGES_FAIL;\n        var _b = action.payload,\n          _c = _b.currentOpenChannel,\n          currentOpenChannel = _c === void 0 ? {} : _c,\n          _d = _b.messages,\n          messages = _d === void 0 ? [] : _d,\n          hasMore = _b.hasMore,\n          lastMessageTimestamp = _b.lastMessageTimestamp;\n        var actionChannelUrl = currentOpenChannel.url;\n        var receivedMessages_1 = isFailed ? [] : messages;\n        var _hasMore = isFailed ? false : hasMore;\n        var _lastMessageTimestamp = isFailed ? 0 : lastMessageTimestamp;\n        var stateChannel = state.currentOpenChannel;\n        var stateChannelUrl = stateChannel.url;\n        if (actionChannelUrl !== stateChannelUrl) {\n          return state;\n        }\n        var filteredAllMessages = state.allMessages.filter(function (message) {\n          return !receivedMessages_1.find(function (_a) {\n            var messageId = _a.messageId;\n            return compareIds(messageId, message.messageId);\n          });\n        });\n        return __assign(__assign({}, state), {\n          loading: false,\n          initialized: true,\n          hasMore: _hasMore,\n          lastMessageTimestamp: _lastMessageTimestamp,\n          allMessages: __spreadArray(__spreadArray([], receivedMessages_1, true), filteredAllMessages, true)\n        });\n      }\n    case SENDING_MESSAGE_START:\n      {\n        var _e = action.payload,\n          message = _e.message,\n          channel = _e.channel;\n        if (channel.url !== state.currentOpenChannel.url) {\n          return state;\n        }\n        return __assign(__assign({}, state), {\n          allMessages: __spreadArray(__spreadArray([], state.allMessages, true), [__assign({}, message)], false)\n        });\n      }\n    case SENDING_MESSAGE_SUCCEEDED:\n      {\n        var sentMessage_1 = action.payload;\n        var newMessages = state.allMessages.map(function (m) {\n          return compareIds(m.reqId, sentMessage_1.reqId) ? sentMessage_1 : m;\n        });\n        return __assign(__assign({}, state), {\n          allMessages: newMessages\n        });\n      }\n    case SENDING_MESSAGE_FAILED:\n      {\n        var sentMessage_2 = action.payload;\n        return __assign(__assign({}, state), {\n          allMessages: state.allMessages.map(function (m) {\n            return compareIds(m.reqId, sentMessage_2.reqId) ? sentMessage_2 : m;\n          })\n        });\n      }\n    case TRIM_MESSAGE_LIST:\n      {\n        var allMessages = state.allMessages;\n        var experimentalMessageLimit = (_a = action.payload) === null || _a === void 0 ? void 0 : _a.experimentalMessageLimit;\n        if (experimentalMessageLimit && experimentalMessageLimit > 0 && (allMessages === null || allMessages === void 0 ? void 0 : allMessages.length) > experimentalMessageLimit) {\n          var sliceAt = allMessages.length - experimentalMessageLimit;\n          return __assign(__assign({}, state), {\n            allMessages: allMessages.slice(sliceAt)\n          });\n        }\n        return state;\n      }\n    case RESENDING_MESSAGE_START:\n      {\n        var eventedChannel = action.payload.channel;\n        var resentMessage_1 = action.payload.message;\n        if (eventedChannel.url !== state.currentOpenChannel.url) {\n          return state;\n        }\n        return __assign(__assign({}, state), {\n          allMessages: state.allMessages.map(function (m) {\n            return compareIds(m.reqId, resentMessage_1.reqId) ? resentMessage_1 : m;\n          })\n        });\n      }\n    case FETCH_PARTICIPANT_LIST:\n      {\n        var eventedChannel = action.payload.channel;\n        var fetchedParticipantList = action.payload.users;\n        if (eventedChannel.url !== state.currentOpenChannel.url) {\n          return state;\n        }\n        return __assign(__assign({}, state), {\n          participants: __spreadArray(__spreadArray([], state.participants, true), fetchedParticipantList, true)\n        });\n      }\n    case FETCH_BANNED_USER_LIST:\n      {\n        var eventedChannel = action.payload.channel;\n        var fetchedBannedUserList = action.payload.users;\n        if (eventedChannel.url !== state.currentOpenChannel.url || !fetchedBannedUserList.every(function (user) {\n          return typeof user.userId === 'string';\n        })) {\n          return state;\n        }\n        return __assign(__assign({}, state), {\n          bannedParticipantIds: __spreadArray(__spreadArray([], state.bannedParticipantIds, true), fetchedBannedUserList.map(function (user) {\n            return user.userId;\n          }), true)\n        });\n      }\n    case FETCH_MUTED_USER_LIST:\n      {\n        var eventedChannel = action.payload.channel;\n        var fetchedMutedUserList = action.payload.users;\n        if (eventedChannel.url !== state.currentOpenChannel.url || !fetchedMutedUserList.every(function (user) {\n          return typeof user.userId === 'string';\n        })) {\n          return state;\n        }\n        return __assign(__assign({}, state), {\n          mutedParticipantIds: __spreadArray(__spreadArray([], state.bannedParticipantIds, true), fetchedMutedUserList.map(function (user) {\n            return user.userId;\n          }), true)\n        });\n      }\n    // events\n\n    case ON_MESSAGE_RECEIVED:\n      {\n        var eventedChannel = action.payload.channel;\n        var receivedMessage = action.payload.message;\n        var currentOpenChannel = state.currentOpenChannel;\n        if (!compareIds(eventedChannel.url, currentOpenChannel.url) || !(state.allMessages.map(function (message) {\n          return message.messageId;\n        }).indexOf(receivedMessage.messageId) < 0)) {\n          return state;\n        }\n        return __assign(__assign({}, state), {\n          allMessages: __spreadArray(__spreadArray([], state.allMessages, true), [receivedMessage], false)\n        });\n      }\n    case ON_MESSAGE_UPDATED:\n      {\n        var eventedChannel = action.payload.channel;\n        var updatedMessage_1 = action.payload.message;\n        var currentChannel = state.currentOpenChannel;\n        if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url) {\n          return state;\n        }\n        return __assign(__assign({}, state), {\n          allMessages: state.allMessages.map(function (message) {\n            return message.isIdentical(updatedMessage_1) ? updatedMessage_1 : message;\n          })\n        });\n      }\n    case ON_MESSAGE_DELETED:\n      {\n        var eventedChannel = action.payload.channel;\n        var deletedMessageId_1 = action.payload.messageId;\n        var currentChannel = state.currentOpenChannel;\n        if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url) {\n          return state;\n        }\n        return __assign(__assign({}, state), {\n          allMessages: state.allMessages.filter(function (message) {\n            return !compareIds(message.messageId, deletedMessageId_1);\n          })\n        });\n      }\n    case ON_MESSAGE_DELETED_BY_REQ_ID:\n      {\n        return __assign(__assign({}, state), {\n          allMessages: state.allMessages.filter(function (m) {\n            return !compareIds(m.reqId, action.payload);\n          })\n        });\n      }\n    case ON_OPERATOR_UPDATED:\n      {\n        var eventedChannel = action.payload.channel;\n        var updatedOperators = action.payload.operators;\n        var currentChannel = state.currentOpenChannel;\n        if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url) {\n          return state;\n        }\n        return __assign(__assign({}, state), {\n          currentOpenChannel: __assign(__assign({}, state.currentOpenChannel), {\n            operators: updatedOperators\n          }),\n          operators: updatedOperators\n        });\n      }\n    case ON_USER_ENTERED:\n      {\n        var eventedChannel = action.payload.channel;\n        var enteredUser = action.payload.user;\n        var currentChannel = state.currentOpenChannel;\n        if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url) {\n          return state;\n        }\n        return __assign(__assign({}, state), {\n          participants: __spreadArray(__spreadArray([], state.participants, true), [enteredUser], false)\n        });\n      }\n    case ON_USER_EXITED:\n      {\n        var eventedChannel = action.payload.channel;\n        var exitedUser_1 = action.payload.user;\n        var currentChannel = state.currentOpenChannel;\n        if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url) {\n          return state;\n        }\n        return __assign(__assign({}, state), {\n          participants: state.participants.filter(function (participant) {\n            return !compareIds(participant.userId, exitedUser_1.userId);\n          })\n        });\n      }\n    case ON_USER_MUTED:\n      {\n        var eventedChannel = action.payload.channel;\n        var mutedUser = action.payload.user;\n        var currentChannel = state.currentOpenChannel;\n        if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url || state.mutedParticipantIds.indexOf(mutedUser.userId) >= 0) {\n          return state;\n        }\n        return __assign(__assign({}, state), {\n          mutedParticipantIds: __spreadArray(__spreadArray([], state.mutedParticipantIds, true), [mutedUser.userId], false)\n        });\n      }\n    case ON_USER_UNMUTED:\n      {\n        var eventedChannel = action.payload.channel;\n        var unmutedUser_1 = action.payload.user;\n        var currentChannel = state.currentOpenChannel;\n        if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url || state.mutedParticipantIds.indexOf(unmutedUser_1.userId) < 0) {\n          return state;\n        }\n        return __assign(__assign({}, state), {\n          mutedParticipantIds: state.mutedParticipantIds.filter(function (userId) {\n            return userId !== unmutedUser_1.userId;\n          })\n        });\n      }\n    case ON_USER_BANNED:\n      {\n        var eventedChannel = action.payload.channel;\n        var bannedUser = action.payload.user;\n        var currentChannel = state.currentOpenChannel;\n        if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url || state.bannedParticipantIds.indexOf(bannedUser.userId) >= 0) {\n          return state;\n        }\n        return __assign(__assign({}, state), {\n          bannedParticipantIds: __spreadArray(__spreadArray([], state.bannedParticipantIds, true), [bannedUser.userId], false)\n        });\n      }\n    case ON_USER_UNBANNED:\n      {\n        var eventedChannel = action.payload.channel;\n        var unbannedUser_1 = action.payload.user;\n        var currentChannel = state.currentOpenChannel;\n        if (!currentChannel || currentChannel.url && currentChannel.url !== eventedChannel.url || state.bannedParticipantIds.indexOf(unbannedUser_1.userId) < 0) {\n          return state;\n        }\n        return __assign(__assign({}, state), {\n          bannedParticipantIds: state.bannedParticipantIds.filter(function (userId) {\n            return userId !== unbannedUser_1.userId;\n          })\n        });\n      }\n    case ON_CHANNEL_FROZEN:\n      {\n        var frozenChannel = action.payload;\n        var currentChannel = state.currentOpenChannel;\n        if (!currentChannel || currentChannel.url && currentChannel.url !== frozenChannel.url) {\n          return state;\n        }\n        return __assign(__assign({}, state), {\n          frozen: true\n        });\n      }\n    case ON_CHANNEL_UNFROZEN:\n      {\n        var unfrozenChannel = action.payload;\n        var currentChannel = state.currentOpenChannel;\n        if (!currentChannel || currentChannel.url && currentChannel.url !== unfrozenChannel.url) {\n          return state;\n        }\n        return __assign(__assign({}, state), {\n          frozen: false\n        });\n      }\n    case ON_CHANNEL_CHANGED:\n      {\n        var changedChannel = action.payload;\n        var currentChannel = state.currentOpenChannel;\n        if (!currentChannel || currentChannel.url && currentChannel.url !== changedChannel.url) {\n          return state;\n        }\n        return __assign(__assign({}, state), {\n          currentOpenChannel: changedChannel\n        });\n      }\n    case ON_META_DATA_CREATED:\n      {\n        // const eventedChannel = action.payload.channel;\n        // const createdMetaData = action.payload.metaData;\n        // return {\n        //   ...state\n        // };\n        return state;\n      }\n    case ON_META_DATA_UPDATED:\n      {\n        // const eventedChannel = action.payload.channel;\n        // const updatedMetaData = action.payload.metaData;\n        // return {\n        //   ...state\n        // };\n        return state;\n      }\n    case ON_META_DATA_DELETED:\n      {\n        // const eventedChannel = action.payload.channel;\n        // const deletedMetaDataKeys = action.payload.metaDataKeys;\n        // return {\n        //   ...state\n        // };\n        return state;\n      }\n    case ON_META_COUNTERS_CREATED:\n      {\n        // const eventedChannel = action.payload.channel;\n        // const createdMetaCounter = action.payload.metaCounter;\n        // return {\n        //   ...state\n        // };\n        return state;\n      }\n    case ON_META_COUNTERS_UPDATED:\n      {\n        // const eventedChannel = action.payload.channel;\n        // const updatedMetaCounter = action.payload.metaCounter;\n        // return {\n        //   ...state\n        // };\n        return state;\n      }\n    case ON_META_COUNTERS_DELETED:\n      {\n        // const eventedChannel = action.payload.channel;\n        // const deletedMetaCounterKeys = action.payload.metaCounterKeys;\n        // return {\n        //   ...state\n        // };\n        return state;\n      }\n    case ON_MENTION_RECEIVED:\n      {\n        // const eventedChannel = action.payload.channel;\n        // const mentionedMessage = action.payload.message;\n        // return {\n        //   ...state\n        // };\n        return state;\n      }\n    default:\n      return state;\n  }\n}\nvar initialState = {\n  allMessages: [],\n  loading: false,\n  initialized: false,\n  currentOpenChannel: null,\n  isInvalid: false,\n  hasMore: false,\n  lastMessageTimestamp: 0,\n  frozen: false,\n  operators: [],\n  participants: [],\n  bannedParticipantIds: [],\n  mutedParticipantIds: []\n};\nfunction useSetChannel(_a, _b) {\n  var channelUrl = _a.channelUrl,\n    sdkInit = _a.sdkInit,\n    fetchingParticipants = _a.fetchingParticipants;\n  var sdk = _b.sdk,\n    logger = _b.logger,\n    messagesDispatcher = _b.messagesDispatcher;\n  useEffect(function () {\n    if (channelUrl && sdkInit && sdk && sdk.OpenChannel) {\n      logger.info('OpenChannel | useSetChannel fetching channel', channelUrl);\n      sdk.OpenChannel.getChannel(channelUrl, function (openChannel, error) {\n        if (!error) {\n          logger.info('OpenChannel | useSetChannel fetched channel', openChannel);\n          messagesDispatcher({\n            type: SET_CURRENT_CHANNEL,\n            payload: openChannel\n          });\n          openChannel.enter(function (_, error) {\n            if (error) {\n              logger.warning('OpenChannel | useSetChannel enter channel failed', {\n                channelUrl: channelUrl,\n                error: error\n              });\n              messagesDispatcher({\n                type: SET_CHANNEL_INVALID,\n                payload: null\n              });\n            }\n            if (fetchingParticipants) {\n              // fetch participants, banned participantIds, muted participantIds\n              var participantListQuery = openChannel.createParticipantListQuery();\n              var bannedParticipantListQuery = openChannel.createBannedUserListQuery();\n              var mutedParticipantListQuery = openChannel.createMutedUserListQuery();\n              fetchWithListQuery(participantListQuery, logger, function (users) {\n                messagesDispatcher({\n                  type: FETCH_PARTICIPANT_LIST,\n                  payload: {\n                    channel: openChannel,\n                    users: users\n                  }\n                });\n              });\n              fetchWithListQuery(bannedParticipantListQuery, logger, function (users) {\n                messagesDispatcher({\n                  type: FETCH_BANNED_USER_LIST,\n                  payload: {\n                    channel: openChannel,\n                    users: users\n                  }\n                });\n              });\n              fetchWithListQuery(mutedParticipantListQuery, logger, function (users) {\n                messagesDispatcher({\n                  type: FETCH_MUTED_USER_LIST,\n                  payload: {\n                    channel: openChannel,\n                    users: users\n                  }\n                });\n              });\n            }\n          });\n        } else {\n          logger.warning('OpenChannel | useSetChannel fetching channel failed', {\n            channelUrl: channelUrl,\n            error: error\n          });\n          messagesDispatcher({\n            type: SET_CHANNEL_INVALID,\n            payload: null\n          });\n        }\n      }); // .then((openChannel) => {\n      //   logger.info('OpenChannel | useSetChannel fetched channel', openChannel);\n      //   messagesDispatcher({\n      //     type: messageActionTypes.SET_CURRENT_CHANNEL,\n      //     payload: openChannel,\n      //   });\n      //   openChannel.enter((_, error) => {\n      //     if (error) {\n      //       logger.warning('OpenChannel | useSetChannel enter channel failed', { channelUrl, error });\n      //       messagesDispatcher({\n      //         type: messageActionTypes.SET_CHANNEL_INVALID,\n      //       });\n      //     }\n      //     if (fetchingParticipants) {\n      //       // fetch participants, banned participantIds, muted participantIds\n      //       const participantListQuery = openChannel.createParticipantListQuery();\n      //       const bannedParticipantListQuery = openChannel.createBannedUserListQuery();\n      //       const mutedParticipantListQuery = openChannel.createMutedUserListQuery();\n      //       utils.fetchWithListQuery(\n      //         participantListQuery,\n      //         logger,\n      //         (users) => {\n      //           messagesDispatcher({\n      //             type: messageActionTypes.FETCH_PARTICIPANT_LIST,\n      //             payload: {\n      //               channel: openChannel,\n      //               users,\n      //             },\n      //           });\n      //         },\n      //       );\n      //       utils.fetchWithListQuery(\n      //         bannedParticipantListQuery,\n      //         logger,\n      //         (users) => {\n      //           messagesDispatcher({\n      //             type: messageActionTypes.FETCH_BANNED_USER_LIST,\n      //             payload: {\n      //               channel: openChannel,\n      //               users,\n      //             },\n      //           });\n      //         },\n      //       );\n      //       utils.fetchWithListQuery(\n      //         mutedParticipantListQuery,\n      //         logger,\n      //         (users) => {\n      //           messagesDispatcher({\n      //             type: messageActionTypes.FETCH_MUTED_USER_LIST,\n      //             payload: {\n      //               channel: openChannel,\n      //               users,\n      //             },\n      //           });\n      //         },\n      //       );\n      //     }\n      //   });\n      // })\n      // .catch((error) => {\n      //   logger.warning('OpenChannel | useSetChannel fetching channel failed', { channelUrl, error });\n      //   messagesDispatcher({\n      //     type: messageActionTypes.SET_CHANNEL_INVALID,\n      //   });\n      // });\n    }\n  }, [channelUrl, sdkInit, fetchingParticipants]);\n}\nfunction useHandleChannelEvents(_a, _b) {\n  var currentOpenChannel = _a.currentOpenChannel,\n    checkScrollBottom = _a.checkScrollBottom;\n  var sdk = _b.sdk,\n    logger = _b.logger,\n    messagesDispatcher = _b.messagesDispatcher;\n  useEffect(function () {\n    var messageReceiverId = uuidv4();\n    if (currentOpenChannel && currentOpenChannel.url && sdk && sdk.ChannelHandler) {\n      var ChannelHandler = new sdk.ChannelHandler();\n      logger.info('OpenChannel | useHandleChannelEvents: Setup evnet handler', messageReceiverId);\n      ChannelHandler.onMessageReceived = function (channel, message) {\n        var scrollToEnd = checkScrollBottom();\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMessageReceived', {\n          channelUrl: channelUrl,\n          message: message\n        });\n        messagesDispatcher({\n          type: ON_MESSAGE_RECEIVED,\n          payload: {\n            channel: channel,\n            message: message\n          }\n        });\n        if (scrollToEnd) {\n          try {\n            setTimeout(function () {\n              scrollIntoLast();\n            });\n          } catch (error) {\n            logger.warning('OpenChannel | onMessageReceived | scroll to end failed');\n          }\n        }\n      };\n      ChannelHandler.onMessageUpdated = function (channel, message) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMessageUpdated', {\n          channelUrl: channelUrl,\n          message: message\n        });\n        messagesDispatcher({\n          type: ON_MESSAGE_UPDATED,\n          payload: {\n            channel: channel,\n            message: message\n          }\n        });\n      };\n      ChannelHandler.onMessageDeleted = function (channel, messageId) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMessageDeleted', {\n          channelUrl: channelUrl,\n          messageId: messageId\n        });\n        messagesDispatcher({\n          type: ON_MESSAGE_DELETED,\n          payload: {\n            channel: channel,\n            messageId: messageId\n          }\n        });\n      };\n      ChannelHandler.onOperatorUpdated = function (channel, operators) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onOperatorUpdated', {\n          channelUrl: channelUrl,\n          operators: operators\n        });\n        messagesDispatcher({\n          type: ON_OPERATOR_UPDATED,\n          payload: {\n            channel: channel,\n            operators: operators\n          }\n        });\n      };\n      ChannelHandler.onUserEntered = function (channel, user) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserEntered', {\n          channelUrl: channelUrl,\n          user: user\n        });\n        messagesDispatcher({\n          type: ON_USER_ENTERED,\n          payload: {\n            channel: channel,\n            user: user\n          }\n        });\n      };\n      ChannelHandler.onUserExited = function (channel, user) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserExited', {\n          channelUrl: channelUrl,\n          user: user\n        });\n        messagesDispatcher({\n          type: ON_USER_EXITED,\n          payload: {\n            channel: channel,\n            user: user\n          }\n        });\n      };\n      ChannelHandler.onUserMuted = function (channel, user) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserMuted', {\n          channelUrl: channelUrl,\n          user: user\n        });\n        messagesDispatcher({\n          type: ON_USER_MUTED,\n          payload: {\n            channel: channel,\n            user: user\n          }\n        });\n      };\n      ChannelHandler.onUserUnmuted = function (channel, user) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserUnmuted', {\n          channelUrl: channelUrl,\n          user: user\n        });\n        messagesDispatcher({\n          type: ON_USER_UNMUTED,\n          payload: {\n            channel: channel,\n            user: user\n          }\n        });\n      };\n      ChannelHandler.onUserBanned = function (channel, user) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserBanned', {\n          channelUrl: channelUrl,\n          user: user\n        });\n        messagesDispatcher({\n          type: ON_USER_BANNED,\n          payload: {\n            channel: channel,\n            user: user\n          }\n        });\n      };\n      ChannelHandler.onUserUnbanned = function (channel, user) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserUnbanned', {\n          channelUrl: channelUrl,\n          user: user\n        });\n        messagesDispatcher({\n          type: ON_USER_UNBANNED,\n          payload: {\n            channel: channel,\n            user: user\n          }\n        });\n      };\n      ChannelHandler.onChannelFrozen = function (channel) {\n        logger.info('OpenChannel | useHandleChannelEvents: onChannelFrozen', channel);\n        messagesDispatcher({\n          type: ON_CHANNEL_FROZEN,\n          payload: channel\n        });\n      };\n      ChannelHandler.onChannelUnfrozen = function (channel) {\n        logger.info('OpenChannel | useHandleChannelEvents: onChannelUnfrozen', channel);\n        messagesDispatcher({\n          type: ON_CHANNEL_UNFROZEN,\n          payload: channel\n        });\n      };\n      ChannelHandler.onChannelChanged = function (channel) {\n        logger.info('OpenChannel | useHandleChannelEvents: onChannelChanged', channel);\n        messagesDispatcher({\n          type: ON_CHANNEL_CHANGED,\n          payload: channel\n        });\n      };\n      ChannelHandler.onMetaDataCreated = function (channel, metaData) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaDataCreated', {\n          channelUrl: channelUrl,\n          metaData: metaData\n        });\n        messagesDispatcher({\n          type: ON_META_DATA_CREATED,\n          payload: {\n            channel: channel,\n            metaData: metaData\n          }\n        });\n      };\n      ChannelHandler.onMetaDataUpdated = function (channel, metaData) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaDataUpdated', {\n          channelUrl: channelUrl,\n          metaData: metaData\n        });\n        messagesDispatcher({\n          type: ON_META_DATA_UPDATED,\n          payload: {\n            channel: channel,\n            metaData: metaData\n          }\n        });\n      };\n      ChannelHandler.onMetaDataDeleted = function (channel, metaDataKeys) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaDataDeleted', {\n          channelUrl: channelUrl,\n          metaDataKeys: metaDataKeys\n        });\n        messagesDispatcher({\n          type: ON_META_DATA_DELETED,\n          payload: {\n            channel: channel,\n            metaDataKeys: metaDataKeys\n          }\n        });\n      };\n      ChannelHandler.onMetaCountersCreated = function (channel, metaCounter) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaCountersCreated', {\n          channelUrl: channelUrl,\n          metaCounter: metaCounter\n        });\n        messagesDispatcher({\n          type: ON_META_COUNTERS_CREATED,\n          payload: {\n            channel: channel,\n            metaCounter: metaCounter\n          }\n        });\n      };\n      ChannelHandler.onMetaCountersUpdated = function (channel, metaCounter) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaCountersUpdated', {\n          channelUrl: channelUrl,\n          metaCounter: metaCounter\n        });\n        messagesDispatcher({\n          type: ON_META_COUNTERS_UPDATED,\n          payload: {\n            channel: channel,\n            metaCounter: metaCounter\n          }\n        });\n      };\n      ChannelHandler.onMetaCountersDeleted = function (channel, metaCounterKeys) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaCountersDeleted', {\n          channelUrl: channelUrl,\n          metaCounterKeys: metaCounterKeys\n        });\n        messagesDispatcher({\n          type: ON_META_COUNTERS_DELETED,\n          payload: {\n            channel: channel,\n            metaCounterKeys: metaCounterKeys\n          }\n        });\n      };\n      ChannelHandler.onMentionReceived = function (channel, message) {\n        var channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMentionReceived', {\n          channelUrl: channelUrl,\n          message: message\n        });\n        messagesDispatcher({\n          type: ON_MENTION_RECEIVED,\n          payload: {\n            channel: channel,\n            message: message\n          }\n        });\n      };\n      sdk.addChannelHandler(messageReceiverId, ChannelHandler);\n    }\n    return function () {\n      if (sdk && sdk.removeChannelHandler) {\n        logger.info('OpenChannel | useHandleChannelEvents: Removing message receiver handler', messageReceiverId);\n        sdk.removeChannelHandler(messageReceiverId);\n      }\n    };\n  }, [currentOpenChannel]);\n}\nfunction useInitialMessagesFetch(_a, _b) {\n  var currentOpenChannel = _a.currentOpenChannel,\n    userFilledMessageListParams = _a.userFilledMessageListParams;\n  var sdk = _b.sdk,\n    logger = _b.logger,\n    messagesDispatcher = _b.messagesDispatcher;\n  useEffect(function () {\n    logger.info('OpenChannel | useInitialMessagesFetch: Setup started', currentOpenChannel);\n    messagesDispatcher({\n      type: RESET_MESSAGES,\n      payload: null\n    });\n    if (sdk && sdk.MessageListParams && currentOpenChannel && currentOpenChannel.getMessagesByTimestamp) {\n      var messageListParams_1 = new sdk.MessageListParams();\n      messageListParams_1.prevResultSize = 30;\n      messageListParams_1.isInclusive = true;\n      messageListParams_1.includeReplies = false;\n      messageListParams_1.includeReactions = false;\n      if (userFilledMessageListParams) {\n        Object.keys(userFilledMessageListParams).forEach(function (key) {\n          messageListParams_1[key] = userFilledMessageListParams[key];\n        });\n        logger.info('OpenChannel | useInitialMessagesFetch: Used customizedMessageListParams');\n      }\n      logger.info('OpenChannel | useInitialMessagesFetch: Fetching messages', {\n        currentOpenChannel: currentOpenChannel,\n        messageListParams: messageListParams_1\n      });\n      messagesDispatcher({\n        type: GET_PREV_MESSAGES_START,\n        payload: null\n      });\n      currentOpenChannel.getMessagesByTimestamp(new Date().getTime(), messageListParams_1, function (messages, error) {\n        if (!error) {\n          logger.info('OpenChannel | useInitialMessagesFetch: Fetching messages succeeded', messages);\n          var hasMore = messages && messages.length > 0;\n          var lastMessageTimestamp = hasMore ? messages[0].createdAt : null;\n          messagesDispatcher({\n            type: GET_PREV_MESSAGES_SUCESS,\n            payload: {\n              currentOpenChannel: currentOpenChannel,\n              messages: messages,\n              hasMore: hasMore,\n              lastMessageTimestamp: lastMessageTimestamp\n            }\n          });\n          setTimeout(function () {\n            scrollIntoLast();\n          });\n        } else {\n          logger.error('OpenChannel | useInitialMessagesFetch: Fetching messages failed', error);\n          messagesDispatcher({\n            type: GET_PREV_MESSAGES_FAIL,\n            payload: {\n              currentOpenChannel: currentOpenChannel,\n              messages: [],\n              hasMore: false,\n              lastMessageTimestamp: 0\n            }\n          });\n        }\n      });\n    }\n  }, [currentOpenChannel, userFilledMessageListParams]);\n}\nfunction useScrollCallback(_a, _b) {\n  var currentOpenChannel = _a.currentOpenChannel,\n    lastMessageTimestamp = _a.lastMessageTimestamp,\n    fetchMore = _a.fetchMore;\n  var sdk = _b.sdk,\n    logger = _b.logger,\n    messagesDispatcher = _b.messagesDispatcher,\n    hasMore = _b.hasMore,\n    userFilledMessageListParams = _b.userFilledMessageListParams;\n  return useCallback(function (callback) {\n    if (fetchMore && hasMore && sdk && sdk.MessageListParams) {\n      logger.info('OpenChannel | useScrollCallback: start');\n      var messageListParams_1 = new sdk.MessageListParams();\n      messageListParams_1.prevResultSize = 30;\n      messageListParams_1.includeReplies = false;\n      messageListParams_1.includeReactions = false;\n      if (userFilledMessageListParams) {\n        Object.keys(userFilledMessageListParams).forEach(function (key) {\n          messageListParams_1[key] = userFilledMessageListParams[key];\n        });\n        logger.info('OpenChannel | useScrollCallback: Used userFilledMessageListParams', userFilledMessageListParams);\n      }\n      logger.info('OpenChannel | useScrollCallback: Fetching messages', {\n        currentOpenChannel: currentOpenChannel,\n        messageListParams: messageListParams_1\n      });\n      currentOpenChannel.getMessagesByTimestamp(lastMessageTimestamp || new Date().getTime(), messageListParams_1, function (messages, error) {\n        if (!error) {\n          logger.info('OpenChannel | useScrollCallback: Fetching messages succeeded', messages);\n          var hasMore_1 = messages && messages.length > 0;\n          var lastMessageTimestamp_1 = hasMore_1 ? messages[0].createdAt : null;\n          messagesDispatcher({\n            type: GET_PREV_MESSAGES_SUCESS,\n            payload: {\n              currentOpenChannel: currentOpenChannel,\n              messages: messages,\n              hasMore: hasMore_1,\n              lastMessageTimestamp: lastMessageTimestamp_1\n            }\n          });\n          setTimeout(function () {\n            callback();\n          });\n        } else {\n          logger.error('OpenChannel | useScrollCallback: Fetching messages failed', error);\n          messagesDispatcher({\n            type: GET_PREV_MESSAGES_FAIL,\n            payload: {\n              currentOpenChannel: currentOpenChannel,\n              messages: [],\n              hasMore: false,\n              lastMessageTimestamp: 0\n            }\n          });\n        }\n      });\n    }\n  }, [currentOpenChannel, lastMessageTimestamp, fetchMore]);\n}\nfunction useCheckScrollBottom(_a, _b) {\n  var conversationScrollRef = _a.conversationScrollRef;\n  var logger = _b.logger;\n  return useCallback(function () {\n    var isBottom = true;\n    if (conversationScrollRef) {\n      try {\n        var conversationScroll = conversationScrollRef.current;\n        isBottom = conversationScroll.scrollHeight <= conversationScroll.scrollTop + conversationScroll.clientHeight;\n      } catch (error) {\n        logger.error('OpenChannel | useCheckScrollBottom', error);\n      }\n    }\n    return isBottom;\n  }, [conversationScrollRef]);\n}\nfunction useSendMessageCallback(_a, _b) {\n  var currentOpenChannel = _a.currentOpenChannel,\n    onBeforeSendUserMessage = _a.onBeforeSendUserMessage,\n    checkScrollBottom = _a.checkScrollBottom,\n    messageInputRef = _a.messageInputRef;\n  var sdk = _b.sdk,\n    logger = _b.logger,\n    messagesDispatcher = _b.messagesDispatcher;\n  return useCallback(function () {\n    if (sdk && sdk.UserMessageParams) {\n      var text = messageInputRef.current.value;\n      var createParamsDefault = function createParamsDefault(txt) {\n        var message = typeof txt === 'string' ? txt.trim() : txt.toString(10).trim();\n        var params = new sdk.UserMessageParams();\n        params.message = message;\n        return params;\n      };\n      var createCustomParams = onBeforeSendUserMessage && typeof onBeforeSendUserMessage === 'function';\n      if (createCustomParams) {\n        logger.info('OpenChannel | useSendMessageCallback: Creating params using onBeforeSendUserMessage', onBeforeSendUserMessage);\n      }\n      var params = onBeforeSendUserMessage ? onBeforeSendUserMessage(text) : createParamsDefault(text);\n      logger.info('OpenChannel | useSendMessageCallback: Sending message has started', params);\n      var isBottom_1 = checkScrollBottom();\n      var pendingMessage = currentOpenChannel.sendUserMessage(params, function (message, error) {\n        if (!error) {\n          logger.info('OpenChannel | useSendMessageCallback: Sending message succeeded', message);\n          messagesDispatcher({\n            type: SENDING_MESSAGE_SUCCEEDED,\n            payload: message\n          });\n          if (isBottom_1) {\n            setTimeout(function () {\n              scrollIntoLast();\n            });\n          }\n        } else {\n          logger.warning('OpenChannel | useSendMessageCallback: Sending message failed', error);\n          messagesDispatcher({\n            type: SENDING_MESSAGE_FAILED,\n            payload: messageActionTypes\n          });\n        }\n      });\n      messagesDispatcher({\n        type: SENDING_MESSAGE_START,\n        payload: {\n          message: pendingMessage,\n          channel: currentOpenChannel\n        }\n      });\n    }\n  }, [currentOpenChannel, onBeforeSendUserMessage, checkScrollBottom, messageInputRef]);\n}\nfunction useFileUploadCallback(_a, _b) {\n  var currentOpenChannel = _a.currentOpenChannel,\n    checkScrollBottom = _a.checkScrollBottom,\n    _c = _a.imageCompression,\n    imageCompression = _c === void 0 ? {} : _c,\n    onBeforeSendFileMessage = _a.onBeforeSendFileMessage;\n  var sdk = _b.sdk,\n    logger = _b.logger,\n    messagesDispatcher = _b.messagesDispatcher;\n  return useCallback(function (file) {\n    if (sdk && sdk.FileMessageParams) {\n      var compressionRate_1 = imageCompression.compressionRate,\n        resizingWidth_1 = imageCompression.resizingWidth,\n        resizingHeight_1 = imageCompression.resizingHeight;\n      var createCustomParams_1 = onBeforeSendFileMessage && typeof onBeforeSendFileMessage === 'function';\n      var compressibleFileType = file.type === 'image/jpg' || file.type === 'image/png' || file.type === 'image/jpeg';\n      var compressibleRatio = compressionRate_1 > 0 && compressionRate_1 < 1; // pxToNumber returns null if values are invalid\n\n      var compressibleDiamensions_1 = pxToNumber(resizingWidth_1) || pxToNumber(resizingHeight_1);\n      var canCompressImage = compressibleFileType && (compressibleRatio || compressibleDiamensions_1);\n      var createParamsDefault_1 = function createParamsDefault_1(file_) {\n        var params = new sdk.FileMessageParams();\n        params.file = file_;\n        return params;\n      };\n      if (canCompressImage) {\n        // Using image compression\n        try {\n          var image_1 = document.createElement('img');\n          image_1.src = URL.createObjectURL(file);\n          image_1.onload = function () {\n            URL.revokeObjectURL(image_1.src);\n            var canvas = document.createElement('canvas');\n            var imageWidth = image_1.naturalWidth || image_1.width;\n            var imageHeight = image_1.naturalHeight || image_1.height;\n            var targetWidth = pxToNumber(resizingWidth_1) || imageWidth;\n            var targetHeight = pxToNumber(resizingHeight_1) || imageHeight; // In canvas.toBlob(callback, mimeType, qualityArgument)\n            // qualityArgument doesnt work\n            // so in case compressibleDiamensions are not present, we use ratio\n\n            if (file.type === 'image/png' && !compressibleDiamensions_1) {\n              targetWidth *= compressionRate_1;\n              targetHeight *= compressionRate_1;\n            }\n            canvas.width = targetWidth;\n            canvas.height = targetHeight;\n            var context = canvas.getContext('2d');\n            context.drawImage(image_1, 0, 0, targetWidth, targetHeight);\n            context.canvas.toBlob(function (newImageBlob) {\n              var compressedFile = new File([newImageBlob], file.name, {\n                type: file.type\n              });\n              if (createCustomParams_1) {\n                logger.info('OpenChannel | useFileUploadCallback: Creating params using onBeforeSendFileMessage', onBeforeSendFileMessage);\n              }\n              var params = onBeforeSendFileMessage ? onBeforeSendFileMessage(compressedFile) : createParamsDefault_1(compressedFile);\n              logger.info('OpenChannel | useFileUploadCallback: Uploading file message start', params);\n              var isBottom = checkScrollBottom();\n              var pendingMessage = currentOpenChannel.sendFileMessage(params, function (message, error) {\n                if (!error) {\n                  logger.info('OpenChannel | useFileUploadCallback: Sending message succeeded', message);\n                  messagesDispatcher({\n                    type: SENDING_MESSAGE_SUCCEEDED,\n                    payload: message\n                  });\n                  if (isBottom) {\n                    setTimeout(function () {\n                      scrollIntoLast();\n                    });\n                  }\n                } else {\n                  logger.error('OpenChannel | useFileUploadCallback: Sending file message failed', {\n                    message: message,\n                    error: error\n                  });\n                  message.localUrl = URL.createObjectURL(file);\n                  message.file = file;\n                  messagesDispatcher({\n                    type: SENDING_MESSAGE_FAILED,\n                    payload: message\n                  });\n                }\n              });\n              messagesDispatcher({\n                type: SENDING_MESSAGE_START,\n                payload: {\n                  message: __assign(__assign({}, pendingMessage), {\n                    url: URL.createObjectURL(file),\n                    // pending thumbnail message seems to be failed\n                    requestState: 'pending'\n                  }),\n                  channel: currentOpenChannel\n                }\n              });\n            }, file.type, compressionRate_1);\n          };\n        } catch (error) {\n          logger.warning('OpenChannel | useFileUploadCallback: Sending file message with image compression failed', error);\n        }\n      } else {\n        // Not using image compression\n        if (createCustomParams_1) {\n          logger.info('OpenChannel | useFileUploadCallback: Creating params using onBeforeSendFileMessage', onBeforeSendFileMessage);\n        }\n        var params = onBeforeSendFileMessage ? onBeforeSendFileMessage(file) : createParamsDefault_1(file);\n        logger.info('OpenChannel | useFileUploadCallback: Uploading file message start', params);\n        var isBottom_1 = checkScrollBottom();\n        var pendingMessage = currentOpenChannel.sendFileMessage(params, function (message, error) {\n          if (!error) {\n            logger.info('OpenChannel | useFileUploadCallback: Sending message succeeded', message);\n            messagesDispatcher({\n              type: SENDING_MESSAGE_SUCCEEDED,\n              payload: message\n            });\n            if (isBottom_1) {\n              setTimeout(function () {\n                scrollIntoLast();\n              });\n            }\n          } else {\n            logger.error('OpenChannel | useFileUploadCallback: Sending file message failed', {\n              message: message,\n              error: error\n            });\n            message.localUrl = URL.createObjectURL(file);\n            message.file = file;\n            messagesDispatcher({\n              type: SENDING_MESSAGE_FAILED,\n              payload: message\n            });\n          }\n        });\n        messagesDispatcher({\n          type: SENDING_MESSAGE_START,\n          payload: {\n            message: __assign(__assign({}, pendingMessage), {\n              url: URL.createObjectURL(file),\n              // pending thumbnail message seems to be failed\n              requestState: 'pending'\n            }),\n            channel: currentOpenChannel\n          }\n        });\n      }\n    }\n  }, [currentOpenChannel, onBeforeSendFileMessage, checkScrollBottom, imageCompression]);\n}\nfunction useUpdateMessageCallback(_a, _b) {\n  var currentOpenChannel = _a.currentOpenChannel,\n    onBeforeSendUserMessage = _a.onBeforeSendUserMessage;\n  var sdk = _b.sdk,\n    logger = _b.logger,\n    messagesDispatcher = _b.messagesDispatcher;\n  return useCallback(function (messageId, text, callback) {\n    var createParamsDefault = function createParamsDefault(txt) {\n      var params = new sdk.UserMessageParams();\n      params.message = txt;\n      return params;\n    };\n    if (onBeforeSendUserMessage && typeof onBeforeSendUserMessage === 'function') {\n      logger.info('OpenChannel | useUpdateMessageCallback: Creating params using onBeforeUpdateUserMessage');\n    }\n    var params = onBeforeSendUserMessage ? onBeforeSendUserMessage(text) : createParamsDefault(text);\n    currentOpenChannel.updateUserMessage(messageId, params, function (message, error) {\n      if (callback) {\n        callback();\n      }\n      if (!error) {\n        logger.info('OpenChannel | useUpdateMessageCallback: Updating message succeeded', {\n          message: message,\n          params: params\n        });\n        messagesDispatcher({\n          type: ON_MESSAGE_UPDATED,\n          payload: {\n            channel: currentOpenChannel,\n            message: message\n          }\n        });\n      } else {\n        logger.warning('OpenChannel | useUpdateMessageCallback: Updating message failed', error);\n      }\n    });\n  }, [currentOpenChannel, onBeforeSendUserMessage]);\n}\nfunction useDeleteMessageCallback(_a, _b) {\n  var currentOpenChannel = _a.currentOpenChannel;\n  var logger = _b.logger,\n    messagesDispatcher = _b.messagesDispatcher;\n  return useCallback(function (message, callback) {\n    logger.info('OpenChannel | useDeleteMessageCallback: Deleting message', message);\n    var sendingStatus = message.sendingStatus;\n    logger.info('OpenChannel | useDeleteMessageCallback: Deleting message requestState', sendingStatus);\n    if (sendingStatus === 'failed' || sendingStatus === 'pending') {\n      logger.info('OpenChannel | useDeleteMessageCallback: Deleted message from local', message);\n      messagesDispatcher({\n        type: ON_MESSAGE_DELETED_BY_REQ_ID,\n        payload: message.reqId\n      });\n      if (callback) {\n        callback();\n      }\n    } else {\n      if (!(message.messageType === 'file' || message.messageType === 'user')) {\n        return;\n      }\n      var messageToDelete = message;\n      currentOpenChannel.deleteMessage(messageToDelete, function (error) {\n        logger.info('OpenChannel | useDeleteMessageCallback: Deleting message on server', sendingStatus);\n        if (callback) {\n          callback();\n        }\n        if (!error) {\n          logger.info('OpenChannel | useDeleteMessageCallback: Deleting message succeeded', message);\n          messagesDispatcher({\n            type: ON_MESSAGE_DELETED,\n            payload: {\n              channel: currentOpenChannel,\n              messageId: message.messageId\n            }\n          });\n        } else {\n          logger.warning('OpenChannel | useDeleteMessageCallback: Deleting message failed', error);\n        }\n      });\n    }\n  }, [currentOpenChannel]);\n}\nfunction useResendMessageCallback(_a, _b) {\n  var currentOpenChannel = _a.currentOpenChannel;\n  var logger = _b.logger,\n    messagesDispatcher = _b.messagesDispatcher;\n  return useCallback(function (failedMessage) {\n    logger.info('OpenChannel | useResendMessageCallback: Resending message has started', failedMessage);\n    var messageType = failedMessage.messageType,\n      file = failedMessage.file;\n    if (failedMessage && typeof failedMessage.isResendable === 'function' && failedMessage.isResendable()) {\n      // eslint-disable-next-line no-param-reassign\n      failedMessage.requestState = 'pending';\n      messagesDispatcher({\n        type: RESENDING_MESSAGE_START,\n        payload: {\n          channel: currentOpenChannel,\n          message: failedMessage\n        }\n      }); // userMessage\n\n      if (messageType === 'user' && failedMessage.messageType === 'user') {\n        currentOpenChannel.resendUserMessage(failedMessage, function (message, error) {\n          if (!error) {\n            logger.info('OpenChannel | useResendMessageCallback: Reseding message succeeded', message);\n            messagesDispatcher({\n              type: SENDING_MESSAGE_SUCCEEDED,\n              payload: message\n            });\n          } else {\n            logger.warning('OpenChannel | useResendMessageCallback: Resending message failed', error); // eslint-disable-next-line no-param-reassign\n\n            failedMessage.requestState = 'failed';\n            messagesDispatcher({\n              type: SENDING_MESSAGE_FAILED,\n              payload: failedMessage\n            });\n          }\n        });\n        return;\n      } // fileMessage\n\n      if (messageType === 'file' && failedMessage.messageType === 'file') {\n        currentOpenChannel.resendFileMessage(failedMessage, file, function (message, error) {\n          if (!error) {\n            logger.info('OpenChannel | useResendMessageCallback: Resending file message succeeded', message);\n            messagesDispatcher({\n              type: SENDING_MESSAGE_SUCCEEDED,\n              payload: message\n            });\n          } else {\n            logger.warning('OpenChannel | useResendMessageCallback: Resending file message failed', error); // eslint-disable-next-line no-param-reassign\n\n            failedMessage.requestState = 'failed';\n            messagesDispatcher({\n              type: SENDING_MESSAGE_FAILED,\n              payload: failedMessage\n            });\n          }\n        });\n      }\n    } else {\n      // to alert user on console\n      // eslint-disable-next-line no-console\n      console.error('OpenChannel | useResendMessageCallback: Message is not resendable');\n      logger.warning('OpenChannel | useResendMessageCallback: Message is not resendable', failedMessage);\n    }\n  }, [currentOpenChannel]);\n}\nvar THROTTLE_TIMER = 5000; // to trim message list so that we wont keep thousands of messages in memory\n// We are throttling here; not debouncing\n// it will be called once very 5 sec if messagesLength, experimentalMessageLimit changes\n// we check if messagesLength > experimentalMessageLimit before dispatching action\n\nfunction useTrimMessageList(_a, _b) {\n  var messagesLength = _a.messagesLength,\n    experimentalMessageLimit = _a.experimentalMessageLimit;\n  var messagesDispatcher = _b.messagesDispatcher,\n    logger = _b.logger;\n  var _c = useState(false),\n    inProgress = _c[0],\n    setInProgress = _c[1];\n  useEffect(function () {\n    if (inProgress) {\n      return;\n    }\n    if (typeof messagesLength === 'number' && messagesLength > experimentalMessageLimit) {\n      logger.info('Trimming MessageList');\n      messagesDispatcher({\n        type: TRIM_MESSAGE_LIST,\n        payload: {\n          experimentalMessageLimit: experimentalMessageLimit\n        }\n      });\n    }\n    setInProgress(true);\n    setTimeout(function () {\n      setInProgress(false);\n    }, THROTTLE_TIMER);\n  }, [messagesLength, experimentalMessageLimit]);\n}\nvar COMPONENT_CLASS_NAME = 'sendbird-openchannel-conversation';\nvar OpenchannelConversation = function OpenchannelConversation(props) {\n  var\n    // internal props\n    stores = props.stores,\n    config = props.config,\n    // normal props\n    useMessageGrouping = props.useMessageGrouping,\n    channelUrl = props.channelUrl,\n    _a = props.queries,\n    queries = _a === void 0 ? {} : _a,\n    disableUserProfile = props.disableUserProfile,\n    _b = props.fetchingParticipants,\n    fetchingParticipants = _b === void 0 ? false : _b,\n    // We didn't decide to support fetching participant list\n    renderCustomMessage = props.renderCustomMessage,\n    renderUserProfile = props.renderUserProfile,\n    renderChannelTitle = props.renderChannelTitle,\n    renderMessageInput = props.renderMessageInput,\n    onBeforeSendUserMessage = props.onBeforeSendUserMessage,\n    experimentalMessageLimit = props.experimentalMessageLimit,\n    onBeforeSendFileMessage = props.onBeforeSendFileMessage,\n    onChatHeaderActionClick = props.onChatHeaderActionClick;\n  var sdkStore = stores.sdkStore,\n    userStore = stores.userStore;\n  var userId = config.userId,\n    isOnline = config.isOnline,\n    logger = config.logger,\n    pubSub = config.pubSub,\n    imageCompression = config.imageCompression;\n  var sdk = sdkStore.sdk;\n  var user = userStore.user; // hook variables\n\n  var _c = useReducer(reducer, initialState),\n    messagesStore = _c[0],\n    messagesDispatcher = _c[1];\n  var allMessages = messagesStore.allMessages,\n    loading = messagesStore.loading,\n    initialized = messagesStore.initialized,\n    currentOpenChannel = messagesStore.currentOpenChannel,\n    isInvalid = messagesStore.isInvalid,\n    hasMore = messagesStore.hasMore,\n    lastMessageTimestamp = messagesStore.lastMessageTimestamp,\n    operators = messagesStore.operators,\n    bannedParticipantIds = messagesStore.bannedParticipantIds,\n    mutedParticipantIds = messagesStore.mutedParticipantIds; // ref\n\n  var messageInputRef = useRef(null); // useSendMessageCallback\n\n  var conversationScrollRef = useRef(null); // useScrollAfterSendMessageCallback\n\n  var stringSet = useContext(LocalizationContext).stringSet; // const\n\n  var sdkInit = sdkStore.initialized;\n  var userFilledMessageListParams = queries ? queries.messageListParams : null;\n  var disabled = !initialized || !isOnline || isDisabledBecauseFrozen(currentOpenChannel, userId); // || utils.isDisabledBecauseMuted(mutedParticipantIds, userId)\n\n  var userDefinedDisableUserProfile = disableUserProfile || config.disableUserProfile;\n  var userDefinedRenderProfile = renderUserProfile || config.renderUserProfile; // useMemo\n\n  var amIBanned = useMemo(function () {\n    return bannedParticipantIds.indexOf(user.userId) >= 0;\n  }, [channelUrl, bannedParticipantIds, user]);\n  var amIMuted = useMemo(function () {\n    return mutedParticipantIds.indexOf(user.userId) >= 0;\n  }, [channelUrl, mutedParticipantIds, user]);\n  var amIOperator = useMemo(function () {\n    return operators.map(function (operator) {\n      return operator.userId;\n    }).indexOf(user.userId) >= 0;\n  }, [channelUrl, operators, user]); // use hooks\n\n  useSetChannel({\n    channelUrl: channelUrl,\n    sdkInit: sdkInit,\n    fetchingParticipants: fetchingParticipants\n  }, {\n    sdk: sdk,\n    logger: logger,\n    messagesDispatcher: messagesDispatcher\n  });\n  useEffect(function () {\n    if (renderCustomMessage) {\n      // eslint-disable-next-line no-console\n      console.info('The parameter type of renderCustomMessage will be changed to the object in the next minor update.');\n    }\n  }, []);\n  var checkScrollBottom = useCheckScrollBottom({\n    conversationScrollRef: conversationScrollRef\n  }, {\n    logger: logger\n  });\n  useHandleChannelEvents({\n    currentOpenChannel: currentOpenChannel,\n    checkScrollBottom: checkScrollBottom\n  }, {\n    sdk: sdk,\n    logger: logger,\n    messagesDispatcher: messagesDispatcher\n  });\n  useInitialMessagesFetch({\n    currentOpenChannel: currentOpenChannel,\n    userFilledMessageListParams: userFilledMessageListParams\n  }, {\n    sdk: sdk,\n    logger: logger,\n    messagesDispatcher: messagesDispatcher\n  }); // donot fetch more for streaming\n\n  var fetchMore = shouldFetchMore(allMessages === null || allMessages === void 0 ? void 0 : allMessages.length, experimentalMessageLimit);\n  var onScroll = useScrollCallback({\n    currentOpenChannel: currentOpenChannel,\n    lastMessageTimestamp: lastMessageTimestamp,\n    fetchMore: fetchMore\n  }, {\n    sdk: sdk,\n    logger: logger,\n    messagesDispatcher: messagesDispatcher,\n    hasMore: hasMore,\n    userFilledMessageListParams: userFilledMessageListParams\n  });\n  var handleSendMessage = useSendMessageCallback({\n    currentOpenChannel: currentOpenChannel,\n    onBeforeSendUserMessage: onBeforeSendUserMessage,\n    checkScrollBottom: checkScrollBottom,\n    messageInputRef: messageInputRef\n  }, {\n    sdk: sdk,\n    logger: logger,\n    messagesDispatcher: messagesDispatcher\n  });\n  var handleFileUpload = useFileUploadCallback({\n    currentOpenChannel: currentOpenChannel,\n    onBeforeSendFileMessage: onBeforeSendFileMessage,\n    checkScrollBottom: checkScrollBottom,\n    imageCompression: imageCompression\n  }, {\n    sdk: sdk,\n    logger: logger,\n    messagesDispatcher: messagesDispatcher\n  });\n  var updateMessage = useUpdateMessageCallback({\n    currentOpenChannel: currentOpenChannel,\n    onBeforeSendUserMessage: onBeforeSendUserMessage\n  }, {\n    sdk: sdk,\n    logger: logger,\n    messagesDispatcher: messagesDispatcher\n  });\n  var deleteMessage = useDeleteMessageCallback({\n    currentOpenChannel: currentOpenChannel\n  }, {\n    logger: logger,\n    messagesDispatcher: messagesDispatcher\n  });\n  var resendMessage = useResendMessageCallback({\n    currentOpenChannel: currentOpenChannel\n  }, {\n    logger: logger,\n    messagesDispatcher: messagesDispatcher\n  });\n  useTrimMessageList({\n    messagesLength: allMessages === null || allMessages === void 0 ? void 0 : allMessages.length,\n    experimentalMessageLimit: experimentalMessageLimit\n  }, {\n    messagesDispatcher: messagesDispatcher,\n    logger: logger\n  }); // handle API calls from withSendbird\n\n  useEffect(function () {\n    var subscriber = new Map();\n    if (!pubSub || !pubSub.subscribe) {\n      return;\n    }\n    subscriber.set(SEND_USER_MESSAGE, pubSub.subscribe(SEND_USER_MESSAGE, function (msg) {\n      var channel = msg.channel,\n        message = msg.message;\n      scrollIntoLast();\n      if (channel && channelUrl === channel.url) {\n        messagesDispatcher({\n          type: SENDING_MESSAGE_SUCCEEDED,\n          payload: message\n        });\n      }\n    }));\n    subscriber.set(SEND_MESSAGE_START, pubSub.subscribe(SEND_MESSAGE_START, function (msg) {\n      var channel = msg.channel,\n        message = msg.message;\n      if (channel && channelUrl === channel.url) {\n        messagesDispatcher({\n          type: SENDING_MESSAGE_START,\n          payload: {\n            message: message,\n            channel: channel\n          }\n        });\n      }\n    }));\n    subscriber.set(SEND_FILE_MESSAGE, pubSub.subscribe(SEND_FILE_MESSAGE, function (msg) {\n      var channel = msg.channel,\n        message = msg.message;\n      scrollIntoLast();\n      if (channel && channelUrl === channel.url) {\n        messagesDispatcher({\n          type: SENDING_MESSAGE_SUCCEEDED,\n          payload: {\n            message: message,\n            channel: channel\n          }\n        });\n      }\n    }));\n    subscriber.set(UPDATE_USER_MESSAGE, pubSub.subscribe(UPDATE_USER_MESSAGE, function (msg) {\n      var channel = msg.channel,\n        message = msg.message,\n        fromSelector = msg.fromSelector;\n      if (fromSelector && channel && channelUrl === channel.url) {\n        messagesDispatcher({\n          type: ON_MESSAGE_UPDATED,\n          payload: {\n            channel: channel,\n            message: message\n          }\n        });\n      }\n    }));\n    subscriber.set(DELETE_MESSAGE, pubSub.subscribe(DELETE_MESSAGE, function (msg) {\n      var channel = msg.channel,\n        messageId = msg.messageId;\n      if (channel && channelUrl === channel.url) {\n        messagesDispatcher({\n          type: ON_MESSAGE_DELETED,\n          payload: messageId\n        });\n      }\n    }));\n    return function () {\n      if (subscriber) {\n        subscriber.forEach(function (s) {\n          try {\n            s.remove();\n          } catch (_a) {//\n          }\n        });\n      }\n    };\n  }, [channelUrl, sdkInit]);\n  if (!currentOpenChannel || !currentOpenChannel.url || amIBanned) {\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      className: COMPONENT_CLASS_NAME\n    }, /*#__PURE__*/React__default.createElement(PlaceHolder, {\n      type: PlaceHolderTypes.NO_CHANNELS\n    }));\n  }\n  if (loading) {\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      className: COMPONENT_CLASS_NAME\n    }, /*#__PURE__*/React__default.createElement(PlaceHolder, {\n      type: PlaceHolderTypes.LOADING\n    }));\n  }\n  if (isInvalid) {\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      className: COMPONENT_CLASS_NAME\n    }, /*#__PURE__*/React__default.createElement(PlaceHolder, {\n      type: PlaceHolderTypes.WRONG\n    }));\n  }\n  return /*#__PURE__*/React__default.createElement(UserProfileProvider, {\n    className: COMPONENT_CLASS_NAME,\n    disableUserProfile: userDefinedDisableUserProfile,\n    renderUserProfile: userDefinedRenderProfile\n  }, renderChannelTitle ? renderChannelTitle({\n    channel: currentOpenChannel,\n    user: user\n  }) : /*#__PURE__*/React__default.createElement(OpenchannelConversationHeader, {\n    title: currentOpenChannel.name,\n    subTitle: kFormatter(currentOpenChannel.participantCount) + \" \" + stringSet.OPEN_CHANNEL_CONVERSATION__TITLE_PARTICIPANTS,\n    coverImage: currentOpenChannel.coverUrl,\n    onActionClick: onChatHeaderActionClick,\n    amIOperator: amIOperator\n  }), currentOpenChannel.isFrozen && /*#__PURE__*/React__default.createElement(FrozenNotification, null), /*#__PURE__*/React__default.createElement(OpenchannelConversationScroll$1, {\n    ref: conversationScrollRef,\n    renderCustomMessage: renderCustomMessage,\n    openchannel: currentOpenChannel,\n    user: user,\n    useMessageGrouping: useMessageGrouping,\n    isOnline: isOnline,\n    allMessages: allMessages,\n    onScroll: onScroll,\n    hasMore: hasMore,\n    updateMessage: updateMessage,\n    deleteMessage: deleteMessage,\n    resendMessage: resendMessage\n  }), renderMessageInput ? /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-openchannel-footer\"\n  }, renderMessageInput({\n    channel: currentOpenChannel,\n    user: user,\n    disabled: disabled\n  })) : /*#__PURE__*/React__default.createElement(MessageInputWrapper$1, {\n    channel: currentOpenChannel,\n    user: user,\n    ref: messageInputRef,\n    disabled: disabled || amIMuted,\n    onSendMessage: handleSendMessage,\n    onFileUpload: handleFileUpload,\n    renderMessageInput: renderMessageInput\n  }));\n};\nvar index = withSendbirdContext(OpenchannelConversation);\nexport { OpenchannelConversation, index as default };","map":{"version":3,"names":["getMessageCreatedAt","message","format","createdAt","shouldFetchMore","messageLength","maxMessages","scrollIntoLast","intialTry","MAX_TRIES","currentTry","scrollDOM","document","querySelector","scrollTop","scrollHeight","error","setTimeout","isSameGroup","comparingMessage","messageType","sender","_a","userId","_b","sendingStatus","_c","_d","compareMessagesForGrouping","prevMessage","currMessage","nextMessage","kFormatter","num","Math","abs","toFixed","isOperator","openChannel","operators","map","operator","indexOf","isDisabledBecauseFrozen","isFrozen","fetchWithListQuery","listQuery","logger","eachQueryNextCallback","fetchList","query","hasNext","next","users","warning","info","pxToNumber","px","parsed","Number","parseFloat","isNaN","MessageInputWrapper","ref","channel","user","disabled","onSendMessage","onFileUpload","renderMessageInput","stringSet","useContext","LocalizationContext","React__default","createElement","className","MessageInput","placeholder","MESSAGE_INPUT__PLACE_HOLDER__DISABLED","MessageInputWrapper$1","forwardRef","FrozenNotification","Label","type","LabelTypography","CAPTION_2","CHANNEL_FROZEN","OpenchannelConversationHeader","coverImage","title","subTitle","amIOperator","onActionClick","Avatar","src","alt","width","height","style","Icon","IconTypes","CHANNELS","fillColor","IconColors","CONTENT","H_2","color","LabelColors","ONBACKGROUND_1","NO_TITLE","BODY_2","ONBACKGROUND_2","IconButton","onClick","INFO","MEMBERS","PRIMARY","copyToClipboard","text","window","clipboardData","setData","queryCommandSupported","textarea","textContent","position","body","appendChild","select","execCommand","ex","removeChild","OpenChannelMessageStatusTypes","NONE","PENDING","FAILED","CANCELED","SUCCEEDED","getSenderFromMessage","_sender","checkIsSent","status","checkIsPending","checkIsFailed","checkIsByMe","isFineCopy","length","isFineResend","isResendable","isFineEdit","isFineDelete","showMenuTrigger","props","OpenchannelUserMessage","resendMessage","showEdit","showRemove","chainTop","dateLocale","UserProfileContext","disableUserProfile","renderUserProfile","messageRef","useRef","avatarRef","contextMenuRef","useState","contextStyle","setContextStyle","isByMe","isPending","isFailed","MemoizedMessageText","useMemo","splitMessage","split","matchedMessage","word","updatedAt","push","key","uuidv4","BODY_1","calssName","MESSAGE_EDITED","useEffect","current","clientHeight","top","innerWidth","__spreadArray","Array","isArray","join","ContextMenu","menuTrigger","toggleDropdown","profileUrl","menuItems","closeDropdown","MenuItems","parentRef","parentContainRef","paddingTop","paddingBottom","close","ConnectedUserProfile","onSuccess","disableMessaging","SECONDARY_3","friendName","nickname","CAPTION_3","ONBACKGROUND_3","locale","Loader","SPINNER","ERROR","MORE","CONTENT_INVERSE","openLeft","MenuItem","CONTEXT_MENU_DROPDOWN__COPY","CONTEXT_MENU_DROPDOWN__EDIT","CONTEXT_MENU_DROPDOWN__RESEND","CONTEXT_MENU_DROPDOWN__DELETE","OpenChannelAdminMessage","URL_REG","createUrlTester","regexp","test","checkOGIsEnalbed","ogMetaData","url","OpenchannelOGMessage","defaultImage","messageComponentRef","isUrl","wordClassName","LinkLabel","openLink","open","SUBTITLE_2","description","role","onKeyDown","tabIndex","ImageRenderer","defaultComponent","THUMBNAIL_NONE","SUPPORTING_TYPES","IMAGE","VIDEO","UNSUPPORTED","SUPPORTED_MIMES$1","getSupportingFileType","OpenchannelThumbnailMessage","_onClick","localUrl","thumbnails","thumbnailUrl","_e","messageWidth","setMessageWidth","memorizedThumbnailPlaceHolder","ON_BACKGROUND_2","isMessageSent","thumbnailWidth","clientWidth","placeHolder","PLAY","PHOTO","checkFileType","fileUrl","audioFile","gifFile","FILE_AUDIO","GIF","FILE_DOCUMENT","truncate","fullStr","strLen","undefined","separator","sepLen","charsToShow","frontChars","ceil","backChars","floor","substr","OpenchannelFileMessage","openFileUrl","TextButton","name","RemoveMessageModal","onCloseModal","onDeleteMessage","Modal","onCancel","onSubmit","submitText","titleText","MODAL__DELETE_MESSAGE__TITLE","SUPPORTED_MIMES","isImage","isVideo","MessageTypes","ADMIN","USER","FILE","THUMBNAIL","OG","UNKNOWN","SendingMessageStatus","getMessageType","isUserMessage","isAdminMessage","MessageHoc","editDisabled","hasSeparator","renderCustomMessage","deleteMessage","updateMessage","chainBottom","RenderedMessage","setShowEdit","setShowRemove","showFileViewer","setShowFileViewer","editMessageInputRef","requestState","isEdit","messageId","onCancelEdit","value","DateSeparator","FileViewer","onClose","onDelete","OpenchannelConversationScroll","useMessageGrouping","openchannel","allMessages","isOnline","hasMore","onScroll","scrollRef","showScrollDownButton","setShowScrollDownButton","handleOnScroll","e","element","target","navigator","userAgent","nodes","querySelectorAll","first_1","scrollIntoView","scrollToBottom","scrollTo","hasMessage","index","previousMessage","previousMessageCreatedAt","currentCreatedAt","isSameDay","PlaceHolder","PlaceHolderTypes","NO_MESSAGES","CHEVRON_DOWN","OpenchannelConversationScroll$1","SET_CURRENT_CHANNEL","SET_CHANNEL_INVALID","RESET_MESSAGES","GET_PREV_MESSAGES_START","GET_PREV_MESSAGES_SUCESS","GET_PREV_MESSAGES_FAIL","SENDING_MESSAGE_FAILED","SENDING_MESSAGE_SUCCEEDED","SENDING_MESSAGE_START","RESENDING_MESSAGE_START","FETCH_PARTICIPANT_LIST","FETCH_BANNED_USER_LIST","FETCH_MUTED_USER_LIST","TRIM_MESSAGE_LIST","ON_MESSAGE_RECEIVED","ON_MESSAGE_UPDATED","ON_MESSAGE_DELETED","ON_MESSAGE_DELETED_BY_REQ_ID","ON_OPERATOR_UPDATED","ON_USER_ENTERED","ON_USER_EXITED","ON_USER_MUTED","ON_USER_UNMUTED","ON_USER_BANNED","ON_USER_UNBANNED","ON_CHANNEL_FROZEN","ON_CHANNEL_UNFROZEN","ON_CHANNEL_CHANGED","ON_META_DATA_CREATED","ON_META_DATA_UPDATED","ON_META_DATA_DELETED","ON_META_COUNTERS_CREATED","ON_META_COUNTERS_UPDATED","ON_META_COUNTERS_DELETED","ON_MENTION_RECEIVED","reducer","state","action","__assign","gottenChannel","payload","isInvalid","currentOpenChannel","participants","bannedParticipantIds","mutedParticipantIds","loading","messages","lastMessageTimestamp","actionChannelUrl","receivedMessages_1","_hasMore","_lastMessageTimestamp","stateChannel","stateChannelUrl","filteredAllMessages","filter","find","compareIds","initialized","sentMessage_1","newMessages","m","reqId","sentMessage_2","experimentalMessageLimit","sliceAt","slice","eventedChannel","resentMessage_1","fetchedParticipantList","fetchedBannedUserList","every","fetchedMutedUserList","receivedMessage","updatedMessage_1","currentChannel","isIdentical","deletedMessageId_1","updatedOperators","enteredUser","exitedUser_1","participant","mutedUser","unmutedUser_1","bannedUser","unbannedUser_1","frozenChannel","frozen","unfrozenChannel","changedChannel","initialState","useSetChannel","channelUrl","sdkInit","fetchingParticipants","sdk","messagesDispatcher","OpenChannel","getChannel","enter","_","participantListQuery","createParticipantListQuery","bannedParticipantListQuery","createBannedUserListQuery","mutedParticipantListQuery","createMutedUserListQuery","useHandleChannelEvents","checkScrollBottom","messageReceiverId","ChannelHandler","onMessageReceived","scrollToEnd","onMessageUpdated","onMessageDeleted","onOperatorUpdated","onUserEntered","onUserExited","onUserMuted","onUserUnmuted","onUserBanned","onUserUnbanned","onChannelFrozen","onChannelUnfrozen","onChannelChanged","onMetaDataCreated","metaData","onMetaDataUpdated","onMetaDataDeleted","metaDataKeys","onMetaCountersCreated","metaCounter","onMetaCountersUpdated","onMetaCountersDeleted","metaCounterKeys","onMentionReceived","addChannelHandler","removeChannelHandler","useInitialMessagesFetch","userFilledMessageListParams","MessageListParams","getMessagesByTimestamp","messageListParams_1","prevResultSize","isInclusive","includeReplies","includeReactions","Object","keys","forEach","messageListParams","Date","getTime","useScrollCallback","fetchMore","useCallback","callback","hasMore_1","lastMessageTimestamp_1","useCheckScrollBottom","conversationScrollRef","isBottom","conversationScroll","useSendMessageCallback","onBeforeSendUserMessage","messageInputRef","UserMessageParams","createParamsDefault","txt","trim","toString","params","createCustomParams","isBottom_1","pendingMessage","sendUserMessage","messageActionTypes","useFileUploadCallback","imageCompression","onBeforeSendFileMessage","file","FileMessageParams","compressionRate_1","compressionRate","resizingWidth_1","resizingWidth","resizingHeight_1","resizingHeight","createCustomParams_1","compressibleFileType","compressibleRatio","compressibleDiamensions_1","canCompressImage","createParamsDefault_1","file_","image_1","URL","createObjectURL","onload","revokeObjectURL","canvas","imageWidth","naturalWidth","imageHeight","naturalHeight","targetWidth","targetHeight","context","getContext","drawImage","toBlob","newImageBlob","compressedFile","File","sendFileMessage","useUpdateMessageCallback","updateUserMessage","useDeleteMessageCallback","messageToDelete","useResendMessageCallback","failedMessage","resendUserMessage","resendFileMessage","console","THROTTLE_TIMER","useTrimMessageList","messagesLength","inProgress","setInProgress","COMPONENT_CLASS_NAME","OpenchannelConversation","stores","config","queries","renderChannelTitle","onChatHeaderActionClick","sdkStore","userStore","pubSub","useReducer","messagesStore","userDefinedDisableUserProfile","userDefinedRenderProfile","amIBanned","amIMuted","handleSendMessage","handleFileUpload","subscriber","Map","subscribe","set","SEND_USER_MESSAGE","msg","SEND_MESSAGE_START","SEND_FILE_MESSAGE","UPDATE_USER_MESSAGE","fromSelector","DELETE_MESSAGE","s","remove","NO_CHANNELS","LOADING","WRONG","UserProfileProvider","participantCount","OPEN_CHANNEL_CONVERSATION__TITLE_PARTICIPANTS","coverUrl","withSendbirdContext"],"sources":["C:\\Users\\이경민\\chat-app\\chat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\utils.ts","C:\\Users\\이경민\\chat-app\\chat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\components\\MessageInpuetWrapper.tsx","C:\\Users\\이경민\\chat-app\\chat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\components\\FrozenNotification.tsx","C:\\Users\\이경민\\chat-app\\chat\\node_modules\\sendbird-uikit\\src\\ui\\OpenchannelConversationHeader\\index.tsx","C:\\Users\\이경민\\chat-app\\chat\\node_modules\\sendbird-uikit\\src\\ui\\OpenchannelUserMessage\\utils.ts","C:\\Users\\이경민\\chat-app\\chat\\node_modules\\sendbird-uikit\\src\\utils\\openChannelUtils.ts","C:\\Users\\이경민\\chat-app\\chat\\node_modules\\sendbird-uikit\\src\\ui\\OpenchannelUserMessage\\index.tsx","C:\\Users\\이경민\\chat-app\\chat\\node_modules\\sendbird-uikit\\src\\ui\\OpenChannelAdminMessage\\index.tsx","C:\\Users\\이경민\\chat-app\\chat\\node_modules\\sendbird-uikit\\src\\ui\\OpenchannelOGMessage\\utils.ts","C:\\Users\\이경민\\chat-app\\chat\\node_modules\\sendbird-uikit\\src\\ui\\OpenchannelOGMessage\\index.tsx","C:\\Users\\이경민\\chat-app\\chat\\node_modules\\sendbird-uikit\\src\\ui\\OpenchannelThumbnailMessage\\utils.ts","C:\\Users\\이경민\\chat-app\\chat\\node_modules\\sendbird-uikit\\src\\ui\\OpenchannelThumbnailMessage\\index.tsx","C:\\Users\\이경민\\chat-app\\chat\\node_modules\\sendbird-uikit\\src\\ui\\OpenchannelFileMessage\\utils.ts","C:\\Users\\이경민\\chat-app\\chat\\node_modules\\sendbird-uikit\\src\\ui\\OpenchannelFileMessage\\index.tsx","C:\\Users\\이경민\\chat-app\\chat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\components\\RemoveMessageModal.tsx","C:\\Users\\이경민\\chat-app\\chat\\node_modules\\sendbird-uikit\\src\\ui\\FileViewer\\types.js","C:\\Users\\이경민\\chat-app\\chat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\components\\types.ts","C:\\Users\\이경민\\chat-app\\chat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\components\\MessageHOC.tsx","C:\\Users\\이경민\\chat-app\\chat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\components\\OpenchannelConversationScroll.tsx","C:\\Users\\이경민\\chat-app\\chat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\dux\\actionTypes.ts","C:\\Users\\이경민\\chat-app\\chat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\dux\\reducers.ts","C:\\Users\\이경민\\chat-app\\chat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\dux\\initialState.ts","C:\\Users\\이경민\\chat-app\\chat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\hooks\\useSetChannel.ts","C:\\Users\\이경민\\chat-app\\chat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\hooks\\useHandleChannelEvents.ts","C:\\Users\\이경민\\chat-app\\chat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\hooks\\useInitialMessagesFetch.ts","C:\\Users\\이경민\\chat-app\\chat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\hooks\\useScrollCallback.ts","C:\\Users\\이경민\\chat-app\\chat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\hooks\\useCheckScrollBottom.ts","C:\\Users\\이경민\\chat-app\\chat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\hooks\\useSendMessageCallback.ts","C:\\Users\\이경민\\chat-app\\chat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\hooks\\useFileUploadCallback.ts","C:\\Users\\이경민\\chat-app\\chat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\hooks\\useUpdateMessageCallback.ts","C:\\Users\\이경민\\chat-app\\chat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\hooks\\useDeleteMessageCallback.ts","C:\\Users\\이경민\\chat-app\\chat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\hooks\\useResendMessageCallback.ts","C:\\Users\\이경민\\chat-app\\chat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\hooks\\useTrimMessageList.ts","C:\\Users\\이경민\\chat-app\\chat\\node_modules\\sendbird-uikit\\src\\smart-components\\OpenchannelConversation\\index.tsx"],"sourcesContent":["import format from 'date-fns/format';\nimport Sendbird from 'sendbird';\nimport SendbirdUIKit from '../../index';\n\nexport const getMessageCreatedAt = (message: SendbirdUIKit.EveryMessage): string => format(message.createdAt, 'p');\n\nexport const shouldFetchMore = (messageLength: number, maxMessages: number): boolean => {\n  if (typeof maxMessages !== 'number') {\n    return true;\n  }\n\n  if (typeof maxMessages === 'number'\n    && maxMessages > messageLength\n  ) {\n    return true;\n  }\n  return false;\n}\n\nexport const scrollIntoLast = (intialTry = 0): void => {\n  const MAX_TRIES = 10;\n  const currentTry = intialTry;\n  if (currentTry > MAX_TRIES) {\n    return;\n  }\n  try {\n    const scrollDOM = document.querySelector('.sendbird-openchannel-conversation-scroll');\n    // eslint-disable-next-line no-multi-assign\n    scrollDOM.scrollTop = scrollDOM.scrollHeight;\n  } catch (error) {\n    setTimeout(() => {\n      scrollIntoLast(currentTry + 1);\n    }, 500 * currentTry);\n  }\n};\n\nexport const isSameGroup = (\n  message: SendbirdUIKit.EveryMessage,\n  comparingMessage: SendbirdUIKit.EveryMessage,\n): boolean => {\n  if (!(\n    message\n    && comparingMessage\n    && message?.messageType !== 'admin'\n    && comparingMessage?.messageType !== 'admin'\n    && message?.sender\n    && comparingMessage?.sender\n    && message?.createdAt\n    && comparingMessage?.createdAt\n    && message?.sender?.userId\n    && comparingMessage?.sender?.userId\n  )) {\n    return false\n  }\n\n  return (\n    message?.sendingStatus === comparingMessage?.sendingStatus\n    && message?.sender?.userId === comparingMessage?.sender?.userId\n    && getMessageCreatedAt(message) === getMessageCreatedAt(comparingMessage)\n  );\n};\n\nexport const compareMessagesForGrouping = (\n  prevMessage: SendbirdUIKit.EveryMessage,\n  currMessage: SendbirdUIKit.EveryMessage,\n  nextMessage: SendbirdUIKit.EveryMessage,\n): [boolean, boolean] => (\n  [\n    isSameGroup(prevMessage, currMessage),\n    isSameGroup(currMessage, nextMessage),\n  ]\n);\n\nexport const kFormatter = (num: number): string => {\n  if (Math.abs(num) > 999999) {\n    return `${(Math.abs(num) / 1000000).toFixed(1)}M`;\n  }\n\n  if (Math.abs(num) > 999) {\n    return `${(Math.abs(num) / 1000).toFixed(1)}K`;\n  }\n\n  return `${num}`;\n};\n\nexport const isOperator = (openChannel: Sendbird.OpenChannel, userId: string): boolean => {\n  const { operators } = openChannel;\n  if (operators.map(operator => operator.userId).indexOf(userId) < 0) {\n    return false;\n  }\n  return true;\n};\n\nexport const isDisabledBecauseFrozen = (openChannel: Sendbird.OpenChannel, userId: string): boolean => {\n  const { isFrozen } = openChannel;\n  return isFrozen && !isOperator(openChannel, userId);\n};\n\nexport const isDisabledBecauseMuted = (mutedParticipantIds: Array<string>, userId: string): boolean => {\n  return mutedParticipantIds.indexOf(userId) < 0;\n};\n\nexport const fetchWithListQuery = (\n  listQuery: SendbirdUIKit.UserListQuery,\n  logger: SendbirdUIKit.Logger,\n  eachQueryNextCallback: (users: Array<Sendbird.User>) => void,\n): void => {\n  const fetchList = (query) => {\n    const { hasNext } = query;\n    if (hasNext) {\n      query.next((error, users) => {\n        if (!error) {\n          eachQueryNextCallback(users);\n          fetchList(query);\n        } else {\n          logger.warning('OpenChannel | FetchUserList failed', error);\n        }\n      });\n    } else {\n      logger.info('OpenChannel | FetchUserList finished');\n    }\n  };\n  logger.info('OpenChannel | FetchUserList start', listQuery);\n  fetchList(listQuery);\n};\n\nexport const pxToNumber = (px: string | number): number | void => {\n  if (typeof px === 'number') {\n    return px;\n  }\n  if (typeof px === 'string') {\n    const parsed = Number.parseFloat(px);\n    if (!Number.isNaN(parsed)) {\n      return parsed;\n    }\n  }\n  return null;\n};\n","import React, { useContext } from 'react';\nimport Sendbird from 'sendbird';\nimport { RenderOpenChannelMessageInputProps } from '../../../index';\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\nimport MessageInput from '../../../ui/MessageInput';\n\ninterface Props {\n  channel: Sendbird.OpenChannel;\n  user: Sendbird.User;\n  disabled: boolean;\n  onSendMessage(): void;\n  onFileUpload(file_: File): void;\n  renderMessageInput?(renderProps: RenderOpenChannelMessageInputProps): JSX.Element;\n}\n\nconst MessageInputWrapper = ({\n  channel,\n  user,\n  disabled,\n  onSendMessage,\n  onFileUpload,\n  renderMessageInput,\n}: Props, ref: React.RefObject<HTMLInputElement>): JSX.Element => {\n  if (!channel) {\n    return;\n  }\n\n  const { stringSet } = useContext(LocalizationContext);\n\n  if (renderMessageInput) {\n    return renderMessageInput({ channel, user, disabled });\n  }\n\n  return (\n    <div className=\"sendbird-openchannel-footer\">\n      <MessageInput\n        ref={ref}\n        disabled={disabled}\n        onSendMessage={onSendMessage}\n        onFileUpload={onFileUpload}\n        placeholder={(\n          disabled\n          && stringSet.MESSAGE_INPUT__PLACE_HOLDER__DISABLED\n          // add disabled because of muted state\n        )}\n      />\n    </div>\n  );\n};\n\nexport default React.forwardRef(MessageInputWrapper);\n","import React, { useContext } from 'react';\n\nimport './frozen-notification.scss';\n\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\nimport Label, { LabelTypography } from '../../../ui/Label';\n\nconst FrozenNotification = (): JSX.Element => {\n  const { stringSet } = useContext(LocalizationContext);\n  return (\n    <div className=\"sendbird-frozen-channel-notification\">\n      <Label\n        className=\"sendbird-frozen-channel-notification__text\"\n        type={LabelTypography.CAPTION_2}\n      >\n        {stringSet.CHANNEL_FROZEN}\n      </Label>\n    </div>\n  );\n}\n\nexport default FrozenNotification;\n","import React, { useContext } from 'react';\nimport './index.scss';\n\nimport Avatar from '../Avatar';\nimport Icon, { IconColors, IconTypes } from '../Icon';\nimport IconButton from '../IconButton';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\n\ninterface Props {\n  coverImage?: string;\n  title?: string;\n  subTitle?: string;\n  amIOperator?: boolean;\n  onActionClick?(): void;\n}\n\nexport default function OpenchannelConversationHeader({\n  coverImage,\n  title,\n  subTitle,\n  amIOperator,\n  onActionClick,\n}: Props): JSX.Element {\n  const { stringSet } = useContext(LocalizationContext);\n\n  return (\n    <div className=\"sendbird-openchannel-conversation-header\">\n      <div className=\"sendbird-openchannel-conversation-header__left\">\n        {\n          coverImage ? (\n            <Avatar\n              className=\"sendbird-openchannel-conversation-header__left__cover-image\"\n              src={coverImage}\n              alt=\"channel cover image\"\n              width=\"32px\"\n              height=\"32px\"\n            />\n          ) : (\n            <div\n              className=\"sendbird-openchannel-conversation-header__left__cover-image--icon\"\n              style={{ width: 32, height: 32 }}\n            >\n              <Icon\n                type={IconTypes.CHANNELS}\n                fillColor={IconColors.CONTENT}\n                width=\"18px\"\n                height=\"18px\"\n              />\n            </div>\n          )\n        }\n        <Label\n          className=\"sendbird-openchannel-conversation-header__left__title\"\n          type={LabelTypography.H_2}\n          color={LabelColors.ONBACKGROUND_1}\n        >\n          {title || stringSet.NO_TITLE}\n        </Label>\n        <Label\n          className=\"sendbird-openchannel-conversation-header__left__sub-title\"\n          type={LabelTypography.BODY_2}\n          color={LabelColors.ONBACKGROUND_2}\n        >\n          {subTitle || stringSet.NO_TITLE}\n        </Label>\n      </div>\n      <div className=\"sendbird-openchannel-conversation-header__right\">\n        <IconButton\n          className=\"sendbird-openchannel-conversation-header__right__trigger\"\n          width=\"32px\"\n          height=\"32px\"\n          onClick={onActionClick}\n        >\n          <Icon\n            type={(\n              amIOperator\n              ? IconTypes.INFO\n              : IconTypes.MEMBERS\n            )}\n            fillColor={IconColors.PRIMARY}\n            width=\"24px\"\n            height=\"24px\"\n          />\n        </IconButton>\n      </div>\n    </div>\n  );\n}\n","export const copyToClipboard = (text: string): boolean => {\n  // @ts-ignore: Unreachable code error\n  if (window.clipboardData && window.clipboardData.setData) {\n    // Internet Explorer-specific code path to prevent textarea being shown while dialog is visible.\n    // @ts-ignore: Unreachable code error\n    return window.clipboardData.setData('Text', text);\n  }\n  if (document.queryCommandSupported && document.queryCommandSupported('copy')) {\n    const textarea = document.createElement('textarea');\n    textarea.textContent = text;\n    textarea.style.position = 'fixed'; // Prevent scrolling to bottom of page in Microsoft Edge.\n    document.body.appendChild(textarea);\n    textarea.select();\n    try {\n      return document.execCommand('copy'); // Security exception may be thrown by some browsers.\n    } catch (ex) {\n      return false;\n    } finally {\n      document.body.removeChild(textarea);\n    }\n  }\n  return false;\n};\n\nexport default { copyToClipboard };\n","import Sendbird from 'sendbird';\nimport { ClientUserMessage, ClientFileMessage } from '../index';\n\nconst OpenChannelMessageStatusTypes = {\n  NONE: 'none',\n  PENDING: 'pending',\n  FAILED: 'failed',\n  CANCELED: 'canceled',\n  SUCCEEDED: 'succeeded'\n};\n\nexport const getSenderFromMessage = (message: ClientUserMessage | ClientFileMessage): Sendbird.User => {\n  return message.sender || message._sender;\n};\n\nexport const checkIsSent = (status: string): boolean => (status === OpenChannelMessageStatusTypes.SUCCEEDED);\nexport const checkIsPending = (status: string): boolean => (status === OpenChannelMessageStatusTypes.PENDING);\nexport const checkIsFailed = (status: string): boolean => (status === OpenChannelMessageStatusTypes.FAILED);\n\nexport const checkIsByMe = (message: ClientFileMessage | ClientUserMessage, userId: string): boolean => (getSenderFromMessage(message).userId === userId);\n\ninterface isFineCopyParams {\n  message: ClientUserMessage;\n  status: string;\n  userId: string;\n}\nexport const isFineCopy = ({ message }: isFineCopyParams): boolean => {\n  return (message.messageType === 'user' && message.message.length > 0);\n};\n\ninterface isFineResendParams {\n  message: ClientFileMessage | ClientUserMessage;\n  status: string;\n  userId: string;\n}\nexport const isFineResend = ({ message, status, userId }: isFineResendParams): boolean => {\n  return checkIsByMe(message, userId)\n    && checkIsFailed(status)\n    && message.isResendable\n    && message.isResendable();\n};\n\ninterface isFineEditParams {\n  message: ClientUserMessage;\n  status: string;\n  userId: string;\n}\nexport const isFineEdit = ({ message, status, userId }: isFineEditParams): boolean => {\n  return checkIsByMe(message, userId) && checkIsSent(status);\n};\n\ninterface isFineDeleteParams {\n  message: ClientFileMessage | ClientUserMessage;\n  status: string;\n  userId: string;\n}\nexport const isFineDelete = ({ message, userId }: isFineDeleteParams): boolean => {\n  return checkIsByMe(message, userId);\n};\n\ninterface showMenuTriggerParams {\n  message: ClientUserMessage | ClientFileMessage;\n  status: string;\n  userId: string;\n}\nexport const showMenuTrigger = (props: showMenuTriggerParams): boolean => {\n  const { message, status, userId } = props;\n  if (message.messageType === 'user') {\n    return (\n      isFineDelete({ message, status, userId })\n      || isFineEdit({ message, status, userId })\n      || isFineCopy({ message, status, userId })\n      || isFineResend({ message, status, userId })\n    );\n  } else {\n    return (\n      isFineDelete({ message, status, userId })\n      || isFineResend({ message, status, userId })\n    );\n  }\n};\n","import React, {\n  useMemo,\n  useContext,\n  useRef,\n  useState,\n  ReactElement,\n  useEffect,\n} from 'react';\nimport format from 'date-fns/format';\nimport './index.scss';\n\nimport Avatar from '../Avatar';\nimport ContextMenu, { MenuItems, MenuItem } from '../ContextMenu';\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport IconButton from '../IconButton';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport Loader from '../Loader';\nimport UserProfile from '../UserProfile';\nimport { UserProfileContext } from '../../lib/UserProfileContext';\n\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport { copyToClipboard } from './utils';\nimport uuidv4 from '../../utils/uuid';\nimport { ClientUserMessage } from '../../index';\nimport {\n  checkIsByMe,\n  checkIsPending,\n  checkIsFailed,\n  isFineCopy,\n  isFineEdit,\n  isFineResend,\n  isFineDelete,\n  showMenuTrigger,\n} from '../../utils/openChannelUtils';\nimport { getSenderFromMessage } from '../../utils/openChannelUtils';\n\ninterface Props {\n  className?: string | Array<string>;\n  message: ClientUserMessage;\n  userId: string;\n  disabled?: boolean;\n  showEdit(bool: boolean): void;\n  showRemove(bool: boolean): void;\n  resendMessage(message: ClientUserMessage): void;\n  chainTop?: boolean;\n  chainBottom?: boolean;\n  status: string;\n}\n\nexport default function OpenchannelUserMessage({\n  className,\n  message,\n  userId,\n  resendMessage,\n  disabled,\n  showEdit,\n  showRemove,\n  chainTop,\n  status,\n}: Props): ReactElement {\n  if (!message || message.messageType !== 'user') {\n    return null;\n  }\n\n  // hooks\n  const { stringSet, dateLocale } = useContext(LocalizationContext);\n  const { disableUserProfile, renderUserProfile } = useContext(UserProfileContext);\n  const messageRef = useRef(null);\n  const avatarRef = useRef(null);\n  const contextMenuRef = useRef(null);\n  const [contextStyle, setContextStyle] = useState({});\n\n  // consts\n  const isByMe = checkIsByMe(message, userId);\n  const isPending = checkIsPending(status);\n  const isFailed = checkIsFailed(status);\n  const sender = getSenderFromMessage(message);\n\n  const MemoizedMessageText = useMemo(() => () => {\n    const splitMessage = message.message.split(/\\r/);\n    const matchedMessage = splitMessage.map((word) => (word !== '' ? word : <br />));\n    if (message.updatedAt > 0) {\n      matchedMessage.push(\n        <Label\n          key={uuidv4()}\n          type={LabelTypography.BODY_1}\n          color={LabelColors.ONBACKGROUND_2}\n          calssName=\"sendbird-openchannel-user-message-word\"\n        >\n          {` ${stringSet.MESSAGE_EDITED} `}\n        </Label>,\n      );\n    }\n    return matchedMessage;\n  }, [message, message.updatedAt]);\n\n  // place context menu top depending clientHeight of message component\n  useEffect(() => {\n    if (messageRef?.current?.clientHeight > 36) {\n      setContextStyle({ top: '8px ' });\n    } else {\n      setContextStyle({ top: '2px' });\n    }\n  }, [window.innerWidth]);\n\n  return (\n    <div\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        'sendbird-openchannel-user-message',\n      ].join(' ')}\n      ref={messageRef}\n    >\n      <div className=\"sendbird-openchannel-user-message__left\">\n        {\n          !chainTop && (\n            <ContextMenu\n              menuTrigger={(toggleDropdown) => (\n                <Avatar\n                  className=\"sendbird-openchannel-user-message__left__avatar\"\n                  src={sender.profileUrl || ''}\n                  ref={avatarRef}\n                  width=\"28px\"\n                  height=\"28px\"\n                  onClick={() => {\n                    if (!disableUserProfile) {\n                      toggleDropdown();\n                    }\n                  }}\n                />\n              )}\n              menuItems={(closeDropdown) => (\n                <MenuItems\n                  parentRef={avatarRef}\n                  parentContainRef={avatarRef}\n                  closeDropdown={closeDropdown}\n                  style={{ paddingTop: 0, paddingBottom: 0 }}\n                >\n                  {\n                    renderUserProfile\n                    ? (\n                      renderUserProfile({\n                        user: sender,\n                        close: closeDropdown,\n                      })\n                    )\n                    : (\n                      <UserProfile\n                        user={sender}\n                        onSuccess={closeDropdown}\n                        disableMessaging\n                      />\n                    )\n                  }\n                </MenuItems>\n              )}\n            />\n          )\n        }\n      </div>\n      <div className=\"sendbird-openchannel-user-message__right\">\n        {\n          !chainTop && (\n            <div className=\"sendbird-openchannel-user-message__right__top\">\n              <Label\n                className=\"sendbird-openchannel-user-message__right__top__sender-name\"\n                type={LabelTypography.CAPTION_2}\n                color={isByMe ? LabelColors.SECONDARY_3 : LabelColors.ONBACKGROUND_2}\n              >\n                {\n                  sender && (\n                    sender.friendName\n                    || sender.nickname\n                    || sender.userId\n                  )\n                }\n              </Label>\n              <Label\n                className=\"sendbird-openchannel-user-message__right__top__sent-at\"\n                type={LabelTypography.CAPTION_3}\n                color={LabelColors.ONBACKGROUND_3}\n              >\n                {format(message.createdAt, 'p', { locale: dateLocale })}\n              </Label>\n            </div>\n          )\n        }\n        <div className=\"sendbird-openchannel-user-message__right__bottom\">\n          <Label\n            className=\"sendbird-openchannel-user-message__right__bottom__message\"\n            type={LabelTypography.BODY_1}\n            color={LabelColors.ONBACKGROUND_1}\n          >\n            {MemoizedMessageText()}\n          </Label>\n        </div>\n        {\n          (isPending || isFailed) && (\n            <div className=\"sendbird-openchannel-user-message__right__tail\">\n              {\n                isPending && (\n                  <Loader\n                    width=\"16px\"\n                    height=\"16px\"\n                  >\n                    <Icon\n                      className=\"sendbird-openchannel-user-message__right__tail__pending\"\n                      type={IconTypes.SPINNER}\n                      fillColor={IconColors.PRIMARY}\n                      width=\"16px\"\n                      height=\"16px\"\n                    />\n                  </Loader>\n                )\n              }\n              {\n                isFailed && (\n                  <Icon\n                    className=\"sendbird-openchannel-user-message__right__tail__failed\"\n                    type={IconTypes.ERROR}\n                    width=\"16px\"\n                    height=\"16px\"\n                  />\n                )\n              }\n            </div>\n          )\n        }\n      </div>\n      {\n        <div\n          className=\"sendbird-openchannel-user-message__context-menu\"\n          ref={contextMenuRef}\n          style={contextStyle}\n        >\n          <ContextMenu\n            menuTrigger={(toggleDropdown) => (\n              showMenuTrigger({ message: message, userId: userId, status: status}) && (\n                <IconButton\n                  className=\"sendbird-openchannel-user-message__context-menu--icon\"\n                  width=\"32px\"\n                  height=\"32px\"\n                  onClick={() => {\n                    toggleDropdown();\n                  }}\n                >\n                  <Icon\n                    type={IconTypes.MORE}\n                    fillColor={IconColors.CONTENT_INVERSE}\n                    width=\"24px\"\n                    height=\"24px\"\n                  />\n                </IconButton>\n              )\n            )}\n            menuItems={(closeDropdown) => (\n              <MenuItems\n                parentRef={contextMenuRef}\n                parentContainRef={contextMenuRef}\n                closeDropdown={closeDropdown}\n                openLeft\n              >\n                {\n                  isFineCopy({ message: message, userId: userId, status: status }) && (\n                    <MenuItem\n                      className=\"sendbird-openchannel-user-message__context-menu__copy\"\n                      onClick={() => {\n                        copyToClipboard(message.message);\n                        closeDropdown();\n                      }}\n                    >\n                      {stringSet.CONTEXT_MENU_DROPDOWN__COPY}\n                    </MenuItem>\n                  )\n                }\n                {\n                  isFineEdit({ message: message, userId: userId, status: status }) && (\n                    <MenuItem\n                      className=\"sendbird-openchannel-user-message__context-menu__edit\"\n                      onClick={() => {\n                        if (disabled) {\n                          return;\n                        }\n                        showEdit(true);\n                        closeDropdown();\n                      }}\n                    >\n                      {stringSet.CONTEXT_MENU_DROPDOWN__EDIT}\n                    </MenuItem>\n                  )\n                }\n                {\n                  isFineResend({ message: message, userId: userId, status: status }) && (\n                    <MenuItem\n                      className=\"sendbird-openchannel-user-message__context-menu__resend\"\n                      onClick={() => {\n                        resendMessage(message);\n                        closeDropdown();\n                      }}\n                    >\n                      {stringSet.CONTEXT_MENU_DROPDOWN__RESEND}\n                    </MenuItem>\n                  )\n                }\n                {\n                  isFineDelete({ message: message, userId: userId, status: status }) && (\n                    <MenuItem\n                      className=\"sendbird-openchannel-user-message__context-menu__delete\"\n                      onClick={() => {\n                        if (disabled) {\n                          return;\n                        }\n                        showRemove(true);\n                        closeDropdown();\n                      }}\n                    >\n                      {stringSet.CONTEXT_MENU_DROPDOWN__DELETE}\n                    </MenuItem>\n                  )\n                }\n              </MenuItems>\n            )}\n          />\n        </div>\n      }\n    </div>\n  );\n}\n","import React, { ReactElement } from 'react';\nimport { ClientAdminMessage } from '../../index';\nimport './index.scss';\n\nimport Label, { LabelColors, LabelTypography } from '../Label';\n\ninterface Props {\n  className?: string | Array<string>;\n  message: ClientAdminMessage;\n}\n\nexport default function OpenChannelAdminMessage({\n  className,\n  message,\n}: Props): ReactElement {\n  return (\n    <div\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        'sendbird-openchannel-admin-message',\n      ].join(' ')}\n    >\n      <Label\n        className=\"sendbird-openchannel-admin-message__text\"\n        type={LabelTypography.CAPTION_2}\n        color={LabelColors.ONBACKGROUND_2}\n      >\n        {message.message || ''}\n      </Label>\n    </div>\n  );\n}\n","import Sendbird from 'sendbird';\n\nexport const URL_REG = /[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/;\nexport const createUrlTester = (regexp: RegExp) => (text: string): boolean => regexp.test(text);\nexport const checkOGIsEnalbed = (message: Sendbird.UserMessage): boolean => {\n  const { ogMetaData } = message;\n  if (!ogMetaData) {\n    return false;\n  }\n  const { url } = ogMetaData;\n  if (!url) {\n    return false;\n  }\n  return true;\n};\n","import React, { useState, useContext, useMemo, useRef, useEffect } from 'react';\nimport format from 'date-fns/format';\nimport './index.scss';\n\nimport Avatar from '../Avatar';\nimport ContextMenu, { MenuItems, MenuItem } from '../ContextMenu';\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport IconButton from '../IconButton';\nimport ImageRenderer from '../ImageRenderer';\nimport LinkLabel from '../LinkLabel';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport Loader from '../Loader';\nimport UserProfile from '../UserProfile';\nimport { UserProfileContext } from '../../lib/UserProfileContext';\n\nimport uuidv4 from '../../utils/uuid';\nimport { copyToClipboard } from '../OpenchannelUserMessage/utils';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport { checkOGIsEnalbed, createUrlTester, URL_REG } from './utils';\nimport { ClientUserMessage } from '../../index';\nimport {\n  checkIsByMe,\n  checkIsPending,\n  checkIsFailed,\n  isFineCopy,\n  isFineEdit,\n  isFineResend,\n  isFineDelete,\n  showMenuTrigger,\n} from '../../utils/openChannelUtils';\nimport { getSenderFromMessage } from '../../utils/openChannelUtils';\n\ninterface Props {\n  message: ClientUserMessage;\n  className?: string | Array<string>;\n  disabled?: boolean;\n  showEdit(bool: boolean): void;\n  showRemove(bool: boolean): void;\n  resendMessage(message: ClientUserMessage): void;\n  chainTop?: boolean;\n  chainBottom?: boolean;\n  status: string;\n  userId: string;\n}\n\nexport default function OpenchannelOGMessage({\n  message,\n  className,\n  disabled,\n  showEdit,\n  showRemove,\n  resendMessage,\n  chainTop,\n  status,\n  userId,\n}: Props): JSX.Element {\n  if (!message || message.messageType !== 'user') {\n    return null;\n  }\n\n  const { ogMetaData } = message;\n  const { defaultImage } = ogMetaData;\n\n  const { stringSet, dateLocale } = useContext(LocalizationContext);\n  const { disableUserProfile, renderUserProfile } = useContext(UserProfileContext);\n  const [contextStyle, setContextStyle] = useState({});\n  const messageComponentRef = useRef(null);\n  const contextMenuRef = useRef(null);\n  const avatarRef = useRef(null);\n\n  const isUrl = createUrlTester(URL_REG);\n  const isByMe = checkIsByMe(message, userId);\n  const isPending = checkIsPending(status);\n  const isFailed = checkIsFailed(status);\n  const sender = getSenderFromMessage(message);\n\n  const MemoizedMessageText = useMemo(() => () => {\n    const wordClassName = 'sendbird-openchannel-og-message--word';\n    const splitMessage = message.message.split(' ');\n    const matchedMessage = splitMessage\n      .map((word) => (\n        isUrl(word)\n          ? (\n            <LinkLabel\n              key={uuidv4()}\n              className={[\n                wordClassName,\n                'sendbird-openchannel-og-message--word--link'\n              ]}\n              src={word}\n              type={LabelTypography.BODY_1}\n              color={LabelColors.PRIMARY}\n            >\n              {word}\n            </LinkLabel>\n          )\n          : (\n            <Label\n              key={uuidv4()}\n              className={wordClassName}\n              type={LabelTypography.BODY_1}\n              color={LabelColors.ONBACKGROUND_1}\n            >\n              {word}\n            </Label>\n          )\n      ));\n\n    if (message.updatedAt > 0) {\n      matchedMessage.push(\n        <Label\n          key={uuidv4()}\n          className={wordClassName}\n          type={LabelTypography.BODY_1}\n          color={LabelColors.ONBACKGROUND_2}\n        >\n          {stringSet.MESSAGE_EDITED}\n        </Label>,\n      );\n    }\n\n    return matchedMessage;\n  }, [message, message.updatedAt]);\n\n  const openLink = () => {\n    if (checkOGIsEnalbed(message)) {\n      const { url } = ogMetaData;\n      window.open(url);\n    }\n  };\n\n  // place conxt menu top depending clientHeight of message component\n  useEffect(() => {\n    if (messageComponentRef?.current?.clientHeight > 36) {\n      setContextStyle({ top: '8px ' });\n    } else {\n      setContextStyle({ top: '2px' });\n    }\n  }, [window.innerWidth]);\n\n  return (\n    <div\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        'sendbird-openchannel-og-message',\n      ].join(' ')}\n      ref={messageComponentRef}\n    >\n      <div\n        className=\"sendbird-openchannel-og-message__top\"\n      >\n        <div className=\"sendbird-openchannel-og-message__top__left\">\n          {\n            !chainTop && (\n              <ContextMenu\n                menuTrigger={(toggleDropdown) => (\n                  <Avatar\n                    className=\"sendbird-openchannel-og-message__top__left__avatar\"\n                    src={sender.profileUrl || ''}\n                    ref={avatarRef}\n                    width=\"28px\"\n                    height=\"28px\"\n                    onClick={() => {\n                      if (!disableUserProfile) {\n                        toggleDropdown();\n                      }\n                    }}\n                  />\n                )}\n                menuItems={(closeDropdown) => (\n                  <MenuItems\n                    parentRef={avatarRef}\n                    parentContainRef={avatarRef}\n                    closeDropdown={closeDropdown}\n                    style={{ paddingTop: 0, paddingBottom: 0 }}\n                  >\n                    {\n                      renderUserProfile\n                        ? (\n                          renderUserProfile({\n                            user: sender,\n                            close: closeDropdown,\n                          })\n                        )\n                        : (\n                          <UserProfile\n                            user={sender}\n                            onSuccess={closeDropdown}\n                            disableMessaging\n                          />\n                        )\n                    }\n                  </MenuItems>\n                )}\n              />\n            )\n          }\n        </div>\n        <div className=\"sendbird-openchannel-og-message__top__right\">\n          {\n            !chainTop && (\n              <div className=\"sendbird-openchannel-og-message__top__right__title\">\n                <Label\n                  className=\"sendbird-openchannel-og-message__top__right__title__sender-name\"\n                  type={LabelTypography.CAPTION_2}\n                  color={isByMe ? LabelColors.SECONDARY_3 : LabelColors.ONBACKGROUND_2}\n                >\n                  {\n                    sender && (\n                      sender.friendName\n                      || sender.nickname\n                      || sender.userId\n                    )\n                  }\n                </Label>\n                <Label\n                  className=\"sendbird-openchannel-og-message__top__right__title__sent-at\"\n                  type={LabelTypography.CAPTION_3}\n                  color={LabelColors.ONBACKGROUND_3}\n                >\n                  {format(message.createdAt, 'p', { locale: dateLocale })}\n                </Label>\n              </div>\n            )\n          }\n          <div className=\"sendbird-openchannel-og-message__top__right__description\">\n            <Label\n              className=\"sendbird-openchannel-og-message__top__right__description__message\"\n              type={LabelTypography.BODY_1}\n              color={LabelColors.ONBACKGROUND_1}\n            >\n              {MemoizedMessageText()}\n            </Label>\n          </div>\n        </div>\n        {\n          <div\n            className=\"sendbird-openchannel-og-message__top__context-menu\"\n            ref={contextMenuRef}\n            style={contextStyle}\n          >\n            <ContextMenu\n              menuTrigger={(toggleDropdown) => (\n                showMenuTrigger({ message: message, userId: userId, status: status }) && (\n                  <IconButton\n                    className=\"sendbird-openchannel-og-message__top__context-menu--icon\"\n                    width=\"32px\"\n                    height=\"32px\"\n                    onClick={() => {\n                      toggleDropdown();\n                    }}\n                  >\n                    <Icon\n                      type={IconTypes.MORE}\n                      fillColor={IconColors.CONTENT_INVERSE}\n                      width=\"24px\"\n                      height=\"24px\"\n                    />\n                  </IconButton>\n                )\n              )}\n              menuItems={(closeDropdown) => (\n                <MenuItems\n                  parentRef={contextMenuRef}\n                  parentContainRef={contextMenuRef}\n                  closeDropdown={closeDropdown}\n                  openLeft\n                >\n                  {\n                    isFineCopy({ message, userId, status }) && (\n                      <MenuItem\n                        className=\"sendbird-openchannel-og-message__top__context-menu__copy\"\n                        onClick={() => {\n                          copyToClipboard(message.message);\n                          closeDropdown();\n                        }}\n                      >\n                        {stringSet.CONTEXT_MENU_DROPDOWN__COPY}\n                      </MenuItem>\n                    )\n                  }\n                  {\n                    isFineEdit({ message, userId, status }) && (\n                      <MenuItem\n                        className=\"sendbird-openchannel-og-message__top__context-menu__edit\"\n                        onClick={() => {\n                          if (disabled) {\n                            return;\n                          }\n                          showEdit(true);\n                          closeDropdown();\n                        }}\n                      >\n                        {stringSet.CONTEXT_MENU_DROPDOWN__EDIT}\n                      </MenuItem>\n                    )\n                  }\n                  {\n                    isFineResend({ message, userId, status }) && (\n                      <MenuItem\n                        className=\"sendbird-openchannel-og-message__top__context-menu__resend\"\n                        onClick={() => {\n                          resendMessage(message);\n                          closeDropdown();\n                        }}\n                      >\n                        {stringSet.CONTEXT_MENU_DROPDOWN__RESEND}\n                      </MenuItem>\n                    )\n                  }\n                  {\n                    isFineDelete({ message, userId, status }) && (\n                      <MenuItem\n                        className=\"sendbird-openchannel-og-message__top__context-menu__delete\"\n                        onClick={() => {\n                          if (disabled) {\n                            return;\n                          }\n                          showRemove(true);\n                          closeDropdown();\n                        }}\n                      >\n                        {stringSet.CONTEXT_MENU_DROPDOWN__DELETE}\n                      </MenuItem>\n                    )\n                  }\n                </MenuItems>\n              )}\n            />\n          </div>\n        }\n      </div>\n      <div className=\"sendbird-openchannel-og-message__bottom\">\n        <div className=\"sendbird-openchannel-og-message__bottom__og-tag\">\n          {\n            ogMetaData.url && (\n              <Label\n                className=\"sendbird-openchannel-og-message__bottom__og-tag__url\"\n                type={LabelTypography.CAPTION_3}\n                color={LabelColors.ONBACKGROUND_2}\n              >\n                {ogMetaData.url}\n              </Label>\n            )\n          }\n          {\n            ogMetaData.title && (\n              <LinkLabel\n                className=\"sendbird-openchannel-og-message__bottom__og-tag__title\"\n                src={ogMetaData.url}\n                type={LabelTypography.SUBTITLE_2}\n                color={LabelColors.PRIMARY}\n              >\n                {\n                  ogMetaData.title\n                }\n              </LinkLabel>\n            )\n          }\n          {\n            ogMetaData.description && (\n              <Label\n                className=\"sendbird-openchannel-og-message__bottom__og-tag__description\"\n                type={LabelTypography.BODY_2}\n                color={LabelColors.ONBACKGROUND_1}\n              >\n                {ogMetaData.description}\n              </Label>\n            )\n          }\n          {\n            ogMetaData.url && (\n              <div\n                className=\"sendbird-openchannel-og-message__bottom__og-tag__thumbnail\"\n                role=\"button\"\n                onClick={openLink}\n                onKeyDown={openLink}\n                tabIndex={0}\n              >\n                {\n                  defaultImage && (\n                    <ImageRenderer\n                      className=\"sendbird-openchannel-og-message__bottom__og-tag__thumbnail__image\"\n                      url={defaultImage.url || ''}\n                      alt={defaultImage.alt || ''}\n                      height=\"189px\"\n                      defaultComponent={(\n                        <div className=\"sendbird-openchannel-og-message__bottom__og-tag__thumbnail__image--placeholder\">\n                          <Icon\n                            type={IconTypes.THUMBNAIL_NONE}\n                            width=\"56px\"\n                            height=\"56px\"\n                          />\n                        </div>\n                      )}\n                    />\n                  )\n                }\n              </div>\n            )\n          }\n        </div>\n        {\n          (isPending || isFailed) && (\n            <div className=\"sendbird-openchannel-og-message__top__right__tail\">\n              {\n                isPending && (\n                  <Loader\n                    width=\"16px\"\n                    height=\"16px\"\n                  >\n                    <Icon\n                      className=\"sendbird-openchannel-og-message__top__right__tail__pending\"\n                      type={IconTypes.SPINNER}\n                      fillColor={IconColors.PRIMARY}\n                      width=\"16px\"\n                      height=\"16px\"\n                    />\n                  </Loader>\n                )\n              }\n              {\n                isFailed && (\n                  <Icon\n                    className=\"sendbird-openchannel-og-message__top__right__tail__failed\"\n                    type={IconTypes.ERROR}\n                    width=\"16px\"\n                    height=\"16px\"\n                  />\n                )\n              }\n            </div>\n          )\n        }\n      </div>\n    </div>\n  );\n}\n","export const SUPPORTING_TYPES = {\n  IMAGE: 'IMAGE',\n  VIDEO: 'VIDEO',\n  UNSUPPORTED: 'UNSUPPORTED',\n};\n\nconst SUPPORTED_MIMES = {\n  IMAGE: [\n    'image/jpeg',\n    'image/jpg',\n    'image/png',\n    'image/gif',\n    'image/webp',\n  ],\n  VIDEO: [\n    'video/mpeg',\n    'video/ogg',\n    'video/webm',\n    'video/mp4',\n  ],\n};\n\nexport const getSupportingFileType = (type: string): string => {\n  if (SUPPORTED_MIMES.IMAGE.indexOf(type) >= 0) {\n    return SUPPORTING_TYPES.IMAGE;\n  }\n  if (SUPPORTED_MIMES.VIDEO.indexOf(type) >= 0) {\n    return SUPPORTING_TYPES.VIDEO;\n  }\n  return SUPPORTING_TYPES.UNSUPPORTED;\n}\n","import React, {\n  useRef,\n  useMemo,\n  useState,\n  useEffect,\n  useContext,\n} from 'react';\nimport format from 'date-fns/format';\nimport './index.scss';\nimport { SUPPORTING_TYPES, getSupportingFileType } from './utils';\nimport { ClientFileMessage } from '../../index';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\n\nimport Avatar from '../Avatar';\nimport ContextMenu, { MenuItems, MenuItem } from '../ContextMenu';\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport IconButton from '../IconButton';\nimport ImageRenderer from '../ImageRenderer';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport Loader from '../Loader';\nimport UserProfile from '../UserProfile';\nimport { UserProfileContext } from '../../lib/UserProfileContext';\nimport {\n  checkIsByMe,\n  checkIsSent,\n  checkIsPending,\n  checkIsFailed,\n  isFineResend,\n  isFineDelete,\n  showMenuTrigger,\n} from '../../utils/openChannelUtils';\nimport { getSenderFromMessage } from '../../utils/openChannelUtils';\n\ninterface Props {\n  className?: string | Array<string>;\n  message: ClientFileMessage;\n  disabled: boolean;\n  userId: string;\n  status: string;\n  chainTop: boolean;\n  chainBottom: boolean;\n  onClick(bool: boolean): void,\n  showRemove(bool: boolean): void,\n  resendMessage(message: ClientFileMessage): void;\n}\n\nexport default function OpenchannelThumbnailMessage({\n  className,\n  message,\n  disabled,\n  userId,\n  status,\n  chainTop,\n  onClick,\n  showRemove,\n  resendMessage,\n}: Props): JSX.Element {\n  const {\n    type,\n    url,\n    localUrl,\n    thumbnails,\n  } = message;\n  const thumbnailUrl = (thumbnails && thumbnails.length > 0 && thumbnails[0].url) || null;\n  const { stringSet, dateLocale } = useContext(LocalizationContext);\n  const { disableUserProfile, renderUserProfile } = useContext(UserProfileContext);\n  const [messageWidth, setMessageWidth] = useState(360);\n  const messageRef = useRef(null);\n  const contextMenuRef = useRef(null);\n  const avatarRef = useRef(null);\n\n  const memorizedThumbnailPlaceHolder = useMemo(() => (type) => ({ style }) => ( // eslint-disable-line\n    <div style={style}>\n      <Icon\n        type={type}\n        fillColor={IconColors.ON_BACKGROUND_2}\n        width=\"56px\"\n        height=\"56px\"\n        />\n    </div>\n  ), []);\n\n  const isByMe = checkIsByMe(message, userId);\n  const isMessageSent = checkIsSent(status);\n  const isPending = checkIsPending(status);\n  const isFailed = checkIsFailed(status);\n  const sender = getSenderFromMessage(message);\n\n  useEffect(() => {\n    const thumbnailWidth = messageRef?.current?.clientWidth - 80;\n    setMessageWidth(thumbnailWidth > 360 ? 360 : thumbnailWidth);\n  }, []);\n\n  return (\n    <div\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        'sendbird-openchannel-thumbnail-message',\n      ].join(' ')}\n      ref={messageRef}\n    >\n      <div className=\"sendbird-openchannel-thumbnail-message__left\">\n        {\n          !chainTop && (\n            <ContextMenu\n              menuTrigger={(toggleDropdown) => (\n                <Avatar\n                  className=\"sendbird-openchannel-thumbnail-message__left__avatar\"\n                  src={sender.profileUrl || ''}\n                  ref={avatarRef}\n                  width=\"28px\"\n                  height=\"28px\"\n                  onClick={() => {\n                    if (!disableUserProfile) {\n                      toggleDropdown();\n                    }\n                  }}\n                />\n              )}\n              menuItems={(closeDropdown) => (\n                <MenuItems\n                  parentRef={avatarRef}\n                  parentContainRef={avatarRef}\n                  closeDropdown={closeDropdown}\n                  style={{ paddingTop: 0, paddingBottom: 0 }}\n                >\n                  {\n                    renderUserProfile\n                      ? (\n                        renderUserProfile({\n                          user: sender,\n                          close: closeDropdown,\n                        })\n                      )\n                      : (\n                        <UserProfile\n                          user={sender}\n                          onSuccess={closeDropdown}\n                          disableMessaging\n                        />\n                      )\n                  }\n                </MenuItems>\n              )}\n            />\n          )\n        }\n      </div>\n      <div className=\"sendbird-openchannel-thumbnail-message__right\">\n        {\n          !chainTop && (\n            <div className=\"sendbird-openchannel-thumbnail-message__right__title\">\n              <Label\n                className=\"sendbird-openchannel-thumbnail-message__right__title__sender-name\"\n                type={LabelTypography.CAPTION_2}\n                color={isByMe ? LabelColors.SECONDARY_3 : LabelColors.ONBACKGROUND_2}\n              >\n                {\n                  sender && (\n                    sender.friendName\n                    || sender.nickname\n                    || sender.userId\n                  )\n                }\n              </Label>\n              <Label\n                className=\"sendbird-openchannel-thumbnail-message__right__title__sent-at\"\n                type={LabelTypography.CAPTION_3}\n                color={LabelColors.ONBACKGROUND_3}\n              >\n                {format(message.createdAt, 'p', { locale: dateLocale })}\n              </Label>\n            </div>\n          )\n        }\n        <div className=\"sendbird-openchannel-thumbnail-message__right__body\">\n          <div\n            className=\"sendbird-openchannel-thumbnail-message__right__body__wrap\"\n            role=\"button\"\n            onClick={() => {\n              if (isMessageSent) {\n                onClick(true);\n              }\n            }}\n            onKeyDown={() => {\n              if (isMessageSent) {\n                onClick(true);\n              }\n            }}\n            tabIndex={0}\n          >\n            <div className=\"sendbird-openchannel-thumbnail-message__right__body__wrap__overlay\" />\n            {\n              {\n                [SUPPORTING_TYPES.VIDEO]: (\n                  (url || localUrl)\n                    ? (\n                      <div className=\"sendbird-openchannel-thumbnail-message__right__body__wrap__video\" >\n                        {\n                          (thumbnailUrl)\n                            ? (\n                              <ImageRenderer\n                                className=\"sendbird-openchannel-thumbnail-message__right__body__wrap__video\"\n                                url={thumbnailUrl}\n                                width={messageWidth}\n                                height=\"270px\"\n                                alt=\"image\"\n                                placeHolder={memorizedThumbnailPlaceHolder(IconTypes.PLAY)}\n                              />\n                            )\n                            : (\n                              <video className=\"sendbird-openchannel-thumbnail-message__right__body__wrap__video__video\">\n                                <source src={url || localUrl} type={type} />\n                              </video>\n                            )\n                        }\n                        <Icon\n                          className=\"sendbird-openchannel-thumbnail-message__right__body__wrap__video__icon\"\n                          type={IconTypes.PLAY}\n                          fillColor={IconColors.ON_BACKGROUND_2}\n                          width=\"56px\"\n                          height=\"56px\"\n                        />\n                      </div>\n                    )\n                    : (\n                      <Icon\n                        className=\"sendbird-openchannel-thumbnail-message__right__body__wrap__video--icon\"\n                        type={IconTypes.PHOTO}\n                        fillColor={IconColors.ON_BACKGROUND_2}\n                        width=\"56px\"\n                        height=\"56px\"\n                      />\n                    )\n                ),\n                [SUPPORTING_TYPES.IMAGE]: (\n                  (url || localUrl)\n                    ? (\n                      <ImageRenderer\n                        className=\"sendbird-openchannel-thumbnail-message__right__body__wrap__image\"\n                        url={thumbnailUrl || url || localUrl}\n                        alt=\"image\"\n                        width={messageWidth}\n                        height=\"270px\"\n                        placeHolder={memorizedThumbnailPlaceHolder(IconTypes.PHOTO)}\n                      />\n                    )\n                    : (\n                      <Icon\n                        className=\"sendbird-openchannel-thumbnail-message__right__body__wrap__image--icon\"\n                        type={IconTypes.PHOTO}\n                        fillColor={IconColors.ON_BACKGROUND_2}\n                        width=\"56px\"\n                        height=\"56px\"\n                      />\n                    )\n                ),\n                [SUPPORTING_TYPES.UNSUPPORTED]: (\n                  <Icon\n                    className=\"sendbird-openchannel-thumbnail-message__right__body__wrap__unknown\"\n                    type={IconTypes.PHOTO}\n                    fillColor={IconColors.ON_BACKGROUND_2}\n                    width=\"56px\"\n                    height=\"56px\"\n                  />\n                ),\n              }[getSupportingFileType(type)]\n            }\n          </div>\n        </div>\n        {\n          (isPending || isFailed) && (\n            <div className=\"sendbird-openchannel-thumbnail-message__right__tail\">\n              {\n                isPending && (\n                  <Loader\n                    width=\"16px\"\n                    height=\"16px\"\n                  >\n                    <Icon\n                      className=\"sendbird-openchannel-thumbnail-message__right__tail__pending\"\n                      type={IconTypes.SPINNER}\n                      fillColor={IconColors.PRIMARY}\n                      width=\"16px\"\n                      height=\"16px\"\n                    />\n                  </Loader>\n                )\n              }\n              {\n                isFailed && (\n                  <Icon\n                    className=\"sendbird-openchannel-thumbnail-message__right__tail__failed\"\n                    type={IconTypes.ERROR}\n                    width=\"16px\"\n                    height=\"16px\"\n                  />\n                )\n              }\n            </div>\n          )\n        }\n      </div>\n      <div\n        className=\"sendbird-openchannel-thumbnail-message__context-menu\"\n        ref={contextMenuRef}\n      >\n        <ContextMenu\n          menuTrigger={(toggleDropdown) => (\n            showMenuTrigger({ message, userId, status }) && (\n              <IconButton\n                className=\"sendbird-openchannel-thumbnail-message__context-menu--icon\"\n                width=\"32px\"\n                height=\"32px\"\n                onClick={toggleDropdown}\n              >\n                <Icon\n                  type={IconTypes.MORE}\n                  fillColor={IconColors.CONTENT_INVERSE}\n                  width=\"24px\"\n                  height=\"24px\"\n                />\n              </IconButton>\n            )\n          )}\n          menuItems={(closeDropdown) => (\n            <MenuItems\n              parentRef={contextMenuRef}\n              parentContainRef={contextMenuRef}\n              closeDropdown={closeDropdown}\n              openLeft\n            >\n              {\n                isFineResend({ message, userId, status }) && (\n                  <MenuItem\n                    onClick={() => {\n                      resendMessage(message);\n                      closeDropdown();\n                    }}\n                  >\n                    {stringSet.CONTEXT_MENU_DROPDOWN__RESEND}\n                  </MenuItem>\n                )\n              }\n              {\n                isFineDelete({ message, userId, status }) && (\n                  <MenuItem\n                    onClick={() => {\n                      if (disabled) {\n                        return;\n                      }\n                      showRemove(true);\n                      closeDropdown();\n                    }}\n                  >\n                    {stringSet.CONTEXT_MENU_DROPDOWN__DELETE}\n                  </MenuItem>\n                )\n              }\n            </MenuItems>\n          )}\n        />\n      </div>\n    </div>\n  );\n}\n","import { IconTypes } from '../Icon';\n\nexport const checkFileType = (fileUrl: string): string => {\n  const audioFile = /(\\.mp3)$/i;\n  const gifFile = /(\\.gif)$/i;\n  if (audioFile.test(fileUrl)) {\n    return IconTypes.FILE_AUDIO;\n  }\n  if (gifFile.test(fileUrl)) {\n    return IconTypes.GIF\n  }\n  return IconTypes.FILE_DOCUMENT;\n}\n\nexport const truncate = (fullStr:string, strLen: number): string => {\n  if (fullStr === null || fullStr === undefined) return '';\n  if (fullStr.length <= strLen) return fullStr;\n  const separator = '...';\n  const sepLen = separator.length;\n  const charsToShow = strLen - sepLen;\n  const frontChars = Math.ceil(charsToShow / 2);\n  const backChars = Math.floor(charsToShow / 2);\n  return fullStr.substr(0, frontChars) + separator + fullStr.substr(fullStr.length - backChars);\n};\n","import React, { useContext, useRef } from 'react';\nimport format from 'date-fns/format';\nimport './index.scss';\n\nimport Avatar from '../Avatar';\nimport ContextMenu, { MenuItems, MenuItem } from '../ContextMenu';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport Loader from '../Loader';\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport IconButton from '../IconButton';\nimport TextButton from '../TextButton';\nimport UserProfile from '../UserProfile';\nimport { UserProfileContext } from '../../lib/UserProfileContext';\n\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport { checkFileType, truncate } from './utils';\nimport { ClientFileMessage } from '../../index';\nimport {\n  checkIsByMe,\n  checkIsPending,\n  checkIsFailed,\n  isFineDelete,\n  isFineResend,\n  showMenuTrigger,\n} from '../../utils/openChannelUtils';\nimport { getSenderFromMessage } from '../../utils/openChannelUtils';\n\ninterface Props {\n  className?: string | Array<string>;\n  message: ClientFileMessage;\n  userId: string;\n  disabled?: boolean;\n  chainTop?: boolean;\n  chainBottom?: boolean;\n  status: string;\n  showRemove(bool: boolean): void;\n  resendMessage(message: ClientFileMessage): void;\n}\n\nexport default function OpenchannelFileMessage({\n  className,\n  message,\n  userId,\n  disabled,\n  chainTop,\n  status,\n  showRemove,\n  resendMessage,\n}: Props): JSX.Element {\n  const contextMenuRef = useRef(null);\n  const avatarRef = useRef(null);\n  const { stringSet, dateLocale } = useContext(LocalizationContext);\n  const { disableUserProfile, renderUserProfile } = useContext(UserProfileContext);\n\n  const openFileUrl = () => { window.open(message.url); };\n\n  const isByMe = checkIsByMe(message, userId);\n  const isPending = checkIsPending(status);\n  const isFailed = checkIsFailed(status);\n  const sender = getSenderFromMessage(message);\n\n  return (\n    <div\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        'sendbird-openchannel-file-message',\n      ].join(' ')}\n    >\n      <div className=\"sendbird-openchannel-file-message__left\">\n        {\n            !chainTop && (\n              <ContextMenu\n                menuTrigger={(toggleDropdown) => (\n                  <Avatar\n                    className=\"sendbird-openchannel-file-message__left__avatar\"\n                    src={sender.profileUrl || ''}\n                    ref={avatarRef}\n                    width=\"28px\"\n                    height=\"28px\"\n                    onClick={() => {\n                      if (!disableUserProfile) {\n                        toggleDropdown();\n                      }\n                    }}\n                  />\n                )}\n                menuItems={(closeDropdown) => (\n                  <MenuItems\n                    parentRef={avatarRef}\n                    parentContainRef={avatarRef}\n                    closeDropdown={closeDropdown}\n                    style={{ paddingTop: 0, paddingBottom: 0 }}\n                  >\n                    {\n                      renderUserProfile\n                      ? (\n                        renderUserProfile({\n                          user: sender,\n                          close: closeDropdown,\n                        })\n                      )\n                      : (\n                        <UserProfile\n                          user={sender}\n                          onSuccess={closeDropdown}\n                          disableMessaging\n                        />\n                      )\n                    }\n                  </MenuItems>\n                )}\n              />\n            )\n          }\n      </div>\n      <div className=\"sendbird-openchannel-file-message__right\">\n        {\n          !chainTop && (\n            <div className=\"sendbird-openchannel-file-message__right__title\">\n              <Label\n                className=\"sendbird-openchannel-file-message__right__title__sender-name\"\n                type={LabelTypography.CAPTION_2}\n                color={isByMe ? LabelColors.SECONDARY_3 : LabelColors.ONBACKGROUND_2}\n              >\n                {\n                  sender && (\n                    sender.friendName\n                    || sender.nickname\n                    || sender.userId\n                  )\n                }\n              </Label>\n              <Label\n                className=\"sendbird-openchannel-file-message__right__title__sent-at\"\n                type={LabelTypography.CAPTION_3}\n                color={LabelColors.ONBACKGROUND_3}\n              >\n                {format(message.createdAt, 'p', { locale: dateLocale })}\n              </Label>\n            </div>\n          )\n        }\n        <div className=\"sendbird-openchannel-file-message__right__body\">\n          {\n            checkFileType(message.url) && (\n              <Icon\n                className=\"sendbird-openchannel-file-message__right__body__icon\"\n                type={checkFileType(message.url)}\n                fillColor={IconColors.PRIMARY}\n                width=\"48px\"\n                height=\"48px\"\n              />\n            )\n          }\n          <TextButton\n            className=\"sendbird-openchannel-file-message__right__body__file-name\"\n            onClick={openFileUrl}\n          >\n            <Label\n              type={LabelTypography.BODY_1}\n              color={LabelColors.ONBACKGROUND_1}\n            >\n              {truncate(message.name || message.url, 40)}\n            </Label>\n          </TextButton>\n        </div>\n        {\n          (isPending || isFailed) && (\n            <div className=\"sendbird-openchannel-file-message__right__tail\">\n              {\n                isPending && (\n                  <Loader\n                    width=\"16px\"\n                    height=\"16px\"\n                  >\n                    <Icon\n                      className=\"sendbird-openchannel-file-message__right__tail__pending\"\n                      type={IconTypes.SPINNER}\n                      fillColor={IconColors.PRIMARY}\n                      width=\"16px\"\n                      height=\"16px\"\n                    />\n                  </Loader>\n                )\n              }\n              {\n                isFailed && (\n                  <Icon\n                    className=\"sendbird-openchannel-file-message__right__tail__failed\"\n                    type={IconTypes.ERROR}\n                    width=\"16px\"\n                    height=\"16px\"\n                  />\n                )\n              }\n            </div>\n          )\n        }\n      </div>\n      <div\n        className=\"sendbird-openchannel-file-message__context-menu\"\n        ref={contextMenuRef}\n      >\n        {\n            <ContextMenu\n              menuTrigger={(toggleDropdown) => (\n                showMenuTrigger({ message, userId, status }) && (\n                  <IconButton\n                    className=\"sendbird-openchannel-file-message__context-menu__icon\"\n                    width=\"32px\"\n                    height=\"32px\"\n                    onClick={toggleDropdown}\n                  >\n                    <Icon\n                      type={IconTypes.MORE}\n                      width=\"24px\"\n                      height=\"24px\"\n                    />\n                  </IconButton>\n                )\n              )}\n              menuItems={(closeDropdown) => (\n                <MenuItems\n                  parentRef={contextMenuRef}\n                  parentContainRef={contextMenuRef}\n                  closeDropdown={closeDropdown}\n                  openLeft\n                >\n                  {\n                    isFineResend({ message, userId, status }) && (\n                      <MenuItem\n                        onClick={() => {\n                          if (disabled) { return; }\n                          resendMessage(message);\n                          closeDropdown();\n                        }}\n                      >\n                        {stringSet.CONTEXT_MENU_DROPDOWN__RESEND}\n                      </MenuItem>\n                    )\n                  }\n                  {\n                    isFineDelete({ message, userId, status }) && (\n                      <MenuItem\n                        onClick={() => {\n                          if (disabled) { return; }\n                          showRemove(true);\n                          closeDropdown();\n                        }}\n                      >\n                        {stringSet.CONTEXT_MENU_DROPDOWN__DELETE}\n                      </MenuItem>\n                    )\n                  }\n                </MenuItems>\n              )}\n            />\n        }\n      </div>\n    </div>\n  );\n}\n","import React, { useContext } from 'react'\nimport { ClientFileMessage, ClientUserMessage } from '../../..'\nimport Modal from '../../../ui/Modal';\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\n\ninterface Props {\n  onCloseModal(): void;\n  onDeleteMessage(message: ClientUserMessage | ClientFileMessage, callback?: () => void): void;\n}\n\nexport default function RemoveMessageModal({\n  onCloseModal,\n  onDeleteMessage,\n}: Props): JSX.Element {\n  const { stringSet } = useContext(LocalizationContext);\n\n  return (\n    <Modal\n      onCancel={onCloseModal}\n      onSubmit={onDeleteMessage}\n      submitText=\"Delete\"\n      titleText={stringSet.MODAL__DELETE_MESSAGE__TITLE}\n    />\n  );\n}\n","// https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Complete_list_of_MIME_types\nconst SUPPORTED_MIMES = {\n  IMAGE: [\n    'image/jpeg',\n    'image/jpg',\n    'image/png',\n    'image/gif',\n    'image/svg+xml',\n    'image/webp', // not supported in IE\n  ],\n  VIDEO: [\n    'video/mpeg',\n    'video/ogg',\n    'video/webm',\n    'video/mp4',\n  ],\n};\n\nexport const isImage = (type) => SUPPORTED_MIMES.IMAGE.indexOf(type) >= 0;\nexport const isVideo = (type) => SUPPORTED_MIMES.VIDEO.indexOf(type) >= 0;\nexport const isGif = (type) => type === 'image/gif';\nexport const unSupported = (type) => !(isImage(type) || isVideo(type));\n\nexport default SUPPORTED_MIMES;\n","import { EveryMessage } from '../../..';\nimport { isImage, isVideo } from '../../../ui/FileViewer/types';\n\nexport const MessageTypes = {\n  ADMIN: 'ADMIN',\n  USER: 'USER',\n  FILE: 'FILE',\n  THUMBNAIL: 'THUMBNAIL',\n  OG: 'OG',\n  UNKNOWN: 'UNKNOWN',\n};\n\nexport const SendingMessageStatus = {\n  NONE: 'none',\n  SUCCEEDED: 'succeeded',\n  FAILED: 'failed',\n  PENDING: 'pending',\n};\n\nexport const getMessageType = (message: EveryMessage): string => {\n  if ((message.isUserMessage && message.isUserMessage()) || message.messageType === 'user') {\n    return (message.ogMetaData)\n      ? MessageTypes.OG\n      : MessageTypes.USER;\n  }\n  if (message.isAdminMessage && message.isAdminMessage()) {\n    return MessageTypes.ADMIN;\n  }\n  if (message.messageType === 'file') {\n    return (isImage(message.type) || isVideo(message.type))\n      ? MessageTypes.THUMBNAIL\n      : MessageTypes.FILE;\n  }\n  return MessageTypes.UNKNOWN;\n};\n\nexport default {\n  MessageTypes,\n  SendingMessageStatus,\n  getMessageType,\n};\n","import React, {\n  useState,\n  useRef,\n  ReactElement,\n  useMemo,\n  useContext,\n} from 'react';\n\nimport format from 'date-fns/format';\nimport * as types from '../../../index';\n\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\n\nimport OpenChannelUserMessage from '../../../ui/OpenchannelUserMessage';\nimport OpenChannelAdminMessage from '../../../ui/OpenChannelAdminMessage';\nimport OpenChannelOGMessage from '../../../ui/OpenchannelOGMessage';\nimport OpenChannelThumbnailMessage from '../../../ui/OpenchannelThumbnailMessage';\nimport OpenChannelFileMessage from '../../../ui/OpenchannelFileMessage';\n// import UnknownMessage from '../../../ui/UnknownMessage';\n\nimport DateSeparator from '../../../ui/DateSeparator';\nimport Label, { LabelTypography, LabelColors } from '../../../ui/Label';\nimport MessageInput from '../../../ui/MessageInput';\nimport FileViewer from '../../../ui/FileViewer';\n\nimport RemoveMessageModal from './RemoveMessageModal';\nimport {\n  MessageTypes,\n  SendingMessageStatus,\n  getMessageType,\n} from './types';\nimport { OpenChannel } from 'sendbird';\n\ninterface Props {\n  message: types.EveryMessage;\n  userId: string;\n  disabled: boolean;\n  editDisabled: boolean;\n  hasSeparator: boolean;\n  channel: OpenChannel;\n  renderCustomMessage?: types.RenderCustomMessage,\n  deleteMessage(message: types.ClientUserMessage | types.ClientFileMessage, callback?: () => void): void;\n  updateMessage(messageId: number, text: string, callback?: () => void): void;\n  resendMessage(failedMessage: types.ClientUserMessage | types.ClientFileMessage): void;\n  status?: string;\n  chainTop: boolean;\n  chainBottom: boolean;\n}\n\nexport default function MessageHoc({\n  message,\n  userId,\n  disabled,\n  editDisabled,\n  hasSeparator,\n  channel,\n  renderCustomMessage,\n  deleteMessage,\n  updateMessage,\n  resendMessage,\n  status,\n  chainTop,\n  chainBottom,\n}: Props): ReactElement {\n  let sender: SendBird.User = null;\n  if (message.messageType !== 'admin') {\n    sender = message.sender;\n  }\n\n  const { dateLocale } = useContext(LocalizationContext);\n\n  const RenderedMessage = useMemo(() => {\n    if (renderCustomMessage) {\n      return renderCustomMessage(message, channel, chainTop, chainBottom);\n    }\n    return null;\n  }, [message, renderCustomMessage]);\n\n  const [showEdit, setShowEdit] = useState(false);\n  const [showRemove, setShowRemove] = useState(false);\n  const [showFileViewer, setShowFileViewer] = useState(false);\n  const editMessageInputRef = useRef(null);\n\n  let isByMe = false;\n\n  if (sender && message.messageType !== 'admin') {\n    // pending and failed messages are by me\n    isByMe = (userId === sender.userId)\n      || (message.requestState === SendingMessageStatus.PENDING)\n      || (message.requestState === SendingMessageStatus.FAILED);\n  }\n\n  if(RenderedMessage) {\n    return (\n      <div className=\"sendbird-msg-hoc sendbird-msg--scroll-ref\">\n        <RenderedMessage message={message} />\n      </div>\n    );\n  }\n\n  if (message.messageType === 'user' && showEdit) {\n    return (\n      <MessageInput\n        isEdit\n        disabled={editDisabled}\n        ref={editMessageInputRef}\n        name={message.messageId}\n        onSendMessage={updateMessage}\n        onCancelEdit={() => { setShowEdit(false); }}\n        value={message.message}\n      />\n    );\n  }\n\n  return (\n    <div className=\"sendbird-msg-hoc sendbird-msg--scroll-ref\">\n      {/* date-separator */}\n      {\n        hasSeparator && (\n          <DateSeparator>\n            <Label type={LabelTypography.CAPTION_2} color={LabelColors.ONBACKGROUND_2}>\n              {format(message.createdAt, 'MMMM dd, yyyy', { locale: dateLocale })}\n            </Label>\n          </DateSeparator>\n        )\n      }\n      {/* Message */}\n      {\n        {\n          [MessageTypes.ADMIN]: (() => {\n            if (message.messageType === 'admin') {\n              return (\n                <OpenChannelAdminMessage message={message} />\n              )\n            }\n          })(),\n          [MessageTypes.FILE]: (() => {\n            if (message.messageType === 'file') {\n              return (\n                <OpenChannelFileMessage\n                  message={message}\n                  disabled={disabled}\n                  userId={userId}\n                  showRemove={setShowRemove}\n                  resendMessage={resendMessage}\n                  status={status}\n                  chainTop={chainTop}\n                  chainBottom={chainBottom}\n                />\n              );\n            }\n            return;\n          })(),\n          [MessageTypes.OG]: (() => {\n            if (message.messageType === 'user') {\n              return (\n                <OpenChannelOGMessage\n                  message={message}\n                  status={status}\n                  userId={userId}\n                  showEdit={setShowEdit}\n                  disabled={disabled}\n                  showRemove={setShowRemove}\n                  resendMessage={resendMessage}\n                  chainTop={chainTop}\n                  chainBottom={chainBottom}\n                />\n              );\n            }\n            return;\n          })(),\n          [MessageTypes.THUMBNAIL]: (() => {\n            if (message.messageType === 'file') {\n              return (\n                <OpenChannelThumbnailMessage\n                  message={message}\n                  disabled={disabled}\n                  userId={userId}\n                  showRemove={setShowRemove}\n                  resendMessage={resendMessage}\n                  onClick={setShowFileViewer}\n                  status={status}\n                  chainTop={chainTop}\n                  chainBottom={chainBottom}\n                />\n              );\n            }\n            return;\n          })(),\n          [MessageTypes.USER]: (() => {\n            if (message.messageType === 'user') {\n              return (\n                <OpenChannelUserMessage\n                  message={message}\n                  userId={userId}\n                  disabled={disabled}\n                  showEdit={setShowEdit}\n                  showRemove={setShowRemove}\n                  resendMessage={resendMessage}\n                  status={status}\n                  chainTop={chainTop}\n                  chainBottom={chainBottom}\n                />\n              );\n            }\n            return;\n          })(),\n          [MessageTypes.UNKNOWN]: (() => {\n            return;\n            // return (\n            //   <OpenChannelUnknownMessage message={message} />\n            // );\n          })(),\n        }[getMessageType(message)]\n      }\n      {/* Modal */}\n      {\n        showRemove && (\n          <RemoveMessageModal\n            onCloseModal={() => setShowRemove(false)}\n            onDeleteMessage={() => {\n              if (message.messageType !== 'admin') {\n                deleteMessage(message);\n              }\n            }}\n          />\n        )\n      }\n      {\n        (showFileViewer && message.messageType === 'file') && (\n          <FileViewer\n            onClose={() => setShowFileViewer(false)}\n            message={message}\n            onDelete={() => deleteMessage(message)}\n            isByMe={isByMe}\n          />\n        )\n      }\n      {/* {\n        !((message.isFileMessage && message.isFileMessage()) || message.messageType === 'file')\n        && !(message.isAdminMessage && message.isAdminMessage())\n        && !(((message.isUserMessage && message.isUserMessage()) || message.messageType === 'user'))\n        && !(showFileViewer)\n        && (\n          <UnknownMessage\n            message={message}\n            status={status}\n            isByMe={isByMe}\n            showRemove={setShowRemove}\n            chainTop={chainTop}\n            chainBottom={chainBottom}\n          />\n        )\n      } */}\n    </div>\n  );\n}\n","import React, { ReactElement, useRef, useState, useMemo } from 'react';\nimport isSameDay from 'date-fns/isSameDay';\nimport {\n  ClientFileMessage,\n  ClientUserMessage,\n  EveryMessage,\n  RenderCustomMessage,\n} from '../../../index';\nimport MessageHoc from './MessageHOC';\nimport Icon, { IconTypes, IconColors } from '../../../ui/Icon';\n\nimport PlaceHolder, { PlaceHolderTypes } from '../../../ui/PlaceHolder';\nimport './openchannel-conversation-scroll.scss';\nimport { compareMessagesForGrouping } from '../utils';\n\ninterface Props {\n  openchannel: SendBird.OpenChannel;\n  user: SendBird.User;\n  allMessages: Array<EveryMessage>;\n  useMessageGrouping: boolean;\n  isOnline: boolean;\n  hasMore: boolean;\n  renderCustomMessage?: RenderCustomMessage;\n  onScroll(callback?: () => void): void;\n  updateMessage(messageId: number, text: string, callback?: () => void): void;\n  deleteMessage(message: ClientUserMessage | ClientFileMessage, callback?: () => void): void;\n  resendMessage(failedMessage: ClientUserMessage | ClientFileMessage): void;\n}\n\nfunction OpenchannelConversationScroll(\n  {\n    useMessageGrouping = true,\n    openchannel,\n    user,\n    allMessages,\n    isOnline = true,\n    hasMore,\n    onScroll,\n    renderCustomMessage,\n    updateMessage,\n    deleteMessage,\n    resendMessage,\n  }: Props,\n  ref: React.RefObject<HTMLDivElement>,\n): ReactElement {\n  const scrollRef = ref || useRef(null);\n  const [showScrollDownButton, setShowScrollDownButton] = useState(false);\n\n  const handleOnScroll = (e) => {\n    const element = e.target;\n    const {\n      scrollTop,\n      scrollHeight,\n      clientHeight,\n    } = element;\n    if (\n      (scrollHeight > scrollTop + clientHeight)\n      && (window.navigator.userAgent.indexOf('MSIE ') < 0) // don't show button in IE\n    ) {\n      setShowScrollDownButton(true);\n    } else {\n      setShowScrollDownButton(false);\n    }\n\n    if (!hasMore) {\n      return;\n    }\n    if (scrollTop === 0) {\n      const nodes = scrollRef.current.querySelectorAll('.sendbird-msg--scroll-ref');\n      const first = nodes && nodes[0];\n      onScroll(() => {\n        try {\n          first.scrollIntoView();\n        } catch (error) { }\n      });\n    }\n  };\n\n  const scrollToBottom = () => {\n    if (scrollRef && scrollRef.current) {\n      scrollRef.current.scrollTo(0, scrollRef.current.scrollHeight);\n      setShowScrollDownButton(false);\n    }\n  };\n\n  const hasMessage = useMemo(() => {\n    return allMessages.length > 0;\n  }, [allMessages.length]);\n\n  return (\n    <div\n      className=\"sendbird-openchannel-conversation-scroll\"\n      onScroll={handleOnScroll}\n      ref={scrollRef}\n    >\n      <div className=\"sendbird-openchannel-conversation-scroll__container\">\n        <div className=\"sendbird-openchannel-conversation-scroll__container__padding\" />\n        <div className={`sendbird-openchannel-conversation-scroll__container__item-container${hasMessage ? '' : '--no-messages'}`}>\n          {\n            hasMessage\n              ? (\n                allMessages.map((message, index) => {\n                  let status: string;\n\n                  if (message.messageType !== 'admin') {\n                    status = message.sendingStatus;\n                  }\n\n                  const previousMessage = allMessages[index - 1];\n                  const nextMessage = allMessages[index - 1];\n\n                  const previousMessageCreatedAt = previousMessage && previousMessage.createdAt;\n                  const currentCreatedAt = message.createdAt;\n                  // https://stackoverflow.com/a/41855608\n                  const hasSeparator = !(previousMessageCreatedAt && (\n                    isSameDay(currentCreatedAt, previousMessageCreatedAt)\n                  ));\n\n                  const [chainTop, chainBottom] = useMessageGrouping\n                    ? compareMessagesForGrouping(previousMessage, message, nextMessage)\n                    : [false, false];\n                  return (\n                    <MessageHoc\n                      renderCustomMessage={renderCustomMessage}\n                      channel={openchannel}\n                      key={message.messageId}\n                      message={message}\n                      status={status}\n                      userId={user.userId}\n                      disabled={!isOnline}\n                      editDisabled={openchannel.isFrozen}\n                      hasSeparator={hasSeparator}\n                      chainTop={chainTop}\n                      chainBottom={chainBottom}\n                      deleteMessage={deleteMessage}\n                      updateMessage={updateMessage}\n                      resendMessage={resendMessage}\n                    />\n                  )\n                })\n              )\n              : (\n                <PlaceHolder\n                  className=\"sendbird-openchannel-conversation-scroll__container__place-holder\"\n                  type={PlaceHolderTypes.NO_MESSAGES}\n                />\n              )\n          }\n        </div>\n        {\n          showScrollDownButton && (\n            <div\n              className=\"sendbird-openchannel-conversation-scroll__container__scroll-bottom-button\"\n              onClick={scrollToBottom}\n              onKeyDown={scrollToBottom}\n              tabIndex={0}\n              role=\"button\"\n            >\n              <Icon\n                width=\"24px\"\n                height=\"24px\"\n                type={IconTypes.CHEVRON_DOWN}\n                fillColor={IconColors.CONTENT}\n              />\n            </div>\n          )\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default React.forwardRef(OpenchannelConversationScroll);\n","export const SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\nexport const SET_CHANNEL_INVALID = 'SET_CHANNEL_INVALID';\nexport const RESET_MESSAGES = 'RESET_MESSAGES';\nexport const GET_PREV_MESSAGES_START = 'GET_PREV_MESSAGES_START';\nexport const GET_PREV_MESSAGES_SUCESS = 'GET_PREV_MESSAGES_SUCESS';\nexport const GET_PREV_MESSAGES_FAIL = 'GET_PREV_MESSAGES_FAIL';\nexport const SENDING_MESSAGE_FAILED = 'SENDING_MESSAGE_FAILED';\nexport const SENDING_MESSAGE_SUCCEEDED = 'SENDING_MESSAGE_SUCCEEDED';\nexport const SENDING_MESSAGE_START = 'SENDING_MESSAGE_START';\nexport const RESENDING_MESSAGE_START = 'RESENDING_MESSAGE_START';\nexport const FETCH_PARTICIPANT_LIST = 'FETCH_PARTICIPANT_LIST';\nexport const FETCH_BANNED_USER_LIST = 'FETCH_BANNED_USER_LIST';\nexport const FETCH_MUTED_USER_LIST= 'FETCH_MUTED_USER_LIST';\nexport const TRIM_MESSAGE_LIST= 'TRIM_MESSAGE_LIST';\n\n// event handlers\nexport const ON_MESSAGE_RECEIVED = 'ON_MESSAGE_RECEIVED';\nexport const ON_MESSAGE_UPDATED = 'ON_MESSAGE_UPDATED';\nexport const ON_MESSAGE_DELETED = 'ON_MESSAGE_DELETED';\nexport const ON_MESSAGE_DELETED_BY_REQ_ID = 'ON_MESSAGE_DELETED_BY_REQ_ID';\nexport const ON_OPERATOR_UPDATED = 'ON_OPERATOR_UPDATED';\nexport const ON_USER_ENTERED = 'ON_USER_ENTERED';\nexport const ON_USER_EXITED = 'ON_USER_EXITED';\nexport const ON_USER_MUTED = 'ON_USER_MUTED';\nexport const ON_USER_UNMUTED = 'ON_USER_UNMUTED';\nexport const ON_USER_BANNED = 'ON_USER_BANNED';\nexport const ON_USER_UNBANNED = 'ON_USER_UNBANNED';\nexport const ON_CHANNEL_FROZEN = 'ON_CHANNEL_FROZEN';\nexport const ON_CHANNEL_UNFROZEN = 'ON_CHANNEL_UNFROZEN';\nexport const ON_CHANNEL_CHANGED = 'ON_CHANNEL_CHANGED';\nexport const ON_META_DATA_CREATED = 'ON_META_DATA_CREATED';\nexport const ON_META_DATA_UPDATED = 'ON_META_DATA_UPDATED';\nexport const ON_META_DATA_DELETED = 'ON_META_DATA_DELETED';\nexport const ON_META_COUNTERS_CREATED = 'ON_META_COUNTERS_CREATED';\nexport const ON_META_COUNTERS_UPDATED = 'ON_META_COUNTERS_UPDATED';\nexport const ON_META_COUNTERS_DELETED = 'ON_META_COUNTERS_DELETED';\nexport const ON_MENTION_RECEIVED = 'ON_MENTION_RECEIVED';\n","import { State as initialStateInterface } from './initialState';\nimport * as actionTypes from './actionTypes';\n\nimport compareIds from '../../../utils/compareIds.js';\n\n/* eslint-disable  @typescript-eslint/no-explicit-any */\n// @ts-ignore: Unreachable code error\ninterface ActionInterface {\n  type: string;\n  payload?: any;\n}\n\nexport default function reducer(\n  state: initialStateInterface,\n  action: ActionInterface,\n): initialStateInterface {\n  switch (action.type) {\n    case actionTypes.RESET_MESSAGES: {\n      return {\n        ...state,\n        allMessages: [],\n      };\n    }\n\n    case actionTypes.SET_CURRENT_CHANNEL: {\n      const gottenChannel = action.payload;\n      const operators = gottenChannel.operators;\n      if (\n        !state.isInvalid\n        && state.currentOpenChannel\n        && state.currentOpenChannel.url\n        && (state.currentOpenChannel.url === gottenChannel.url)\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        currentOpenChannel: gottenChannel,\n        isInvalid: false,\n        operators: operators,\n        participants: operators,\n        bannedParticipantIds: [],\n        mutedParticipantIds: [],\n      };\n    }\n    case actionTypes.SET_CHANNEL_INVALID: {\n      return {\n        ...state,\n        isInvalid: true,\n      };\n    }\n    case actionTypes.GET_PREV_MESSAGES_START: {\n      return {\n        ...state,\n        loading: true,\n      };\n    }\n    case actionTypes.GET_PREV_MESSAGES_SUCESS:\n    case actionTypes.GET_PREV_MESSAGES_FAIL: {\n      const isFailed = (action.type === actionTypes.GET_PREV_MESSAGES_FAIL);\n      const {\n        currentOpenChannel = {},\n        messages = [],\n        hasMore,\n        lastMessageTimestamp,\n      } = action.payload;\n      const actionChannelUrl = currentOpenChannel.url;\n      const receivedMessages = isFailed ? [] : messages;\n      const _hasMore = isFailed ? false : hasMore;\n      const _lastMessageTimestamp = isFailed ? 0 : lastMessageTimestamp;\n\n      const stateChannel = state.currentOpenChannel;\n      const stateChannelUrl = stateChannel.url;\n\n      if (actionChannelUrl !== stateChannelUrl) {\n        return state;\n      }\n\n      const filteredAllMessages = state.allMessages.filter((message) => (\n        !(receivedMessages.find(({ messageId }) => compareIds(messageId, message.messageId)))\n      ));\n      return {\n        ...state,\n        loading: false,\n        initialized: true,\n        hasMore: _hasMore,\n        lastMessageTimestamp: _lastMessageTimestamp,\n        allMessages: [\n          ...receivedMessages,\n          ...filteredAllMessages,\n        ],\n      };\n    }\n    case actionTypes.SENDING_MESSAGE_START: {\n      const {\n        message,\n        channel,\n      } = action.payload;\n      if (channel.url !== state.currentOpenChannel.url) {\n        return state;\n      }\n      return {\n        ...state,\n        allMessages: [\n          ...state.allMessages,\n          { ...message },\n        ],\n      };\n    }\n    case actionTypes.SENDING_MESSAGE_SUCCEEDED: {\n      const sentMessage = action.payload;\n      const newMessages = state.allMessages.map((m) => (\n        compareIds(m.reqId, sentMessage.reqId) ? sentMessage : m\n      ));\n      return {\n        ...state,\n        allMessages: newMessages,\n      };\n    }\n    case actionTypes.SENDING_MESSAGE_FAILED: {\n      const sentMessage = action.payload;\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => (\n          compareIds(m.reqId, sentMessage.reqId) ? sentMessage : m\n        )),\n      };\n    }\n    case actionTypes.TRIM_MESSAGE_LIST: {\n      const { allMessages } = state;\n      const experimentalMessageLimit = action.payload?.experimentalMessageLimit;\n      if (experimentalMessageLimit\n        && experimentalMessageLimit > 0\n        && allMessages?.length > experimentalMessageLimit\n      ) {\n        const sliceAt = allMessages.length - experimentalMessageLimit;\n        return {\n          ...state,\n          allMessages: allMessages.slice(sliceAt),\n        }\n      }\n      return state;\n    }\n    case actionTypes.RESENDING_MESSAGE_START: {\n      const eventedChannel = action.payload.channel;\n      const resentMessage = action.payload.message;\n      if (eventedChannel.url !== state.currentOpenChannel.url) {\n        return state;\n      }\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => (\n          compareIds(m.reqId, resentMessage.reqId) ? resentMessage : m\n        )),\n      };\n    }\n    case actionTypes.FETCH_PARTICIPANT_LIST: {\n      const eventedChannel = action.payload.channel;\n      const fetchedParticipantList = action.payload.users;\n      if (eventedChannel.url !== state.currentOpenChannel.url) {\n        return state;\n      }\n      return {\n        ...state,\n        participants: [... state.participants, ...fetchedParticipantList],\n        // Should check duplication\n      };\n    }\n    case actionTypes.FETCH_BANNED_USER_LIST: {\n      const eventedChannel = action.payload.channel;\n      const fetchedBannedUserList = action.payload.users;\n      if (\n        (eventedChannel.url !== state.currentOpenChannel.url)\n        || !(fetchedBannedUserList.every(user => typeof user.userId === 'string'))\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        bannedParticipantIds: [\n          ... state.bannedParticipantIds,\n          ...fetchedBannedUserList.map(user => user.userId),\n        ],\n        // Should check duplication\n      };\n    }\n    case actionTypes.FETCH_MUTED_USER_LIST: {\n      const eventedChannel = action.payload.channel;\n      const fetchedMutedUserList = action.payload.users;\n      if (\n        (eventedChannel.url !== state.currentOpenChannel.url)\n        || !(fetchedMutedUserList.every(user => typeof user.userId === 'string'))\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        mutedParticipantIds: [\n          ... state.bannedParticipantIds,\n          ...fetchedMutedUserList.map(user => user.userId),\n        ],\n        // Should check duplication\n      };\n    }\n    // events\n    case actionTypes.ON_MESSAGE_RECEIVED: {\n      const eventedChannel = action.payload.channel;\n      const receivedMessage = action.payload.message;\n\n      const {\n        currentOpenChannel\n      } = state;\n\n      if (\n        !compareIds(eventedChannel.url, currentOpenChannel.url)\n        || (\n          !(state.allMessages.map(\n            (message) => message.messageId).indexOf(receivedMessage.messageId) < 0\n        ))\n      ) {\n        return state;\n      }\n\n      return {\n        ...state,\n        allMessages: [...state.allMessages, receivedMessage],\n      };\n    }\n    case actionTypes.ON_MESSAGE_UPDATED: {\n      const eventedChannel = action.payload.channel;\n      const updatedMessage = action.payload.message;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== eventedChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        allMessages: state.allMessages.map((message) => (\n          message.isIdentical(updatedMessage)\n            ? updatedMessage\n            : message\n        )),\n      };\n    }\n    case actionTypes.ON_MESSAGE_DELETED: {\n      const eventedChannel = action.payload.channel;\n      const deletedMessageId = action.payload.messageId;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== eventedChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        allMessages: state.allMessages.filter((message) => (\n          !compareIds(message.messageId, deletedMessageId)\n        )),\n      };\n    }\n    case actionTypes.ON_MESSAGE_DELETED_BY_REQ_ID: {\n      return {\n        ...state,\n        allMessages: state.allMessages.filter((m) => (\n          !compareIds(m.reqId, action.payload)\n        )),\n      };\n    }\n    case actionTypes.ON_OPERATOR_UPDATED: {\n      const eventedChannel = action.payload.channel;\n      const updatedOperators = action.payload.operators;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== eventedChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        currentOpenChannel: {\n          ...state.currentOpenChannel,\n          operators: updatedOperators,\n        },\n        operators: updatedOperators,\n      };\n    }\n    case actionTypes.ON_USER_ENTERED: {\n      const eventedChannel = action.payload.channel;\n      const enteredUser = action.payload.user;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== eventedChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        participants: [...state.participants, enteredUser],\n      };\n    }\n    case actionTypes.ON_USER_EXITED: {\n      const eventedChannel = action.payload.channel;\n      const exitedUser = action.payload.user;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== eventedChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        participants: state.participants.filter((participant) => (\n          !compareIds(participant.userId, exitedUser.userId)\n        )),\n      };\n    }\n    case actionTypes.ON_USER_MUTED: {\n      const eventedChannel = action.payload.channel;\n      const mutedUser = action.payload.user;\n      const currentChannel = state.currentOpenChannel;\n      if (\n        !currentChannel\n        || (currentChannel.url && (currentChannel.url !== eventedChannel.url))\n        || state.mutedParticipantIds.indexOf(mutedUser.userId) >= 0\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        mutedParticipantIds: [...state.mutedParticipantIds, mutedUser.userId],\n      };\n    }\n    case actionTypes.ON_USER_UNMUTED: {\n      const eventedChannel = action.payload.channel;\n      const unmutedUser = action.payload.user;\n      const currentChannel = state.currentOpenChannel;\n      if (\n        !currentChannel\n        || (currentChannel.url && (currentChannel.url !== eventedChannel.url))\n        || state.mutedParticipantIds.indexOf(unmutedUser.userId) < 0\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        mutedParticipantIds: state.mutedParticipantIds.filter(userId => userId !== unmutedUser.userId),\n      };\n    }\n    case actionTypes.ON_USER_BANNED: {\n      const eventedChannel = action.payload.channel;\n      const bannedUser = action.payload.user;\n      const currentChannel = state.currentOpenChannel;\n      if (\n        !currentChannel\n        || (currentChannel.url && (currentChannel.url !== eventedChannel.url))\n        || state.bannedParticipantIds.indexOf(bannedUser.userId) >= 0\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        bannedParticipantIds: [...state.bannedParticipantIds, bannedUser.userId],\n      };\n    }\n    case actionTypes.ON_USER_UNBANNED: {\n      const eventedChannel = action.payload.channel;\n      const unbannedUser = action.payload.user;\n      const currentChannel = state.currentOpenChannel;\n      if (\n        !currentChannel\n        || (currentChannel.url && (currentChannel.url !== eventedChannel.url))\n        || state.bannedParticipantIds.indexOf(unbannedUser.userId) < 0\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        bannedParticipantIds: state.bannedParticipantIds.filter(userId => userId !== unbannedUser.userId),\n      };\n    }\n    case actionTypes.ON_CHANNEL_FROZEN: {\n      const frozenChannel = action.payload;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== frozenChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        frozen: true,\n      };\n    }\n    case actionTypes.ON_CHANNEL_UNFROZEN: {\n      const unfrozenChannel = action.payload;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== unfrozenChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        frozen: false,\n      };\n    }\n    case actionTypes.ON_CHANNEL_CHANGED: {\n      const changedChannel = action.payload;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== changedChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        currentOpenChannel: changedChannel,\n      };\n    }\n    case actionTypes.ON_META_DATA_CREATED: {\n      // const eventedChannel = action.payload.channel;\n      // const createdMetaData = action.payload.metaData;\n      // return {\n      //   ...state\n      // };\n      return state;\n    }\n    case actionTypes.ON_META_DATA_UPDATED: {\n      // const eventedChannel = action.payload.channel;\n      // const updatedMetaData = action.payload.metaData;\n      // return {\n      //   ...state\n      // };\n      return state;\n    }\n    case actionTypes.ON_META_DATA_DELETED: {\n      // const eventedChannel = action.payload.channel;\n      // const deletedMetaDataKeys = action.payload.metaDataKeys;\n      // return {\n      //   ...state\n      // };\n      return state;\n    }\n    case actionTypes.ON_META_COUNTERS_CREATED: {\n      // const eventedChannel = action.payload.channel;\n      // const createdMetaCounter = action.payload.metaCounter;\n      // return {\n      //   ...state\n      // };\n      return state;\n    }\n    case actionTypes.ON_META_COUNTERS_UPDATED: {\n      // const eventedChannel = action.payload.channel;\n      // const updatedMetaCounter = action.payload.metaCounter;\n      // return {\n      //   ...state\n      // };\n      return state;\n    }\n    case actionTypes.ON_META_COUNTERS_DELETED: {\n      // const eventedChannel = action.payload.channel;\n      // const deletedMetaCounterKeys = action.payload.metaCounterKeys;\n      // return {\n      //   ...state\n      // };\n      return state;\n    }\n    case actionTypes.ON_MENTION_RECEIVED: {\n      // const eventedChannel = action.payload.channel;\n      // const mentionedMessage = action.payload.message;\n      // return {\n      //   ...state\n      // };\n      return state;\n    }\n    default:\n      return state;\n  }\n}\n","import Sendbird from 'sendbird';\nimport { EveryMessage } from '../../../index';\n\nexport interface State {\n  allMessages: Array<EveryMessage>;\n  loading: boolean;\n  initialized: boolean;\n  currentOpenChannel: Sendbird.OpenChannel;\n  isInvalid: boolean;\n  hasMore: boolean;\n  lastMessageTimestamp: number;\n  frozen: boolean;\n  operators: Array<Sendbird.User>;\n  participants: Array<Sendbird.User>;\n  bannedParticipantIds: Array<string | number>;\n  mutedParticipantIds: Array<string | number>;\n}\n\nconst initialState: State = {\n  allMessages: [],\n  loading: false,\n  initialized: false,\n  currentOpenChannel: null,\n  isInvalid: false,\n  hasMore: false,\n  lastMessageTimestamp: 0,\n  frozen: false,\n  operators: [],\n  participants: [],\n  bannedParticipantIds: [],\n  mutedParticipantIds: [],\n};\n\nexport default initialState;\n","import { useEffect } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport * as utils from '../utils';\n\ninterface DynamicParams {\n  channelUrl: string;\n  sdkInit: boolean;\n  fetchingParticipants: boolean;\n}\ninterface StaticParams {\n  sdk: SendbirdUIKit.Sdk;\n  logger: SendbirdUIKit.Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n}\n\nfunction useSetChannel(\n  { channelUrl, sdkInit, fetchingParticipants }: DynamicParams,\n  { sdk, logger, messagesDispatcher }: StaticParams,\n): void {\n  useEffect(() => {\n    if (channelUrl && sdkInit && sdk && sdk.OpenChannel) {\n      logger.info('OpenChannel | useSetChannel fetching channel', channelUrl);\n      sdk.OpenChannel.getChannel(channelUrl, (openChannel, error) => {\n        if (!error) {\n          logger.info('OpenChannel | useSetChannel fetched channel', openChannel);\n          messagesDispatcher({\n            type: messageActionTypes.SET_CURRENT_CHANNEL,\n            payload: openChannel,\n          });\n          openChannel.enter((_, error) => {\n            if (error) {\n              logger.warning('OpenChannel | useSetChannel enter channel failed', { channelUrl, error });\n              messagesDispatcher({\n                type: messageActionTypes.SET_CHANNEL_INVALID,\n                payload: null,\n              });\n            }\n            if (fetchingParticipants) {\n              // fetch participants, banned participantIds, muted participantIds\n              const participantListQuery = openChannel.createParticipantListQuery();\n              const bannedParticipantListQuery = openChannel.createBannedUserListQuery();\n              const mutedParticipantListQuery = openChannel.createMutedUserListQuery();\n              utils.fetchWithListQuery(\n                participantListQuery,\n                logger,\n                (users) => {\n                  messagesDispatcher({\n                    type: messageActionTypes.FETCH_PARTICIPANT_LIST,\n                    payload: {\n                      channel: openChannel,\n                      users,\n                    },\n                  });\n                },\n              );\n              utils.fetchWithListQuery(\n                bannedParticipantListQuery,\n                logger,\n                (users) => {\n                  messagesDispatcher({\n                    type: messageActionTypes.FETCH_BANNED_USER_LIST,\n                    payload: {\n                      channel: openChannel,\n                      users,\n                    },\n                  });\n                },\n              );\n              utils.fetchWithListQuery(\n                mutedParticipantListQuery,\n                logger,\n                (users) => {\n                  messagesDispatcher({\n                    type: messageActionTypes.FETCH_MUTED_USER_LIST,\n                    payload: {\n                      channel: openChannel,\n                      users,\n                    },\n                  });\n                },\n              );\n            }\n          });\n        } else {\n          logger.warning('OpenChannel | useSetChannel fetching channel failed', { channelUrl, error });\n          messagesDispatcher({\n            type: messageActionTypes.SET_CHANNEL_INVALID,\n            payload: null,\n          });\n        }\n      });\n      // .then((openChannel) => {\n      //   logger.info('OpenChannel | useSetChannel fetched channel', openChannel);\n      //   messagesDispatcher({\n      //     type: messageActionTypes.SET_CURRENT_CHANNEL,\n      //     payload: openChannel,\n      //   });\n      //   openChannel.enter((_, error) => {\n      //     if (error) {\n      //       logger.warning('OpenChannel | useSetChannel enter channel failed', { channelUrl, error });\n      //       messagesDispatcher({\n      //         type: messageActionTypes.SET_CHANNEL_INVALID,\n      //       });\n      //     }\n      //     if (fetchingParticipants) {\n      //       // fetch participants, banned participantIds, muted participantIds\n      //       const participantListQuery = openChannel.createParticipantListQuery();\n      //       const bannedParticipantListQuery = openChannel.createBannedUserListQuery();\n      //       const mutedParticipantListQuery = openChannel.createMutedUserListQuery();\n      //       utils.fetchWithListQuery(\n      //         participantListQuery,\n      //         logger,\n      //         (users) => {\n      //           messagesDispatcher({\n      //             type: messageActionTypes.FETCH_PARTICIPANT_LIST,\n      //             payload: {\n      //               channel: openChannel,\n      //               users,\n      //             },\n      //           });\n      //         },\n      //       );\n      //       utils.fetchWithListQuery(\n      //         bannedParticipantListQuery,\n      //         logger,\n      //         (users) => {\n      //           messagesDispatcher({\n      //             type: messageActionTypes.FETCH_BANNED_USER_LIST,\n      //             payload: {\n      //               channel: openChannel,\n      //               users,\n      //             },\n      //           });\n      //         },\n      //       );\n      //       utils.fetchWithListQuery(\n      //         mutedParticipantListQuery,\n      //         logger,\n      //         (users) => {\n      //           messagesDispatcher({\n      //             type: messageActionTypes.FETCH_MUTED_USER_LIST,\n      //             payload: {\n      //               channel: openChannel,\n      //               users,\n      //             },\n      //           });\n      //         },\n      //       );\n      //     }\n      //   });\n      // })\n      // .catch((error) => {\n      //   logger.warning('OpenChannel | useSetChannel fetching channel failed', { channelUrl, error });\n      //   messagesDispatcher({\n      //     type: messageActionTypes.SET_CHANNEL_INVALID,\n      //   });\n      // });\n    }\n  }, [channelUrl, sdkInit, fetchingParticipants]);\n}\n\nexport default useSetChannel;\n","import { useEffect } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport uuidv4 from '../../../utils/uuid';\nimport { scrollIntoLast } from '../utils';\n\ninterface DynamicParams {\n  currentOpenChannel: SendbirdUIKit.OpenChannelType;\n  checkScrollBottom: () => boolean;\n}\ninterface StaticParams {\n  sdk: SendbirdUIKit.Sdk;\n  logger: SendbirdUIKit.Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n}\n\nfunction useHandleChannelEvents(\n  { currentOpenChannel, checkScrollBottom }: DynamicParams,\n  { sdk, logger, messagesDispatcher }: StaticParams,\n): void {\n  useEffect(() => {\n    const messageReceiverId = uuidv4();\n    if (currentOpenChannel && currentOpenChannel.url && sdk && sdk.ChannelHandler) {\n      const ChannelHandler = new sdk.ChannelHandler();\n      logger.info('OpenChannel | useHandleChannelEvents: Setup evnet handler', messageReceiverId);\n\n      ChannelHandler.onMessageReceived = (channel, message) => {\n        const scrollToEnd = checkScrollBottom();\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMessageReceived', { channelUrl, message });\n        messagesDispatcher({\n          type: messageActionTypes.ON_MESSAGE_RECEIVED,\n          payload: { channel, message },\n        });\n        if (scrollToEnd) {\n          try {\n            setTimeout(() => {\n              scrollIntoLast();\n            });\n          } catch (error) {\n            logger.warning('OpenChannel | onMessageReceived | scroll to end failed');\n          }\n        }\n      };\n      ChannelHandler.onMessageUpdated = (channel, message) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMessageUpdated', { channelUrl, message });\n        messagesDispatcher({\n          type: messageActionTypes.ON_MESSAGE_UPDATED,\n          payload: { channel, message },\n        });\n      };\n      ChannelHandler.onMessageDeleted = (channel, messageId) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMessageDeleted', { channelUrl, messageId });\n        messagesDispatcher({\n          type: messageActionTypes.ON_MESSAGE_DELETED,\n          payload: { channel, messageId },\n        });\n      };\n      ChannelHandler.onOperatorUpdated = (channel, operators) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onOperatorUpdated', { channelUrl, operators });\n        messagesDispatcher({\n          type: messageActionTypes.ON_OPERATOR_UPDATED,\n          payload: { channel, operators },\n        });\n      };\n      ChannelHandler.onUserEntered = (channel, user) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserEntered', { channelUrl, user });\n        messagesDispatcher({\n          type: messageActionTypes.ON_USER_ENTERED,\n          payload: { channel, user },\n        });\n      };\n      ChannelHandler.onUserExited = (channel, user) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserExited', { channelUrl, user });\n        messagesDispatcher({\n          type: messageActionTypes.ON_USER_EXITED,\n          payload: { channel, user },\n        });\n      };\n      ChannelHandler.onUserMuted = (channel, user) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserMuted', { channelUrl, user });\n        messagesDispatcher({\n          type: messageActionTypes.ON_USER_MUTED,\n          payload: { channel, user },\n        });\n      };\n      ChannelHandler.onUserUnmuted = (channel, user) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserUnmuted', { channelUrl, user });\n        messagesDispatcher({\n          type: messageActionTypes.ON_USER_UNMUTED,\n          payload: { channel, user },\n        });\n      };\n      ChannelHandler.onUserBanned = (channel, user) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserBanned', { channelUrl, user });\n        messagesDispatcher({\n          type: messageActionTypes.ON_USER_BANNED,\n          payload: { channel, user },\n        });\n      };\n      ChannelHandler.onUserUnbanned = (channel, user) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserUnbanned', { channelUrl, user });\n        messagesDispatcher({\n          type: messageActionTypes.ON_USER_UNBANNED,\n          payload: { channel, user },\n        });\n      };\n      ChannelHandler.onChannelFrozen = (channel) => {\n        logger.info('OpenChannel | useHandleChannelEvents: onChannelFrozen', channel);\n        messagesDispatcher({\n          type: messageActionTypes.ON_CHANNEL_FROZEN,\n          payload: channel,\n        });\n      };\n      ChannelHandler.onChannelUnfrozen = (channel) => {\n        logger.info('OpenChannel | useHandleChannelEvents: onChannelUnfrozen', channel);\n        messagesDispatcher({\n          type: messageActionTypes.ON_CHANNEL_UNFROZEN,\n          payload: channel,\n        });\n      };\n      ChannelHandler.onChannelChanged = (channel) => {\n        logger.info('OpenChannel | useHandleChannelEvents: onChannelChanged', channel);\n        messagesDispatcher({\n          type: messageActionTypes.ON_CHANNEL_CHANGED,\n          payload: channel,\n        });\n      };\n      ChannelHandler.onMetaDataCreated = (channel, metaData) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaDataCreated', { channelUrl, metaData });\n        messagesDispatcher({\n          type: messageActionTypes.ON_META_DATA_CREATED,\n          payload: { channel, metaData },\n        });\n      };\n      ChannelHandler.onMetaDataUpdated = (channel, metaData) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaDataUpdated', { channelUrl, metaData });\n        messagesDispatcher({\n          type: messageActionTypes.ON_META_DATA_UPDATED,\n          payload: { channel, metaData },\n        });\n      };\n      ChannelHandler.onMetaDataDeleted = (channel, metaDataKeys) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaDataDeleted', { channelUrl, metaDataKeys });\n        messagesDispatcher({\n          type: messageActionTypes.ON_META_DATA_DELETED,\n          payload: { channel, metaDataKeys },\n        });\n      };\n      ChannelHandler.onMetaCountersCreated = (channel, metaCounter) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaCountersCreated', { channelUrl, metaCounter });\n        messagesDispatcher({\n          type: messageActionTypes.ON_META_COUNTERS_CREATED,\n          payload: { channel, metaCounter },\n        });\n      };\n      ChannelHandler.onMetaCountersUpdated = (channel, metaCounter) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaCountersUpdated', { channelUrl, metaCounter });\n        messagesDispatcher({\n          type: messageActionTypes.ON_META_COUNTERS_UPDATED,\n          payload: { channel, metaCounter },\n        });\n      };\n      ChannelHandler.onMetaCountersDeleted = (channel, metaCounterKeys) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaCountersDeleted', { channelUrl, metaCounterKeys });\n        messagesDispatcher({\n          type: messageActionTypes.ON_META_COUNTERS_DELETED,\n          payload: { channel, metaCounterKeys },\n        });\n      };\n      ChannelHandler.onMentionReceived = (channel, message) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMentionReceived', { channelUrl, message });\n        messagesDispatcher({\n          type: messageActionTypes.ON_MENTION_RECEIVED,\n          payload: { channel, message },\n        });\n      };\n\n      sdk.addChannelHandler(messageReceiverId, ChannelHandler);\n    }\n\n    return () => {\n      if (sdk && sdk.removeChannelHandler) {\n        logger.info('OpenChannel | useHandleChannelEvents: Removing message receiver handler', messageReceiverId);\n        sdk.removeChannelHandler(messageReceiverId);\n      }\n    }\n  }, [currentOpenChannel]);\n}\n\nexport default useHandleChannelEvents;\n","import { useEffect } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport { scrollIntoLast } from '../utils';\n\ninterface DynamicParams {\n  currentOpenChannel: SendbirdUIKit.OpenChannelType;\n  /* eslint-disable @typescript-eslint/no-explicit-any*/\n  userFilledMessageListParams?: Record<string, any>;\n}\ninterface StaticParams {\n  sdk: SendbirdUIKit.Sdk;\n  logger: SendbirdUIKit.Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n}\n\nfunction useInitialMessagesFetch(\n  { currentOpenChannel, userFilledMessageListParams }: DynamicParams,\n  { sdk, logger, messagesDispatcher }: StaticParams,\n): void {\n  useEffect(() => {\n    logger.info('OpenChannel | useInitialMessagesFetch: Setup started', currentOpenChannel);\n    messagesDispatcher({\n      type: messageActionTypes.RESET_MESSAGES,\n      payload: null,\n    });\n\n    if (sdk && sdk.MessageListParams && currentOpenChannel && currentOpenChannel.getMessagesByTimestamp) {\n      const messageListParams = new sdk.MessageListParams();\n      messageListParams.prevResultSize = 30;\n      messageListParams.isInclusive = true;\n      messageListParams.includeReplies = false;\n      messageListParams.includeReactions = false;\n      if (userFilledMessageListParams) {\n        Object.keys(userFilledMessageListParams).forEach((key) => {\n          messageListParams[key] = userFilledMessageListParams[key];\n        });\n        logger.info('OpenChannel | useInitialMessagesFetch: Used customizedMessageListParams');\n      }\n\n      logger.info('OpenChannel | useInitialMessagesFetch: Fetching messages', { currentOpenChannel, messageListParams });\n      messagesDispatcher({\n        type: messageActionTypes.GET_PREV_MESSAGES_START,\n        payload: null,\n      });\n      currentOpenChannel.getMessagesByTimestamp(new Date().getTime(), messageListParams, (messages, error) => {\n        if (!error) {\n          logger.info('OpenChannel | useInitialMessagesFetch: Fetching messages succeeded', messages);\n          const hasMore = (messages && messages.length > 0);\n          const lastMessageTimestamp = hasMore ? messages[0].createdAt : null;\n          messagesDispatcher({\n            type: messageActionTypes.GET_PREV_MESSAGES_SUCESS,\n            payload: {\n              currentOpenChannel,\n              messages,\n              hasMore,\n              lastMessageTimestamp,\n            },\n          });\n          setTimeout(() => { scrollIntoLast(); });\n        } else {\n          logger.error('OpenChannel | useInitialMessagesFetch: Fetching messages failed', error);\n          messagesDispatcher({\n            type: messageActionTypes.GET_PREV_MESSAGES_FAIL,\n            payload: {\n              currentOpenChannel,\n              messages: [],\n              hasMore: false,\n              lastMessageTimestamp: 0,\n            },\n          });\n        }\n      });\n    }\n  }, [currentOpenChannel, userFilledMessageListParams]);\n}\n\nexport default useInitialMessagesFetch;\n","import { useCallback } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface DynamicParams {\n  currentOpenChannel: SendbirdUIKit.OpenChannelType;\n  lastMessageTimestamp: number;\n  fetchMore?: boolean;\n}\ninterface StaticParams {\n  sdk: SendbirdUIKit.Sdk;\n  logger: SendbirdUIKit.Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n  hasMore: boolean;\n  /* eslint-disable @typescript-eslint/no-explicit-any*/\n  userFilledMessageListParams?: Record<string, any>;\n}\ntype CallbackReturn = (callback: () => void) => void;\n\nfunction useScrollCallback(\n  { currentOpenChannel, lastMessageTimestamp, fetchMore }: DynamicParams,\n  { sdk, logger, messagesDispatcher, hasMore, userFilledMessageListParams }: StaticParams,\n): CallbackReturn {\n  return useCallback((callback) => {\n    if (fetchMore && hasMore && sdk && sdk.MessageListParams) {\n      logger.info('OpenChannel | useScrollCallback: start');\n      const messageListParams = new sdk.MessageListParams();\n      messageListParams.prevResultSize = 30;\n      messageListParams.includeReplies = false;\n      messageListParams.includeReactions = false;\n\n      if (userFilledMessageListParams) {\n        Object.keys(userFilledMessageListParams).forEach((key) => {\n          messageListParams[key] = userFilledMessageListParams[key];\n        });\n        logger.info('OpenChannel | useScrollCallback: Used userFilledMessageListParams', userFilledMessageListParams);\n      }\n\n      logger.info('OpenChannel | useScrollCallback: Fetching messages', { currentOpenChannel, messageListParams });\n\n      currentOpenChannel.getMessagesByTimestamp(lastMessageTimestamp || new Date().getTime(), messageListParams, (messages, error) => {\n        if (!error) {\n          logger.info('OpenChannel | useScrollCallback: Fetching messages succeeded', messages);\n          const hasMore = (messages && messages.length > 0);\n          const lastMessageTimestamp = hasMore ? messages[0].createdAt : null;\n          messagesDispatcher({\n            type: messageActionTypes.GET_PREV_MESSAGES_SUCESS,\n            payload: {\n              currentOpenChannel,\n              messages,\n              hasMore,\n              lastMessageTimestamp,\n            }\n          });\n          setTimeout(() => {\n            callback();\n          });\n        } else {\n          logger.error('OpenChannel | useScrollCallback: Fetching messages failed', error);\n          messagesDispatcher({\n            type: messageActionTypes.GET_PREV_MESSAGES_FAIL,\n            payload: {\n              currentOpenChannel,\n              messages: [],\n              hasMore: false,\n              lastMessageTimestamp: 0,\n            }\n          });\n        }\n      });\n    }\n  }, [currentOpenChannel, lastMessageTimestamp, fetchMore]);\n}\n\nexport default useScrollCallback;\n","import { useCallback } from 'react';\n\ninterface DynamicParams {\n  conversationScrollRef: React.RefObject<HTMLDivElement>;\n}\ninterface StaticParams {\n  logger: SendbirdUIKit.Logger;\n}\n\nfunction useCheckScrollBottom(\n  { conversationScrollRef }: DynamicParams,\n  { logger }: StaticParams,\n): () => boolean {\n  return useCallback(() => {\n    let isBottom = true;\n    if (conversationScrollRef) {\n      try {\n        const conversationScroll = conversationScrollRef.current;\n        isBottom = conversationScroll.scrollHeight <= conversationScroll.scrollTop + conversationScroll.clientHeight;\n      } catch(error) {\n        logger.error('OpenChannel | useCheckScrollBottom', error);\n      }\n    }\n    return isBottom;\n  }, [conversationScrollRef])\n}\n\nexport default useCheckScrollBottom;\n","import Sendbird from 'sendbird';\nimport { useCallback } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport * as utils from '../utils';\n\ninterface DynamicParams {\n  currentOpenChannel: SendbirdUIKit.OpenChannelType;\n  onBeforeSendUserMessage: (text: string) => Sendbird.UserMessageParams;\n  checkScrollBottom: () => boolean;\n  messageInputRef: React.RefObject<HTMLInputElement>;\n}\ninterface StaticParams {\n  sdk: SendbirdUIKit.Sdk;\n  logger: SendbirdUIKit.Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n}\n\nfunction useSendMessageCallback(\n  { currentOpenChannel, onBeforeSendUserMessage, checkScrollBottom, messageInputRef }: DynamicParams,\n  { sdk, logger, messagesDispatcher }: StaticParams,\n): () => void {\n  return useCallback(() => {\n    if (sdk && sdk.UserMessageParams) {\n      const text = messageInputRef.current.value;\n      const createParamsDefault = (txt: string | number): Sendbird.UserMessageParams => {\n        const message = typeof txt === 'string' ? txt.trim() : txt.toString(10).trim();\n        const params = new sdk.UserMessageParams();\n        params.message = message;\n        return params;\n      }\n      const createCustomParams = onBeforeSendUserMessage && typeof onBeforeSendUserMessage === 'function';\n      if (createCustomParams) {\n        logger.info('OpenChannel | useSendMessageCallback: Creating params using onBeforeSendUserMessage', onBeforeSendUserMessage);\n      }\n      const params = onBeforeSendUserMessage ? onBeforeSendUserMessage(text) : createParamsDefault(text);\n      logger.info('OpenChannel | useSendMessageCallback: Sending message has started', params);\n\n      const isBottom = checkScrollBottom();\n      const pendingMessage = currentOpenChannel.sendUserMessage(params, (message, error) => {\n        if (!error) {\n          logger.info('OpenChannel | useSendMessageCallback: Sending message succeeded', message);\n          messagesDispatcher({\n            type: messageActionTypes.SENDING_MESSAGE_SUCCEEDED,\n            payload: message,\n          });\n          if (isBottom) {\n            setTimeout(() => {\n              utils.scrollIntoLast();\n            });\n          }\n        } else {\n          logger.warning('OpenChannel | useSendMessageCallback: Sending message failed', error);\n          messagesDispatcher({\n            type: messageActionTypes.SENDING_MESSAGE_FAILED,\n            payload: messageActionTypes,\n          });\n        }\n      });\n      messagesDispatcher({\n        type: messageActionTypes.SENDING_MESSAGE_START,\n        payload: {\n          message: pendingMessage,\n          channel: currentOpenChannel,\n        }\n      });\n    }\n  }, [currentOpenChannel, onBeforeSendUserMessage, checkScrollBottom, messageInputRef]);\n}\n\nexport default useSendMessageCallback;\n","import Sendbird from 'sendbird';\nimport { useCallback } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport * as utils from '../utils';\n\ninterface DynamicParams {\n  currentOpenChannel: SendbirdUIKit.OpenChannelType;\n  onBeforeSendFileMessage: (file: File) => Sendbird.FileMessageParams;\n  checkScrollBottom: () => boolean;\n  imageCompression?: {\n    compressionRate?: number,\n    resizingWidth?: number | string,\n    resizingHeight?: number | string,\n  };\n}\ninterface StaticParams {\n  sdk: SendbirdUIKit.Sdk;\n  logger: SendbirdUIKit.Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n}\n\ntype CallbackReturn = (file: File) => void;\n\nfunction useFileUploadCallback(\n  {\n    currentOpenChannel,\n    checkScrollBottom,\n    imageCompression = {},\n    onBeforeSendFileMessage,\n  }: DynamicParams,\n  { sdk, logger, messagesDispatcher }: StaticParams,\n): CallbackReturn {\n  return useCallback((file) => {\n    if (sdk && sdk.FileMessageParams) {\n      const {\n        compressionRate,\n        resizingWidth,\n        resizingHeight,\n      } = imageCompression;\n      const createCustomParams = onBeforeSendFileMessage && typeof onBeforeSendFileMessage === 'function';\n\n      const compressibleFileType = (file.type === 'image/jpg' || file.type === 'image/png' || file.type === 'image/jpeg');\n      const compressibleRatio = (compressionRate > 0) && (compressionRate < 1);\n      // pxToNumber returns null if values are invalid\n      const compressibleDiamensions = utils.pxToNumber(resizingWidth)\n        || utils.pxToNumber(resizingHeight);\n\n      const canCompressImage = compressibleFileType && (compressibleRatio || compressibleDiamensions);\n\n      const createParamsDefault = (file_): Sendbird.FileMessageParams => {\n        const params = new sdk.FileMessageParams();\n        params.file = file_;\n        return params;\n      };\n\n      if (canCompressImage) { // Using image compression\n        try {\n          const image: HTMLImageElement = document.createElement('img');\n          image.src = URL.createObjectURL(file);\n          image.onload = () => {\n            URL.revokeObjectURL(image.src);\n            const canvas = document.createElement('canvas');\n            const imageWidth = image.naturalWidth || image.width;\n            const imageHeight = image.naturalHeight || image.height;\n            let targetWidth = utils.pxToNumber(resizingWidth) || imageWidth;\n            let targetHeight = utils.pxToNumber(resizingHeight) || imageHeight;\n\n            // In canvas.toBlob(callback, mimeType, qualityArgument)\n            // qualityArgument doesnt work\n            // so in case compressibleDiamensions are not present, we use ratio\n            if (file.type === 'image/png' && !compressibleDiamensions) {\n              targetWidth *= compressionRate;\n              targetHeight *= compressionRate;\n            }\n\n            canvas.width = targetWidth;\n            canvas.height = targetHeight;\n            const context = canvas.getContext('2d');\n            context.drawImage(image, 0, 0, targetWidth, targetHeight);\n            context.canvas.toBlob(\n              (newImageBlob) => {\n                const compressedFile = new File([newImageBlob], file.name, { type: file.type });\n                if (createCustomParams) {\n                  logger.info('OpenChannel | useFileUploadCallback: Creating params using onBeforeSendFileMessage', onBeforeSendFileMessage);\n                }\n                const params = onBeforeSendFileMessage ? onBeforeSendFileMessage(compressedFile) : createParamsDefault(compressedFile);\n                logger.info('OpenChannel | useFileUploadCallback: Uploading file message start', params);\n\n                const isBottom = checkScrollBottom();\n                const pendingMessage = currentOpenChannel.sendFileMessage(\n                  params,\n                  (message: SendbirdUIKit.ClientFileMessage, error) => {\n                    if (!error) {\n                      logger.info('OpenChannel | useFileUploadCallback: Sending message succeeded', message);\n                      messagesDispatcher({\n                        type: messageActionTypes.SENDING_MESSAGE_SUCCEEDED,\n                        payload: message,\n                      });\n                      if (isBottom) {\n                        setTimeout(() => {\n                          utils.scrollIntoLast();\n                        });\n                      }\n                    } else {\n                      logger.error('OpenChannel | useFileUploadCallback: Sending file message failed', { message, error });\n                      message.localUrl = URL.createObjectURL(file);\n                      message.file = file;\n                      messagesDispatcher({\n                        type: messageActionTypes.SENDING_MESSAGE_FAILED,\n                        payload: message,\n                      });\n                    }\n                  },\n                );\n\n                messagesDispatcher({\n                  type: messageActionTypes.SENDING_MESSAGE_START,\n                  payload: {\n                    message: {\n                      ...pendingMessage,\n                      url: URL.createObjectURL(file),\n                      // pending thumbnail message seems to be failed\n                      requestState: 'pending',\n                    },\n                    channel: currentOpenChannel,\n                  }\n                });\n              },\n              file.type,\n              compressionRate,\n            );\n          }\n        } catch (error) {\n          logger.warning('OpenChannel | useFileUploadCallback: Sending file message with image compression failed', error);\n        }\n      } else { // Not using image compression\n        if (createCustomParams) {\n          logger.info('OpenChannel | useFileUploadCallback: Creating params using onBeforeSendFileMessage', onBeforeSendFileMessage);\n        }\n        const params = onBeforeSendFileMessage ? onBeforeSendFileMessage(file) : createParamsDefault(file);\n        logger.info('OpenChannel | useFileUploadCallback: Uploading file message start', params);\n\n        const isBottom = checkScrollBottom();\n        const pendingMessage = currentOpenChannel.sendFileMessage(\n          params,\n          (message: SendbirdUIKit.ClientFileMessage, error) => {\n            if (!error) {\n              logger.info('OpenChannel | useFileUploadCallback: Sending message succeeded', message);\n              messagesDispatcher({\n                type: messageActionTypes.SENDING_MESSAGE_SUCCEEDED,\n                payload: message,\n              });\n              if (isBottom) {\n                setTimeout(() => {\n                  utils.scrollIntoLast();\n                });\n              }\n            } else {\n              logger.error('OpenChannel | useFileUploadCallback: Sending file message failed', { message, error });\n              message.localUrl = URL.createObjectURL(file);\n              message.file = file;\n              messagesDispatcher({\n                type: messageActionTypes.SENDING_MESSAGE_FAILED,\n                payload: message,\n              });\n            }\n          }\n        );\n\n        messagesDispatcher({\n          type: messageActionTypes.SENDING_MESSAGE_START,\n          payload: {\n            message: {\n              ...pendingMessage,\n              url: URL.createObjectURL(file),\n              // pending thumbnail message seems to be failed\n              requestState: 'pending',\n            },\n            channel: currentOpenChannel,\n          }\n        });\n      }\n    }\n  }, [currentOpenChannel, onBeforeSendFileMessage, checkScrollBottom, imageCompression]);\n}\n\nexport default useFileUploadCallback;\n","import Sendbird from 'sendbird';\nimport { useCallback } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface DynamicParams {\n  currentOpenChannel: SendbirdUIKit.OpenChannelType;\n  onBeforeSendUserMessage?: (text) => Sendbird.UserMessageParams;\n}\ninterface StaticParams {\n  sdk: SendbirdUIKit.Sdk;\n  logger: SendbirdUIKit.Logger;\n  messagesDispatcher: ({ type: string, payload :any }) => void;\n}\ntype CallbackReturn = (messageId, text, callback) => void;\n\nfunction useUpdateMessageCallback(\n  { currentOpenChannel, onBeforeSendUserMessage }: DynamicParams,\n  { sdk, logger, messagesDispatcher }: StaticParams,\n): CallbackReturn {\n  return useCallback((messageId, text, callback) => {\n    const createParamsDefault = (txt) => {\n      const params = new sdk.UserMessageParams();\n      params.message = txt;\n      return params;\n    };\n\n    if (onBeforeSendUserMessage && typeof onBeforeSendUserMessage === 'function') {\n      logger.info('OpenChannel | useUpdateMessageCallback: Creating params using onBeforeUpdateUserMessage');\n    }\n    const params = onBeforeSendUserMessage ? onBeforeSendUserMessage(text) : createParamsDefault(text);\n    currentOpenChannel.updateUserMessage(messageId, params, (message, error) => {\n      if (callback) {\n        callback();\n      }\n      if (!error) {\n        logger.info('OpenChannel | useUpdateMessageCallback: Updating message succeeded', { message, params });\n        messagesDispatcher({\n          type: messageActionTypes.ON_MESSAGE_UPDATED,\n          payload: {\n            channel: currentOpenChannel,\n            message,\n          },\n        });\n      } else {\n        logger.warning('OpenChannel | useUpdateMessageCallback: Updating message failed', error);\n      }\n    });\n  }, [currentOpenChannel, onBeforeSendUserMessage]);\n}\n\nexport default useUpdateMessageCallback;\n","import { useCallback } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface DynamicParams {\n  currentOpenChannel: SendbirdUIKit.OpenChannelType;\n}\ninterface StaticParams {\n  logger: SendbirdUIKit.Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n}\n\ntype CallbackReturn = (\n  message: SendbirdUIKit.ClientUserMessage | SendbirdUIKit.ClientFileMessage,\n  callback?: () => void,\n) => void;\n\nfunction useDeleteMessageCallback(\n  { currentOpenChannel }: DynamicParams,\n  { logger, messagesDispatcher }: StaticParams,\n): CallbackReturn {\n  return useCallback((message, callback) => {\n    logger.info('OpenChannel | useDeleteMessageCallback: Deleting message', message);\n    const { sendingStatus } = message;\n    logger.info('OpenChannel | useDeleteMessageCallback: Deleting message requestState', sendingStatus);\n\n    if (sendingStatus === 'failed' || sendingStatus === 'pending') {\n      logger.info('OpenChannel | useDeleteMessageCallback: Deleted message from local', message);\n      messagesDispatcher({\n        type: messageActionTypes.ON_MESSAGE_DELETED_BY_REQ_ID,\n        payload: message.reqId,\n      });\n      if (callback) {\n        callback();\n      }\n    } else {\n      if (!(message.messageType ==='file' || message.messageType === 'user')) {\n        return;\n      }\n      const messageToDelete = message as SendBird.UserMessage;\n      currentOpenChannel.deleteMessage(messageToDelete, (error) => {\n        logger.info('OpenChannel | useDeleteMessageCallback: Deleting message on server', sendingStatus);\n        if (callback) {\n          callback();\n        }\n        if (!error) {\n          logger.info('OpenChannel | useDeleteMessageCallback: Deleting message succeeded', message);\n          messagesDispatcher({\n            type: messageActionTypes.ON_MESSAGE_DELETED,\n            payload: {\n              channel: currentOpenChannel,\n              messageId: message.messageId,\n            },\n          });\n        } else {\n          logger.warning('OpenChannel | useDeleteMessageCallback: Deleting message failed', error);\n        }\n      });\n    }\n  }, [currentOpenChannel]);\n}\n\nexport default useDeleteMessageCallback;\n","import { useCallback } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface DynamicParams {\n  currentOpenChannel: SendbirdUIKit.OpenChannelType;\n}\ninterface StaticParams {\n  logger: SendbirdUIKit.Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n}\ntype CallbackReturn = (failedMessage: SendbirdUIKit.ClientUserMessage | SendbirdUIKit.ClientFileMessage) => void;\n\nfunction useResendMessageCallback(\n  { currentOpenChannel }: DynamicParams,\n  { logger, messagesDispatcher }: StaticParams,\n): CallbackReturn {\n  return useCallback((failedMessage) => {\n    logger.info('OpenChannel | useResendMessageCallback: Resending message has started', failedMessage);\n    const { messageType, file } = failedMessage;\n    if (failedMessage && typeof failedMessage.isResendable === 'function' && failedMessage.isResendable()) {\n      // eslint-disable-next-line no-param-reassign\n      failedMessage.requestState = 'pending';\n      messagesDispatcher({\n        type: messageActionTypes.RESENDING_MESSAGE_START,\n        payload: {\n          channel: currentOpenChannel,\n          message: failedMessage,\n        },\n      });\n\n      // userMessage\n      if (messageType === 'user' && failedMessage.messageType === 'user') {\n        currentOpenChannel.resendUserMessage(failedMessage, (message, error) => {\n          if (!error) {\n            logger.info('OpenChannel | useResendMessageCallback: Reseding message succeeded', message);\n            messagesDispatcher({\n              type: messageActionTypes.SENDING_MESSAGE_SUCCEEDED,\n              payload: message,\n            });\n          } else {\n            logger.warning('OpenChannel | useResendMessageCallback: Resending message failed', error);\n            // eslint-disable-next-line no-param-reassign\n            failedMessage.requestState = 'failed';\n            messagesDispatcher({\n              type: messageActionTypes.SENDING_MESSAGE_FAILED,\n              payload: failedMessage,\n            });\n          }\n        });\n        return;\n      }\n\n      // fileMessage\n      if (messageType === 'file' && failedMessage.messageType === 'file') {\n        currentOpenChannel.resendFileMessage(failedMessage, file, (message, error) => {\n          if (!error) {\n            logger.info('OpenChannel | useResendMessageCallback: Resending file message succeeded', message);\n            messagesDispatcher({\n              type: messageActionTypes.SENDING_MESSAGE_SUCCEEDED,\n              payload: message,\n            });\n          } else {\n            logger.warning('OpenChannel | useResendMessageCallback: Resending file message failed', error);\n            // eslint-disable-next-line no-param-reassign\n            failedMessage.requestState = 'failed';\n            messagesDispatcher({\n              type: messageActionTypes.SENDING_MESSAGE_FAILED,\n              payload: failedMessage,\n            });\n          }\n        });\n      }\n    } else {\n      // to alert user on console\n      // eslint-disable-next-line no-console\n      console.error('OpenChannel | useResendMessageCallback: Message is not resendable');\n      logger.warning('OpenChannel | useResendMessageCallback: Message is not resendable', failedMessage);\n    }\n  }, [currentOpenChannel]);\n}\n\nexport default useResendMessageCallback;\n","import { useEffect, useState } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface DynamicParams {\n  messagesLength: number;\n  experimentalMessageLimit: number;\n}\n\ninterface StaticParams {\n  messagesDispatcher: ({\n    type: string,\n    payload: { experimentalMessageLimit: number }\n  }) => void;\n  logger: SendbirdUIKit.Logger;\n}\n\nconst THROTTLE_TIMER = 5000;\n\n// to trim message list so that we wont keep thousands of messages in memory\n// We are throttling here; not debouncing\n// it will be called once very 5 sec if messagesLength, experimentalMessageLimit changes\n// we check if messagesLength > experimentalMessageLimit before dispatching action\nfunction useTrimMessageList(\n  { messagesLength, experimentalMessageLimit }: DynamicParams,\n  { messagesDispatcher, logger }: StaticParams,\n): void {\n  const [inProgress, setInProgress] = useState(false);\n  useEffect(() => {\n    if (inProgress) {\n      return;\n    }\n    if (typeof messagesLength === 'number' && messagesLength > experimentalMessageLimit) {\n      logger.info('Trimming MessageList');\n      messagesDispatcher({\n        type: messageActionTypes.TRIM_MESSAGE_LIST,\n        payload: { experimentalMessageLimit },\n      });\n    }\n    setInProgress(true);\n    setTimeout(() => { setInProgress(false); }, THROTTLE_TIMER);\n  }, [messagesLength, experimentalMessageLimit]);\n}\n\nexport default useTrimMessageList;\n","import React, {\n  useRef,\n  useEffect,\n  useReducer,\n  useContext,\n  useMemo,\n} from 'react';\nimport * as utils from './utils';\nimport './index.scss';\n\nimport MessageInputWrapper from './components/MessageInpuetWrapper';\nimport FrozenChannelNotification from './components/FrozenNotification';\nimport OpenchannelConversationHeader from '../../ui/OpenchannelConversationHeader';\nimport OpenchannelConversationScroll from './components/OpenchannelConversationScroll';\nimport PlaceHolder, { PlaceHolderTypes } from '../../ui/PlaceHolder';\nimport { UserProfileProvider } from '../../lib/UserProfileContext';\n\nimport { OpenChannelProps } from '../../index';\nimport messagesReducer from './dux/reducers';\nimport messagesInitialState from './dux/initialState';\nimport * as messageActionTypes from './dux/actionTypes';\nimport withSendbirdContext from '../../lib/SendbirdSdkContext.jsx';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport { scrollIntoLast } from './utils';\nimport * as topics from '../../lib/pubSub/topics';\n\n// hooks\nimport useSetChannel from './hooks/useSetChannel';\nimport useHandleChannelEvents from './hooks/useHandleChannelEvents';\nimport useInitialMessagesFetch from './hooks/useInitialMessagesFetch';\nimport useScrollCallback from './hooks/useScrollCallback';\nimport useCheckScrollBottom from './hooks/useCheckScrollBottom';\nimport useSendMessageCallback from './hooks/useSendMessageCallback';\nimport useFileUploadCallback from './hooks/useFileUploadCallback';\nimport useUpdateMessageCallback from './hooks/useUpdateMessageCallback';\nimport useDeleteMessageCallback from './hooks/useDeleteMessageCallback';\nimport useResendMessageCallback from './hooks/useResendMessageCallback';\nimport useTrimMessageList from './hooks/useTrimMessageList';\n\nconst COMPONENT_CLASS_NAME = 'sendbird-openchannel-conversation';\n\ninterface Props extends OpenChannelProps {\n  stores: {\n    sdkStore?: SendbirdUIKit.SdkStore,\n    userStore?: SendbirdUIKit.UserStore,\n  };\n  config: {\n    userId: string,\n    isOnline: boolean,\n    logger?: SendbirdUIKit.Logger,\n    theme?: string,\n    /* eslint-disable @typescript-eslint/no-explicit-any*/\n    pubSub: any,\n    disableUserProfile?: boolean,\n    renderUserProfile?(): JSX.Element,\n    imageCompression?: {\n      compressionRate?: number,\n      resizingWidth?: number | string,\n      resizingHeight?: number | string,\n    },\n  };\n}\n\nexport const OpenchannelConversation = (props: Props): JSX.Element => {\n  const {\n    // internal props\n    stores,\n    config,\n    // normal props\n    useMessageGrouping,\n    channelUrl,\n    queries = {},\n    disableUserProfile,\n    fetchingParticipants = false, // We didn't decide to support fetching participant list\n    renderCustomMessage,\n    renderUserProfile,\n    renderChannelTitle,\n    renderMessageInput,\n    onBeforeSendUserMessage,\n    experimentalMessageLimit,\n    onBeforeSendFileMessage,\n    onChatHeaderActionClick\n  } = props;\n\n  const {\n    sdkStore,\n    userStore,\n  } = stores;\n  const {\n    userId,\n    isOnline,\n    logger,\n    pubSub,\n    imageCompression,\n  } = config;\n\n  const {\n    sdk\n  } = sdkStore;\n  const {\n    user\n  } = userStore;\n\n  // hook variables\n  const [messagesStore, messagesDispatcher] = useReducer(messagesReducer, messagesInitialState);\n  const {\n    allMessages,\n    loading,\n    initialized,\n    currentOpenChannel,\n    isInvalid,\n    hasMore,\n    lastMessageTimestamp,\n    operators,\n    bannedParticipantIds,\n    mutedParticipantIds,\n  } = messagesStore;\n  // ref\n  const messageInputRef = useRef(null); // useSendMessageCallback\n  const conversationScrollRef = useRef(null); // useScrollAfterSendMessageCallback\n  const { stringSet } = useContext(LocalizationContext);\n\n  // const\n  const sdkInit = sdkStore.initialized;\n  const userFilledMessageListParams = queries ? queries.messageListParams: null;\n  const disabled = !initialized\n    || !isOnline\n    || utils.isDisabledBecauseFrozen(currentOpenChannel, userId);\n  // || utils.isDisabledBecauseMuted(mutedParticipantIds, userId)\n  const userDefinedDisableUserProfile = disableUserProfile || config.disableUserProfile;\n  const userDefinedRenderProfile = renderUserProfile || config.renderUserProfile;\n\n  // useMemo\n  const amIBanned = useMemo(() => {\n    return bannedParticipantIds.indexOf(user.userId) >= 0;\n  }, [channelUrl, bannedParticipantIds, user]);\n  const amIMuted = useMemo(() => {\n    return mutedParticipantIds.indexOf(user.userId) >= 0;\n  }, [channelUrl, mutedParticipantIds, user]);\n  const amIOperator = useMemo(() => {\n    return operators.map(operator => operator.userId).indexOf(user.userId) >= 0;\n  }, [channelUrl, operators, user]);\n\n  // use hooks\n  useSetChannel(\n    { channelUrl, sdkInit, fetchingParticipants },\n    { sdk, logger, messagesDispatcher },\n  );\n\n  useEffect(() => {\n    if (renderCustomMessage) {\n      // eslint-disable-next-line no-console\n      console.info('The parameter type of renderCustomMessage will be changed to the object in the next minor update.');\n    }\n  }, []);\n\n  const checkScrollBottom = useCheckScrollBottom(\n    { conversationScrollRef },\n    { logger },\n  );\n  useHandleChannelEvents(\n    { currentOpenChannel, checkScrollBottom },\n    { sdk, logger, messagesDispatcher },\n  );\n  useInitialMessagesFetch(\n    { currentOpenChannel, userFilledMessageListParams },\n    { sdk, logger, messagesDispatcher },\n  );\n\n  // donot fetch more for streaming\n  const fetchMore = utils.shouldFetchMore(allMessages?.length, experimentalMessageLimit);\n  const onScroll = useScrollCallback(\n    { currentOpenChannel, lastMessageTimestamp, fetchMore },\n    { sdk, logger, messagesDispatcher, hasMore, userFilledMessageListParams },\n  );\n  const handleSendMessage = useSendMessageCallback(\n    { currentOpenChannel, onBeforeSendUserMessage, checkScrollBottom, messageInputRef },\n    { sdk, logger, messagesDispatcher },\n  );\n  const handleFileUpload = useFileUploadCallback(\n    { currentOpenChannel, onBeforeSendFileMessage, checkScrollBottom, imageCompression },\n    { sdk, logger, messagesDispatcher },\n  );\n  const updateMessage = useUpdateMessageCallback(\n    { currentOpenChannel, onBeforeSendUserMessage },\n    { sdk, logger, messagesDispatcher },\n  );\n  const deleteMessage = useDeleteMessageCallback(\n    { currentOpenChannel },\n    { logger, messagesDispatcher },\n  );\n  const resendMessage = useResendMessageCallback(\n    { currentOpenChannel },\n    { logger, messagesDispatcher },\n  );\n\n  useTrimMessageList(\n    { messagesLength: allMessages?.length, experimentalMessageLimit },\n    { messagesDispatcher, logger }\n  );\n\n  // handle API calls from withSendbird\n  useEffect(() => {\n    const subscriber = new Map();\n    if (!pubSub || !pubSub.subscribe) {\n      return;\n    }\n    subscriber.set(topics.SEND_USER_MESSAGE, pubSub.subscribe(topics.SEND_USER_MESSAGE, (msg) => {\n      const { channel, message } = msg;\n      scrollIntoLast();\n      if (channel && (channelUrl === channel.url)) {\n        messagesDispatcher({\n          type: messageActionTypes.SENDING_MESSAGE_SUCCEEDED,\n          payload: message,\n        });\n      }\n    }));\n    subscriber.set(topics.SEND_MESSAGE_START, pubSub.subscribe(topics.SEND_MESSAGE_START, (msg) => {\n      const { channel, message } = msg;\n      if (channel && (channelUrl === channel.url)) {\n        messagesDispatcher({\n          type: messageActionTypes.SENDING_MESSAGE_START,\n          payload: { message, channel },\n        });\n      }\n    }));\n    subscriber.set(topics.SEND_FILE_MESSAGE, pubSub.subscribe(topics.SEND_FILE_MESSAGE, (msg) => {\n      const { channel, message } = msg;\n      scrollIntoLast();\n      if (channel && (channelUrl === channel.url)) {\n        messagesDispatcher({\n          type: messageActionTypes.SENDING_MESSAGE_SUCCEEDED,\n          payload: { message, channel },\n        });\n      }\n    }));\n    subscriber.set(topics.UPDATE_USER_MESSAGE, pubSub.subscribe(topics.UPDATE_USER_MESSAGE, (msg) => {\n      const { channel, message, fromSelector } = msg;\n      if (fromSelector && channel && (channelUrl === channel.url)) {\n        messagesDispatcher({\n          type: messageActionTypes.ON_MESSAGE_UPDATED,\n          payload: { channel, message },\n        });\n      }\n    }));\n    subscriber.set(topics.DELETE_MESSAGE, pubSub.subscribe(topics.DELETE_MESSAGE, (msg) => {\n      const { channel, messageId } = msg;\n      if (channel && (channelUrl === channel.url)) {\n        messagesDispatcher({\n          type: messageActionTypes.ON_MESSAGE_DELETED,\n          payload: messageId,\n        });\n      }\n    }));\n\n    return () => {\n      if (subscriber) {\n        subscriber.forEach((s) => {\n          try {\n            s.remove();\n          } catch {\n            //\n          }\n        });\n      }\n    };\n  }, [channelUrl, sdkInit]);\n\n  if (\n    !currentOpenChannel\n    || !currentOpenChannel.url\n    || amIBanned\n  ) {\n    return (<div className={COMPONENT_CLASS_NAME}><PlaceHolder type={PlaceHolderTypes.NO_CHANNELS} /></div>);\n  }\n  if (loading) {\n    return (<div className={COMPONENT_CLASS_NAME}><PlaceHolder type={PlaceHolderTypes.LOADING} /></div>);\n  }\n  if (isInvalid) {\n    return (<div className={COMPONENT_CLASS_NAME}><PlaceHolder type={PlaceHolderTypes.WRONG} /></div>);\n  }\n\n  return (\n    <UserProfileProvider\n      className={COMPONENT_CLASS_NAME}\n      disableUserProfile={userDefinedDisableUserProfile}\n      renderUserProfile={userDefinedRenderProfile}\n    >\n      {\n        renderChannelTitle\n          ? renderChannelTitle({\n            channel: currentOpenChannel,\n            user: user,\n          })\n          : (\n            <OpenchannelConversationHeader\n              title={currentOpenChannel.name}\n              subTitle={`${utils.kFormatter(currentOpenChannel.participantCount)} ${stringSet.OPEN_CHANNEL_CONVERSATION__TITLE_PARTICIPANTS}`}\n              coverImage={currentOpenChannel.coverUrl}\n              onActionClick={onChatHeaderActionClick}\n              amIOperator={amIOperator}\n            />\n          )\n      }\n      {\n        currentOpenChannel.isFrozen && (\n          <FrozenChannelNotification />\n        )\n      }\n      <OpenchannelConversationScroll\n        ref={conversationScrollRef}\n        renderCustomMessage={renderCustomMessage}\n        openchannel={currentOpenChannel}\n        user={user}\n        useMessageGrouping={useMessageGrouping}\n        isOnline={isOnline}\n        allMessages={allMessages}\n        onScroll={onScroll}\n        hasMore={hasMore}\n        updateMessage={updateMessage}\n        deleteMessage={deleteMessage}\n        resendMessage={resendMessage}\n      />\n      {\n        renderMessageInput\n          ? (\n            <div className=\"sendbird-openchannel-footer\">\n              {\n                renderMessageInput({\n                  channel: currentOpenChannel,\n                  user: user,\n                  disabled: disabled,\n                })\n              }\n            </div>\n          )\n          : (\n            <MessageInputWrapper\n              channel={currentOpenChannel}\n              user={user}\n              ref={messageInputRef}\n              disabled={disabled || amIMuted}\n              onSendMessage={handleSendMessage}\n              onFileUpload={handleFileUpload}\n              renderMessageInput={renderMessageInput}\n            />\n          )\n      }\n    </UserProfileProvider>\n  );\n};\n\nexport default withSendbirdContext(OpenchannelConversation);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}