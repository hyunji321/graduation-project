{"ast":null,"code":"function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}\n\n/**\r\n * @name toDate\r\n * @category Common Helpers\r\n * @summary Convert the given argument to an instance of Date.\r\n *\r\n * @description\r\n * Convert the given argument to an instance of Date.\r\n *\r\n * If the argument is an instance of Date, the function returns its clone.\r\n *\r\n * If the argument is a number, it is treated as a timestamp.\r\n *\r\n * If the argument is none of the above, the function returns Invalid Date.\r\n *\r\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\r\n *\r\n * @param {Date|Number} argument - the value to convert\r\n * @returns {Date} the parsed date in the local time zone\r\n * @throws {TypeError} 1 argument required\r\n *\r\n * @example\r\n * // Clone the date:\r\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\r\n * //=> Tue Feb 11 2014 11:30:30\r\n *\r\n * @example\r\n * // Convert the timestamp to date:\r\n * const result = toDate(1392098430000)\r\n * //=> Tue Feb 11 2014 11:30:30\r\n */\n\nfunction toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n    return new Date(NaN);\n  }\n}\n\n/**\r\n * @name startOfDay\r\n * @category Day Helpers\r\n * @summary Return the start of a day for the given date.\r\n *\r\n * @description\r\n * Return the start of a day for the given date.\r\n * The result will be in the local timezone.\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * @param {Date|Number} date - the original date\r\n * @returns {Date} the start of a day\r\n * @throws {TypeError} 1 argument required\r\n *\r\n * @example\r\n * // The start of a day for 2 September 2014 11:55:00:\r\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\r\n * //=> Tue Sep 02 2014 00:00:00\r\n */\n\nfunction startOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}\n\n/**\r\n * @name isSameDay\r\n * @category Day Helpers\r\n * @summary Are the given dates in the same day?\r\n *\r\n * @description\r\n * Are the given dates in the same day?\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * @param {Date|Number} dateLeft - the first date to check\r\n * @param {Date|Number} dateRight - the second date to check\r\n * @returns {Boolean} the dates are in the same day\r\n * @throws {TypeError} 2 arguments required\r\n *\r\n * @example\r\n * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?\r\n * var result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))\r\n * //=> true\r\n */\n\nfunction isSameDay(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfDay = startOfDay(dirtyDateLeft);\n  var dateRightStartOfDay = startOfDay(dirtyDateRight);\n  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();\n}\n\n/**\r\n * @name isDate\r\n * @category Common Helpers\r\n * @summary Is the given value a date?\r\n *\r\n * @description\r\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * @param {*} value - the value to check\r\n * @returns {boolean} true if the given value is a date\r\n * @throws {TypeError} 1 arguments required\r\n *\r\n * @example\r\n * // For a valid date:\r\n * const result = isDate(new Date())\r\n * //=> true\r\n *\r\n * @example\r\n * // For an invalid date:\r\n * const result = isDate(new Date(NaN))\r\n * //=> true\r\n *\r\n * @example\r\n * // For some value:\r\n * const result = isDate('2014-02-31')\r\n * //=> false\r\n *\r\n * @example\r\n * // For an object:\r\n * const result = isDate({})\r\n * //=> false\r\n */\n\nfunction isDate(value) {\n  requiredArgs(1, arguments);\n  return value instanceof Date || typeof value === 'object' && Object.prototype.toString.call(value) === '[object Date]';\n}\n\n/**\r\n * @name isValid\r\n * @category Common Helpers\r\n * @summary Is the given date valid?\r\n *\r\n * @description\r\n * Returns false if argument is Invalid Date and true otherwise.\r\n * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\r\n * Invalid Date is a Date, whose time value is NaN.\r\n *\r\n * Time value of Date: http://es5.github.io/#x15.9.1.1\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * - Now `isValid` doesn't throw an exception\r\n *   if the first argument is not an instance of Date.\r\n *   Instead, argument is converted beforehand using `toDate`.\r\n *\r\n *   Examples:\r\n *\r\n *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |\r\n *   |---------------------------|---------------|---------------|\r\n *   | `new Date()`              | `true`        | `true`        |\r\n *   | `new Date('2016-01-01')`  | `true`        | `true`        |\r\n *   | `new Date('')`            | `false`       | `false`       |\r\n *   | `new Date(1488370835081)` | `true`        | `true`        |\r\n *   | `new Date(NaN)`           | `false`       | `false`       |\r\n *   | `'2016-01-01'`            | `TypeError`   | `false`       |\r\n *   | `''`                      | `TypeError`   | `false`       |\r\n *   | `1488370835081`           | `TypeError`   | `true`        |\r\n *   | `NaN`                     | `TypeError`   | `false`       |\r\n *\r\n *   We introduce this change to make *date-fns* consistent with ECMAScript behavior\r\n *   that try to coerce arguments to the expected type\r\n *   (which is also the case with other *date-fns* functions).\r\n *\r\n * @param {*} date - the date to check\r\n * @returns {Boolean} the date is valid\r\n * @throws {TypeError} 1 argument required\r\n *\r\n * @example\r\n * // For the valid date:\r\n * const result = isValid(new Date(2014, 1, 31))\r\n * //=> true\r\n *\r\n * @example\r\n * // For the value, convertable into a date:\r\n * const result = isValid(1393804800000)\r\n * //=> true\r\n *\r\n * @example\r\n * // For the invalid date:\r\n * const result = isValid(new Date(''))\r\n * //=> false\r\n */\n\nfunction isValid(dirtyDate) {\n  requiredArgs(1, arguments);\n  if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {\n    return false;\n  }\n  var date = toDate(dirtyDate);\n  return !isNaN(Number(date));\n}\nvar formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: 'less than a second',\n    other: 'less than {{count}} seconds'\n  },\n  xSeconds: {\n    one: '1 second',\n    other: '{{count}} seconds'\n  },\n  halfAMinute: 'half a minute',\n  lessThanXMinutes: {\n    one: 'less than a minute',\n    other: 'less than {{count}} minutes'\n  },\n  xMinutes: {\n    one: '1 minute',\n    other: '{{count}} minutes'\n  },\n  aboutXHours: {\n    one: 'about 1 hour',\n    other: 'about {{count}} hours'\n  },\n  xHours: {\n    one: '1 hour',\n    other: '{{count}} hours'\n  },\n  xDays: {\n    one: '1 day',\n    other: '{{count}} days'\n  },\n  aboutXWeeks: {\n    one: 'about 1 week',\n    other: 'about {{count}} weeks'\n  },\n  xWeeks: {\n    one: '1 week',\n    other: '{{count}} weeks'\n  },\n  aboutXMonths: {\n    one: 'about 1 month',\n    other: 'about {{count}} months'\n  },\n  xMonths: {\n    one: '1 month',\n    other: '{{count}} months'\n  },\n  aboutXYears: {\n    one: 'about 1 year',\n    other: 'about {{count}} years'\n  },\n  xYears: {\n    one: '1 year',\n    other: '{{count}} years'\n  },\n  overXYears: {\n    one: 'over 1 year',\n    other: 'over {{count}} years'\n  },\n  almostXYears: {\n    one: 'almost 1 year',\n    other: 'almost {{count}} years'\n  }\n};\nvar formatDistance = function formatDistance(token, count, options) {\n  var result;\n  var tokenValue = formatDistanceLocale[token];\n  if (typeof tokenValue === 'string') {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace('{{count}}', count.toString());\n  }\n  if (options !== null && options !== void 0 && options.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return 'in ' + result;\n    } else {\n      return result + ' ago';\n    }\n  }\n  return result;\n};\nfunction buildFormatLongFn(args) {\n  return function () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // TODO: Remove String()\n    var width = options.width ? String(options.width) : args.defaultWidth;\n    var format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}\nvar dateFormats = {\n  full: 'EEEE, MMMM do, y',\n  long: 'MMMM do, y',\n  medium: 'MMM d, y',\n  short: 'MM/dd/yyyy'\n};\nvar timeFormats = {\n  full: 'h:mm:ss a zzzz',\n  long: 'h:mm:ss a z',\n  medium: 'h:mm:ss a',\n  short: 'h:mm a'\n};\nvar dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: '{{date}}, {{time}}',\n  short: '{{date}}, {{time}}'\n};\nvar formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: 'full'\n  }),\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: 'full'\n  }),\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: 'full'\n  })\n};\nvar formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: 'P'\n};\nvar formatRelative = function formatRelative(token, _date, _baseDate, _options) {\n  return formatRelativeLocale[token];\n};\nfunction buildLocalizeFn(args) {\n  return function (dirtyIndex, dirtyOptions) {\n    var options = dirtyOptions || {};\n    var context = options.context ? String(options.context) : 'standalone';\n    var valuesArray;\n    if (context === 'formatting' && args.formattingValues) {\n      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      var width = options.width ? String(options.width) : defaultWidth;\n      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      var _defaultWidth = args.defaultWidth;\n      var _width = options.width ? String(options.width) : args.defaultWidth;\n      valuesArray = args.values[_width] || args.values[_defaultWidth];\n    }\n    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex; // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challange you to try to remove it!\n\n    return valuesArray[index];\n  };\n}\nvar eraValues = {\n  narrow: ['B', 'A'],\n  abbreviated: ['BC', 'AD'],\n  wide: ['Before Christ', 'Anno Domini']\n};\nvar quarterValues = {\n  narrow: ['1', '2', '3', '4'],\n  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],\n  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']\n}; // Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\n\nvar monthValues = {\n  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n};\nvar dayValues = {\n  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n};\nvar dayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  }\n};\nvar formattingDayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  }\n};\nvar ordinalNumber = function ordinalNumber(dirtyNumber, _options) {\n  var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`.\n  //\n  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'.\n\n  var rem100 = number % 100;\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + 'st';\n      case 2:\n        return number + 'nd';\n      case 3:\n        return number + 'rd';\n    }\n  }\n  return number + 'th';\n};\nvar localize = {\n  ordinalNumber: ordinalNumber,\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: 'wide'\n  }),\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: 'wide',\n    argumentCallback: function argumentCallback(quarter) {\n      return quarter - 1;\n    }\n  }),\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: 'wide'\n  }),\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: 'wide'\n  }),\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: 'wide',\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: 'wide'\n  })\n};\nfunction buildMatchFn(args) {\n  return function (string) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var width = options.width;\n    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];\n    var matchResult = string.match(matchPattern);\n    if (!matchResult) {\n      return null;\n    }\n    var matchedString = matchResult[0];\n    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];\n    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {\n      return pattern.test(matchedString);\n    }) : findKey(parsePatterns, function (pattern) {\n      return pattern.test(matchedString);\n    });\n    var value;\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    var rest = string.slice(matchedString.length);\n    return {\n      value: value,\n      rest: rest\n    };\n  };\n}\nfunction findKey(object, predicate) {\n  for (var key in object) {\n    if (object.hasOwnProperty(key) && predicate(object[key])) {\n      return key;\n    }\n  }\n  return undefined;\n}\nfunction findIndex(array, predicate) {\n  for (var key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n  return undefined;\n}\nfunction buildMatchPatternFn(args) {\n  return function (string) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    var matchedString = matchResult[0];\n    var parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    var rest = string.slice(matchedString.length);\n    return {\n      value: value,\n      rest: rest\n    };\n  };\n}\nvar matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nvar parseOrdinalNumberPattern = /\\d+/i;\nvar matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i\n};\nvar parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i]\n};\nvar matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i\n};\nvar parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i]\n};\nvar matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i\n};\nvar parseMonthPatterns = {\n  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],\n  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]\n};\nvar matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i\n};\nvar parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]\n};\nvar matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i\n};\nvar parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i\n  }\n};\nvar match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: function valueCallback(value) {\n      return parseInt(value, 10);\n    }\n  }),\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: 'any'\n  }),\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: 'any',\n    valueCallback: function valueCallback(index) {\n      return index + 1;\n    }\n  }),\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: 'any'\n  }),\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: 'any'\n  }),\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: 'any',\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: 'any'\n  })\n};\n\n/**\r\n * @type {Locale}\r\n * @category Locales\r\n * @summary English locale (United States).\r\n * @language English\r\n * @iso-639-2 eng\r\n * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}\r\n * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}\r\n */\nvar locale = {\n  code: 'en-US',\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0\n    /* Sunday */,\n\n    firstWeekContainsDate: 1\n  }\n};\nvar defaultLocale = locale;\nfunction toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n  var number = Number(dirtyNumber);\n  if (isNaN(number)) {\n    return number;\n  }\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}\n\n/**\r\n * @name addMilliseconds\r\n * @category Millisecond Helpers\r\n * @summary Add the specified number of milliseconds to the given date.\r\n *\r\n * @description\r\n * Add the specified number of milliseconds to the given date.\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * @param {Date|Number} date - the date to be changed\r\n * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\r\n * @returns {Date} the new date with the milliseconds added\r\n * @throws {TypeError} 2 arguments required\r\n *\r\n * @example\r\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\r\n * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\r\n * //=> Thu Jul 10 2014 12:45:30.750\r\n */\n\nfunction addMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var timestamp = toDate(dirtyDate).getTime();\n  var amount = toInteger(dirtyAmount);\n  return new Date(timestamp + amount);\n}\n\n/**\r\n * @name subMilliseconds\r\n * @category Millisecond Helpers\r\n * @summary Subtract the specified number of milliseconds from the given date.\r\n *\r\n * @description\r\n * Subtract the specified number of milliseconds from the given date.\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * @param {Date|Number} date - the date to be changed\r\n * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\r\n * @returns {Date} the new date with the milliseconds subtracted\r\n * @throws {TypeError} 2 arguments required\r\n *\r\n * @example\r\n * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:\r\n * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\r\n * //=> Thu Jul 10 2014 12:45:29.250\r\n */\n\nfunction subMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, -amount);\n}\nfunction addLeadingZeros(number, targetLength) {\n  var sign = number < 0 ? '-' : '';\n  var output = Math.abs(number).toString();\n  while (output.length < targetLength) {\n    output = '0' + output;\n  }\n  return sign + output;\n}\n\n/*\r\n * |     | Unit                           |     | Unit                           |\r\n * |-----|--------------------------------|-----|--------------------------------|\r\n * |  a  | AM, PM                         |  A* |                                |\r\n * |  d  | Day of month                   |  D  |                                |\r\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\r\n * |  m  | Minute                         |  M  | Month                          |\r\n * |  s  | Second                         |  S  | Fraction of second             |\r\n * |  y  | Year (abs)                     |  Y  |                                |\r\n *\r\n * Letters marked by * are not implemented but reserved by Unicode standard.\r\n */\n\nvar formatters$2 = {\n  // Year\n  y: function y(date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n    var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);\n  },\n  // Month\n  M: function M(date, token) {\n    var month = date.getUTCMonth();\n    return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n  // Day of the month\n  d: function d(date, token) {\n    return addLeadingZeros(date.getUTCDate(), token.length);\n  },\n  // AM or PM\n  a: function a(date, token) {\n    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';\n    switch (token) {\n      case 'a':\n      case 'aa':\n        return dayPeriodEnumValue.toUpperCase();\n      case 'aaa':\n        return dayPeriodEnumValue;\n      case 'aaaaa':\n        return dayPeriodEnumValue[0];\n      case 'aaaa':\n      default:\n        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';\n    }\n  },\n  // Hour [1-12]\n  h: function h(date, token) {\n    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);\n  },\n  // Hour [0-23]\n  H: function H(date, token) {\n    return addLeadingZeros(date.getUTCHours(), token.length);\n  },\n  // Minute\n  m: function m(date, token) {\n    return addLeadingZeros(date.getUTCMinutes(), token.length);\n  },\n  // Second\n  s: function s(date, token) {\n    return addLeadingZeros(date.getUTCSeconds(), token.length);\n  },\n  // Fraction of second\n  S: function S(date, token) {\n    var numberOfDigits = token.length;\n    var milliseconds = date.getUTCMilliseconds();\n    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));\n    return addLeadingZeros(fractionalSeconds, token.length);\n  }\n};\nvar MILLISECONDS_IN_DAY = 86400000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nfunction getUTCDayOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var timestamp = date.getTime();\n  date.setUTCMonth(0, 1);\n  date.setUTCHours(0, 0, 0, 0);\n  var startOfYearTimestamp = date.getTime();\n  var difference = timestamp - startOfYearTimestamp;\n  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;\n}\n\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nfunction startOfUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var weekStartsOn = 1;\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}\n\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nfunction getUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getUTCFullYear();\n  var fourthOfJanuaryOfNextYear = new Date(0);\n  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);\n  var fourthOfJanuaryOfThisYear = new Date(0);\n  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nfunction startOfUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var year = getUTCISOWeekYear(dirtyDate);\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setUTCFullYear(year, 0, 4);\n  fourthOfJanuary.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCISOWeek(fourthOfJanuary);\n  return date;\n}\nvar MILLISECONDS_IN_WEEK$1 = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nfunction getUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1;\n}\n\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nfunction startOfUTCWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}\n\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nfunction getUTCWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate, dirtyOptions);\n  var year = date.getUTCFullYear();\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n  var firstWeekOfNextYear = new Date(0);\n  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);\n  var firstWeekOfThisYear = new Date(0);\n  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nfunction startOfUTCWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);\n  var year = getUTCWeekYear(dirtyDate, dirtyOptions);\n  var firstWeek = new Date(0);\n  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCWeek(firstWeek, dirtyOptions);\n  return date;\n}\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nfunction getUTCWeek(dirtyDate, options) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}\nvar dayPeriodEnum = {\n  am: 'am',\n  pm: 'pm',\n  midnight: 'midnight',\n  noon: 'noon',\n  morning: 'morning',\n  afternoon: 'afternoon',\n  evening: 'evening',\n  night: 'night'\n};\n/*\r\n * |     | Unit                           |     | Unit                           |\r\n * |-----|--------------------------------|-----|--------------------------------|\r\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\r\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\r\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\r\n * |  d  | Day of month                   |  D  | Day of year                    |\r\n * |  e  | Local day of week              |  E  | Day of week                    |\r\n * |  f  |                                |  F* | Day of week in month           |\r\n * |  g* | Modified Julian day            |  G  | Era                            |\r\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\r\n * |  i! | ISO day of week                |  I! | ISO week of year               |\r\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\r\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\r\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\r\n * |  m  | Minute                         |  M  | Month                          |\r\n * |  n  |                                |  N  |                                |\r\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\r\n * |  p! | Long localized time            |  P! | Long localized date            |\r\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\r\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\r\n * |  s  | Second                         |  S  | Fraction of second             |\r\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\r\n * |  u  | Extended year                  |  U* | Cyclic year                    |\r\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\r\n * |  w  | Local week of year             |  W* | Week of month                  |\r\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\r\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\r\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\r\n *\r\n * Letters marked by * are not implemented but reserved by Unicode standard.\r\n *\r\n * Letters marked by ! are non-standard, but implemented by date-fns:\r\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\r\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\r\n *   i.e. 7 for Sunday, 1 for Monday, etc.\r\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\r\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\r\n *   `R` is supposed to be used in conjunction with `I` and `i`\r\n *   for universal ISO week-numbering date, whereas\r\n *   `Y` is supposed to be used in conjunction with `w` and `e`\r\n *   for week-numbering date specific to the locale.\r\n * - `P` is long localized date format\r\n * - `p` is long localized time format\r\n */\n\nvar formatters = {\n  // Era\n  G: function G(date, token, localize) {\n    var era = date.getUTCFullYear() > 0 ? 1 : 0;\n    switch (token) {\n      // AD, BC\n      case 'G':\n      case 'GG':\n      case 'GGG':\n        return localize.era(era, {\n          width: 'abbreviated'\n        });\n      // A, B\n\n      case 'GGGGG':\n        return localize.era(era, {\n          width: 'narrow'\n        });\n      // Anno Domini, Before Christ\n\n      case 'GGGG':\n      default:\n        return localize.era(era, {\n          width: 'wide'\n        });\n    }\n  },\n  // Year\n  y: function y(date, token, localize) {\n    // Ordinal number\n    if (token === 'yo') {\n      var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n      var year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, {\n        unit: 'year'\n      });\n    }\n    return formatters$2.y(date, token);\n  },\n  // Local week-numbering year\n  Y: function Y(date, token, localize, options) {\n    var signedWeekYear = getUTCWeekYear(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year\n\n    if (token === 'YY') {\n      var twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    } // Ordinal number\n\n    if (token === 'Yo') {\n      return localize.ordinalNumber(weekYear, {\n        unit: 'year'\n      });\n    } // Padding\n\n    return addLeadingZeros(weekYear, token.length);\n  },\n  // ISO week-numbering year\n  R: function R(date, token) {\n    var isoWeekYear = getUTCISOWeekYear(date); // Padding\n\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function u(date, token) {\n    var year = date.getUTCFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n  // Quarter\n  Q: function Q(date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'Q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'QQ':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'Qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'QQQ':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'QQQQQ':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'QQQQ':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone quarter\n  q: function q(date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'qq':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'qqq':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'qqqqq':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'qqqq':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Month\n  M: function M(date, token, localize) {\n    var month = date.getUTCMonth();\n    switch (token) {\n      case 'M':\n      case 'MM':\n        return formatters$2.M(date, token);\n      // 1st, 2nd, ..., 12th\n\n      case 'Mo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'MMM':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // J, F, ..., D\n\n      case 'MMMMM':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // January, February, ..., December\n\n      case 'MMMM':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone month\n  L: function L(date, token, localize) {\n    var month = date.getUTCMonth();\n    switch (token) {\n      // 1, 2, ..., 12\n      case 'L':\n        return String(month + 1);\n      // 01, 02, ..., 12\n\n      case 'LL':\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n\n      case 'Lo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'LLL':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // J, F, ..., D\n\n      case 'LLLLL':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // January, February, ..., December\n\n      case 'LLLL':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Local week of year\n  w: function w(date, token, localize, options) {\n    var week = getUTCWeek(date, options);\n    if (token === 'wo') {\n      return localize.ordinalNumber(week, {\n        unit: 'week'\n      });\n    }\n    return addLeadingZeros(week, token.length);\n  },\n  // ISO week of year\n  I: function I(date, token, localize) {\n    var isoWeek = getUTCISOWeek(date);\n    if (token === 'Io') {\n      return localize.ordinalNumber(isoWeek, {\n        unit: 'week'\n      });\n    }\n    return addLeadingZeros(isoWeek, token.length);\n  },\n  // Day of the month\n  d: function d(date, token, localize) {\n    if (token === 'do') {\n      return localize.ordinalNumber(date.getUTCDate(), {\n        unit: 'date'\n      });\n    }\n    return formatters$2.d(date, token);\n  },\n  // Day of year\n  D: function D(date, token, localize) {\n    var dayOfYear = getUTCDayOfYear(date);\n    if (token === 'Do') {\n      return localize.ordinalNumber(dayOfYear, {\n        unit: 'dayOfYear'\n      });\n    }\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n  // Day of week\n  E: function E(date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n    switch (token) {\n      // Tue\n      case 'E':\n      case 'EE':\n      case 'EEE':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'EEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'EEEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'EEEE':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Local day of week\n  e: function e(date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case 'e':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'ee':\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n\n      case 'eo':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n      case 'eee':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'eeeee':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'eeeeee':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'eeee':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone local day of week\n  c: function c(date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case 'c':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'cc':\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n\n      case 'co':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n      case 'ccc':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // T\n\n      case 'ccccc':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // Tu\n\n      case 'cccccc':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'standalone'\n        });\n      // Tuesday\n\n      case 'cccc':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // ISO day of week\n  i: function i(date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n    switch (token) {\n      // 2\n      case 'i':\n        return String(isoDayOfWeek);\n      // 02\n\n      case 'ii':\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n\n      case 'io':\n        return localize.ordinalNumber(isoDayOfWeek, {\n          unit: 'day'\n        });\n      // Tue\n\n      case 'iii':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'iiiii':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'iiiiii':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'iiii':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM or PM\n  a: function a(date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n    switch (token) {\n      case 'a':\n      case 'aa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      case 'aaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }).toLowerCase();\n      case 'aaaaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      case 'aaaa':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM, PM, midnight, noon\n  b: function b(date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n    }\n    switch (token) {\n      case 'b':\n      case 'bb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      case 'bbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }).toLowerCase();\n      case 'bbbbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      case 'bbbb':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // in the morning, in the afternoon, in the evening, at night\n  B: function B(date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n    switch (token) {\n      case 'B':\n      case 'BB':\n      case 'BBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      case 'BBBBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      case 'BBBB':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Hour [1-12]\n  h: function h(date, token, localize) {\n    if (token === 'ho') {\n      var hours = date.getUTCHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n    return formatters$2.h(date, token);\n  },\n  // Hour [0-23]\n  H: function H(date, token, localize) {\n    if (token === 'Ho') {\n      return localize.ordinalNumber(date.getUTCHours(), {\n        unit: 'hour'\n      });\n    }\n    return formatters$2.H(date, token);\n  },\n  // Hour [0-11]\n  K: function K(date, token, localize) {\n    var hours = date.getUTCHours() % 12;\n    if (token === 'Ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n    return addLeadingZeros(hours, token.length);\n  },\n  // Hour [1-24]\n  k: function k(date, token, localize) {\n    var hours = date.getUTCHours();\n    if (hours === 0) hours = 24;\n    if (token === 'ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n    return addLeadingZeros(hours, token.length);\n  },\n  // Minute\n  m: function m(date, token, localize) {\n    if (token === 'mo') {\n      return localize.ordinalNumber(date.getUTCMinutes(), {\n        unit: 'minute'\n      });\n    }\n    return formatters$2.m(date, token);\n  },\n  // Second\n  s: function s(date, token, localize) {\n    if (token === 'so') {\n      return localize.ordinalNumber(date.getUTCSeconds(), {\n        unit: 'second'\n      });\n    }\n    return formatters$2.s(date, token);\n  },\n  // Fraction of second\n  S: function S(date, token) {\n    return formatters$2.S(date, token);\n  },\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function X(date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n    if (timezoneOffset === 0) {\n      return 'Z';\n    }\n    switch (token) {\n      // Hours and optional minutes\n      case 'X':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n\n      case 'XXXX':\n      case 'XX':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n\n      case 'XXXXX':\n      case 'XXX': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function x(date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n    switch (token) {\n      // Hours and optional minutes\n      case 'x':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n\n      case 'xxxx':\n      case 'xx':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n\n      case 'xxxxx':\n      case 'xxx': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (GMT)\n  O: function O(date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n    switch (token) {\n      // Short\n      case 'O':\n      case 'OO':\n      case 'OOO':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'OOOO':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (specific non-location)\n  z: function z(date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n    switch (token) {\n      // Short\n      case 'z':\n      case 'zz':\n      case 'zzz':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'zzzz':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Seconds timestamp\n  t: function t(date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = Math.floor(originalDate.getTime() / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n  // Milliseconds timestamp\n  T: function T(date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = originalDate.getTime();\n    return addLeadingZeros(timestamp, token.length);\n  }\n};\nfunction formatTimezoneShort(offset, dirtyDelimiter) {\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = Math.floor(absOffset / 60);\n  var minutes = absOffset % 60;\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n  var delimiter = dirtyDelimiter || '';\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\nfunction formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {\n  if (offset % 60 === 0) {\n    var sign = offset > 0 ? '-' : '+';\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n  return formatTimezone(offset, dirtyDelimiter);\n}\nfunction formatTimezone(offset, dirtyDelimiter) {\n  var delimiter = dirtyDelimiter || '';\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);\n  var minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\nvar formatters$1 = formatters;\nfunction dateLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'P':\n      return formatLong.date({\n        width: 'short'\n      });\n    case 'PP':\n      return formatLong.date({\n        width: 'medium'\n      });\n    case 'PPP':\n      return formatLong.date({\n        width: 'long'\n      });\n    case 'PPPP':\n    default:\n      return formatLong.date({\n        width: 'full'\n      });\n  }\n}\nfunction timeLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'p':\n      return formatLong.time({\n        width: 'short'\n      });\n    case 'pp':\n      return formatLong.time({\n        width: 'medium'\n      });\n    case 'ppp':\n      return formatLong.time({\n        width: 'long'\n      });\n    case 'pppp':\n    default:\n      return formatLong.time({\n        width: 'full'\n      });\n  }\n}\nfunction dateTimeLongFormatter(pattern, formatLong) {\n  var matchResult = pattern.match(/(P+)(p+)?/);\n  var datePattern = matchResult[1];\n  var timePattern = matchResult[2];\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n  var dateTimeFormat;\n  switch (datePattern) {\n    case 'P':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'short'\n      });\n      break;\n    case 'PP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'medium'\n      });\n      break;\n    case 'PPP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'long'\n      });\n      break;\n    case 'PPPP':\n    default:\n      dateTimeFormat = formatLong.dateTime({\n        width: 'full'\n      });\n      break;\n  }\n  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));\n}\nvar longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter\n};\nvar longFormatters$1 = longFormatters;\n\n/**\r\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\r\n * They usually appear for dates that denote time before the timezones were introduced\r\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\r\n * and GMT+01:00:00 after that date)\r\n *\r\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\r\n * which would lead to incorrect calculations.\r\n *\r\n * This function returns the timezone offset in milliseconds that takes seconds in account.\r\n */\nfunction getTimezoneOffsetInMilliseconds(date) {\n  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n  utcDate.setUTCFullYear(date.getFullYear());\n  return date.getTime() - utcDate.getTime();\n}\nvar protectedDayOfYearTokens = ['D', 'DD'];\nvar protectedWeekYearTokens = ['YY', 'YYYY'];\nfunction isProtectedDayOfYearToken(token) {\n  return protectedDayOfYearTokens.indexOf(token) !== -1;\n}\nfunction isProtectedWeekYearToken(token) {\n  return protectedWeekYearTokens.indexOf(token) !== -1;\n}\nfunction throwProtectedError(token, format, input) {\n  if (token === 'YYYY') {\n    throw new RangeError(\"Use `yyyy` instead of `YYYY` (in `\".concat(format, \"`) for formatting years to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'YY') {\n    throw new RangeError(\"Use `yy` instead of `YY` (in `\".concat(format, \"`) for formatting years to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'D') {\n    throw new RangeError(\"Use `d` instead of `D` (in `\".concat(format, \"`) for formatting days of the month to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'DD') {\n    throw new RangeError(\"Use `dd` instead of `DD` (in `\".concat(format, \"`) for formatting days of the month to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  }\n}\n\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\n\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\r\n * @name format\r\n * @category Common Helpers\r\n * @summary Format the date.\r\n *\r\n * @description\r\n * Return the formatted date string in the given format. The result may vary by locale.\r\n *\r\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\r\n * > See: https://git.io/fxCyr\r\n *\r\n * The characters wrapped between two single quotes characters (') are escaped.\r\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\r\n * (see the last example)\r\n *\r\n * Format of the string is based on Unicode Technical Standard #35:\r\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\r\n * with a few additions (see note 7 below the table).\r\n *\r\n * Accepted patterns:\r\n * | Unit                            | Pattern | Result examples                   | Notes |\r\n * |---------------------------------|---------|-----------------------------------|-------|\r\n * | Era                             | G..GGG  | AD, BC                            |       |\r\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\r\n * |                                 | GGGGG   | A, B                              |       |\r\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\r\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\r\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\r\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\r\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\r\n * |                                 | yyyyy   | ...                               | 3,5   |\r\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\r\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\r\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\r\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\r\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\r\n * |                                 | YYYYY   | ...                               | 3,5   |\r\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\r\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\r\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\r\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\r\n * |                                 | RRRRR   | ...                               | 3,5,7 |\r\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\r\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\r\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\r\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\r\n * |                                 | uuuuu   | ...                               | 3,5   |\r\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\r\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\r\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\r\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\r\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\r\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\r\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\r\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\r\n * |                                 | qq      | 01, 02, 03, 04                    |       |\r\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\r\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\r\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\r\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\r\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\r\n * |                                 | MM      | 01, 02, ..., 12                   |       |\r\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\r\n * |                                 | MMMM    | January, February, ..., December  | 2     |\r\n * |                                 | MMMMM   | J, F, ..., D                      |       |\r\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\r\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\r\n * |                                 | LL      | 01, 02, ..., 12                   |       |\r\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\r\n * |                                 | LLLL    | January, February, ..., December  | 2     |\r\n * |                                 | LLLLL   | J, F, ..., D                      |       |\r\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\r\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\r\n * |                                 | ww      | 01, 02, ..., 53                   |       |\r\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\r\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\r\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\r\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\r\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\r\n * |                                 | dd      | 01, 02, ..., 31                   |       |\r\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\r\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\r\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\r\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\r\n * |                                 | DDDD    | ...                               | 3     |\r\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\r\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\r\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\r\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\r\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\r\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\r\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\r\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\r\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\r\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\r\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\r\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\r\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\r\n * |                                 | ee      | 02, 03, ..., 01                   |       |\r\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\r\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\r\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\r\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\r\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\r\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\r\n * |                                 | cc      | 02, 03, ..., 01                   |       |\r\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\r\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\r\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\r\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\r\n * | AM, PM                          | a..aa   | AM, PM                            |       |\r\n * |                                 | aaa     | am, pm                            |       |\r\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\r\n * |                                 | aaaaa   | a, p                              |       |\r\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\r\n * |                                 | bbb     | am, pm, noon, midnight            |       |\r\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\r\n * |                                 | bbbbb   | a, p, n, mi                       |       |\r\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\r\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\r\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\r\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\r\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\r\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\r\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\r\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\r\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\r\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\r\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\r\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\r\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\r\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\r\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\r\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\r\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\r\n * |                                 | mm      | 00, 01, ..., 59                   |       |\r\n * | Second                          | s       | 0, 1, ..., 59                     |       |\r\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\r\n * |                                 | ss      | 00, 01, ..., 59                   |       |\r\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\r\n * |                                 | SS      | 00, 01, ..., 99                   |       |\r\n * |                                 | SSS     | 000, 001, ..., 999                |       |\r\n * |                                 | SSSS    | ...                               | 3     |\r\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\r\n * |                                 | XX      | -0800, +0530, Z                   |       |\r\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\r\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\r\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\r\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\r\n * |                                 | xx      | -0800, +0530, +0000               |       |\r\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\r\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\r\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\r\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\r\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\r\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\r\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\r\n * | Seconds timestamp               | t       | 512969520                         | 7     |\r\n * |                                 | tt      | ...                               | 3,7   |\r\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\r\n * |                                 | TT      | ...                               | 3,7   |\r\n * | Long localized date             | P       | 04/29/1453                        | 7     |\r\n * |                                 | PP      | Apr 29, 1453                      | 7     |\r\n * |                                 | PPP     | April 29th, 1453                  | 7     |\r\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\r\n * | Long localized time             | p       | 12:00 AM                          | 7     |\r\n * |                                 | pp      | 12:00:00 AM                       | 7     |\r\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\r\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\r\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\r\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\r\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\r\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\r\n * Notes:\r\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\r\n *    are the same as \"stand-alone\" units, but are different in some languages.\r\n *    \"Formatting\" units are declined according to the rules of the language\r\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\r\n *\r\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\r\n *\r\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\r\n *\r\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\r\n *    the single quote characters (see below).\r\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\r\n *    the output will be the same as default pattern for this unit, usually\r\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\r\n *    are marked with \"2\" in the last column of the table.\r\n *\r\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\r\n *\r\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\r\n *\r\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\r\n *\r\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\r\n *\r\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\r\n *\r\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\r\n *    The output will be padded with zeros to match the length of the pattern.\r\n *\r\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\r\n *\r\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\r\n *    These tokens represent the shortest form of the quarter.\r\n *\r\n * 5. The main difference between `y` and `u` patterns are B.C. years:\r\n *\r\n *    | Year | `y` | `u` |\r\n *    |------|-----|-----|\r\n *    | AC 1 |   1 |   1 |\r\n *    | BC 1 |   1 |   0 |\r\n *    | BC 2 |   2 |  -1 |\r\n *\r\n *    Also `yy` always returns the last two digits of a year,\r\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\r\n *\r\n *    | Year | `yy` | `uu` |\r\n *    |------|------|------|\r\n *    | 1    |   01 |   01 |\r\n *    | 14   |   14 |   14 |\r\n *    | 376  |   76 |  376 |\r\n *    | 1453 |   53 | 1453 |\r\n *\r\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\r\n *    except local week-numbering years are dependent on `options.weekStartsOn`\r\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}\r\n *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).\r\n *\r\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\r\n *    so right now these tokens fall back to GMT timezones.\r\n *\r\n * 7. These patterns are not in the Unicode Technical Standard #35:\r\n *    - `i`: ISO day of week\r\n *    - `I`: ISO week of year\r\n *    - `R`: ISO week-numbering year\r\n *    - `t`: seconds timestamp\r\n *    - `T`: milliseconds timestamp\r\n *    - `o`: ordinal number modifier\r\n *    - `P`: long localized date\r\n *    - `p`: long localized time\r\n *\r\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\r\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\r\n *\r\n * 9. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\r\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * - The second argument is now required for the sake of explicitness.\r\n *\r\n *   ```javascript\r\n *   // Before v2.0.0\r\n *   format(new Date(2016, 0, 1))\r\n *\r\n *   // v2.0.0 onward\r\n *   format(new Date(2016, 0, 1), \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\")\r\n *   ```\r\n *\r\n * - New format string API for `format` function\r\n *   which is based on [Unicode Technical Standard #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).\r\n *   See [this post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.\r\n *\r\n * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.\r\n *\r\n * @param {Date|Number} date - the original date\r\n * @param {String} format - the string of tokens\r\n * @param {Object} [options] - an object with options.\r\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\r\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\r\n * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is\r\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\r\n *   see: https://git.io/fxCyr\r\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\r\n *   see: https://git.io/fxCyr\r\n * @returns {String} the formatted date string\r\n * @throws {TypeError} 2 arguments required\r\n * @throws {RangeError} `date` must not be Invalid Date\r\n * @throws {RangeError} `options.locale` must contain `localize` property\r\n * @throws {RangeError} `options.locale` must contain `formatLong` property\r\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\r\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\r\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\r\n * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\r\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\r\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\r\n * @throws {RangeError} format string contains an unescaped latin alphabet character\r\n *\r\n * @example\r\n * // Represent 11 February 2014 in middle-endian format:\r\n * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\r\n * //=> '02/11/2014'\r\n *\r\n * @example\r\n * // Represent 2 July 2014 in Esperanto:\r\n * import { eoLocale } from 'date-fns/locale/eo'\r\n * var result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\r\n *   locale: eoLocale\r\n * })\r\n * //=> '2-a de julio 2014'\r\n *\r\n * @example\r\n * // Escape string by single quote characters:\r\n * var result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\r\n * //=> \"3 o'clock\"\r\n */\n\nfunction format(dirtyDate, dirtyFormatStr, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var formatStr = String(dirtyFormatStr);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n  if (!locale.localize) {\n    throw new RangeError('locale must contain localize property');\n  }\n  if (!locale.formatLong) {\n    throw new RangeError('locale must contain formatLong property');\n  }\n  var originalDate = toDate(dirtyDate);\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376\n\n  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);\n  var utcDate = subMilliseconds(originalDate, timezoneOffset);\n  var formatterOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale,\n    _originalDate: originalDate\n  };\n  var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {\n    var firstCharacter = substring[0];\n    if (firstCharacter === 'p' || firstCharacter === 'P') {\n      var longFormatter = longFormatters$1[firstCharacter];\n      return longFormatter(substring, locale.formatLong, formatterOptions);\n    }\n    return substring;\n  }).join('').match(formattingTokensRegExp).map(function (substring) {\n    // Replace two single quote characters with one single quote character\n    if (substring === \"''\") {\n      return \"'\";\n    }\n    var firstCharacter = substring[0];\n    if (firstCharacter === \"'\") {\n      return cleanEscapedString(substring);\n    }\n    var formatter = formatters$1[firstCharacter];\n    if (formatter) {\n      if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, dirtyDate);\n      }\n      if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, dirtyDate);\n      }\n      return formatter(utcDate, substring, locale.localize, formatterOptions);\n    }\n    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n    }\n    return substring;\n  }).join('');\n  return result;\n}\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}\nexport { subMilliseconds as a, toInteger as b, defaultLocale as d, format as f, getTimezoneOffsetInMilliseconds as g, isSameDay as i, requiredArgs as r, startOfDay as s, toDate as t };","map":{"version":3,"names":["requiredArgs","required","args","length","TypeError","toDate","argument","arguments","argStr","Object","prototype","toString","call","Date","getTime","console","warn","Error","stack","NaN","startOfDay","dirtyDate","date","setHours","isSameDay","dirtyDateLeft","dirtyDateRight","dateLeftStartOfDay","dateRightStartOfDay","isDate","value","isValid","isNaN","Number","formatDistanceLocale","lessThanXSeconds","one","other","xSeconds","halfAMinute","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXWeeks","xWeeks","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","formatDistance","token","count","options","result","tokenValue","replace","addSuffix","comparison","buildFormatLongFn","undefined","width","String","defaultWidth","format","formats","dateFormats","full","long","medium","short","timeFormats","dateTimeFormats","formatLong","time","dateTime","formatRelativeLocale","lastWeek","yesterday","today","tomorrow","nextWeek","formatRelative","_date","_baseDate","_options","buildLocalizeFn","dirtyIndex","dirtyOptions","context","valuesArray","formattingValues","defaultFormattingWidth","_defaultWidth","_width","values","index","argumentCallback","eraValues","narrow","abbreviated","wide","quarterValues","monthValues","dayValues","dayPeriodValues","am","pm","midnight","noon","morning","afternoon","evening","night","formattingDayPeriodValues","ordinalNumber","dirtyNumber","number","rem100","localize","era","quarter","month","day","dayPeriod","buildMatchFn","string","matchPattern","matchPatterns","defaultMatchWidth","matchResult","match","matchedString","parsePatterns","defaultParseWidth","key","Array","isArray","findIndex","pattern","test","findKey","valueCallback","rest","slice","object","predicate","hasOwnProperty","array","buildMatchPatternFn","parseResult","parsePattern","matchOrdinalNumberPattern","parseOrdinalNumberPattern","matchEraPatterns","parseEraPatterns","any","matchQuarterPatterns","parseQuarterPatterns","matchMonthPatterns","parseMonthPatterns","matchDayPatterns","parseDayPatterns","matchDayPeriodPatterns","parseDayPeriodPatterns","parseInt","locale","code","weekStartsOn","firstWeekContainsDate","defaultLocale","toInteger","Math","ceil","floor","addMilliseconds","dirtyAmount","timestamp","amount","subMilliseconds","addLeadingZeros","targetLength","sign","output","abs","formatters$2","y","signedYear","getUTCFullYear","year","M","getUTCMonth","d","getUTCDate","a","dayPeriodEnumValue","getUTCHours","toUpperCase","h","H","m","getUTCMinutes","s","getUTCSeconds","S","numberOfDigits","milliseconds","getUTCMilliseconds","fractionalSeconds","pow","MILLISECONDS_IN_DAY","getUTCDayOfYear","setUTCMonth","setUTCHours","startOfYearTimestamp","difference","startOfUTCISOWeek","getUTCDay","diff","setUTCDate","getUTCISOWeekYear","fourthOfJanuaryOfNextYear","setUTCFullYear","startOfNextYear","fourthOfJanuaryOfThisYear","startOfThisYear","startOfUTCISOWeekYear","fourthOfJanuary","MILLISECONDS_IN_WEEK$1","getUTCISOWeek","round","startOfUTCWeek","localeWeekStartsOn","defaultWeekStartsOn","RangeError","getUTCWeekYear","localeFirstWeekContainsDate","defaultFirstWeekContainsDate","firstWeekOfNextYear","firstWeekOfThisYear","startOfUTCWeekYear","firstWeek","MILLISECONDS_IN_WEEK","getUTCWeek","dayPeriodEnum","formatters","G","unit","Y","signedWeekYear","weekYear","twoDigitYear","R","isoWeekYear","u","Q","q","L","w","week","I","isoWeek","D","dayOfYear","E","dayOfWeek","e","localDayOfWeek","c","i","isoDayOfWeek","hours","toLowerCase","b","B","K","k","X","_localize","originalDate","_originalDate","timezoneOffset","getTimezoneOffset","formatTimezoneWithOptionalMinutes","formatTimezone","x","O","formatTimezoneShort","z","t","T","offset","dirtyDelimiter","absOffset","minutes","delimiter","formatters$1","dateLongFormatter","timeLongFormatter","dateTimeLongFormatter","datePattern","timePattern","dateTimeFormat","longFormatters","p","P","longFormatters$1","getTimezoneOffsetInMilliseconds","utcDate","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","protectedDayOfYearTokens","protectedWeekYearTokens","isProtectedDayOfYearToken","indexOf","isProtectedWeekYearToken","throwProtectedError","input","concat","formattingTokensRegExp","longFormattingTokensRegExp","escapedStringRegExp","doubleQuoteRegExp","unescapedLatinCharacterRegExp","dirtyFormatStr","formatStr","formatterOptions","map","substring","firstCharacter","longFormatter","join","cleanEscapedString","formatter","useAdditionalWeekYearTokens","useAdditionalDayOfYearTokens"],"sources":["C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\_lib\\requiredArgs\\index.js","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\toDate\\index.js","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\startOfDay\\index.js","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\isSameDay\\index.js","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\isDate\\index.js","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\isValid\\index.js","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\locale\\en-US\\_lib\\formatDistance\\index.js","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\locale\\_lib\\buildFormatLongFn\\index.js","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\locale\\en-US\\_lib\\formatLong\\index.js","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\locale\\en-US\\_lib\\formatRelative\\index.js","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\locale\\_lib\\buildLocalizeFn\\index.js","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\locale\\en-US\\_lib\\localize\\index.js","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\locale\\_lib\\buildMatchFn\\index.js","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\locale\\_lib\\buildMatchPatternFn\\index.js","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\locale\\en-US\\_lib\\match\\index.js","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\locale\\en-US\\index.js","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\_lib\\toInteger\\index.js","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\addMilliseconds\\index.js","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\subMilliseconds\\index.js","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\_lib\\addLeadingZeros\\index.js","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\_lib\\format\\lightFormatters\\index.js","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\_lib\\getUTCDayOfYear\\index.js","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\_lib\\startOfUTCISOWeek\\index.js","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\_lib\\getUTCISOWeekYear\\index.js","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\_lib\\startOfUTCISOWeekYear\\index.js","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\_lib\\getUTCISOWeek\\index.js","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\_lib\\startOfUTCWeek\\index.js","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\_lib\\getUTCWeekYear\\index.js","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\_lib\\startOfUTCWeekYear\\index.js","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\_lib\\getUTCWeek\\index.js","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\_lib\\format\\formatters\\index.js","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\_lib\\format\\longFormatters\\index.js","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\_lib\\getTimezoneOffsetInMilliseconds\\index.js","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\_lib\\protectedTokens\\index.js","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\node_modules\\date-fns\\esm\\format\\index.js"],"sourcesContent":["export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\n\nexport default function startOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import startOfDay from \"../startOfDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isSameDay\n * @category Day Helpers\n * @summary Are the given dates in the same day?\n *\n * @description\n * Are the given dates in the same day?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to check\n * @param {Date|Number} dateRight - the second date to check\n * @returns {Boolean} the dates are in the same day\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?\n * var result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))\n * //=> true\n */\n\nexport default function isSameDay(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeftStartOfDay = startOfDay(dirtyDateLeft);\n  var dateRightStartOfDay = startOfDay(dirtyDateRight);\n  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {*} value - the value to check\n * @returns {boolean} true if the given value is a date\n * @throws {TypeError} 1 arguments required\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\n\nexport default function isDate(value) {\n  requiredArgs(1, arguments);\n  return value instanceof Date || typeof value === 'object' && Object.prototype.toString.call(value) === '[object Date]';\n}","import isDate from \"../isDate/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Now `isValid` doesn't throw an exception\n *   if the first argument is not an instance of Date.\n *   Instead, argument is converted beforehand using `toDate`.\n *\n *   Examples:\n *\n *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |\n *   |---------------------------|---------------|---------------|\n *   | `new Date()`              | `true`        | `true`        |\n *   | `new Date('2016-01-01')`  | `true`        | `true`        |\n *   | `new Date('')`            | `false`       | `false`       |\n *   | `new Date(1488370835081)` | `true`        | `true`        |\n *   | `new Date(NaN)`           | `false`       | `false`       |\n *   | `'2016-01-01'`            | `TypeError`   | `false`       |\n *   | `''`                      | `TypeError`   | `false`       |\n *   | `1488370835081`           | `TypeError`   | `true`        |\n *   | `NaN`                     | `TypeError`   | `false`       |\n *\n *   We introduce this change to make *date-fns* consistent with ECMAScript behavior\n *   that try to coerce arguments to the expected type\n *   (which is also the case with other *date-fns* functions).\n *\n * @param {*} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\n\nexport default function isValid(dirtyDate) {\n  requiredArgs(1, arguments);\n\n  if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {\n    return false;\n  }\n\n  var date = toDate(dirtyDate);\n  return !isNaN(Number(date));\n}","var formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: 'less than a second',\n    other: 'less than {{count}} seconds'\n  },\n  xSeconds: {\n    one: '1 second',\n    other: '{{count}} seconds'\n  },\n  halfAMinute: 'half a minute',\n  lessThanXMinutes: {\n    one: 'less than a minute',\n    other: 'less than {{count}} minutes'\n  },\n  xMinutes: {\n    one: '1 minute',\n    other: '{{count}} minutes'\n  },\n  aboutXHours: {\n    one: 'about 1 hour',\n    other: 'about {{count}} hours'\n  },\n  xHours: {\n    one: '1 hour',\n    other: '{{count}} hours'\n  },\n  xDays: {\n    one: '1 day',\n    other: '{{count}} days'\n  },\n  aboutXWeeks: {\n    one: 'about 1 week',\n    other: 'about {{count}} weeks'\n  },\n  xWeeks: {\n    one: '1 week',\n    other: '{{count}} weeks'\n  },\n  aboutXMonths: {\n    one: 'about 1 month',\n    other: 'about {{count}} months'\n  },\n  xMonths: {\n    one: '1 month',\n    other: '{{count}} months'\n  },\n  aboutXYears: {\n    one: 'about 1 year',\n    other: 'about {{count}} years'\n  },\n  xYears: {\n    one: '1 year',\n    other: '{{count}} years'\n  },\n  overXYears: {\n    one: 'over 1 year',\n    other: 'over {{count}} years'\n  },\n  almostXYears: {\n    one: 'almost 1 year',\n    other: 'almost {{count}} years'\n  }\n};\n\nvar formatDistance = function (token, count, options) {\n  var result;\n  var tokenValue = formatDistanceLocale[token];\n\n  if (typeof tokenValue === 'string') {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace('{{count}}', count.toString());\n  }\n\n  if (options !== null && options !== void 0 && options.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return 'in ' + result;\n    } else {\n      return result + ' ago';\n    }\n  }\n\n  return result;\n};\n\nexport default formatDistance;","export default function buildFormatLongFn(args) {\n  return function () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // TODO: Remove String()\n    var width = options.width ? String(options.width) : args.defaultWidth;\n    var format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}","import buildFormatLongFn from \"../../../_lib/buildFormatLongFn/index.js\";\nvar dateFormats = {\n  full: 'EEEE, MMMM do, y',\n  long: 'MMMM do, y',\n  medium: 'MMM d, y',\n  short: 'MM/dd/yyyy'\n};\nvar timeFormats = {\n  full: 'h:mm:ss a zzzz',\n  long: 'h:mm:ss a z',\n  medium: 'h:mm:ss a',\n  short: 'h:mm a'\n};\nvar dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: '{{date}}, {{time}}',\n  short: '{{date}}, {{time}}'\n};\nvar formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: 'full'\n  }),\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: 'full'\n  }),\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: 'full'\n  })\n};\nexport default formatLong;","var formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: 'P'\n};\n\nvar formatRelative = function (token, _date, _baseDate, _options) {\n  return formatRelativeLocale[token];\n};\n\nexport default formatRelative;","export default function buildLocalizeFn(args) {\n  return function (dirtyIndex, dirtyOptions) {\n    var options = dirtyOptions || {};\n    var context = options.context ? String(options.context) : 'standalone';\n    var valuesArray;\n\n    if (context === 'formatting' && args.formattingValues) {\n      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      var width = options.width ? String(options.width) : defaultWidth;\n      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      var _defaultWidth = args.defaultWidth;\n\n      var _width = options.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[_width] || args.values[_defaultWidth];\n    }\n\n    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex; // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challange you to try to remove it!\n\n    return valuesArray[index];\n  };\n}","import buildLocalizeFn from \"../../../_lib/buildLocalizeFn/index.js\";\nvar eraValues = {\n  narrow: ['B', 'A'],\n  abbreviated: ['BC', 'AD'],\n  wide: ['Before Christ', 'Anno Domini']\n};\nvar quarterValues = {\n  narrow: ['1', '2', '3', '4'],\n  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],\n  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']\n}; // Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\n\nvar monthValues = {\n  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n};\nvar dayValues = {\n  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n};\nvar dayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  }\n};\nvar formattingDayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  }\n};\n\nvar ordinalNumber = function (dirtyNumber, _options) {\n  var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`.\n  //\n  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'.\n\n  var rem100 = number % 100;\n\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + 'st';\n\n      case 2:\n        return number + 'nd';\n\n      case 3:\n        return number + 'rd';\n    }\n  }\n\n  return number + 'th';\n};\n\nvar localize = {\n  ordinalNumber: ordinalNumber,\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: 'wide'\n  }),\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: 'wide',\n    argumentCallback: function (quarter) {\n      return quarter - 1;\n    }\n  }),\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: 'wide'\n  }),\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: 'wide'\n  }),\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: 'wide',\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: 'wide'\n  })\n};\nexport default localize;","export default function buildMatchFn(args) {\n  return function (string) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var width = options.width;\n    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];\n    var matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n\n    var matchedString = matchResult[0];\n    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];\n    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {\n      return pattern.test(matchedString);\n    }) : findKey(parsePatterns, function (pattern) {\n      return pattern.test(matchedString);\n    });\n    var value;\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    var rest = string.slice(matchedString.length);\n    return {\n      value: value,\n      rest: rest\n    };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (var key in object) {\n    if (object.hasOwnProperty(key) && predicate(object[key])) {\n      return key;\n    }\n  }\n\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (var key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n\n  return undefined;\n}","export default function buildMatchPatternFn(args) {\n  return function (string) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    var matchedString = matchResult[0];\n    var parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    var rest = string.slice(matchedString.length);\n    return {\n      value: value,\n      rest: rest\n    };\n  };\n}","import buildMatchFn from \"../../../_lib/buildMatchFn/index.js\";\nimport buildMatchPatternFn from \"../../../_lib/buildMatchPatternFn/index.js\";\nvar matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nvar parseOrdinalNumberPattern = /\\d+/i;\nvar matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i\n};\nvar parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i]\n};\nvar matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i\n};\nvar parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i]\n};\nvar matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i\n};\nvar parseMonthPatterns = {\n  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],\n  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]\n};\nvar matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i\n};\nvar parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]\n};\nvar matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i\n};\nvar parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i\n  }\n};\nvar match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: function (value) {\n      return parseInt(value, 10);\n    }\n  }),\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: 'any'\n  }),\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: 'any',\n    valueCallback: function (index) {\n      return index + 1;\n    }\n  }),\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: 'any'\n  }),\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: 'any'\n  }),\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: 'any',\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: 'any'\n  })\n};\nexport default match;","import formatDistance from \"./_lib/formatDistance/index.js\";\nimport formatLong from \"./_lib/formatLong/index.js\";\nimport formatRelative from \"./_lib/formatRelative/index.js\";\nimport localize from \"./_lib/localize/index.js\";\nimport match from \"./_lib/match/index.js\";\n\n/**\n * @type {Locale}\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}\n * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}\n */\nvar locale = {\n  code: 'en-US',\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0\n    /* Sunday */\n    ,\n    firstWeekContainsDate: 1\n  }\n};\nexport default locale;","export default function toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\n\nexport default function addMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var timestamp = toDate(dirtyDate).getTime();\n  var amount = toInteger(dirtyAmount);\n  return new Date(timestamp + amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMilliseconds from \"../addMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subMilliseconds\n * @category Millisecond Helpers\n * @summary Subtract the specified number of milliseconds from the given date.\n *\n * @description\n * Subtract the specified number of milliseconds from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:\n * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:29.250\n */\n\nexport default function subMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, -amount);\n}","export default function addLeadingZeros(number, targetLength) {\n  var sign = number < 0 ? '-' : '';\n  var output = Math.abs(number).toString();\n\n  while (output.length < targetLength) {\n    output = '0' + output;\n  }\n\n  return sign + output;\n}","import addLeadingZeros from \"../../addLeadingZeros/index.js\";\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nvar formatters = {\n  // Year\n  y: function (date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n    var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);\n  },\n  // Month\n  M: function (date, token) {\n    var month = date.getUTCMonth();\n    return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n  // Day of the month\n  d: function (date, token) {\n    return addLeadingZeros(date.getUTCDate(), token.length);\n  },\n  // AM or PM\n  a: function (date, token) {\n    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n        return dayPeriodEnumValue.toUpperCase();\n\n      case 'aaa':\n        return dayPeriodEnumValue;\n\n      case 'aaaaa':\n        return dayPeriodEnumValue[0];\n\n      case 'aaaa':\n      default:\n        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';\n    }\n  },\n  // Hour [1-12]\n  h: function (date, token) {\n    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);\n  },\n  // Hour [0-23]\n  H: function (date, token) {\n    return addLeadingZeros(date.getUTCHours(), token.length);\n  },\n  // Minute\n  m: function (date, token) {\n    return addLeadingZeros(date.getUTCMinutes(), token.length);\n  },\n  // Second\n  s: function (date, token) {\n    return addLeadingZeros(date.getUTCSeconds(), token.length);\n  },\n  // Fraction of second\n  S: function (date, token) {\n    var numberOfDigits = token.length;\n    var milliseconds = date.getUTCMilliseconds();\n    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));\n    return addLeadingZeros(fractionalSeconds, token.length);\n  }\n};\nexport default formatters;","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_DAY = 86400000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCDayOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var timestamp = date.getTime();\n  date.setUTCMonth(0, 1);\n  date.setUTCHours(0, 0, 0, 0);\n  var startOfYearTimestamp = date.getTime();\n  var difference = timestamp - startOfYearTimestamp;\n  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var weekStartsOn = 1;\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport startOfUTCISOWeek from \"../startOfUTCISOWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getUTCFullYear();\n  var fourthOfJanuaryOfNextYear = new Date(0);\n  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);\n  var fourthOfJanuaryOfThisYear = new Date(0);\n  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","import getUTCISOWeekYear from \"../getUTCISOWeekYear/index.js\";\nimport startOfUTCISOWeek from \"../startOfUTCISOWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var year = getUTCISOWeekYear(dirtyDate);\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setUTCFullYear(year, 0, 4);\n  fourthOfJanuary.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCISOWeek(fourthOfJanuary);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport startOfUTCISOWeek from \"../startOfUTCISOWeek/index.js\";\nimport startOfUTCISOWeekYear from \"../startOfUTCISOWeekYear/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import toInteger from \"../toInteger/index.js\";\nimport toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","import toInteger from \"../toInteger/index.js\";\nimport toDate from \"../../toDate/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate, dirtyOptions);\n  var year = date.getUTCFullYear();\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var firstWeekOfNextYear = new Date(0);\n  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);\n  var firstWeekOfThisYear = new Date(0);\n  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","import toInteger from \"../toInteger/index.js\";\nimport getUTCWeekYear from \"../getUTCWeekYear/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);\n  var year = getUTCWeekYear(dirtyDate, dirtyOptions);\n  var firstWeek = new Date(0);\n  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCWeek(firstWeek, dirtyOptions);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nimport startOfUTCWeekYear from \"../startOfUTCWeekYear/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCWeek(dirtyDate, options) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import lightFormatters from \"../lightFormatters/index.js\";\nimport getUTCDayOfYear from \"../../../_lib/getUTCDayOfYear/index.js\";\nimport getUTCISOWeek from \"../../../_lib/getUTCISOWeek/index.js\";\nimport getUTCISOWeekYear from \"../../../_lib/getUTCISOWeekYear/index.js\";\nimport getUTCWeek from \"../../../_lib/getUTCWeek/index.js\";\nimport getUTCWeekYear from \"../../../_lib/getUTCWeekYear/index.js\";\nimport addLeadingZeros from \"../../addLeadingZeros/index.js\";\nvar dayPeriodEnum = {\n  am: 'am',\n  pm: 'pm',\n  midnight: 'midnight',\n  noon: 'noon',\n  morning: 'morning',\n  afternoon: 'afternoon',\n  evening: 'evening',\n  night: 'night'\n};\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nvar formatters = {\n  // Era\n  G: function (date, token, localize) {\n    var era = date.getUTCFullYear() > 0 ? 1 : 0;\n\n    switch (token) {\n      // AD, BC\n      case 'G':\n      case 'GG':\n      case 'GGG':\n        return localize.era(era, {\n          width: 'abbreviated'\n        });\n      // A, B\n\n      case 'GGGGG':\n        return localize.era(era, {\n          width: 'narrow'\n        });\n      // Anno Domini, Before Christ\n\n      case 'GGGG':\n      default:\n        return localize.era(era, {\n          width: 'wide'\n        });\n    }\n  },\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === 'yo') {\n      var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n      var year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, {\n        unit: 'year'\n      });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    var signedWeekYear = getUTCWeekYear(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year\n\n    if (token === 'YY') {\n      var twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    } // Ordinal number\n\n\n    if (token === 'Yo') {\n      return localize.ordinalNumber(weekYear, {\n        unit: 'year'\n      });\n    } // Padding\n\n\n    return addLeadingZeros(weekYear, token.length);\n  },\n  // ISO week-numbering year\n  R: function (date, token) {\n    var isoWeekYear = getUTCISOWeekYear(date); // Padding\n\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    var year = date.getUTCFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n  // Quarter\n  Q: function (date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'Q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'QQ':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'Qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'QQQ':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'QQQQQ':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'QQQQ':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'qq':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'qqq':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'qqqqq':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'qqqq':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Month\n  M: function (date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      case 'M':\n      case 'MM':\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n\n      case 'Mo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'MMM':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // J, F, ..., D\n\n      case 'MMMMM':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // January, February, ..., December\n\n      case 'MMMM':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone month\n  L: function (date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case 'L':\n        return String(month + 1);\n      // 01, 02, ..., 12\n\n      case 'LL':\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n\n      case 'Lo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'LLL':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // J, F, ..., D\n\n      case 'LLLLL':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // January, February, ..., December\n\n      case 'LLLL':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Local week of year\n  w: function (date, token, localize, options) {\n    var week = getUTCWeek(date, options);\n\n    if (token === 'wo') {\n      return localize.ordinalNumber(week, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n  // ISO week of year\n  I: function (date, token, localize) {\n    var isoWeek = getUTCISOWeek(date);\n\n    if (token === 'Io') {\n      return localize.ordinalNumber(isoWeek, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === 'do') {\n      return localize.ordinalNumber(date.getUTCDate(), {\n        unit: 'date'\n      });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n  // Day of year\n  D: function (date, token, localize) {\n    var dayOfYear = getUTCDayOfYear(date);\n\n    if (token === 'Do') {\n      return localize.ordinalNumber(dayOfYear, {\n        unit: 'dayOfYear'\n      });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n  // Day of week\n  E: function (date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n\n    switch (token) {\n      // Tue\n      case 'E':\n      case 'EE':\n      case 'EEE':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'EEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'EEEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'EEEE':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Local day of week\n  e: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case 'e':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'ee':\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n\n      case 'eo':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'eee':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'eeeee':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'eeeeee':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'eeee':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case 'c':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'cc':\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n\n      case 'co':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'ccc':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // T\n\n      case 'ccccc':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // Tu\n\n      case 'cccccc':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'standalone'\n        });\n      // Tuesday\n\n      case 'cccc':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // ISO day of week\n  i: function (date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n\n    switch (token) {\n      // 2\n      case 'i':\n        return String(isoDayOfWeek);\n      // 02\n\n      case 'ii':\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n\n      case 'io':\n        return localize.ordinalNumber(isoDayOfWeek, {\n          unit: 'day'\n        });\n      // Tue\n\n      case 'iii':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'iiiii':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'iiiiii':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'iiii':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM or PM\n  a: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'aaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }).toLowerCase();\n\n      case 'aaaaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'aaaa':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n    }\n\n    switch (token) {\n      case 'b':\n      case 'bb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'bbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }).toLowerCase();\n\n      case 'bbbbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'bbbb':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case 'B':\n      case 'BB':\n      case 'BBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'BBBBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'BBBB':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === 'ho') {\n      var hours = date.getUTCHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === 'Ho') {\n      return localize.ordinalNumber(date.getUTCHours(), {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    var hours = date.getUTCHours() % 12;\n\n    if (token === 'Ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    if (hours === 0) hours = 24;\n\n    if (token === 'ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Minute\n  m: function (date, token, localize) {\n    if (token === 'mo') {\n      return localize.ordinalNumber(date.getUTCMinutes(), {\n        unit: 'minute'\n      });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n  // Second\n  s: function (date, token, localize) {\n    if (token === 'so') {\n      return localize.ordinalNumber(date.getUTCSeconds(), {\n        unit: 'second'\n      });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return 'Z';\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'X':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n\n      case 'XXXX':\n      case 'XX':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n\n      case 'XXXXX':\n      case 'XXX': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'x':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n\n      case 'xxxx':\n      case 'xx':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n\n      case 'xxxxx':\n      case 'xxx': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (GMT)\n  O: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'O':\n      case 'OO':\n      case 'OOO':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'OOOO':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (specific non-location)\n  z: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'z':\n      case 'zz':\n      case 'zzz':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'zzzz':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Seconds timestamp\n  t: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = Math.floor(originalDate.getTime() / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n  // Milliseconds timestamp\n  T: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = originalDate.getTime();\n    return addLeadingZeros(timestamp, token.length);\n  }\n};\n\nfunction formatTimezoneShort(offset, dirtyDelimiter) {\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = Math.floor(absOffset / 60);\n  var minutes = absOffset % 60;\n\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n\n  var delimiter = dirtyDelimiter || '';\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {\n  if (offset % 60 === 0) {\n    var sign = offset > 0 ? '-' : '+';\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n\n  return formatTimezone(offset, dirtyDelimiter);\n}\n\nfunction formatTimezone(offset, dirtyDelimiter) {\n  var delimiter = dirtyDelimiter || '';\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);\n  var minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n\nexport default formatters;","function dateLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'P':\n      return formatLong.date({\n        width: 'short'\n      });\n\n    case 'PP':\n      return formatLong.date({\n        width: 'medium'\n      });\n\n    case 'PPP':\n      return formatLong.date({\n        width: 'long'\n      });\n\n    case 'PPPP':\n    default:\n      return formatLong.date({\n        width: 'full'\n      });\n  }\n}\n\nfunction timeLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'p':\n      return formatLong.time({\n        width: 'short'\n      });\n\n    case 'pp':\n      return formatLong.time({\n        width: 'medium'\n      });\n\n    case 'ppp':\n      return formatLong.time({\n        width: 'long'\n      });\n\n    case 'pppp':\n    default:\n      return formatLong.time({\n        width: 'full'\n      });\n  }\n}\n\nfunction dateTimeLongFormatter(pattern, formatLong) {\n  var matchResult = pattern.match(/(P+)(p+)?/);\n  var datePattern = matchResult[1];\n  var timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  var dateTimeFormat;\n\n  switch (datePattern) {\n    case 'P':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'short'\n      });\n      break;\n\n    case 'PP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'medium'\n      });\n      break;\n\n    case 'PPP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'long'\n      });\n      break;\n\n    case 'PPPP':\n    default:\n      dateTimeFormat = formatLong.dateTime({\n        width: 'full'\n      });\n      break;\n  }\n\n  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));\n}\n\nvar longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter\n};\nexport default longFormatters;","/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport default function getTimezoneOffsetInMilliseconds(date) {\n  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n  utcDate.setUTCFullYear(date.getFullYear());\n  return date.getTime() - utcDate.getTime();\n}","var protectedDayOfYearTokens = ['D', 'DD'];\nvar protectedWeekYearTokens = ['YY', 'YYYY'];\nexport function isProtectedDayOfYearToken(token) {\n  return protectedDayOfYearTokens.indexOf(token) !== -1;\n}\nexport function isProtectedWeekYearToken(token) {\n  return protectedWeekYearTokens.indexOf(token) !== -1;\n}\nexport function throwProtectedError(token, format, input) {\n  if (token === 'YYYY') {\n    throw new RangeError(\"Use `yyyy` instead of `YYYY` (in `\".concat(format, \"`) for formatting years to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'YY') {\n    throw new RangeError(\"Use `yy` instead of `YY` (in `\".concat(format, \"`) for formatting years to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'D') {\n    throw new RangeError(\"Use `d` instead of `D` (in `\".concat(format, \"`) for formatting days of the month to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'DD') {\n    throw new RangeError(\"Use `dd` instead of `DD` (in `\".concat(format, \"`) for formatting days of the month to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  }\n}","import isValid from \"../isValid/index.js\";\nimport defaultLocale from \"../locale/en-US/index.js\";\nimport subMilliseconds from \"../subMilliseconds/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport formatters from \"../_lib/format/formatters/index.js\";\nimport longFormatters from \"../_lib/format/longFormatters/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport { isProtectedDayOfYearToken, isProtectedWeekYearToken, throwProtectedError } from \"../_lib/protectedTokens/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\"; // This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\n\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name format\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}\n *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 9. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The second argument is now required for the sake of explicitness.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   format(new Date(2016, 0, 1))\n *\n *   // v2.0.0 onward\n *   format(new Date(2016, 0, 1), \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\")\n *   ```\n *\n * - New format string API for `format` function\n *   which is based on [Unicode Technical Standard #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).\n *   See [this post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.\n *\n * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.\n *\n * @param {Date|Number} date - the original date\n * @param {String} format - the string of tokens\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://git.io/fxCyr\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://git.io/fxCyr\n * @returns {String} the formatted date string\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `localize` property\n * @throws {RangeError} `options.locale` must contain `formatLong` property\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * var result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * var result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\n\nexport default function format(dirtyDate, dirtyFormatStr, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var formatStr = String(dirtyFormatStr);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  if (!locale.localize) {\n    throw new RangeError('locale must contain localize property');\n  }\n\n  if (!locale.formatLong) {\n    throw new RangeError('locale must contain formatLong property');\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376\n\n\n  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);\n  var utcDate = subMilliseconds(originalDate, timezoneOffset);\n  var formatterOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale,\n    _originalDate: originalDate\n  };\n  var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === 'p' || firstCharacter === 'P') {\n      var longFormatter = longFormatters[firstCharacter];\n      return longFormatter(substring, locale.formatLong, formatterOptions);\n    }\n\n    return substring;\n  }).join('').match(formattingTokensRegExp).map(function (substring) {\n    // Replace two single quote characters with one single quote character\n    if (substring === \"''\") {\n      return \"'\";\n    }\n\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === \"'\") {\n      return cleanEscapedString(substring);\n    }\n\n    var formatter = formatters[firstCharacter];\n\n    if (formatter) {\n      if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, dirtyDate);\n      }\n\n      if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, dirtyDate);\n      }\n\n      return formatter(utcDate, substring, locale.localize, formatterOptions);\n    }\n\n    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n    }\n\n    return substring;\n  }).join('');\n  return result;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}"],"mappings":"AAAe,SAASA,YAAYA,CAACC,QAAQ,EAAEC,IAAI,EAAE;EACnD,IAAIA,IAAI,CAACC,MAAM,GAAGF,QAAQ,EAAE;IAC1B,MAAM,IAAIG,SAAS,CAACH,QAAQ,GAAG,WAAW,IAAIA,QAAQ,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,GAAG,sBAAsB,GAAGC,IAAI,CAACC,MAAM,GAAG,UAAU,CAAC;EAC/H;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,SAASE,MAAMA,CAACC,QAAQ,EAAE;EACvCN,YAAY,CAAC,CAAC,EAAEO,SAAS,CAAC;EAC1B,IAAIC,MAAM,GAAGC,MAAM,CAACC,SAAS,CAACC,QAAQ,CAACC,IAAI,CAACN,QAAQ,CAAC,CAAC;;EAEtD,IAAIA,QAAQ,YAAYO,IAAI,IAAI,OAAOP,QAAQ,KAAK,QAAQ,IAAIE,MAAM,KAAK,eAAe,EAAE;IAC9F;IACI,OAAO,IAAIK,IAAI,CAACP,QAAQ,CAACQ,OAAO,EAAE,CAAC;EACvC,CAAG,MAAM,IAAI,OAAOR,QAAQ,KAAK,QAAQ,IAAIE,MAAM,KAAK,iBAAiB,EAAE;IACvE,OAAO,IAAIK,IAAI,CAACP,QAAQ,CAAC;EAC7B,CAAG,MAAM;IACL,IAAI,CAAC,OAAOA,QAAQ,KAAK,QAAQ,IAAIE,MAAM,KAAK,iBAAiB,KAAK,OAAOO,OAAO,KAAK,WAAW,EAAE;MAC1G;MACMA,OAAO,CAACC,IAAI,CAAC,kJAAkJ,CAAC,CAAC;;MAEjKD,OAAO,CAACC,IAAI,CAAC,IAAIC,KAAK,EAAE,CAACC,KAAK,CAAC;IACrC;IAEI,OAAO,IAAIL,IAAI,CAACM,GAAG,CAAC;EACxB;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,SAASC,UAAUA,CAACC,SAAS,EAAE;EAC5CrB,YAAY,CAAC,CAAC,EAAEO,SAAS,CAAC;EAC1B,IAAIe,IAAI,GAAGjB,MAAM,CAACgB,SAAS,CAAC;EAC5BC,IAAI,CAACC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACzB,OAAOD,IAAI;AACb;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,SAASE,SAASA,CAACC,aAAa,EAAEC,cAAc,EAAE;EAC/D1B,YAAY,CAAC,CAAC,EAAEO,SAAS,CAAC;EAC1B,IAAIoB,kBAAkB,GAAGP,UAAU,CAACK,aAAa,CAAC;EAClD,IAAIG,mBAAmB,GAAGR,UAAU,CAACM,cAAc,CAAC;EACpD,OAAOC,kBAAkB,CAACb,OAAO,EAAE,KAAKc,mBAAmB,CAACd,OAAO,EAAE;AACvE;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,SAASe,MAAMA,CAACC,KAAK,EAAE;EACpC9B,YAAY,CAAC,CAAC,EAAEO,SAAS,CAAC;EAC1B,OAAOuB,KAAK,YAAYjB,IAAI,IAAI,OAAOiB,KAAK,KAAK,QAAQ,IAAIrB,MAAM,CAACC,SAAS,CAACC,QAAQ,CAACC,IAAI,CAACkB,KAAK,CAAC,KAAK,eAAe;AACxH;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}