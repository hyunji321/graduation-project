{"ast":null,"code":"import React__default, { useEffect, useCallback, useContext, useState, useReducer, useRef } from 'react';\nimport { _ as __assign, d as __spreadArray, c as LocalizationContext, w as withSendbirdContext } from './LocalizationContext-f9cc3a84.js';\nimport { f as format } from './index-e2d20807.js';\nimport { i as isToday, a as isYesterday, f as formatRelative } from './index-d00418ca.js';\nimport { A as Avatar, L as Label, a as LabelTypography, b as LabelColors, c as IconTypes, I as Icon, d as IconColors, P as PlaceHolder, i as PlaceHolderTypes } from './index-48f41226.js';\nimport 'prop-types';\nvar GET_SEARCHED_MESSAGES = 'GET_SEARCHED_MESSAGES';\nvar GET_NEXT_SEARCHED_MESSAGES = 'GET_NEXT_SEARCHED_MESSAGES';\nvar START_MESSAGE_SEARCH = 'START_MESSAGE_SEARCH';\nvar START_GETTING_SEARCHED_MESSAGES = 'START_GETTING_SEARCHED_MESSAGES';\nvar SET_QUERY_INVALID = 'SET_QUERY_INVALID';\nvar SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\nvar CHANNEL_INVALID = 'CHANNEL_INVALID';\nvar RESET_SEARCH_STRING = 'RESET_SEARCH_STRING';\nfunction reducer(state, action) {\n  switch (action.type) {\n    case SET_CURRENT_CHANNEL:\n      {\n        var currentChannel = action.payload;\n        return __assign(__assign({}, state), {\n          currentChannel: currentChannel,\n          initialized: true\n        });\n      }\n    case CHANNEL_INVALID:\n      {\n        return __assign(__assign({}, state), {\n          currentChannel: null,\n          initialized: false\n        });\n      }\n    case GET_SEARCHED_MESSAGES:\n      {\n        var _a = action.payload,\n          messages = _a.messages,\n          createdQuery = _a.createdQuery;\n        if (createdQuery && createdQuery.channelUrl === state.currentMessageSearchQuery.channelUrl && createdQuery.key === state.currentMessageSearchQuery.key) {\n          return __assign(__assign({}, state), {\n            loading: false,\n            isInvalid: false,\n            allMessages: __spreadArray([], messages, true),\n            hasMoreResult: state.currentMessageSearchQuery.hasNext\n          });\n        }\n        return __assign({}, state);\n      }\n    case SET_QUERY_INVALID:\n      {\n        return __assign(__assign({}, state), {\n          isInvalid: true\n        });\n      }\n    case START_MESSAGE_SEARCH:\n      {\n        return __assign(__assign({}, state), {\n          isInvalid: false,\n          loading: false\n        });\n      }\n    case START_GETTING_SEARCHED_MESSAGES:\n      {\n        var currentMessageSearchQuery = action.payload;\n        return __assign(__assign({}, state), {\n          loading: true,\n          currentMessageSearchQuery: currentMessageSearchQuery\n        });\n      }\n    case GET_NEXT_SEARCHED_MESSAGES:\n      {\n        var messages = action.payload;\n        return __assign(__assign({}, state), {\n          allMessages: __spreadArray(__spreadArray([], state.allMessages, true), messages, true),\n          hasMoreResult: state.currentMessageSearchQuery.hasNext\n        });\n      }\n    case RESET_SEARCH_STRING:\n      {\n        return __assign(__assign({}, state), {\n          allMessages: []\n        });\n      }\n    default:\n      {\n        return state;\n      }\n  }\n}\nvar initialState = {\n  allMessages: [],\n  loading: false,\n  isInvalid: false,\n  initialized: false,\n  currentChannel: null,\n  currentMessageSearchQuery: null,\n  hasMoreResult: false\n};\nfunction useSetChannel(_a, _b) {\n  var channelUrl = _a.channelUrl,\n    sdkInit = _a.sdkInit;\n  var sdk = _b.sdk,\n    logger = _b.logger,\n    messageSearchDispathcer = _b.messageSearchDispathcer;\n  useEffect(function () {\n    if (channelUrl && sdkInit && sdk && (sdk.OpenChannel || sdk.GroupChannel)) {\n      sdk.GroupChannel.getChannel(channelUrl, function (groupChannel, error) {\n        if (!error) {\n          logger.info('MessageSearch | useSetChannel group channel', groupChannel);\n          messageSearchDispathcer({\n            type: SET_CURRENT_CHANNEL,\n            payload: groupChannel\n          });\n        } else {\n          messageSearchDispathcer({\n            type: CHANNEL_INVALID,\n            payload: null\n          });\n        }\n      });\n    }\n  }, [channelUrl, sdkInit]);\n}\nfunction useGetSearchedMessages(_a, _b) {\n  var currentChannel = _a.currentChannel,\n    channelUrl = _a.channelUrl,\n    requestString = _a.requestString,\n    messageSearchQuery = _a.messageSearchQuery,\n    onResultLoaded = _a.onResultLoaded,\n    retryCount = _a.retryCount;\n  var sdk = _b.sdk,\n    logger = _b.logger,\n    messageSearchDispathcer = _b.messageSearchDispathcer;\n  useEffect(function () {\n    messageSearchDispathcer({\n      type: START_MESSAGE_SEARCH,\n      payload: null\n    });\n    if (sdk && channelUrl && sdk.createMessageSearchQuery && currentChannel) {\n      if (requestString) {\n        var inputSearchMessageQueryObject = __assign(__assign({}, messageSearchQuery), {\n          order: 'ts',\n          channelUrl: channelUrl,\n          messageTimestampFrom: currentChannel.invitedAt\n        });\n        var createdQuery_1 = sdk.createMessageSearchQuery(requestString, inputSearchMessageQueryObject);\n        createdQuery_1.next(function (messages, error) {\n          if (!error) {\n            logger.info('MessageSearch | useGetSearchedMessages: succeeded getting messages', messages);\n            messageSearchDispathcer({\n              type: GET_SEARCHED_MESSAGES,\n              payload: {\n                messages: messages,\n                createdQuery: createdQuery_1\n              }\n            });\n            if (onResultLoaded && typeof onResultLoaded === 'function') {\n              onResultLoaded(messages, null);\n            }\n          } else {\n            logger.warning('MessageSearch | useGetSearchedMessages: getting failed', error);\n            messageSearchDispathcer({\n              type: SET_QUERY_INVALID,\n              payload: null\n            });\n            if (onResultLoaded && typeof onResultLoaded === 'function') {\n              onResultLoaded(null, error);\n            }\n          }\n        });\n        messageSearchDispathcer({\n          type: START_GETTING_SEARCHED_MESSAGES,\n          payload: createdQuery_1\n        });\n      } else {\n        logger.info('MessageSearch | useGetSeasrchedMessages: search string is empty');\n      }\n    }\n  }, [channelUrl, messageSearchQuery, requestString, currentChannel, retryCount]);\n}\nfunction useScrollCallback(_a, _b) {\n  var currentMessageSearchQuery = _a.currentMessageSearchQuery,\n    hasMoreResult = _a.hasMoreResult,\n    onResultLoaded = _a.onResultLoaded;\n  var logger = _b.logger,\n    messageSearchDispathcer = _b.messageSearchDispathcer;\n  return useCallback(function (cb) {\n    if (!hasMoreResult) {\n      logger.warning('MessageSearch | useScrollCallback: no more searched results', hasMoreResult);\n    }\n    if (currentMessageSearchQuery && currentMessageSearchQuery.hasNext) {\n      currentMessageSearchQuery.next(function (messages, error) {\n        if (!error) {\n          logger.info('MessageSearch | useScrollCallback: succeeded getting searched messages', messages);\n          messageSearchDispathcer({\n            type: GET_NEXT_SEARCHED_MESSAGES,\n            payload: messages\n          });\n          cb(messages, null);\n          if (onResultLoaded && typeof onResultLoaded === 'function') {\n            onResultLoaded(messages, null);\n          }\n        } else {\n          logger.warning('MessageSearch | useScrollCallback: failed getting searched messages', error);\n          cb(null, error);\n          if (onResultLoaded && typeof onResultLoaded === 'function') {\n            onResultLoaded(null, error);\n          }\n        }\n      });\n    } else {\n      logger.warning('MessageSearch | useScrollCallback: no currentMessageSearchQuery');\n    }\n  }, [currentMessageSearchQuery, hasMoreResult]);\n}\nvar getCreatedAt$1 = function (createdAt, locale) {\n  var optionalParam = locale ? {\n    locale: locale\n  } : null;\n  if (!createdAt) {\n    return '';\n  }\n  if (isToday(createdAt)) {\n    return format(createdAt, 'p', optionalParam);\n  }\n  if (isYesterday(createdAt)) {\n    return formatRelative(createdAt, new Date(), optionalParam);\n  }\n  return format(createdAt, 'MMM dd', optionalParam);\n};\nfunction MessageSearchItem(_a) {\n  var className = _a.className,\n    message = _a.message,\n    selected = _a.selected,\n    _onClick = _a.onClick;\n  var createdAt = message.createdAt;\n  var messageText = message.message;\n  var sender = message.sender || message._sender;\n  var profileUrl = sender.profileUrl,\n    nickname = sender.nickname;\n  var _b = useContext(LocalizationContext),\n    stringSet = _b.stringSet,\n    dateLocale = _b.dateLocale;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), ['sendbird-message-search-item', selected ? 'sendbird-message-search-item--selected' : ''], false).join(' '),\n    onClick: function onClick(e) {\n      e.stopPropagation();\n      _onClick(message);\n    }\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message-search-item__left\"\n  }, /*#__PURE__*/React__default.createElement(Avatar, {\n    className: \"sendbird-message-search-item__left__sender-avatar\",\n    src: profileUrl,\n    alt: \"profile image\",\n    width: \"56px\",\n    height: \"56px\"\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message-search-item__right\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-message-search-item__right__sender-name\",\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, nickname || stringSet.NO_NAME), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-message-search-item__right__message-text\",\n    type: LabelTypography.BODY_2,\n    color: LabelColors.ONBACKGROUND_3\n  }, messageText), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-message-search-item__right__message-created-at\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_2\n  }, getCreatedAt$1(createdAt, dateLocale))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message-search-item__right-footer\"\n  }));\n}\nfunction getCreatedAt(createdAt, locale) {\n  var optionalParam = locale ? {\n    locale: locale\n  } : null;\n  if (!createdAt) {\n    return '';\n  }\n  if (isToday(createdAt)) {\n    return format(createdAt, 'p', optionalParam);\n  }\n  if (isYesterday(createdAt)) {\n    return formatRelative(createdAt, new Date(), optionalParam);\n  }\n  return format(createdAt, 'MMM dd', optionalParam);\n}\nfunction getIconOfFileType(message) {\n  var url = message.url;\n  var fileMessageUrl = url;\n  var fileExtension = fileMessageUrl.match(/\\.([^.]*?)(?=\\?|#|$)/)[1];\n  if (/(jpg|jpeg|png)$/i.test(fileExtension)) {\n    return IconTypes.PHOTO;\n  } else if (/mp4$/i.test(fileExtension)) {\n    return IconTypes.PLAY;\n  } else if (/mp3/i.test(fileExtension)) {\n    return IconTypes.FILE_AUDIO;\n  } else if (/gif/i.test(fileExtension)) {\n    return IconTypes.GIF;\n  } else {\n    return IconTypes.FILE_DOCUMENT;\n  }\n}\nfunction truncate(fullText, textLimit) {\n  if (fullText.length <= textLimit) return fullText;\n  var separator = '...';\n  var sepLen = separator.length;\n  var charsToShow = textLimit - sepLen;\n  var frontChars = Math.ceil(charsToShow / 2);\n  var backChars = Math.floor(charsToShow / 2);\n  return fullText.substr(0, frontChars) + separator + fullText.substr(fullText.length - backChars);\n}\nfunction MessageSearchFileItem(props) {\n  var className = props.className,\n    message = props.message,\n    selected = props.selected,\n    _onClick = props.onClick;\n  var createdAt = message.createdAt,\n    url = message.url,\n    name = message.name;\n  var fileMessageUrl = url;\n  var sender = message.sender || message._sender;\n  var profileUrl = sender.profileUrl,\n    nickname = sender.nickname;\n  var _a = useContext(LocalizationContext),\n    stringSet = _a.stringSet,\n    dateLocale = _a.dateLocale;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), ['sendbird-message-search-file-item', selected ? 'sendbird-message-search-file-item--selected' : ''], false).join(' '),\n    onClick: function onClick(e) {\n      e.stopPropagation();\n      _onClick(message);\n    }\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message-search-file-item__left\"\n  }, /*#__PURE__*/React__default.createElement(Avatar, {\n    className: \"sendbird-message-search-file-item__left__sender-avatar\",\n    src: profileUrl,\n    alt: \"profile image\",\n    width: \"56px\",\n    height: \"56px\"\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message-search-file-item__right\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-message-search-file-item__right__sender-name\",\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, nickname || stringSet.NO_NAME), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message-search-file-item__right__content\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message-search-file-item__right__content__type-icon\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: getIconOfFileType(message),\n    fillColor: IconColors.PRIMARY,\n    width: \"18px\",\n    height: \"18px\"\n  })), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-message-search-file-item__right__content__url\",\n    type: LabelTypography.BODY_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, truncate(name || fileMessageUrl, 28)))), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-message-search-file-item__message-created-at\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_2\n  }, getCreatedAt(createdAt, dateLocale)), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message-search-file-item__right-footer\"\n  }));\n}\nvar DEBOUNCING_TIME = 500;\nfunction useSearchStringEffect(_a, _b) {\n  var searchString = _a.searchString;\n  var messageSearchDispathcer = _b.messageSearchDispathcer;\n  var _c = useState(''),\n    requestString = _c[0],\n    setRequestString = _c[1];\n  var _d = useState(null),\n    debouncingTimer = _d[0],\n    setDebouncingTimer = _d[1];\n  useEffect(function () {\n    clearTimeout(debouncingTimer);\n    if (searchString) {\n      setDebouncingTimer(setTimeout(function () {\n        setRequestString(searchString);\n      }, DEBOUNCING_TIME));\n    } else {\n      setRequestString('');\n      messageSearchDispathcer({\n        type: RESET_SEARCH_STRING,\n        payload: ''\n      });\n    }\n  }, [searchString]);\n  return requestString;\n}\nvar COMPONENT_CLASS_NAME = 'sendbird-message-search';\nfunction MessageSearch(props) {\n  var\n    // sendbird internal props\n    stores = props.stores,\n    config = props.config,\n    // message search props\n    channelUrl = props.channelUrl,\n    searchString = props.searchString,\n    messageSearchQuery = props.messageSearchQuery,\n    renderSearchItem = props.renderSearchItem,\n    onResultLoaded = props.onResultLoaded,\n    onResultClick = props.onResultClick; // hook variables\n\n  var stringSet = useContext(LocalizationContext).stringSet;\n  var _a = useState(0),\n    retryCount = _a[0],\n    setRetryCount = _a[1]; // this is a trigger flag for activating useGetSearchMessages\n\n  var _b = useState(0),\n    selectedMessageId = _b[0],\n    setSelectedMessageId = _b[1];\n  var _c = useReducer(reducer, initialState),\n    messageSearchStore = _c[0],\n    messageSearchDispathcer = _c[1];\n  var allMessages = messageSearchStore.allMessages,\n    loading = messageSearchStore.loading,\n    isInvalid = messageSearchStore.isInvalid,\n    currentChannel = messageSearchStore.currentChannel,\n    currentMessageSearchQuery = messageSearchStore.currentMessageSearchQuery,\n    hasMoreResult = messageSearchStore.hasMoreResult;\n  var getChannelName = function getChannelName() {\n    if (currentChannel && currentChannel.name && currentChannel.name !== 'Group Channel') {\n      return currentChannel.name;\n    }\n    if (currentChannel && (currentChannel.name === 'Group Channel' || !currentChannel.name)) {\n      return currentChannel.members.map(function (member) {\n        return member.nickname || stringSet.NO_NAME;\n      }).join(', ');\n    }\n    return stringSet.NO_TITLE;\n  }; // const\n\n  var sdkStore = stores.sdkStore;\n  var logger = config.logger;\n  var sdk = sdkStore.sdk;\n  var sdkInit = sdkStore.initialized;\n  var scrollRef = useRef(null);\n  var handleOnScroll = function handleOnScroll(e) {\n    var scrollElement = e.target;\n    var scrollTop = scrollElement.scrollTop,\n      scrollHeight = scrollElement.scrollHeight,\n      clientHeight = scrollElement.clientHeight;\n    if (!hasMoreResult) {\n      return;\n    }\n    if (scrollTop + clientHeight >= scrollHeight) {\n      onScroll(function () {// after load more searched messages\n      });\n    }\n  };\n  useSetChannel({\n    channelUrl: channelUrl,\n    sdkInit: sdkInit\n  }, {\n    sdk: sdk,\n    logger: logger,\n    messageSearchDispathcer: messageSearchDispathcer\n  });\n  var requestString = useSearchStringEffect({\n    searchString: searchString\n  }, {\n    messageSearchDispathcer: messageSearchDispathcer\n  });\n  useGetSearchedMessages({\n    currentChannel: currentChannel,\n    channelUrl: channelUrl,\n    requestString: requestString,\n    messageSearchQuery: messageSearchQuery,\n    onResultLoaded: onResultLoaded,\n    retryCount: retryCount\n  }, {\n    sdk: sdk,\n    logger: logger,\n    messageSearchDispathcer: messageSearchDispathcer\n  });\n  var onScroll = useScrollCallback({\n    currentMessageSearchQuery: currentMessageSearchQuery,\n    hasMoreResult: hasMoreResult,\n    onResultLoaded: onResultLoaded\n  }, {\n    logger: logger,\n    messageSearchDispathcer: messageSearchDispathcer\n  });\n  var handleRetryToConnect = function handleRetryToConnect() {\n    setRetryCount(retryCount + 1);\n  };\n  if (isInvalid && searchString && requestString) {\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      className: COMPONENT_CLASS_NAME\n    }, /*#__PURE__*/React__default.createElement(PlaceHolder, {\n      type: PlaceHolderTypes.WRONG,\n      retryToConnect: handleRetryToConnect\n    }));\n  }\n  if (loading && searchString && requestString) {\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      className: COMPONENT_CLASS_NAME\n    }, /*#__PURE__*/React__default.createElement(PlaceHolder, {\n      type: PlaceHolderTypes.SEARCHING\n    }));\n  }\n  if (!searchString) {\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      className: COMPONENT_CLASS_NAME\n    }, /*#__PURE__*/React__default.createElement(PlaceHolder, {\n      type: PlaceHolderTypes.SEARCH_IN,\n      searchInString: getChannelName()\n    }));\n  }\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: COMPONENT_CLASS_NAME,\n    onScroll: handleOnScroll,\n    ref: scrollRef\n  }, allMessages.length > 0 ? allMessages.map(function (message) {\n    if (renderSearchItem) {\n      return renderSearchItem({\n        message: message,\n        onResultClick: onResultClick\n      });\n    }\n    if (message.messageType === 'file') {\n      return /*#__PURE__*/React__default.createElement(MessageSearchFileItem, {\n        className: COMPONENT_CLASS_NAME + \"__message-search-item\",\n        message: message,\n        key: message.messageId,\n        selected: selectedMessageId === message.messageId,\n        onClick: function onClick() {\n          onResultClick(message);\n          setSelectedMessageId(message.messageId);\n        }\n      });\n    }\n    return /*#__PURE__*/React__default.createElement(MessageSearchItem, {\n      className: COMPONENT_CLASS_NAME + \"__message-search-item\",\n      message: message,\n      key: message.messageId,\n      selected: selectedMessageId === message.messageId,\n      onClick: function onClick() {\n        onResultClick(message);\n        setSelectedMessageId(message.messageId);\n      }\n    });\n  }) : /*#__PURE__*/React__default.createElement(PlaceHolder, {\n    type: PlaceHolderTypes.NO_RESULTS\n  }));\n}\nvar MessageSearch$1 = withSendbirdContext(MessageSearch);\nexport { MessageSearch$1 as default };","map":{"version":3,"names":["GET_SEARCHED_MESSAGES","GET_NEXT_SEARCHED_MESSAGES","START_MESSAGE_SEARCH","START_GETTING_SEARCHED_MESSAGES","SET_QUERY_INVALID","SET_CURRENT_CHANNEL","CHANNEL_INVALID","RESET_SEARCH_STRING","reducer","state","action","type","currentChannel","payload","__assign","initialized","_a","messages","createdQuery","channelUrl","currentMessageSearchQuery","key","loading","isInvalid","allMessages","__spreadArray","hasMoreResult","hasNext","initialState","useSetChannel","_b","sdkInit","sdk","logger","messageSearchDispathcer","useEffect","OpenChannel","GroupChannel","getChannel","groupChannel","error","info","useGetSearchedMessages","requestString","messageSearchQuery","onResultLoaded","retryCount","createMessageSearchQuery","inputSearchMessageQueryObject","order","messageTimestampFrom","invitedAt","createdQuery_1","next","warning","useScrollCallback","useCallback","cb","getCreatedAt$1","createdAt","locale","optionalParam","isToday","format","isYesterday","formatRelative","Date","MessageSearchItem","className","message","selected","_onClick","onClick","messageText","sender","_sender","profileUrl","nickname","useContext","LocalizationContext","stringSet","dateLocale","React__default","createElement","Array","isArray","join","e","stopPropagation","Avatar","src","alt","width","height","Label","LabelTypography","SUBTITLE_2","color","LabelColors","ONBACKGROUND_1","NO_NAME","BODY_2","ONBACKGROUND_3","CAPTION_3","ONBACKGROUND_2","getCreatedAt","getIconOfFileType","url","fileMessageUrl","fileExtension","match","test","IconTypes","PHOTO","PLAY","FILE_AUDIO","GIF","FILE_DOCUMENT","truncate","fullText","textLimit","length","separator","sepLen","charsToShow","frontChars","Math","ceil","backChars","floor","substr","MessageSearchFileItem","props","name","Icon","fillColor","IconColors","PRIMARY","DEBOUNCING_TIME","useSearchStringEffect","searchString","_c","useState","setRequestString","_d","debouncingTimer","setDebouncingTimer","clearTimeout","setTimeout","COMPONENT_CLASS_NAME","MessageSearch","stores","config","renderSearchItem","onResultClick","setRetryCount","selectedMessageId","setSelectedMessageId","useReducer","messageSearchStore","getChannelName","members","map","member","NO_TITLE","sdkStore","scrollRef","useRef","handleOnScroll","scrollElement","target","scrollTop","scrollHeight","clientHeight","onScroll","handleRetryToConnect","PlaceHolder","PlaceHolderTypes","WRONG","retryToConnect","SEARCHING","SEARCH_IN","searchInString","ref","messageType","messageId","NO_RESULTS","MessageSearch$1","withSendbirdContext"],"sources":["C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\src\\smart-components\\MessageSearch\\dux\\actionTypes.ts","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\src\\smart-components\\MessageSearch\\dux\\reducers.ts","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\src\\smart-components\\MessageSearch\\dux\\initialState.ts","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\src\\smart-components\\MessageSearch\\hooks\\useSetChannel.ts","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\src\\smart-components\\MessageSearch\\hooks\\useGetSearchedMessages.ts","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\src\\smart-components\\MessageSearch\\hooks\\useScrollCallback.ts","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\src\\ui\\MessageSearchItem\\getCreatedAt.ts","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\src\\ui\\MessageSearchItem\\index.tsx","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\src\\ui\\MessageSearchFileItem\\utils.ts","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\src\\ui\\MessageSearchFileItem\\index.tsx","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\src\\smart-components\\MessageSearch\\hooks\\useSearchStringEffect.ts","C:\\Users\\chji9\\OneDrive\\바탕 화면\\homeReviewSite\\src\\main\\chat-app\\node_modules\\sendbird-uikit\\src\\smart-components\\MessageSearch\\index.tsx"],"sourcesContent":["export const GET_SEARCHED_MESSAGES = 'GET_SEARCHED_MESSAGES';\nexport const GET_NEXT_SEARCHED_MESSAGES = 'GET_NEXT_SEARCHED_MESSAGES';\nexport const START_MESSAGE_SEARCH = 'START_MESSAGE_SEARCH';\nexport const START_GETTING_SEARCHED_MESSAGES = 'START_GETTING_SEARCHED_MESSAGES';\nexport const SET_QUERY_INVALID = 'SET_QUERY_INVALID';\n\nexport const SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\nexport const CHANNEL_INVALID = 'CHANNEL_INVALID';\nexport const RESET_SEARCH_STRING = 'RESET_SEARCH_STRING';\n","import { State as initialStateInterface } from './initialState';\nimport * as actionTypes from './actionTypes';\n\ninterface ActionInterface {\n  type: string;\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  payload?: any;\n}\n\nexport default function reducer(\n  state: initialStateInterface,\n  action: ActionInterface,\n): initialStateInterface {\n  switch (action.type) {\n    case actionTypes.SET_CURRENT_CHANNEL: {\n      const currentChannel = action.payload;\n      return {\n        ...state,\n        currentChannel,\n        initialized: true,\n      };\n    }\n    case actionTypes.CHANNEL_INVALID: {\n      return {\n        ...state,\n        currentChannel: null,\n        initialized: false,\n      };\n    }\n    case actionTypes.GET_SEARCHED_MESSAGES: {\n      const { messages, createdQuery } = action.payload;\n      if (\n        createdQuery\n        && createdQuery.channelUrl === state.currentMessageSearchQuery.channelUrl\n        && createdQuery.key === state.currentMessageSearchQuery.key\n      ) {\n        return {\n          ...state,\n          loading: false,\n          isInvalid: false,\n          allMessages: [...messages],\n          hasMoreResult: state.currentMessageSearchQuery.hasNext,\n        };\n      }\n      return { ...state };\n    }\n    case actionTypes.SET_QUERY_INVALID: {\n      return {\n        ...state,\n        isInvalid: true,\n      }\n    }\n    case actionTypes.START_MESSAGE_SEARCH: {\n      return {\n        ...state,\n        isInvalid: false,\n        loading: false,\n      }\n    }\n    case actionTypes.START_GETTING_SEARCHED_MESSAGES: {\n      const currentMessageSearchQuery = action.payload;\n      return {\n        ...state,\n        loading: true,\n        currentMessageSearchQuery,\n      };\n    }\n    case actionTypes.GET_NEXT_SEARCHED_MESSAGES: {\n      const messages = action.payload;\n      return {\n        ...state,\n        allMessages: [...state.allMessages, ...messages],\n        hasMoreResult: state.currentMessageSearchQuery.hasNext,\n      };\n    }\n    case actionTypes.RESET_SEARCH_STRING: {\n      return {\n        ...state,\n        allMessages: [],\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import SendbirdUIKit from '../../../index';\nexport interface State {\n  allMessages: Array<SendbirdUIKit.ClientFileMessage | SendbirdUIKit.ClientUserMessage>;\n  loading: boolean;\n  isInvalid: boolean;\n  initialized: boolean;\n  currentChannel: SendbirdUIKit.GroupChannelType;\n  currentMessageSearchQuery: SendbirdUIKit.ClientMessageSearchQuery;\n  hasMoreResult: boolean;\n}\n\nconst initialState: State = {\n  allMessages: [],\n  loading: false,\n  isInvalid: false,\n  initialized: false,\n  currentChannel: null,\n  currentMessageSearchQuery: null,\n  hasMoreResult: false,\n};\n\nexport default initialState;\n","import { useEffect } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface MainProps {\n  channelUrl: string;\n  sdkInit: boolean;\n}\ninterface ToolProps {\n  sdk: SendbirdUIKit.Sdk;\n  logger: SendbirdUIKit.Logger;\n  messageSearchDispathcer: ({ type: string, payload: any }) => void;\n}\n\nfunction useSetChannel(\n  { channelUrl, sdkInit }: MainProps,\n  { sdk, logger, messageSearchDispathcer }: ToolProps,\n): void {\n  useEffect(() => {\n    if (channelUrl && sdkInit && sdk && (sdk.OpenChannel || sdk.GroupChannel)) {\n      sdk.GroupChannel.getChannel(channelUrl, (groupChannel, error) => {\n        if (!error) {\n          logger.info('MessageSearch | useSetChannel group channel', groupChannel);\n          messageSearchDispathcer({\n            type: messageActionTypes.SET_CURRENT_CHANNEL,\n            payload: groupChannel,\n          });\n        } else {\n          messageSearchDispathcer({\n            type: messageActionTypes.CHANNEL_INVALID,\n            payload: null,\n          });\n        }\n      });\n    }\n  }, [channelUrl, sdkInit]);\n}\n\nexport default useSetChannel;\n","import { useEffect } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport SendbirdUIKit from '../../../index';\nimport SendBird from 'sendbird';\n\ninterface MainProps {\n  currentChannel: SendbirdUIKit.GroupChannelType;\n  channelUrl: string;\n  requestString?: string;\n  messageSearchQuery?: SendbirdUIKit.MessageSearchQueryType;\n  onResultLoaded?: (\n    messages?: Array<SendBird.UserMessage | SendBird.FileMessage | SendBird.AdminMessage>,\n    error?: SendbirdUIKit.SendbirdError,\n  ) => void;\n  retryCount: number;\n}\ninterface ToolProps {\n  sdk: SendbirdUIKit.Sdk;\n  logger: SendbirdUIKit.Logger;\n  messageSearchDispathcer: ({ type: string, payload: any }) => void;\n}\n\nfunction useGetSearchedMessages(\n  { currentChannel, channelUrl, requestString, messageSearchQuery, onResultLoaded, retryCount }: MainProps,\n  { sdk, logger, messageSearchDispathcer }: ToolProps,\n): void {\n  useEffect(() => {\n    messageSearchDispathcer({\n      type: messageActionTypes.START_MESSAGE_SEARCH,\n      payload: null,\n    });\n    if (sdk && channelUrl && sdk.createMessageSearchQuery && currentChannel) {\n      if (requestString) {\n        const inputSearchMessageQueryObject = {\n          ...messageSearchQuery,\n          order: 'ts' as const,\n          channelUrl,\n          messageTimestampFrom: currentChannel.invitedAt,\n        };\n        const createdQuery = sdk.createMessageSearchQuery(requestString, inputSearchMessageQueryObject);\n        createdQuery.next((messages, error) => {\n          if (!error) {\n            logger.info('MessageSearch | useGetSearchedMessages: succeeded getting messages', messages);\n            messageSearchDispathcer({\n              type: messageActionTypes.GET_SEARCHED_MESSAGES,\n              payload: {\n                messages,\n                createdQuery,\n              },\n            });\n            if (onResultLoaded && typeof onResultLoaded === 'function') {\n              onResultLoaded(messages, null);\n            }\n          } else {\n            logger.warning('MessageSearch | useGetSearchedMessages: getting failed', error);\n            messageSearchDispathcer({\n              type: messageActionTypes.SET_QUERY_INVALID,\n              payload: null,\n            });\n            if (onResultLoaded && typeof onResultLoaded === 'function') {\n              onResultLoaded(null, error);\n            }\n          }\n        });\n        messageSearchDispathcer({\n          type: messageActionTypes.START_GETTING_SEARCHED_MESSAGES,\n          payload: createdQuery,\n        });\n      } else {\n        logger.info('MessageSearch | useGetSeasrchedMessages: search string is empty');\n      }\n    }\n  }, [channelUrl, messageSearchQuery, requestString, currentChannel, retryCount]);\n}\n\nexport default useGetSearchedMessages;\n","import { useCallback } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport SendbirdUIKit from '../../../index';\n\ninterface MainProps {\n  currentMessageSearchQuery: SendBird.MessageSearchQuery;\n  hasMoreResult: boolean;\n  onResultLoaded?: (\n    messages?: Array<SendBird.UserMessage | SendBird.FileMessage | SendBird.AdminMessage>,\n    error?: SendbirdUIKit.SendbirdError,\n  ) => void;\n}\ninterface ToolProps {\n  logger: SendbirdUIKit.Logger;\n  messageSearchDispathcer: ({ type: string, payload: any }) => void;\n}\ntype CallbackReturn = (\n  callback: (\n    messages: Array<SendBird.UserMessage | SendBird.FileMessage | SendBird.AdminMessage>,\n    /* eslint-disable @typescript-eslint/no-explicit-any*/\n    error: any,\n  ) => void\n) => void;\n\nfunction useScrollCallback(\n  { currentMessageSearchQuery, hasMoreResult, onResultLoaded }: MainProps,\n  { logger, messageSearchDispathcer }: ToolProps,\n): CallbackReturn {\n  return useCallback((cb) => {\n    if (!hasMoreResult) {\n      logger.warning('MessageSearch | useScrollCallback: no more searched results', hasMoreResult);\n    }\n    if (currentMessageSearchQuery && currentMessageSearchQuery.hasNext) {\n      currentMessageSearchQuery.next((messages, error) => {\n        if (!error) {\n          logger.info('MessageSearch | useScrollCallback: succeeded getting searched messages', messages);\n          messageSearchDispathcer({\n            type: messageActionTypes.GET_NEXT_SEARCHED_MESSAGES,\n            payload: messages,\n          });\n          cb(messages, null);\n          if (onResultLoaded && typeof onResultLoaded === 'function') {\n            onResultLoaded(messages, null);\n          }\n        } else {\n          logger.warning('MessageSearch | useScrollCallback: failed getting searched messages', error);\n          cb(null, error);\n          if (onResultLoaded && typeof onResultLoaded === 'function') {\n            onResultLoaded(null, error);\n          }\n        }\n      });\n    } else {\n      logger.warning('MessageSearch | useScrollCallback: no currentMessageSearchQuery');\n    }\n  }, [currentMessageSearchQuery, hasMoreResult]);\n}\n\nexport default useScrollCallback;\n","import format from 'date-fns/format';\nimport formatRelative from 'date-fns/formatRelative';\nimport isToday from 'date-fns/isToday';\nimport isYesterday from 'date-fns/isYesterday';\n\n// getCreatedAt\nexport default (createdAt: number, locale: Locale): string => {\n  const optionalParam = locale ? { locale } : null;\n  if (!createdAt) {\n    return '';\n  }\n  if (isToday(createdAt)) {\n    return format(createdAt, 'p', optionalParam);\n  }\n  if (isYesterday(createdAt)) {\n    return formatRelative(createdAt, new Date(), optionalParam);\n  }\n  return format(createdAt, 'MMM dd', optionalParam);\n};\n","import React, { useContext } from 'react';\nimport './index.scss';\nimport getCreatedAt from './getCreatedAt';\n\nimport Avatar from '../Avatar';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\n\ninterface Props {\n  className?: string | Array<string>;\n  message: SendbirdUIKit.ClientUserMessage;\n  selected?: boolean;\n  onClick?: (message: SendbirdUIKit.ClientMessage) => void;\n}\n\nexport default function MessageSearchItem({\n  className,\n  message,\n  selected,\n  onClick,\n}: Props): JSX.Element {\n  const { createdAt } = message;\n  const messageText = message.message;\n  const sender = message.sender || message._sender;\n  const { profileUrl, nickname } = sender;\n  const { stringSet, dateLocale } = useContext(LocalizationContext);\n\n  return (\n    <div\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        'sendbird-message-search-item',\n        selected ? 'sendbird-message-search-item--selected' : '',\n      ].join(' ')}\n      onClick={(e) => {\n        e.stopPropagation();\n        onClick(message);\n      }}\n    >\n      <div className=\"sendbird-message-search-item__left\">\n        <Avatar\n          className=\"sendbird-message-search-item__left__sender-avatar\"\n          src={profileUrl}\n          alt=\"profile image\"\n          width=\"56px\"\n          height=\"56px\"\n        />\n      </div>\n      <div className=\"sendbird-message-search-item__right\">\n        <Label\n          className=\"sendbird-message-search-item__right__sender-name\"\n          type={LabelTypography.SUBTITLE_2}\n          color={LabelColors.ONBACKGROUND_1}\n        >\n          {nickname || stringSet.NO_NAME}\n        </Label>\n        <Label\n          className=\"sendbird-message-search-item__right__message-text\"\n          type={LabelTypography.BODY_2}\n          color={LabelColors.ONBACKGROUND_3}\n        >\n          {messageText}\n        </Label>\n        <Label\n          className=\"sendbird-message-search-item__right__message-created-at\"\n          type={LabelTypography.CAPTION_3}\n          color={LabelColors.ONBACKGROUND_2}\n        >\n          {getCreatedAt(createdAt, dateLocale)}\n        </Label>\n      </div>\n      <div className=\"sendbird-message-search-item__right-footer\" />\n    </div>\n  );\n}\n","import format from 'date-fns/format';\nimport formatRelative from 'date-fns/formatRelative';\nimport isToday from 'date-fns/isToday';\nimport isYesterday from 'date-fns/isYesterday';\nimport { IconTypes } from '../Icon';\n\nexport function getCreatedAt(createdAt: number, locale: Locale): string {\n  const optionalParam = locale ? { locale } : null;\n  if (!createdAt) {\n    return '';\n  }\n  if (isToday(createdAt)) {\n    return format(createdAt, 'p', optionalParam);\n  }\n  if (isYesterday(createdAt)) {\n    return formatRelative(createdAt, new Date(), optionalParam);\n  }\n  return format(createdAt, 'MMM dd', optionalParam);\n}\n\nexport function getIconOfFileType(message: SendbirdUIKit.ClientFileMessage): string {\n  const { url } = message;\n  const fileMessageUrl = url;\n  const fileExtension = (fileMessageUrl.match(/\\.([^.]*?)(?=\\?|#|$)/))[1];\n\n  if (/(jpg|jpeg|png)$/i.test(fileExtension)) {\n    return IconTypes.PHOTO;\n  } else if (/mp4$/i.test(fileExtension)) {\n    return IconTypes.PLAY;\n  } else if (/mp3/i.test(fileExtension)) {\n    return IconTypes.FILE_AUDIO;\n  } else if (/gif/i.test(fileExtension)) {\n    return IconTypes.GIF;\n  } else {\n    return IconTypes.FILE_DOCUMENT;\n  }\n}\n\nexport function truncate(fullText: string, textLimit: number): string {\n  if (fullText.length <= textLimit) return fullText;\n  const separator = '...';\n  const sepLen = separator.length;\n  const charsToShow = textLimit - sepLen;\n  const frontChars = Math.ceil(charsToShow / 2);\n  const backChars = Math.floor(charsToShow / 2);\n  return fullText.substr(0, frontChars) + separator + fullText.substr(fullText.length - backChars);\n}\n","import React, { ReactElement, useContext } from 'react';\nimport './index.scss';\n\nimport Avatar from '../Avatar';\nimport Icon, { IconColors } from '../Icon';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport { getCreatedAt, getIconOfFileType, truncate } from './utils';\n\ninterface Props {\n  className?: string | Array<string>;\n  message: SendbirdUIKit.ClientFileMessage;\n  selected?: boolean;\n  onClick?: (message: SendbirdUIKit.ClientFileMessage) => void;\n}\n\nexport default function MessageSearchFileItem(props: Props): ReactElement {\n  const {\n    className,\n    message,\n    selected,\n    onClick,\n  } = props;\n  const { createdAt, url, name } = message;\n  const fileMessageUrl = url;\n  const sender = message.sender || message._sender;\n  const { profileUrl, nickname } = sender;\n  const { stringSet, dateLocale } = useContext(LocalizationContext);\n\n  return (\n    <div\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        'sendbird-message-search-file-item',\n        selected ? 'sendbird-message-search-file-item--selected' : '',\n      ].join(' ')}\n      onClick={(e) => {\n        e.stopPropagation();\n        onClick(message);\n      }}\n    >\n      <div className=\"sendbird-message-search-file-item__left\">\n        <Avatar\n          className=\"sendbird-message-search-file-item__left__sender-avatar\"\n          src={profileUrl}\n          alt=\"profile image\"\n          width=\"56px\"\n          height=\"56px\"\n        />\n      </div>\n      <div className=\"sendbird-message-search-file-item__right\">\n        <Label\n          className=\"sendbird-message-search-file-item__right__sender-name\"\n          type={LabelTypography.SUBTITLE_2}\n          color={LabelColors.ONBACKGROUND_1}\n        >\n          {nickname || stringSet.NO_NAME}\n        </Label>\n        <div className=\"sendbird-message-search-file-item__right__content\">\n          <div className=\"sendbird-message-search-file-item__right__content__type-icon\">\n            <Icon\n              type={getIconOfFileType(message)}\n              fillColor={IconColors.PRIMARY}\n              width=\"18px\"\n              height=\"18px\"\n            />\n          </div>\n          <Label\n            className=\"sendbird-message-search-file-item__right__content__url\"\n            type={LabelTypography.BODY_2}\n            color={LabelColors.ONBACKGROUND_1}\n          >\n            {truncate(name || fileMessageUrl, 28)}\n          </Label>\n        </div>\n      </div>\n      <Label\n        className=\"sendbird-message-search-file-item__message-created-at\"\n        type={LabelTypography.CAPTION_3}\n        color={LabelColors.ONBACKGROUND_2}\n      >\n        {getCreatedAt(createdAt, dateLocale)}\n      </Label>\n      <div className=\"sendbird-message-search-file-item__right-footer\" />\n    </div>\n  );\n}\n","import { useState, useEffect } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface DynamicParams {\n  searchString: string;\n}\n\ninterface StaticParams {\n  messageSearchDispathcer: ({ type: string, payload: any }) => void;\n}\n\nconst DEBOUNCING_TIME = 500;\n\nfunction useSearchStringEffect(\n  { searchString }: DynamicParams,\n  { messageSearchDispathcer }: StaticParams,\n): string {\n  const [requestString, setRequestString] = useState('');\n  const [debouncingTimer, setDebouncingTimer] = useState(null);\n  useEffect(() => {\n    clearTimeout(debouncingTimer);\n    if (searchString) {\n      setDebouncingTimer(\n        setTimeout(() => {\n          setRequestString(searchString);\n        }, DEBOUNCING_TIME)\n      );\n    } else {\n      setRequestString('');\n      messageSearchDispathcer({\n        type: messageActionTypes.RESET_SEARCH_STRING,\n        payload: '',\n      });\n    }\n  }, [searchString]);\n  return requestString;\n}\n\nexport default useSearchStringEffect;\n","import React, { useReducer, useRef, useContext, useState } from 'react';\nimport './index.scss';\n\nimport widthSendbirdContext from '../../lib/SendbirdSdkContext';\nimport messageSearchReducer from './dux/reducers';\nimport messageSearchInitialState from './dux/initialState';\n\nimport useSetChannel from './hooks/useSetChannel';\nimport useGetSearchMessages from './hooks/useGetSearchedMessages';\nimport useScrollCallback from './hooks/useScrollCallback';\n\nimport MessageSearchItem from '../../ui/MessageSearchItem';\nimport PlaceHolder, { PlaceHolderTypes } from '../../ui/PlaceHolder';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport MessageSearchFileItem from '../../ui/MessageSearchFileItem';\n\nimport SendbirdUIKit from '../../index';\nimport useSearchStringEffect from './hooks/useSearchStringEffect';\n\nconst COMPONENT_CLASS_NAME = 'sendbird-message-search';\n\ninterface Props extends SendbirdUIKit.MessageSearchProps {\n  // sendbird internal props\n  stores: {\n    sdkStore?: SendbirdUIKit.SdkStore,\n    userStore?: SendbirdUIKit.UserStore,\n  };\n  config: {\n    userId: string,\n    isOnline: boolean,\n    logger?: SendbirdUIKit.Logger,\n    theme?: string,\n    /* eslint-disable @typescript-eslint/no-explicit-any*/\n    pubSub: any,\n    disableUserProfile?: boolean,\n    renderUserProfile?(): JSX.Element,\n    imageCompression?: {\n      compressionRate?: number,\n      resizingWidth?: number | string,\n      resizingHeight?: number | string,\n    },\n  };\n}\n\nfunction MessageSearch(props: Props): JSX.Element {\n  const {\n    // sendbird internal props\n    stores,\n    config,\n    // message search props\n    channelUrl,\n    searchString,\n    messageSearchQuery,\n    renderSearchItem,\n    onResultLoaded,\n    onResultClick,\n  } = props;\n\n  // hook variables\n  const { stringSet } = useContext(LocalizationContext);\n  const [retryCount, setRetryCount] = useState(0); // this is a trigger flag for activating useGetSearchMessages\n  const [selectedMessageId, setSelectedMessageId] = useState(0);\n  const [messageSearchStore, messageSearchDispathcer] = useReducer(messageSearchReducer, messageSearchInitialState);\n  const {\n    allMessages,\n    loading,\n    isInvalid,\n    currentChannel,\n    currentMessageSearchQuery,\n    hasMoreResult,\n  } = messageSearchStore;\n\n  const getChannelName = () => {\n    if (currentChannel && currentChannel.name && currentChannel.name !== 'Group Channel') {\n      return currentChannel.name;\n    }\n    if (currentChannel && (currentChannel.name === 'Group Channel' || !currentChannel.name)) {\n      return currentChannel.members.map((member) => member.nickname || stringSet.NO_NAME).join(', ');\n    }\n    return stringSet.NO_TITLE;\n  };\n\n  // const\n  const { sdkStore } = stores;\n  const { logger } = config;\n  const { sdk } = sdkStore;\n  const sdkInit = sdkStore.initialized;\n  const scrollRef = useRef(null);\n  const handleOnScroll = (e) => {\n    const scrollElement = e.target;\n    const {\n      scrollTop,\n      scrollHeight,\n      clientHeight,\n    } = scrollElement;\n\n    if (!hasMoreResult) {\n      return;\n    }\n    if (scrollTop + clientHeight >= scrollHeight) {\n      onScroll(() => {\n        // after load more searched messages\n      });\n    }\n  };\n\n  useSetChannel(\n    { channelUrl, sdkInit },\n    { sdk, logger, messageSearchDispathcer },\n  );\n\n  const requestString = useSearchStringEffect({ searchString }, { messageSearchDispathcer });\n\n  useGetSearchMessages(\n    { currentChannel, channelUrl, requestString, messageSearchQuery, onResultLoaded, retryCount },\n    { sdk, logger, messageSearchDispathcer },\n  );\n\n  const onScroll = useScrollCallback(\n    { currentMessageSearchQuery, hasMoreResult, onResultLoaded },\n    { logger, messageSearchDispathcer },\n  );\n\n  const handleRetryToConnect = () => {\n    setRetryCount(retryCount + 1);\n  };\n\n  if (isInvalid && searchString && requestString) {\n    return (\n      <div className={COMPONENT_CLASS_NAME}>\n        <PlaceHolder\n          type={PlaceHolderTypes.WRONG}\n          retryToConnect={handleRetryToConnect}\n        />\n      </div>\n    );\n  }\n\n  if (loading && searchString && requestString) {\n    return (\n      <div className={COMPONENT_CLASS_NAME}>\n        <PlaceHolder type={PlaceHolderTypes.SEARCHING} />\n      </div>\n    );\n  }\n\n  if (!searchString) {\n    return (\n      <div className={COMPONENT_CLASS_NAME}>\n        <PlaceHolder\n          type={PlaceHolderTypes.SEARCH_IN}\n          searchInString={getChannelName()}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={COMPONENT_CLASS_NAME}\n      onScroll={handleOnScroll}\n      ref={scrollRef}\n    >\n      {\n        (allMessages.length > 0)\n          ? (\n            allMessages.map((message) => {\n              if (renderSearchItem) {\n                return renderSearchItem({ message, onResultClick });\n              }\n              if (message.messageType === 'file') {\n                return (\n                  <MessageSearchFileItem\n                    className={`${COMPONENT_CLASS_NAME}__message-search-item`}\n                    message={message}\n                    key={message.messageId}\n                    selected={(selectedMessageId === message.messageId)}\n                    onClick={() => {\n                      onResultClick(message);\n                      setSelectedMessageId(message.messageId);\n                    }}\n                  />\n                );\n              }\n              return (\n                <MessageSearchItem\n                  className={`${COMPONENT_CLASS_NAME}__message-search-item`}\n                  message={message}\n                  key={message.messageId}\n                  selected={(selectedMessageId === message.messageId)}\n                  onClick={() => {\n                    onResultClick(message);\n                    setSelectedMessageId(message.messageId);\n                  }}\n                />\n              );\n            })\n          )\n          : (\n            <PlaceHolder type={PlaceHolderTypes.NO_RESULTS} />\n          )\n      }\n    </div>\n  );\n}\n\nexport default widthSendbirdContext(MessageSearch);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}