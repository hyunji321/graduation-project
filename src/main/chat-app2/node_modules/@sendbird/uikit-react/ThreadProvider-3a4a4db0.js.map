{"version":3,"file":"ThreadProvider-3a4a4db0.js","sources":["../src/modules/Thread/context/utils.ts","../src/modules/Thread/consts.ts","../src/modules/Thread/context/dux/actionTypes.ts","../src/modules/Thread/context/dux/reducer.ts","../src/modules/Thread/context/dux/initialState.ts","../src/modules/Thread/context/hooks/useGetChannel.ts","../src/modules/Thread/context/hooks/useGetAllEmoji.ts","../src/modules/Thread/context/hooks/useGetThreadList.ts","../src/modules/Thread/context/hooks/useGetParentMessage.ts","../src/modules/Thread/context/hooks/useHandlePubsubEvents.ts","../src/modules/Thread/context/hooks/useHandleChannelEvents.ts","../src/modules/Thread/context/hooks/useSendFileMessage.ts","../src/modules/Thread/context/hooks/useUpdateMessageCallback.ts","../src/modules/Thread/context/hooks/useDeleteMessageCallback.ts","../src/modules/Thread/context/hooks/useGetPrevThreadsCallback.ts","../src/modules/Thread/context/hooks/useGetNextThreadsCallback.ts","../src/modules/Thread/context/hooks/useToggleReactionsCallback.ts","../src/modules/Thread/context/hooks/useSendUserMessageCallback.ts","../src/modules/Thread/context/hooks/useResendMessageCallback.ts","../src/modules/Thread/context/hooks/useSendVoiceMessageCallback.ts","../src/modules/Thread/context/ThreadProvider.tsx"],"sourcesContent":["import format from 'date-fns/format';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { BaseMessage, FileMessage, UserMessage } from '@sendbird/chat/message';\nimport { getOutgoingMessageState, OutgoingMessageStates } from '../../../utils/exports/getOutgoingMessageState';\n\nexport const getNicknamesMapFromMembers = (members = []): Map<string, string> => {\n  const nicknamesMap = new Map();\n  for (let memberIndex = 0; memberIndex < members.length; memberIndex += 1) {\n    const { userId, nickname } = members[memberIndex];\n    nicknamesMap.set(userId, nickname);\n  }\n  return nicknamesMap;\n};\n\nexport const getParentMessageFrom = (message: UserMessage | FileMessage | null): UserMessage | FileMessage | BaseMessage | null => {\n  if (!message) {\n    return null;\n  }\n  if (isParentMessage(message)) {\n    return message;\n  }\n  if (isThreadMessage(message)) {\n    return message?.parentMessage || null;\n  }\n  return null;\n};\n\nexport const isParentMessage = (message: UserMessage | FileMessage): boolean => {\n  return (\n    message?.parentMessage === null\n    && typeof message?.parentMessageId === 'number'\n    && !message?.parentMessageId\n  );\n};\n\nexport const isThreadMessage = (message: UserMessage | FileMessage): boolean => {\n  return (\n    message?.parentMessage !== null\n    && typeof message?.parentMessageId === 'number'\n    && message?.parentMessageId > 0\n    && message?.threadInfo === null\n  );\n};\n\nexport const isAboutSame = (a: number, b: number, px: number): boolean => (Math.abs(a - b) <= px);\n\nexport const isEmpty = (val: unknown): boolean => (val === null || val === undefined);\n\n// Some Ids return string and number inconsistently\n// only use to comapre IDs\nexport function compareIds(a: number | string, b: number | string): boolean {\n  if (isEmpty(a) || isEmpty(b)) {\n    return false;\n  }\n  const aString = a.toString();\n  const bString = b.toString();\n  return aString === bString;\n}\n\nexport const getMessageCreatedAt = (message: UserMessage | FileMessage): string => format(message.createdAt, 'p');\nexport const isReadMessage = (channel: GroupChannel, message: UserMessage | FileMessage): boolean => (\n  getOutgoingMessageState(channel, message) === OutgoingMessageStates.READ\n);\nexport const isSameGroup = (\n  message: UserMessage | FileMessage,\n  comparingMessage: UserMessage | FileMessage,\n  currentChannel: GroupChannel,\n): boolean => {\n  if (!(message\n    && comparingMessage\n    && message.messageType\n    && message.messageType !== 'admin'\n    && comparingMessage.messageType\n    && comparingMessage?.messageType !== 'admin'\n    && message?.sender\n    && comparingMessage?.sender\n    && message?.createdAt\n    && comparingMessage?.createdAt\n    && message?.sender?.userId\n    && comparingMessage?.sender?.userId\n  )) {\n    return false;\n  }\n  return (\n    message?.sendingStatus === comparingMessage?.sendingStatus\n    && message?.sender?.userId === comparingMessage?.sender?.userId\n    && getMessageCreatedAt(message) === getMessageCreatedAt(comparingMessage)\n    && isReadMessage(currentChannel, message) === isReadMessage(currentChannel, comparingMessage)\n  );\n};\n\nexport const compareMessagesForGrouping = (\n  prevMessage: UserMessage | FileMessage,\n  currMessage: UserMessage | FileMessage,\n  nextMessage: UserMessage | FileMessage,\n  currentChannel: GroupChannel,\n  replyType: string,\n): [boolean, boolean] => {\n  if (replyType === 'THREAD' && currMessage?.threadInfo) {\n    return [false, false];\n  }\n  const sendingStatus = currMessage?.sendingStatus || '';\n  const isAcceptable = sendingStatus !== 'pending' && sendingStatus !== 'failed';\n  return [\n    isSameGroup(prevMessage, currMessage, currentChannel) && isAcceptable,\n    isSameGroup(currMessage, nextMessage, currentChannel) && isAcceptable,\n  ];\n};\n\nexport const scrollIntoLast = (intialTry = 0): void => {\n  const MAX_TRIES = 10;\n  const currentTry = intialTry;\n  if (currentTry > MAX_TRIES) {\n    return;\n  }\n  try {\n    const scrollDOM = document.querySelector('.sendbird-thread-ui--scroll');\n    // eslint-disable-next-line no-multi-assign\n    scrollDOM.scrollTop = scrollDOM.scrollHeight;\n  } catch (error) {\n    setTimeout(() => {\n      scrollIntoLast(currentTry + 1);\n    }, 500 * currentTry);\n  }\n};\n","export const PREV_THREADS_FETCH_SIZE = 30;\nexport const NEXT_THREADS_FETCH_SIZE = 30;\n","export enum ThreadContextActionTypes {\n  // initialize\n  INIT_USER_ID = 'INIT_USER_ID',\n  // channel\n  GET_CHANNEL_START = 'GET_CHANNEL_START',\n  GET_CHANNEL_SUCCESS = 'GET_CHANNEL_SUCCESS',\n  GET_CHANNEL_FAILURE = 'GET_CHANNEL_FAILURE',\n  // emojis\n  SET_EMOJI_CONTAINER = 'SET_EMOJI_CONTAINER',\n  // parent message\n  GET_PARENT_MESSAGE_START = 'GET_PARENT_MESSAGE_START',\n  GET_PARENT_MESSAGE_SUCCESS = 'GET_PARENT_MESSAGE_SUCCESS',\n  GET_PARENT_MESSAGE_FAILURE = 'GET_PARENT_MESSAGE_FAILURE',\n  // fetch threads\n  INITIALIZE_THREAD_LIST_START = 'INITIALIZE_THREAD_LIST_START',\n  INITIALIZE_THREAD_LIST_SUCCESS = 'INITIALIZE_THREAD_LIST_SUCCESS',\n  INITIALIZE_THREAD_LIST_FAILURE = 'INITIALIZE_THREAD_LIST_FAILURE',\n  GET_PREV_MESSAGES_START = 'GET_PREV_MESSAGES_START',\n  GET_PREV_MESSAGES_SUCESS = 'GET_PREV_MESSAGES_SUCESS',\n  GET_PREV_MESSAGES_FAILURE = 'GET_PREV_MESSAGES_FAILURE',\n  GET_NEXT_MESSAGES_START = 'GET_NEXT_MESSAGES_START',\n  GET_NEXT_MESSAGES_SUCESS = 'GET_NEXT_MESSAGES_SUCESS',\n  GET_NEXT_MESSAGES_FAILURE = 'GET_NEXT_MESSAGES_FAILURE',\n  // handle messages\n  SEND_MESSAGE_START = 'SEND_MESSAGE_START',\n  SEND_MESSAGE_SUCESS = 'SEND_MESSAGE_SUCESS',\n  SEND_MESSAGE_FAILURE = 'SEND_MESSAGE_FAILURE',\n  RESEND_MESSAGE_START = 'RESEND_MESSAGE_START',\n  ON_MESSAGE_DELETED_BY_REQ_ID = 'ON_MESSAGE_DELETED_BY_REQ_ID',\n  // event handlers - message status change\n  ON_MESSAGE_RECEIVED = 'ON_MESSAGE_RECEIVED',\n  ON_MESSAGE_UPDATED = 'ON_MESSAGE_UPDATED',\n  ON_MESSAGE_DELETED = 'ON_MESSAGE_DELETED',\n  ON_REACTION_UPDATED = 'ON_REACTION_UPDATED',\n  // event handlers - user status change\n  ON_USER_MUTED = 'ON_USER_MUTED',\n  ON_USER_UNMUTED = 'ON_USER_UNMUTED',\n  ON_USER_BANNED = 'ON_USER_BANNED',\n  ON_USER_UNBANNED = 'ON_USER_UNBANNED',\n  ON_USER_LEFT = 'ON_USER_LEFT',\n  // event handler - channel status change\n  ON_CHANNEL_FROZEN = 'ON_CHANNEL_FROZEN',\n  ON_CHANNEL_UNFROZEN = 'ON_CHANNEL_UNFROZEN',\n  ON_OPERATOR_UPDATED = 'ON_OPERATOR_UPDATED',\n}\n","import { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { FileMessage, ReactionEvent, UserMessage } from '@sendbird/chat/message';\nimport { NEXT_THREADS_FETCH_SIZE, PREV_THREADS_FETCH_SIZE } from '../../consts';\nimport { ChannelStateTypes, ParentMessageStateTypes, ThreadListStateTypes } from '../../types';\nimport { compareIds } from '../utils';\nimport { ThreadContextActionTypes as actionTypes } from './actionTypes';\nimport { ThreadContextInitialState } from './initialState';\n\ninterface ActionInterface {\n  type: actionTypes;\n  payload?: any;\n}\n\nexport default function reducer(\n  state: ThreadContextInitialState,\n  action: ActionInterface,\n): ThreadContextInitialState {\n  switch (action.type) {\n    // initialize\n    case actionTypes.INIT_USER_ID: {\n      return {\n        ...state,\n        currentUserId: action.payload,\n      };\n    }\n    case actionTypes.GET_CHANNEL_START: {\n      return {\n        ...state,\n        channelState: ChannelStateTypes.LOADING,\n        currentChannel: null,\n      };\n    }\n    case actionTypes.GET_CHANNEL_SUCCESS: {\n      const groupChannel = action.payload.groupChannel as GroupChannel;\n      return {\n        ...state,\n        channelState: ChannelStateTypes.INITIALIZED,\n        currentChannel: groupChannel,\n        // only support in normal group channel\n        isMuted: groupChannel?.members?.find((member) => member?.userId === state.currentUserId)?.isMuted || false,\n        isChannelFrozen: groupChannel?.isFrozen || false,\n      };\n    }\n    case actionTypes.GET_CHANNEL_FAILURE: {\n      return {\n        ...state,\n        channelState: ChannelStateTypes.INVALID,\n        currentChannel: null,\n      };\n    }\n    case actionTypes.SET_EMOJI_CONTAINER: {\n      const { emojiContainer } = action.payload;\n      return {\n        ...state,\n        emojiContainer: emojiContainer,\n      };\n    }\n    case actionTypes.GET_PARENT_MESSAGE_START: {\n      return {\n        ...state,\n        parentMessageState: ParentMessageStateTypes.LOADING,\n        parentMessage: null,\n      };\n    }\n    case actionTypes.GET_PARENT_MESSAGE_SUCCESS: {\n      return {\n        ...state,\n        parentMessageState: ParentMessageStateTypes.INITIALIZED,\n        parentMessage: action.payload.parentMessage,\n      };\n    }\n    case actionTypes.GET_PARENT_MESSAGE_FAILURE: {\n      return {\n        ...state,\n        parentMessageState: ParentMessageStateTypes.INVALID,\n        parentMessage: null,\n      };\n    }\n    // fetch threads\n    case actionTypes.INITIALIZE_THREAD_LIST_START: {\n      return {\n        ...state,\n        threadListState: ThreadListStateTypes.LOADING,\n        allThreadMessages: [],\n      };\n    }\n    case actionTypes.INITIALIZE_THREAD_LIST_SUCCESS: {\n      const { parentMessage, anchorMessage, threadedMessages } = action.payload;\n      const anchorMessageCreatedAt = (!anchorMessage?.messageId) ? parentMessage?.createdAt : anchorMessage?.createdAt;\n      const anchorIndex = threadedMessages.findIndex((message) => message?.createdAt > anchorMessageCreatedAt);\n      const prevThreadMessages = anchorIndex > -1 ? threadedMessages.slice(0, anchorIndex) : threadedMessages;\n      const anchorThreadMessage = anchorMessage?.messageId ? [anchorMessage] : [];\n      const nextThreadMessages = anchorIndex > -1 ? threadedMessages.slice(anchorIndex) : [];\n      return {\n        ...state,\n        threadListState: ThreadListStateTypes.INITIALIZED,\n        hasMorePrev: anchorIndex === -1 || anchorIndex === PREV_THREADS_FETCH_SIZE,\n        hasMoreNext: threadedMessages.length - anchorIndex === NEXT_THREADS_FETCH_SIZE,\n        allThreadMessages: [prevThreadMessages, anchorThreadMessage, nextThreadMessages].flat(),\n      };\n    }\n    case actionTypes.INITIALIZE_THREAD_LIST_FAILURE: {\n      return {\n        ...state,\n        threadListState: ThreadListStateTypes.INVALID,\n        allThreadMessages: [],\n      };\n    }\n    case actionTypes.GET_NEXT_MESSAGES_START: {\n      return {\n        ...state,\n      };\n    }\n    case actionTypes.GET_NEXT_MESSAGES_SUCESS: {\n      const { threadedMessages } = action.payload;\n      return {\n        ...state,\n        hasMoreNext: threadedMessages.length === NEXT_THREADS_FETCH_SIZE,\n        allThreadMessages: [...state.allThreadMessages, ...threadedMessages],\n      };\n    }\n    case actionTypes.GET_NEXT_MESSAGES_FAILURE: {\n      return {\n        ...state,\n        hasMoreNext: false,\n      };\n    }\n    case actionTypes.GET_PREV_MESSAGES_START: {\n      return {\n        ...state,\n      };\n    }\n    case actionTypes.GET_PREV_MESSAGES_SUCESS: {\n      const { threadedMessages } = action.payload;\n      return {\n        ...state,\n        hasMorePrev: threadedMessages.length === PREV_THREADS_FETCH_SIZE,\n        allThreadMessages: [...threadedMessages, ...state.allThreadMessages],\n      };\n    }\n    case actionTypes.GET_PREV_MESSAGES_FAILURE: {\n      return {\n        ...state,\n        hasMorePrev: false,\n      };\n    }\n    // event handlers - message status change\n    case actionTypes.ON_MESSAGE_RECEIVED: {\n      const { channel, message }: { channel: GroupChannel, message: UserMessage | FileMessage } = action.payload;\n\n      if (\n        state.currentChannel?.url !== channel?.url\n        || state.hasMoreNext\n        || message?.parentMessage?.messageId !== state?.parentMessage?.messageId\n      ) {\n        return state;\n      }\n      const isAlreadyReceived = state.allThreadMessages.findIndex((m) => (\n        m.messageId === message.messageId\n      )) > -1;\n      return {\n        ...state,\n        parentMessage: state.parentMessage?.messageId === message?.messageId ? message : state.parentMessage,\n        allThreadMessages: isAlreadyReceived\n          ? state.allThreadMessages.map((m) => (\n            m.messageId === message.messageId ? message : m\n          ))\n          : [\n            ...state.allThreadMessages.filter((m) => (m as UserMessage | FileMessage)?.reqId !== message?.reqId),\n            message,\n          ],\n      };\n    }\n    case actionTypes.ON_MESSAGE_UPDATED: {\n      const { channel, message } = action.payload;\n      if (state.currentChannel?.url !== channel?.url) {\n        return state;\n      }\n      return {\n        ...state,\n        parentMessage: state.parentMessage?.messageId === message?.messageId\n          ? message\n          : state.parentMessage,\n        allThreadMessages: state.allThreadMessages?.map((msg) => (\n          (msg?.messageId === message?.messageId) ? message : msg\n        )),\n      };\n    }\n    case actionTypes.ON_MESSAGE_DELETED: {\n      const { channel, messageId } = action.payload;\n      if (state.currentChannel?.url !== channel?.url) {\n        return state;\n      }\n      if (state?.parentMessage?.messageId === messageId) {\n        return {\n          ...state,\n          parentMessage: null,\n          parentMessageState: ParentMessageStateTypes.NIL,\n          allThreadMessages: [],\n        };\n      }\n      return {\n        ...state,\n        allThreadMessages: state.allThreadMessages?.filter((msg) => (\n          msg?.messageId !== messageId\n        )),\n      };\n    }\n    case actionTypes.ON_MESSAGE_DELETED_BY_REQ_ID: {\n      return {\n        ...state,\n        allThreadMessages: state.allThreadMessages.filter((m) => (\n          !compareIds((m as UserMessage | FileMessage).reqId, action.payload)\n        )),\n      };\n    }\n    case actionTypes.ON_REACTION_UPDATED: {\n      const reactionEvent = action.payload?.reactionEvent as ReactionEvent;\n      if (state?.parentMessage?.messageId === reactionEvent?.messageId) {\n        state.parentMessage?.applyReactionEvent?.(reactionEvent);\n      }\n      return {\n        ...state,\n        allThreadMessages: state.allThreadMessages.map((m) => {\n          if (reactionEvent?.messageId === m?.messageId) {\n            m?.applyReactionEvent?.(reactionEvent);\n            return m;\n          }\n          return m;\n        }),\n      };\n    }\n    // event handlers - user status change\n    case actionTypes.ON_USER_MUTED: {\n      const { channel, user } = action.payload;\n      if (state.currentChannel?.url !== channel?.url || state.currentUserId !== user?.userId) {\n        return state;\n      }\n      return {\n        ...state,\n        isMuted: true,\n      };\n    }\n    case actionTypes.ON_USER_UNMUTED: {\n      const { channel, user } = action.payload;\n      if (state.currentChannel?.url !== channel?.url || state.currentUserId !== user?.userId) {\n        return state;\n      }\n      return {\n        ...state,\n        isMuted: false,\n      };\n    }\n    case actionTypes.ON_USER_BANNED: {\n      return {\n        ...state,\n        channelState: ChannelStateTypes.NIL,\n        threadListState: ThreadListStateTypes.NIL,\n        parentMessageState: ParentMessageStateTypes.NIL,\n        currentChannel: null,\n        parentMessage: null,\n        allThreadMessages: [],\n        hasMorePrev: false,\n        hasMoreNext: false,\n      };\n    }\n    case actionTypes.ON_USER_UNBANNED: {\n      return {\n        ...state,\n      };\n    }\n    case actionTypes.ON_USER_LEFT: {\n      return {\n        ...state,\n        channelState: ChannelStateTypes.NIL,\n        threadListState: ThreadListStateTypes.NIL,\n        parentMessageState: ParentMessageStateTypes.NIL,\n        currentChannel: null,\n        parentMessage: null,\n        allThreadMessages: [],\n        hasMorePrev: false,\n        hasMoreNext: false,\n      };\n    }\n    // event handler - channel status change\n    case actionTypes.ON_CHANNEL_FROZEN: {\n      return {\n        ...state,\n        isChannelFrozen: true,\n      };\n    }\n    case actionTypes.ON_CHANNEL_UNFROZEN: {\n      return {\n        ...state,\n        isChannelFrozen: false,\n      };\n    }\n    case actionTypes.ON_OPERATOR_UPDATED: {\n      const { channel } = action.payload;\n      if (channel?.url === state.currentChannel?.url) {\n        return {\n          ...state,\n          currentChannel: channel,\n        };\n      }\n      return state;\n    }\n    // message\n    case actionTypes.SEND_MESSAGE_START: {\n      const { message } = action.payload;\n      return {\n        ...state,\n        allThreadMessages: [\n          ...state.allThreadMessages,\n          message,\n        ],\n      };\n    }\n    case actionTypes.SEND_MESSAGE_SUCESS: {\n      const { message } = action.payload;\n      const filteredThreadMessages = state.allThreadMessages.filter((m) => (\n        !compareIds((m as UserMessage)?.reqId, message?.reqId)\n      ));\n      return {\n        ...state,\n        allThreadMessages: [\n          ...filteredThreadMessages,\n          message,\n        ],\n      };\n    }\n    case actionTypes.SEND_MESSAGE_FAILURE: {\n      const { message } = action.payload;\n      return {\n        ...state,\n        allThreadMessages: state.allThreadMessages.map((m) => (\n          compareIds((m as UserMessage)?.reqId, message?.reqId)\n            ? message\n            : m\n        )),\n      };\n    }\n    case actionTypes.RESEND_MESSAGE_START: {\n      return {\n        ...state,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import { EmojiContainer } from '@sendbird/chat';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { BaseMessage, FileMessage, UserMessage } from '@sendbird/chat/message';\nimport {\n  ChannelStateTypes,\n  ParentMessageStateTypes,\n  ThreadListStateTypes,\n} from '../../types';\n\nexport interface ThreadContextInitialState {\n  currentChannel: GroupChannel;\n  allThreadMessages: Array<BaseMessage>;\n  parentMessage: UserMessage | FileMessage;\n  channelState: ChannelStateTypes;\n  parentMessageState: ParentMessageStateTypes;\n  threadListState: ThreadListStateTypes;\n  hasMorePrev: boolean;\n  hasMoreNext: boolean;\n  emojiContainer: EmojiContainer;\n  isMuted: boolean;\n  isChannelFrozen: boolean;\n  currentUserId: string;\n}\n\nconst initialState: ThreadContextInitialState = {\n  currentChannel: null,\n  allThreadMessages: [],\n  parentMessage: null,\n  channelState: ChannelStateTypes.NIL,\n  parentMessageState: ParentMessageStateTypes.NIL,\n  threadListState: ThreadListStateTypes.NIL,\n  hasMorePrev: false,\n  hasMoreNext: false,\n  emojiContainer: {} as EmojiContainer,\n  isMuted: false,\n  isChannelFrozen: false,\n  currentUserId: '',\n};\n\nexport default initialState;\n","import { useEffect } from 'react';\nimport { SendbirdGroupChat } from '@sendbird/chat/groupChannel';\n\nimport { Logger } from '../../../../lib/SendbirdState';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\nimport { FileMessage, UserMessage } from '@sendbird/chat/message';\n\ninterface DynamicProps {\n  channelUrl: string;\n  sdkInit: boolean;\n  message: UserMessage | FileMessage;\n}\n\ninterface StaticProps {\n  sdk: SendbirdGroupChat;\n  logger: Logger;\n  threadDispatcher: (props: { type: string, payload?: any }) => void;\n}\n\nexport default function useGetChannel({\n  channelUrl,\n  sdkInit,\n  message,\n}: DynamicProps, {\n  sdk,\n  logger,\n  threadDispatcher,\n}: StaticProps): void {\n  useEffect(() => {\n    // validation check\n    if (sdkInit && channelUrl && sdk?.groupChannel) {\n      threadDispatcher({\n        type: ThreadContextActionTypes.GET_CHANNEL_START,\n        payload: null,\n      });\n      sdk.groupChannel.getChannel?.(channelUrl)\n        .then((groupChannel) => {\n          logger.info('Thread | useInitialize: Get channel succeeded', groupChannel);\n          threadDispatcher({\n            type: ThreadContextActionTypes.GET_CHANNEL_SUCCESS,\n            payload: { groupChannel },\n          });\n        })\n        .catch((error) => {\n          logger.info('Thread | useInitialize: Get channel failed', error);\n          threadDispatcher({\n            type: ThreadContextActionTypes.GET_CHANNEL_FAILURE,\n            payload: error,\n          });\n        });\n    }\n  }, [message, sdkInit]);\n  /**\n   * We don't use channelUrl here,\n   * because Thread must operate independently of the channel.\n   */\n}\n","import { useEffect } from 'react';\nimport { SendbirdGroupChat } from '@sendbird/chat/groupChannel';\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\n\ninterface DanamicPrpos {\n  sdk: SendbirdGroupChat;\n}\ninterface StaticProps {\n  logger: Logger;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\nexport default function useGetAllEmoji({\n  sdk,\n}: DanamicPrpos, {\n  logger,\n  threadDispatcher,\n}: StaticProps): void {\n  useEffect(() => {\n    if (sdk?.getAllEmoji) { // validation check\n      sdk?.getAllEmoji()\n        .then((emojiContainer) => {\n          logger.info('Thread | useGetAllEmoji: Getting emojis succeeded.', emojiContainer);\n          threadDispatcher({\n            type: ThreadContextActionTypes.SET_EMOJI_CONTAINER,\n            payload: { emojiContainer },\n          });\n        })\n        .catch((error) => {\n          logger.info('Thread | useGetAllEmoji: Getting emojis failed.', error);\n        });\n    }\n  }, [sdk]);\n}\n","import { useEffect } from 'react';\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { FileMessage, ThreadedMessageListParams, UserMessage } from '@sendbird/chat/message';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\nimport { NEXT_THREADS_FETCH_SIZE, PREV_THREADS_FETCH_SIZE } from '../../consts';\n\ninterface DynamicProps {\n  sdkInit: boolean;\n  parentMessage: UserMessage | FileMessage;\n  anchorMessage?: UserMessage | FileMessage;\n  isReactionEnabled?: boolean;\n}\n\ninterface StaticProps {\n  logger: Logger;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\nexport default function useGetThreadList({\n  sdkInit,\n  parentMessage,\n  anchorMessage,\n  isReactionEnabled,\n}: DynamicProps, {\n  logger,\n  threadDispatcher,\n}: StaticProps): void {\n  useEffect(() => {\n    // validation check\n    if (sdkInit && parentMessage?.getThreadedMessagesByTimestamp) {\n      threadDispatcher({\n        type: ThreadContextActionTypes.INITIALIZE_THREAD_LIST_START,\n        payload: null,\n      });\n      const timeStamp = anchorMessage?.createdAt || 0;\n      const params = {\n        prevResultSize: PREV_THREADS_FETCH_SIZE,\n        nextResultSize: NEXT_THREADS_FETCH_SIZE,\n        includeReactions: isReactionEnabled,\n        includeMetaArray: true,\n      } as ThreadedMessageListParams;\n      logger.info('Thread | useGetThreadList: Initialize thread list start.', { timeStamp, params });\n      parentMessage.getThreadedMessagesByTimestamp?.(timeStamp, params)\n        .then(({ parentMessage, threadedMessages }) => {\n          logger.info('Thread | useGetThreadList: Initialize thread list succeeded.', { parentMessage, threadedMessages });\n          threadDispatcher({\n            type: ThreadContextActionTypes.INITIALIZE_THREAD_LIST_SUCCESS,\n            payload: {\n              parentMessage,\n              anchorMessage,\n              threadedMessages,\n            },\n          });\n        })\n        .catch((error) => {\n          logger.info('Therad | useGetThreadList: Initialize thread list failed.', error);\n          threadDispatcher({\n            type: ThreadContextActionTypes.INITIALIZE_THREAD_LIST_FAILURE,\n            payload: error,\n          });\n        });\n    }\n  }, [sdkInit, parentMessage?.messageId, anchorMessage]);\n}\n","import { useEffect } from 'react';\nimport { SendbirdGroupChat } from '@sendbird/chat/groupChannel';\n\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { BaseMessage, MessageRetrievalParams } from '@sendbird/chat/message';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\nimport { ChannelType } from '@sendbird/chat';\n\ninterface DynamicProps {\n  channelUrl: string;\n  sdkInit: boolean;\n  parentMessage?: BaseMessage;\n}\n\ninterface StaticProps {\n  sdk: SendbirdGroupChat;\n  logger: Logger;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\nexport default function useGetParentMessage({\n  channelUrl,\n  sdkInit,\n  parentMessage,\n}: DynamicProps, {\n  sdk,\n  logger,\n  threadDispatcher,\n}: StaticProps): void {\n  useEffect(() => {\n    // validation check\n    if (sdkInit && sdk?.message?.getMessage) {\n      threadDispatcher({\n        type: ThreadContextActionTypes.GET_PARENT_MESSAGE_START,\n        payload: null,\n      });\n      const params: MessageRetrievalParams = {\n        channelUrl,\n        channelType: ChannelType.GROUP,\n        messageId: parentMessage?.messageId,\n        includeMetaArray: true,\n        includeReactions: true,\n        includeThreadInfo: true,\n        includeParentMessageInfo: true,\n      };\n      logger.info('Thread | useGetParentMessage: Get parent message start.', params);\n      const fetchParentMessage = async () => {\n        const data = await sdk.message.getMessage?.(params);\n        return data;\n      };\n      fetchParentMessage()\n        .then((parentMsg) => {\n          logger.info('Thread | useGetParentMessage: Get parent message succeeded.', parentMessage);\n          parentMsg.ogMetaData = parentMessage?.ogMetaData || null;// ogMetaData is not included for now\n          threadDispatcher({\n            type: ThreadContextActionTypes.GET_PARENT_MESSAGE_SUCCESS,\n            payload: { parentMessage: parentMsg },\n          });\n        })\n        .catch((error) => {\n          logger.info('Thread | useGetParentMessage: Get parent message failed.', error);\n          threadDispatcher({\n            type: ThreadContextActionTypes.GET_PARENT_MESSAGE_FAILURE,\n            payload: error,\n          });\n        });\n    }\n  }, [sdkInit, parentMessage?.messageId]);\n  /**\n   * We don't use channelUrl here,\n   * because Thread must operate independently of the channel.\n   */\n}\n","import { useEffect } from 'react';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { FileMessage, UserMessage } from '@sendbird/chat/message';\n\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport topics from '../../../../lib/pubSub/topics';\nimport { scrollIntoLast } from '../utils';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\n\ninterface DynamicProps {\n  sdkInit: boolean;\n  currentChannel: GroupChannel;\n  parentMessage: UserMessage | FileMessage\n}\ninterface StaticProps {\n  logger: Logger;\n  pubSub: any;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\nexport default function useHandlePubsubEvents({\n  sdkInit,\n  currentChannel,\n  parentMessage,\n}: DynamicProps, {\n  pubSub,\n  threadDispatcher,\n}: StaticProps): void {\n  useEffect(() => {\n    const pubSubHandler = (): Map<any, any> => {\n      const subscriber = new Map();\n      if (!pubSub || !pubSub.subscribe) {\n        return subscriber;\n      }\n      subscriber.set(topics.SEND_USER_MESSAGE, pubSub.subscribe(topics.SEND_USER_MESSAGE, (props) => {\n        const { channel, message } = props;\n        if (currentChannel?.url === channel?.url\n          && message?.parentMessageId === parentMessage?.messageId\n        ) {\n          threadDispatcher({\n            type: ThreadContextActionTypes.SEND_MESSAGE_SUCESS,\n            payload: { message },\n          });\n        }\n        scrollIntoLast?.();\n      }));\n      subscriber.set(topics.SEND_FILE_MESSAGE, pubSub.subscribe(topics.SEND_FILE_MESSAGE, (props) => {\n        const { channel, message } = props;\n        if (currentChannel?.url === channel?.url) {\n          threadDispatcher({\n            type: ThreadContextActionTypes.SEND_MESSAGE_SUCESS,\n            payload: { message },\n          });\n        }\n        scrollIntoLast?.();\n      }));\n      subscriber.set(topics.UPDATE_USER_MESSAGE, pubSub.subscribe(topics.UPDATE_USER_MESSAGE, (msg) => {\n        const { channel, message } = msg;\n        if (currentChannel?.url === channel?.url) {\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_MESSAGE_UPDATED,\n            payload: { channel, message },\n          });\n        }\n      }));\n      subscriber.set(topics.DELETE_MESSAGE, pubSub.subscribe(topics.DELETE_MESSAGE, (msg) => {\n        const { channel, messageId } = msg;\n        if (currentChannel?.url === channel?.url) {\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_MESSAGE_DELETED,\n            payload: { messageId },\n          });\n        }\n      }));\n    };\n    const subscriber = pubSubHandler();\n    return () => {\n      subscriber?.forEach((s) => {\n        try {\n          s?.remove();\n        } catch {\n          //\n        }\n      });\n    };\n  }, [sdkInit, currentChannel]);\n}\n","import { GroupChannel, GroupChannelHandler, SendbirdGroupChat } from '@sendbird/chat/groupChannel';\nimport { useEffect } from 'react';\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport uuidv4 from '../../../../utils/uuid';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\n\ninterface DynamicProps {\n  sdk: SendbirdGroupChat;\n  currentChannel: GroupChannel;\n}\ninterface StaticProps {\n  logger: Logger;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\nexport default function useHandleChannelEvents({\n  sdk,\n  currentChannel,\n}: DynamicProps, {\n  logger,\n  threadDispatcher,\n}: StaticProps): void {\n  useEffect(() => {\n    const handlerId = uuidv4();\n    // validation check\n    if (sdk?.groupChannel?.addGroupChannelHandler\n      && currentChannel\n    ) {\n      const channelHandlerParams: GroupChannelHandler = {\n        // message status change\n        onMessageReceived(channel, message) {\n          logger.info('Thread | useHandleChannelEvents: onMessageReceived', { channel, message });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_MESSAGE_RECEIVED,\n            payload: { channel, message },\n          });\n        },\n        onMessageUpdated(channel, message) {\n          logger.info('Thread | useHandleChannelEvents: onMessageUpdated', { channel, message });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_MESSAGE_UPDATED,\n            payload: { channel, message },\n          });\n        },\n        onMessageDeleted(channel, messageId) {\n          logger.info('Thread | useHandleChannelEvents: onMessageDeleted', { channel, messageId });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_MESSAGE_DELETED,\n            payload: { channel, messageId },\n          });\n        },\n        onReactionUpdated(channel, reactionEvent) {\n          logger.info('Thread | useHandleChannelEvents: onReactionUpdated', { channel, reactionEvent });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_REACTION_UPDATED,\n            payload: { channel, reactionEvent },\n          });\n        },\n        // user status change\n        onUserMuted(channel, user) {\n          logger.info('Thread | useHandleChannelEvents: onUserMuted', { channel, user });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_USER_MUTED,\n            payload: { channel, user },\n          });\n        },\n        onUserUnmuted(channel, user) {\n          logger.info('Thread | useHandleChannelEvents: onUserUnmuted', { channel, user });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_USER_UNMUTED,\n            payload: { channel, user },\n          });\n        },\n        onUserBanned(channel, user) {\n          logger.info('Thread | useHandleChannelEvents: onUserBanned', { channel, user });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_USER_BANNED,\n            payload: { channel, user },\n          });\n        },\n        onUserUnbanned(channel, user) {\n          logger.info('Thread | useHandleChannelEvents: onUserUnbanned', { channel, user });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_USER_UNBANNED,\n            payload: { channel, user },\n          });\n        },\n        onUserLeft(channel, user) {\n          logger.info('Thread | useHandleChannelEvents: onUserLeft', { channel, user });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_USER_LEFT,\n            payload: { channel, user },\n          });\n        },\n        // channel status change\n        onChannelFrozen(channel) {\n          logger.info('Thread | useHandleChannelEvents: onChannelFrozen', { channel });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_CHANNEL_FROZEN,\n            payload: { channel },\n          });\n        },\n        onChannelUnfrozen(channel) {\n          logger.info('Thread | useHandleChannelEvents: onChannelUnfrozen', { channel });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_CHANNEL_UNFROZEN,\n            payload: { channel },\n          });\n        },\n        onOperatorUpdated(channel, users) {\n          logger.info('Thread | useHandleChannelEvents: onOperatorUpdated', { channel, users });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_OPERATOR_UPDATED,\n            payload: { channel, users },\n          });\n        },\n      };\n      const channelHandler = new GroupChannelHandler(channelHandlerParams);\n      sdk.groupChannel.addGroupChannelHandler?.(handlerId, channelHandler);\n      logger.info('Thread | useHandleChannelEvents: Added channelHandler in Thread', { handlerId, channelHandler });\n    }\n    return () => {\n      // validation check\n      if (handlerId && sdk?.groupChannel?.removeGroupChannelHandler) {\n        sdk.groupChannel.removeGroupChannelHandler?.(handlerId);\n        logger.info('Thread | useHandleChannelEvents: Removed channelHandler in Thread.', handlerId);\n      }\n    };\n  }, [\n    sdk?.groupChannel,\n    currentChannel,\n  ]);\n}\n","import { useCallback } from 'react';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { FileMessage, FileMessageCreateParams } from '@sendbird/chat/message';\n\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\nimport topics from '../../../../lib/pubSub/topics';\nimport { scrollIntoLast } from '../utils';\n\ninterface DynamicProps {\n  currentChannel: GroupChannel;\n}\ninterface StaticProps {\n  logger: Logger;\n  pubSub: any;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\ninterface LocalFileMessage extends FileMessage {\n  localUrl: string;\n  file: File;\n}\n\nexport default function useSendFileMessageCallback({\n  currentChannel,\n}: DynamicProps, {\n  logger,\n  pubSub,\n  threadDispatcher,\n}: StaticProps): (file, quoteMessage) => void {\n  const sendMessage = useCallback((file, quoteMessage) => {\n    const createParamsDefault = () => {\n      const params = {} as FileMessageCreateParams;\n      params.file = file;\n      if (quoteMessage) {\n        params.isReplyToChannel = true;\n        params.parentMessageId = quoteMessage.messageId;\n      }\n      return params;\n    };\n    const params = createParamsDefault();\n    logger.info('Thread | useSendFileMessageCallback: Sending file message start.', params);\n\n    currentChannel?.sendFileMessage(params)\n      .onPending((pendingMessage) => {\n        threadDispatcher({\n          type: ThreadContextActionTypes.SEND_MESSAGE_START,\n          payload: {\n            /* pubSub is used instead of messagesDispatcher\n            to avoid redundantly calling `messageActionTypes.SEND_MESSAGEGE_START` */\n            message: {\n              ...pendingMessage,\n              url: URL.createObjectURL(file),\n              // pending thumbnail message seems to be failed\n              requestState: 'pending',\n            },\n          },\n        });\n        setTimeout(() => scrollIntoLast(), 1000);\n      })\n      .onFailed((error, message) => {\n        (message as LocalFileMessage).localUrl = URL.createObjectURL(file);\n        (message as LocalFileMessage).file = file;\n        logger.info('Thread | useSendFileMessageCallback: Sending file message failed.', { message, error });\n        threadDispatcher({\n          type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,\n          payload: { message, error },\n        });\n      })\n      .onSucceeded((message) => {\n        logger.info('Thread | useSendFileMessageCallback: Sending file message succeeded.', message);\n        pubSub.publish(topics.SEND_FILE_MESSAGE, {\n          channel: currentChannel,\n          message: message,\n        });\n      });\n  }, [currentChannel]);\n  return sendMessage;\n}\n","import { useCallback } from 'react';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { UserMessage, UserMessageUpdateParams } from '@sendbird/chat/message';\n\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\n\nimport topics from '../../../../lib/pubSub/topics';\n\ninterface DynamicProps {\n  currentChannel: GroupChannel;\n  isMentionEnabled?: boolean;\n}\ninterface StaticProps {\n  logger: Logger;\n  pubSub: any;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\nexport default function useUpdateMessageCallback({\n  currentChannel,\n  isMentionEnabled,\n}: DynamicProps, {\n  logger,\n  pubSub,\n  threadDispatcher,\n}: StaticProps): (props) => void {\n  return useCallback((props) => {\n    const {\n      messageId,\n      message,\n      mentionedUsers,\n      mentionTemplate,\n    } = props;\n    const createParamsDefault = () => {\n      const params = {} as UserMessageUpdateParams;\n      params.message = message;\n      if (isMentionEnabled && mentionedUsers?.length > 0) {\n        params.mentionedUsers = mentionedUsers;\n      }\n      if (isMentionEnabled && mentionTemplate) {\n        params.mentionedMessageTemplate = mentionTemplate;\n      } else {\n        params.mentionedMessageTemplate = message;\n      }\n      return params;\n    };\n\n    const params = createParamsDefault();\n    logger.info('Thread | useUpdateMessageCallback: Message update start.', params);\n\n    currentChannel?.updateUserMessage?.(messageId, params)\n      .then((message: UserMessage) => {\n        logger.info('Thread | useUpdateMessageCallback: Message update succeeded.', message);\n        threadDispatcher({\n          type: ThreadContextActionTypes.ON_MESSAGE_UPDATED,\n          payload: {\n            channel: currentChannel,\n            message: message,\n          },\n        });\n        pubSub.publish(\n          topics.UPDATE_USER_MESSAGE,\n          {\n            fromSelector: true,\n            channel: currentChannel,\n            message: message,\n          },\n        );\n      });\n  }, [currentChannel, isMentionEnabled]);\n}\n","import { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { FileMessage, UserMessage } from '@sendbird/chat/message';\nimport { useCallback } from 'react';\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\n\ninterface DynamicProps {\n  currentChannel: GroupChannel;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\ninterface StaticProps {\n  logger: Logger;\n}\n\nexport default function useDeleteMessageCallback({\n  currentChannel,\n  threadDispatcher,\n}: DynamicProps, {\n  logger,\n}: StaticProps): (message: UserMessage | FileMessage) => Promise<UserMessage | FileMessage> {\n  return useCallback((message: UserMessage | FileMessage): Promise<UserMessage | FileMessage> => {\n    logger.info('Thread | useDeleteMessageCallback: Deleting message.', message);\n    const { sendingStatus } = message;\n    return new Promise((resolve, reject) => {\n      logger.info('Thread | useDeleteMessageCallback: Deleting message requestState:', sendingStatus);\n      // Message is only on local\n      if (sendingStatus === 'failed' || sendingStatus === 'pending') {\n        logger.info('Thread | useDeleteMessageCallback: Deleted message from local:', message);\n        threadDispatcher({\n          type: ThreadContextActionTypes.ON_MESSAGE_DELETED_BY_REQ_ID,\n          payload: message.reqId,\n        });\n        resolve(message);\n      }\n\n      logger.info('Thread | useDeleteMessageCallback: Deleting message from remote:', sendingStatus);\n      currentChannel?.deleteMessage?.(message)\n        .then(() => {\n          logger.info('Thread | useDeleteMessageCallback: Deleting message success!', message);\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_MESSAGE_DELETED,\n            payload: { message, channel: currentChannel },\n          });\n          resolve(message);\n        })\n        .catch((err) => {\n          logger.warning('Thread | useDeleteMessageCallback: Deleting message failed!', err);\n          reject(err);\n        });\n    });\n  }, [currentChannel]);\n}\n","import { useCallback } from 'react';\nimport { BaseMessage, FileMessage, ThreadedMessageListParams, UserMessage } from '@sendbird/chat/message';\n\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { PREV_THREADS_FETCH_SIZE } from '../../consts';\nimport { ThreadListStateTypes } from '../../types';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\n\ninterface DynamicProps {\n  hasMorePrev: boolean;\n  parentMessage: UserMessage | FileMessage;\n  threadListState: ThreadListStateTypes;\n  oldestMessageTimeStamp: number;\n  isReactionEnabled?: boolean;\n}\ninterface StaticProps {\n  logger: Logger;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\nexport default function useGetPrevThreadsCallback({\n  hasMorePrev,\n  parentMessage,\n  threadListState,\n  oldestMessageTimeStamp,\n  isReactionEnabled,\n}: DynamicProps, {\n  logger,\n  threadDispatcher,\n}: StaticProps): (callback?: (messages?: Array<BaseMessage>) => void) => void {\n  return useCallback((callback) => {\n    // validation check\n    if (threadListState === ThreadListStateTypes.INITIALIZED\n      && parentMessage?.getThreadedMessagesByTimestamp\n      && oldestMessageTimeStamp !== 0\n    ) {\n      threadDispatcher({\n        type: ThreadContextActionTypes.GET_PREV_MESSAGES_START,\n        payload: null,\n      });\n      parentMessage.getThreadedMessagesByTimestamp?.(\n        oldestMessageTimeStamp,\n        {\n          prevResultSize: PREV_THREADS_FETCH_SIZE,\n          nextResultSize: 0,\n          includeReactions: isReactionEnabled,\n          includeMetaArray: true,\n        } as ThreadedMessageListParams,\n      )\n        .then(({ parentMessage, threadedMessages }) => {\n          logger.info('Thread | useGetPrevThreadsCallback: Fetch prev threads succeeded.', { parentMessage, threadedMessages });\n          threadDispatcher({\n            type: ThreadContextActionTypes.GET_PREV_MESSAGES_SUCESS,\n            payload: { parentMessage, threadedMessages },\n          });\n          callback(threadedMessages);\n        })\n        .catch((error) => {\n          logger.info('Thread | useGetPrevThreadsCallback: Fetch prev threads failed.', error);\n          threadDispatcher({\n            type: ThreadContextActionTypes.GET_PREV_MESSAGES_FAILURE,\n            payload: error,\n          });\n        });\n    }\n  }, [\n    hasMorePrev,\n    parentMessage,\n    threadListState,\n    oldestMessageTimeStamp,\n  ]);\n}\n","import { BaseMessage, FileMessage, ThreadedMessageListParams, UserMessage } from '@sendbird/chat/message';\nimport { useCallback } from 'react';\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { NEXT_THREADS_FETCH_SIZE } from '../../consts';\nimport { ThreadListStateTypes } from '../../types';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\n\ninterface DynamicProps {\n  hasMoreNext: boolean;\n  parentMessage: UserMessage | FileMessage;\n  threadListState: ThreadListStateTypes;\n  latestMessageTimeStamp: number;\n  isReactionEnabled?: boolean;\n}\ninterface StaticProps {\n  logger: Logger;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\nexport default function useGetNextThreadsCallback({\n  hasMoreNext,\n  parentMessage,\n  threadListState,\n  latestMessageTimeStamp,\n  isReactionEnabled,\n}: DynamicProps, {\n  logger,\n  threadDispatcher,\n}: StaticProps): (callback: (messages?: Array<BaseMessage>) => void) => void {\n  return useCallback((callback) => {\n    // validation check\n    if (threadListState === ThreadListStateTypes.INITIALIZED\n      && parentMessage?.getThreadedMessagesByTimestamp\n      && latestMessageTimeStamp !== 0\n    ) {\n      threadDispatcher({\n        type: ThreadContextActionTypes.GET_NEXT_MESSAGES_START,\n        payload: null,\n      });\n      parentMessage.getThreadedMessagesByTimestamp?.(\n        latestMessageTimeStamp,\n        {\n          prevResultSize: 0,\n          nextResultSize: NEXT_THREADS_FETCH_SIZE,\n          includeReactions: isReactionEnabled,\n          includeMetaArray: true,\n        } as ThreadedMessageListParams,\n      )\n        .then(({ parentMessage, threadedMessages }) => {\n          logger.info('Thread | useGetNextThreadsCallback: Fetch next threads succeeded.', { parentMessage, threadedMessages });\n          threadDispatcher({\n            type: ThreadContextActionTypes.GET_NEXT_MESSAGES_SUCESS,\n            payload: { parentMessage, threadedMessages },\n          });\n          callback(threadedMessages);\n        })\n        .catch((error) => {\n          logger.info('Thread | useGetNextThreadsCallback: Fetch next threads failed.', error);\n          threadDispatcher({\n            type: ThreadContextActionTypes.GET_NEXT_MESSAGES_FAILURE,\n            payload: error,\n          });\n        });\n    }\n  }, [\n    hasMoreNext,\n    parentMessage,\n    threadListState,\n    latestMessageTimeStamp,\n  ]);\n}\n","import { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { useCallback } from 'react';\nimport { Logger } from '../../../../lib/SendbirdState';\n\ninterface DynamicProps {\n  currentChannel: GroupChannel;\n}\ninterface StaticProps {\n  logger: Logger;\n}\n\nexport default function useToggleReactionCallback({\n  currentChannel,\n}: DynamicProps, {\n  logger,\n}: StaticProps): (message, key, isReacted) => void {\n  return useCallback((message, key, isReacted) => {\n    if (isReacted) {\n      currentChannel?.deleteReaction?.(message, key)\n        .then((res) => {\n          logger.info('Thread | useToggleReactionsCallback: Delete reaction succeeded.', res);\n        })\n        .catch((err) => {\n          logger.warning('Thread | useToggleReactionsCallback: Delete reaction failed.', err);\n        });\n      return;\n    }\n    currentChannel?.addReaction?.(message, key)\n      .then((res) => {\n        logger.info('Thread | useToggleReactionsCallback: Add reaction succeeded.', res);\n      })\n      .catch((err) => {\n        logger.warning('Thread | useToggleReactionsCallback: Add reaction failed.', err);\n      });\n  }, [currentChannel]);\n}\n","import { useCallback } from 'react';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { UserMessageCreateParams } from '@sendbird/chat/message';\n\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\nimport topics from '../../../../lib/pubSub/topics';\n\ninterface DynamicProps {\n  isMentionEnabled: boolean;\n  currentChannel: GroupChannel;\n}\ninterface StaticProps {\n  logger: Logger;\n  pubSub: any;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\nexport default function useSendUserMessageCallback({\n  isMentionEnabled,\n  currentChannel,\n}: DynamicProps, {\n  logger,\n  pubSub,\n  threadDispatcher,\n}: StaticProps): (props) => void {\n  const sendMessage = useCallback((props) => {\n    const {\n      message,\n      quoteMessage = null,\n      mentionTemplate,\n      mentionedUsers,\n    } = props;\n    const createDefaultParams = () => {\n      const params = {} as UserMessageCreateParams;\n      params.message = message;\n      if (isMentionEnabled && mentionedUsers?.length > 0) {\n        params.mentionedUsers = mentionedUsers;\n      }\n      if (isMentionEnabled && mentionTemplate && mentionedUsers?.length > 0) {\n        params.mentionedMessageTemplate = mentionTemplate;\n      }\n      if (quoteMessage) {\n        params.isReplyToChannel = true;\n        params.parentMessageId = quoteMessage.messageId;\n      }\n      return params;\n    };\n\n    const params = createDefaultParams();\n    logger.info('Thread | useSendUserMessageCallback: Sending user message start.', params);\n\n    if (currentChannel?.sendUserMessage) {\n      currentChannel?.sendUserMessage(params)\n        .onPending((pendingMessage) => {\n          threadDispatcher({\n            type: ThreadContextActionTypes.SEND_MESSAGE_START,\n            payload: { message: pendingMessage },\n          });\n        })\n        .onFailed((error, message) => {\n          logger.info('Thread | useSendUserMessageCallback: Sending user message failed.', { message, error });\n          threadDispatcher({\n            type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,\n            payload: { error, message },\n          });\n        })\n        .onSucceeded((message) => {\n          logger.info('Thread | useSendUserMessageCallback: Sending user message succeeded.', message);\n          threadDispatcher({\n            type: ThreadContextActionTypes.SEND_MESSAGE_SUCESS,\n            payload: { message },\n          });\n          // because Thread doesn't subscribe SEND_USER_MESSAGE\n          pubSub.publish(topics.SEND_USER_MESSAGE, {\n            channel: currentChannel,\n            message: message,\n          });\n        });\n    }\n  }, [isMentionEnabled, currentChannel]);\n  return sendMessage;\n}\n","import { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { FileMessage, MessageType, SendingStatus, UserMessage } from '@sendbird/chat/message';\nimport { useCallback } from 'react';\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\nimport topics from '../../../../lib/pubSub/topics';\n\ninterface DynamicProps {\n  currentChannel: GroupChannel;\n}\ninterface StaticProps {\n  logger: Logger;\n  pubSub: any;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\nexport default function useResendMessageCallback({\n  currentChannel,\n}: DynamicProps, {\n  logger,\n  pubSub,\n  threadDispatcher,\n}: StaticProps): (failedMessage: UserMessage | FileMessage) => void {\n  return useCallback((failedMessage: UserMessage | FileMessage) => {\n    if ((failedMessage as UserMessage | FileMessage)?.isResendable) {\n      failedMessage.sendingStatus = SendingStatus.PENDING;\n      logger.info('Thread | useResendMessageCallback: Resending failedMessage start.', failedMessage);\n      threadDispatcher({\n        type: ThreadContextActionTypes.RESEND_MESSAGE_START,\n        payload: failedMessage,\n      });\n\n      if (failedMessage?.isUserMessage?.() || failedMessage?.messageType === MessageType.USER) {\n        currentChannel?.resendUserMessage(failedMessage as UserMessage)\n          .then((message) => {\n            logger.info('Thread | useResendMessageCallback: Resending failedMessage succeeded.', message);\n            threadDispatcher({\n              type: ThreadContextActionTypes.SEND_MESSAGE_SUCESS,\n              payload: { message },\n            });\n            pubSub.publish(topics.SEND_USER_MESSAGE, {\n              channel: currentChannel,\n              message: message,\n            });\n          })\n          .catch((error) => {\n            logger.warning('Thread | useResendMessageCallback: Resending failedMessage failed.', error);\n            failedMessage.sendingStatus = SendingStatus.FAILED;\n            threadDispatcher({\n              type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,\n              payload: { message: failedMessage },\n            });\n          });\n      } else if (failedMessage?.isFileMessage?.() || failedMessage?.messageType === MessageType.FILE) {\n        currentChannel?.resendFileMessage?.(failedMessage as FileMessage)\n          .then((message) => {\n            logger.info('Thread | useResendMessageCallback: Resending failedMessage succeeded.', message);\n            threadDispatcher({\n              type: ThreadContextActionTypes.SEND_MESSAGE_SUCESS,\n              payload: { message },\n            });\n          })\n          .catch((error) => {\n            logger.warning('Thread | useResendMessageCallback: Resending failedMessage failed.', error);\n            failedMessage.sendingStatus = SendingStatus.FAILED;\n            threadDispatcher({\n              type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,\n              payload: { message: failedMessage },\n            });\n            pubSub.publish(topics.SEND_FILE_MESSAGE, {\n              channel: currentChannel,\n              message: failedMessage,\n            });\n          });\n      } else {\n        logger.warning('Thread | useResendMessageCallback: Message is not resendable.', failedMessage);\n        failedMessage.sendingStatus = SendingStatus.FAILED;\n        threadDispatcher({\n          type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,\n          payload: { message: failedMessage },\n        });\n      }\n    }\n  }, [currentChannel]);\n}\n","import { useCallback } from 'react';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { FileMessage, FileMessageCreateParams, MessageMetaArray, UserMessage } from '@sendbird/chat/message';\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\nimport topics from '../../../../lib/pubSub/topics';\nimport { scrollIntoLast } from '../utils';\nimport {\n  META_ARRAY_MESSAGE_TYPE_KEY,\n  META_ARRAY_MESSAGE_TYPE_VALUE__VOICE,\n  META_ARRAY_VOICE_DURATION_KEY,\n  VOICE_MESSAGE_FILE_NAME,\n  VOICE_MESSAGE_MIME_TYPE,\n} from '../../../../utils/consts';\n\ninterface DynamicParams {\n  currentChannel: GroupChannel;\n  onBeforeSendVoiceMessage?: (file: File, quoteMessage?: UserMessage | FileMessage) => FileMessageCreateParams;\n}\ninterface StaticParams {\n  logger: Logger;\n  pubSub: any;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\ntype FuncType = (file: File, duration: number, quoteMessage: UserMessage | FileMessage) => void;\ninterface LocalFileMessage extends FileMessage {\n  localUrl: string;\n  file: File;\n}\n\nexport const useSendVoiceMessageCallback = ({\n  currentChannel,\n  onBeforeSendVoiceMessage,\n}: DynamicParams,\n{\n  logger,\n  pubSub,\n  threadDispatcher,\n}: StaticParams): FuncType => {\n  const sendMessage = useCallback((file: File, duration: number, quoteMessage: UserMessage | FileMessage) => {\n    const messageParams: FileMessageCreateParams = (\n      onBeforeSendVoiceMessage\n      && typeof onBeforeSendVoiceMessage === 'function'\n    )\n      ? onBeforeSendVoiceMessage(file, quoteMessage)\n      : {\n        file,\n        fileName: VOICE_MESSAGE_FILE_NAME,\n        mimeType: VOICE_MESSAGE_MIME_TYPE,\n        metaArrays: [\n          new MessageMetaArray({\n            key: META_ARRAY_VOICE_DURATION_KEY,\n            value: [`${duration}`],\n          }),\n          new MessageMetaArray({\n            key: META_ARRAY_MESSAGE_TYPE_KEY,\n            value: [META_ARRAY_MESSAGE_TYPE_VALUE__VOICE],\n          }),\n        ],\n      };\n    if (quoteMessage) {\n      messageParams.isReplyToChannel = true;\n      messageParams.parentMessageId = quoteMessage.messageId;\n    }\n    logger.info('Thread | useSendVoiceMessageCallback:  Start sending voice message', messageParams);\n    currentChannel?.sendFileMessage(messageParams)\n      .onPending((pendingMessage) => {\n        threadDispatcher({\n          type: ThreadContextActionTypes.SEND_MESSAGE_START,\n          payload: {\n            /* pubSub is used instead of messagesDispatcher\n            to avoid redundantly calling `messageActionTypes.SEND_MESSAGEGE_START` */\n            message: {\n              ...pendingMessage,\n              url: URL.createObjectURL(file),\n              // pending thumbnail message seems to be failed\n              requestState: 'pending',\n            },\n          },\n        });\n        setTimeout(() => scrollIntoLast(), 1000);\n      })\n      .onFailed((error, message) => {\n        (message as LocalFileMessage).localUrl = URL.createObjectURL(file);\n        (message as LocalFileMessage).file = file;\n        logger.info('Thread | useSendVoiceMessageCallback: Sending voice message failed.', { message, error });\n        threadDispatcher({\n          type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,\n          payload: { message, error },\n        });\n      })\n      .onSucceeded((message) => {\n        logger.info('Thread | useSendVoiceMessageCallback: Sending voice message succeeded.', message);\n        pubSub.publish(topics.SEND_FILE_MESSAGE, {\n          channel: currentChannel,\n          message: message,\n        });\n      });\n  }, [\n    currentChannel,\n    onBeforeSendVoiceMessage,\n  ]);\n  return sendMessage;\n};\n\nexport default useSendVoiceMessageCallback;\n","import React, { useReducer, useMemo, useEffect, ReactElement } from 'react';\nimport { User } from '@sendbird/chat';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { BaseMessage, FileMessage, FileMessageCreateParams, UserMessage } from '@sendbird/chat/message';\n\nimport { getNicknamesMapFromMembers, getParentMessageFrom } from './utils';\nimport { UserProfileProvider } from '../../../lib/UserProfileContext';\nimport { CustomUseReducerDispatcher } from '../../../lib/SendbirdState';\nimport useSendbirdStateContext from '../../../hooks/useSendbirdStateContext';\n\nimport threadReducer from './dux/reducer';\nimport { ThreadContextActionTypes } from './dux/actionTypes';\nimport threadInitialState, { ThreadContextInitialState } from './dux/initialState';\n\nimport useGetChannel from './hooks/useGetChannel';\nimport useGetAllEmoji from './hooks/useGetAllEmoji';\nimport useGetThreadList from './hooks/useGetThreadList';\nimport useGetParentMessage from './hooks/useGetParentMessage';\nimport useHandlePubsubEvents from './hooks/useHandlePubsubEvents';\nimport useHandleChannelEvents from './hooks/useHandleChannelEvents';\nimport useSendFileMessageCallback from './hooks/useSendFileMessage';\nimport useUpdateMessageCallback from './hooks/useUpdateMessageCallback';\nimport useDeleteMessageCallback from './hooks/useDeleteMessageCallback';\nimport useGetPrevThreadsCallback from './hooks/useGetPrevThreadsCallback';\nimport useGetNextThreadsCallback from './hooks/useGetNextThreadsCallback';\nimport useToggleReactionCallback from './hooks/useToggleReactionsCallback';\nimport useSendUserMessageCallback from './hooks/useSendUserMessageCallback';\nimport useResendMessageCallback from './hooks/useResendMessageCallback';\nimport useSendVoiceMessageCallback from './hooks/useSendVoiceMessageCallback';\n\nexport type ThreadProviderProps = {\n  children?: React.ReactElement;\n  channelUrl: string;\n  message: UserMessage | FileMessage | null;\n  onHeaderActionClick?: () => void;\n  onMoveToParentMessage?: (props: { message: UserMessage | FileMessage, channel: GroupChannel }) => void;\n  onBeforeSendVoiceMessage?: (file: File, quotedMessage?: UserMessage | FileMessage) => FileMessageCreateParams;\n  // User Profile\n  disableUserProfile?: boolean;\n  renderUserProfile?: (props: { user: User, close: () => void }) => ReactElement;\n  onUserProfileMessage?: (channel: GroupChannel) => void;\n};\nexport interface ThreadProviderInterface extends ThreadProviderProps, ThreadContextInitialState {\n  // hooks for fetching threads\n  fetchPrevThreads: (callback?: (messages?: Array<BaseMessage>) => void) => void;\n  fetchNextThreads: (callback?: (messages?: Array<BaseMessage>) => void) => void;\n  toggleReaction: (message, key, isReacted) => void;\n  sendMessage: (props: {\n    message: UserMessage,\n    quoteMessage?: UserMessage | FileMessage,\n    mentionTemplate?: string,\n    mentionedUsers?: Array<User>,\n  }) => void;\n  sendFileMessage: (file: File, quoteMessage: UserMessage | FileMessage) => void;\n  sendVoiceMessage: (file: File, duration: number, quoteMessage?: UserMessage | FileMessage) => void;\n  resendMessage: (failedMessage: UserMessage | FileMessage) => void;\n  updateMessage: (props, callback?: () => void) => void;\n  deleteMessage: (message: UserMessage | FileMessage) => Promise<UserMessage | FileMessage>;\n  nicknamesMap: Map<string, string>;\n}\nconst ThreadContext = React.createContext<ThreadProviderInterface | null>(null);\n\nexport const ThreadProvider: React.FC<ThreadProviderProps> = (props: ThreadProviderProps) => {\n  const {\n    children,\n    channelUrl,\n    onHeaderActionClick,\n    onMoveToParentMessage,\n    onBeforeSendVoiceMessage,\n    // User Profile\n    disableUserProfile,\n    renderUserProfile,\n    onUserProfileMessage,\n  } = props;\n  const propsMessage = props?.message;\n  const propsParentMessage = getParentMessageFrom(propsMessage);\n  // Context from SendbirdProvider\n  const globalStore = useSendbirdStateContext();\n  const { stores, config } = globalStore;\n  // // stores\n  const { sdkStore, userStore } = stores;\n  const { sdk } = sdkStore;\n  const { user } = userStore;\n  const sdkInit = sdkStore?.initialized;\n  // // config\n  const {\n    logger,\n    pubSub,\n    replyType,\n    isMentionEnabled,\n    isReactionEnabled,\n  } = config;\n\n  // dux of Thread\n  const [threadStore, threadDispatcher] = useReducer(\n    threadReducer,\n    threadInitialState,\n  ) as [ThreadContextInitialState, CustomUseReducerDispatcher];\n  const {\n    currentChannel,\n    allThreadMessages,\n    parentMessage,\n    channelState,\n    threadListState,\n    parentMessageState,\n    hasMorePrev,\n    hasMoreNext,\n    emojiContainer,\n    isMuted,\n    isChannelFrozen,\n    currentUserId,\n  }: ThreadContextInitialState = threadStore;\n\n  // Initialization\n  useEffect(() => {\n    threadDispatcher({\n      type: ThreadContextActionTypes.INIT_USER_ID,\n      payload: user?.userId,\n    });\n  }, [user]);\n  useGetChannel({\n    channelUrl,\n    sdkInit,\n    message: propsMessage,\n  }, { sdk, logger, threadDispatcher });\n  useGetParentMessage({\n    channelUrl,\n    sdkInit,\n    parentMessage: propsParentMessage,\n  }, { sdk, logger, threadDispatcher });\n  useGetThreadList({\n    sdkInit,\n    parentMessage,\n    isReactionEnabled,\n    anchorMessage: propsMessage?.messageId !== propsParentMessage?.messageId ? propsMessage : null,\n    // anchorMessage should be null when parentMessage doesn't exist\n  }, { logger, threadDispatcher });\n  useGetAllEmoji({ sdk }, { logger, threadDispatcher });\n  // Handle channel events\n  useHandleChannelEvents({\n    sdk,\n    currentChannel,\n  }, { logger, threadDispatcher });\n  useHandlePubsubEvents({\n    sdkInit,\n    currentChannel,\n    parentMessage,\n  }, { logger, pubSub, threadDispatcher });\n\n  // callbacks\n  const fetchPrevThreads = useGetPrevThreadsCallback({\n    hasMorePrev,\n    parentMessage,\n    threadListState,\n    isReactionEnabled,\n    oldestMessageTimeStamp: allThreadMessages[0]?.createdAt || 0,\n  }, { logger, threadDispatcher });\n  const fetchNextThreads = useGetNextThreadsCallback({\n    hasMoreNext,\n    parentMessage,\n    threadListState,\n    isReactionEnabled,\n    latestMessageTimeStamp: allThreadMessages[allThreadMessages.length - 1]?.createdAt || 0,\n  }, { logger, threadDispatcher });\n  const toggleReaction = useToggleReactionCallback({ currentChannel }, { logger });\n  const sendMessage = useSendUserMessageCallback({\n    isMentionEnabled,\n    currentChannel,\n  }, { logger, pubSub, threadDispatcher });\n  const sendFileMessage = useSendFileMessageCallback({\n    currentChannel,\n  }, { logger, pubSub, threadDispatcher });\n  const sendVoiceMessage = useSendVoiceMessageCallback({\n    currentChannel, onBeforeSendVoiceMessage,\n  }, { logger, pubSub, threadDispatcher });\n  const resendMessage = useResendMessageCallback({\n    currentChannel,\n  }, { logger, pubSub, threadDispatcher });\n  const updateMessage = useUpdateMessageCallback({\n    currentChannel,\n    isMentionEnabled,\n  }, { logger, pubSub, threadDispatcher });\n  const deleteMessage = useDeleteMessageCallback({ currentChannel, threadDispatcher }, { logger });\n\n  // memo\n  const nicknamesMap: Map<string, string> = useMemo(() => (\n    (replyType && currentChannel)\n      ? getNicknamesMapFromMembers(currentChannel?.members)\n      : new Map()\n  ), [currentChannel?.members]);\n\n  return (\n    <ThreadContext.Provider\n      value={{\n        // ThreadProviderProps\n        channelUrl,\n        message: propsMessage,\n        onHeaderActionClick,\n        onMoveToParentMessage,\n        // ThreadContextInitialState\n        currentChannel,\n        allThreadMessages,\n        parentMessage,\n        channelState,\n        threadListState,\n        parentMessageState,\n        hasMorePrev,\n        hasMoreNext,\n        emojiContainer,\n        // hooks\n        fetchPrevThreads,\n        fetchNextThreads,\n        toggleReaction,\n        sendMessage,\n        sendFileMessage,\n        sendVoiceMessage,\n        resendMessage,\n        updateMessage,\n        deleteMessage,\n        // context\n        nicknamesMap,\n        isMuted,\n        isChannelFrozen,\n        currentUserId,\n      }}\n    >\n      {/* UserProfileProvider */}\n      <UserProfileProvider\n        disableUserProfile={disableUserProfile}\n        renderUserProfile={renderUserProfile}\n        onUserProfileMessage={onUserProfileMessage}\n      >\n        {children}\n      </UserProfileProvider>\n    </ThreadContext.Provider>\n  );\n};\n\nexport type UseThreadContextType = () => ThreadProviderInterface;\nexport const useThreadContext: UseThreadContextType = () => React.useContext(ThreadContext);\n"],"names":["getNicknamesMapFromMembers","members","arguments","length","undefined","nicknamesMap","Map","memberIndex","userId","nickname","set","getParentMessageFrom","message","isParentMessage","isThreadMessage","parentMessage","parentMessageId","threadInfo","isAboutSame","a","b","px","Math","abs","isEmpty","val","compareIds","aString","toString","bString","getMessageCreatedAt","format","createdAt","isReadMessage","channel","getOutgoingMessageState","OutgoingMessageStates","READ","isSameGroup","comparingMessage","currentChannel","_message$sender","_comparingMessage$sen","_message$sender2","_comparingMessage$sen2","messageType","sender","sendingStatus","compareMessagesForGrouping","prevMessage","currMessage","nextMessage","replyType","isAcceptable","scrollIntoLast","intialTry","MAX_TRIES","currentTry","scrollDOM","document","querySelector","scrollTop","scrollHeight","error","setTimeout","PREV_THREADS_FETCH_SIZE","NEXT_THREADS_FETCH_SIZE","ThreadContextActionTypes","reducer","state","action","type","actionTypes","INIT_USER_ID","_objectSpread","currentUserId","payload","GET_CHANNEL_START","channelState","ChannelStateTypes","LOADING","GET_CHANNEL_SUCCESS","_groupChannel$members","_groupChannel$members2","groupChannel","INITIALIZED","isMuted","find","member","isChannelFrozen","isFrozen","GET_CHANNEL_FAILURE","INVALID","SET_EMOJI_CONTAINER","emojiContainer","GET_PARENT_MESSAGE_START","parentMessageState","ParentMessageStateTypes","GET_PARENT_MESSAGE_SUCCESS","GET_PARENT_MESSAGE_FAILURE","INITIALIZE_THREAD_LIST_START","threadListState","ThreadListStateTypes","allThreadMessages","INITIALIZE_THREAD_LIST_SUCCESS","anchorMessage","threadedMessages","anchorMessageCreatedAt","messageId","anchorIndex","findIndex","prevThreadMessages","slice","anchorThreadMessage","nextThreadMessages","hasMorePrev","hasMoreNext","flat","INITIALIZE_THREAD_LIST_FAILURE","GET_NEXT_MESSAGES_START","GET_NEXT_MESSAGES_SUCESS","GET_NEXT_MESSAGES_FAILURE","GET_PREV_MESSAGES_START","GET_PREV_MESSAGES_SUCESS","GET_PREV_MESSAGES_FAILURE","ON_MESSAGE_RECEIVED","_state$currentChannel","_message$parentMessag","_state$parentMessage","_state$parentMessage2","url","isAlreadyReceived","m","map","filter","reqId","ON_MESSAGE_UPDATED","_state$currentChannel2","_state$parentMessage3","_state$allThreadMessa","msg","ON_MESSAGE_DELETED","_state$currentChannel3","_state$parentMessage4","_state$allThreadMessa2","NIL","ON_MESSAGE_DELETED_BY_REQ_ID","ON_REACTION_UPDATED","_action$payload","_state$parentMessage5","reactionEvent","_state$parentMessage6","_state$parentMessage7","applyReactionEvent","call","_m$applyReactionEvent","ON_USER_MUTED","_state$currentChannel4","user","ON_USER_UNMUTED","_state$currentChannel5","ON_USER_BANNED","ON_USER_UNBANNED","ON_USER_LEFT","ON_CHANNEL_FROZEN","ON_CHANNEL_UNFROZEN","ON_OPERATOR_UPDATED","_state$currentChannel6","SEND_MESSAGE_START","SEND_MESSAGE_SUCESS","filteredThreadMessages","SEND_MESSAGE_FAILURE","RESEND_MESSAGE_START","initialState","useGetChannel","_ref","_ref2","channelUrl","sdkInit","sdk","logger","threadDispatcher","useEffect","_sdk$groupChannel$get","_sdk$groupChannel","getChannel","then","info","catch","useGetAllEmoji","getAllEmoji","useGetThreadList","isReactionEnabled","getThreadedMessagesByTimestamp","_parentMessage$getThr","timeStamp","params","prevResultSize","nextResultSize","includeReactions","includeMetaArray","_ref3","useGetParentMessage","_sdk$message","getMessage","channelType","ChannelType","GROUP","includeThreadInfo","includeParentMessageInfo","fetchParentMessage","_sdk$message$getMessa","_sdk$message2","data","parentMsg","ogMetaData","useHandlePubsubEvents","pubSub","pubSubHandler","subscriber","subscribe","topics","SEND_USER_MESSAGE","props","SEND_FILE_MESSAGE","UPDATE_USER_MESSAGE","DELETE_MESSAGE","forEach","s","remove","_unused","useHandleChannelEvents","handlerId","uuidv4","addGroupChannelHandler","_sdk$groupChannel$add","_sdk$groupChannel2","channelHandlerParams","onMessageReceived","onMessageUpdated","onMessageDeleted","onReactionUpdated","onUserMuted","onUserUnmuted","onUserBanned","onUserUnbanned","onUserLeft","onChannelFrozen","onChannelUnfrozen","onOperatorUpdated","users","channelHandler","GroupChannelHandler","_sdk$groupChannel3","removeGroupChannelHandler","_sdk$groupChannel$rem","_sdk$groupChannel4","useSendFileMessageCallback","sendMessage","useCallback","file","quoteMessage","createParamsDefault","isReplyToChannel","sendFileMessage","onPending","pendingMessage","URL","createObjectURL","requestState","onFailed","localUrl","onSucceeded","publish","useUpdateMessageCallback","isMentionEnabled","_currentChannel$updat","mentionedUsers","mentionTemplate","mentionedMessageTemplate","updateUserMessage","fromSelector","useDeleteMessageCallback","Promise","resolve","reject","_currentChannel$delet","deleteMessage","err","warning","useGetPrevThreadsCallback","oldestMessageTimeStamp","callback","useGetNextThreadsCallback","latestMessageTimeStamp","useToggleReactionCallback","key","isReacted","_currentChannel$addRe","deleteReaction","res","addReaction","useSendUserMessageCallback","createDefaultParams","sendUserMessage","useResendMessageCallback","failedMessage","isResendable","_failedMessage$isUser","_failedMessage$isFile","SendingStatus","PENDING","isUserMessage","MessageType","USER","resendUserMessage","FAILED","isFileMessage","FILE","_currentChannel$resen","resendFileMessage","useSendVoiceMessageCallback","onBeforeSendVoiceMessage","duration","messageParams","fileName","VOICE_MESSAGE_FILE_NAME","mimeType","VOICE_MESSAGE_MIME_TYPE","metaArrays","MessageMetaArray","META_ARRAY_VOICE_DURATION_KEY","value","META_ARRAY_MESSAGE_TYPE_KEY","META_ARRAY_MESSAGE_TYPE_VALUE__VOICE","ThreadContext","React","createContext","ThreadProvider","_allThreadMessages$","_allThreadMessages","children","onHeaderActionClick","onMoveToParentMessage","disableUserProfile","renderUserProfile","onUserProfileMessage","propsMessage","propsParentMessage","globalStore","useSendbirdStateContext","stores","config","sdkStore","userStore","initialized","threadStore","useReducer","threadReducer","threadInitialState","fetchPrevThreads","fetchNextThreads","toggleReaction","sendVoiceMessage","resendMessage","updateMessage","useMemo","createElement","Provider","UserProfileProvider","useThreadContext","useContext"],"mappings":"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"}