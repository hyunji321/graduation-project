{"version":3,"file":"context.js","sources":["../../src/modules/MessageSearch/context/dux/actionTypes.ts","../../src/modules/MessageSearch/context/dux/reducers.ts","../../src/modules/MessageSearch/context/dux/initialState.ts","../../src/modules/MessageSearch/context/hooks/useSetChannel.ts","../../src/modules/MessageSearch/context/hooks/useGetSearchedMessages.ts","../../src/modules/MessageSearch/context/hooks/useScrollCallback.ts","../../src/modules/MessageSearch/context/hooks/useSearchStringEffect.ts","../../src/modules/MessageSearch/context/MessageSearchProvider.tsx"],"sourcesContent":["export const GET_SEARCHED_MESSAGES = 'GET_SEARCHED_MESSAGES';\nexport const GET_NEXT_SEARCHED_MESSAGES = 'GET_NEXT_SEARCHED_MESSAGES';\nexport const START_MESSAGE_SEARCH = 'START_MESSAGE_SEARCH';\nexport const START_GETTING_SEARCHED_MESSAGES = 'START_GETTING_SEARCHED_MESSAGES';\nexport const SET_QUERY_INVALID = 'SET_QUERY_INVALID';\n\nexport const SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\nexport const CHANNEL_INVALID = 'CHANNEL_INVALID';\nexport const RESET_SEARCH_STRING = 'RESET_SEARCH_STRING';\n","import { State as initialStateInterface } from './initialState';\nimport type { MessageSearchQuery } from '@sendbird/chat/message';\nimport * as actionTypes from './actionTypes';\n\ninterface MessageSearchQueryType extends MessageSearchQuery {\n  key?: string;\n}\ninterface ActionInterface {\n  type: string;\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  payload?: any;\n}\n\nexport default function reducer(\n  state: initialStateInterface,\n  action: ActionInterface,\n): initialStateInterface {\n  switch (action.type) {\n    case actionTypes.SET_CURRENT_CHANNEL: {\n      const currentChannel = action.payload;\n      return {\n        ...state,\n        currentChannel,\n        initialized: true,\n      };\n    }\n    case actionTypes.CHANNEL_INVALID: {\n      return {\n        ...state,\n        currentChannel: null,\n        initialized: false,\n      };\n    }\n    case actionTypes.GET_SEARCHED_MESSAGES: {\n      const { messages, createdQuery } = action.payload;\n      if (\n        createdQuery\n        && createdQuery.channelUrl === (state?.currentMessageSearchQuery as MessageSearchQueryType).channelUrl\n        && createdQuery.key === (state?.currentMessageSearchQuery as MessageSearchQueryType).key\n      ) {\n        return {\n          ...state,\n          loading: false,\n          isInvalid: false,\n          allMessages: [...messages],\n          hasMoreResult: (state?.currentMessageSearchQuery as MessageSearchQueryType).hasNext,\n        };\n      }\n      return { ...state };\n    }\n    case actionTypes.SET_QUERY_INVALID: {\n      return {\n        ...state,\n        isInvalid: true,\n      };\n    }\n    case actionTypes.START_MESSAGE_SEARCH: {\n      return {\n        ...state,\n        isInvalid: false,\n        loading: false,\n      };\n    }\n    case actionTypes.START_GETTING_SEARCHED_MESSAGES: {\n      const currentMessageSearchQuery = action.payload;\n      return {\n        ...state,\n        loading: true,\n        currentMessageSearchQuery,\n      };\n    }\n    case actionTypes.GET_NEXT_SEARCHED_MESSAGES: {\n      const messages = action.payload;\n      return {\n        ...state,\n        allMessages: [...state.allMessages, ...messages],\n        hasMoreResult: (state?.currentMessageSearchQuery as MessageSearchQuery).hasNext,\n      };\n    }\n    case actionTypes.RESET_SEARCH_STRING: {\n      return {\n        ...state,\n        allMessages: [],\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import type { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { MessageSearchQuery } from '@sendbird/chat/message';\nimport {\n  ClientFileMessage,\n  ClientUserMessage,\n} from '../../../../types';\n\nexport interface State {\n  allMessages: Array<ClientFileMessage | ClientUserMessage>;\n  loading: boolean;\n  isInvalid: boolean;\n  initialized: boolean;\n  currentChannel: GroupChannel;\n  currentMessageSearchQuery: MessageSearchQuery;\n  hasMoreResult: boolean;\n}\n\nconst initialState: State = {\n  allMessages: [],\n  loading: false,\n  isInvalid: false,\n  initialized: false,\n  currentChannel: null,\n  currentMessageSearchQuery: null,\n  hasMoreResult: false,\n};\n\nexport default initialState;\n","import type { SendbirdGroupChat } from '@sendbird/chat/groupChannel';\nimport { useEffect } from 'react';\nimport type { Logger } from '../../../../lib/SendbirdState';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface MainProps {\n  channelUrl: string;\n  sdkInit: boolean;\n}\ninterface ToolProps {\n  sdk: SendbirdGroupChat;\n  logger: Logger;\n  messageSearchDispatcher: ({ type: string, payload: any }) => void;\n}\n\nfunction useSetChannel(\n  { channelUrl, sdkInit }: MainProps,\n  { sdk, logger, messageSearchDispatcher }: ToolProps,\n): void {\n  useEffect(() => {\n    if (channelUrl && sdkInit && (sdk?.groupChannel)) {\n      sdk.groupChannel.getChannel(channelUrl).then((groupChannel) => {\n        logger.info('MessageSearch | useSetChannel group channel', groupChannel);\n        messageSearchDispatcher({\n          type: messageActionTypes.SET_CURRENT_CHANNEL,\n          payload: groupChannel,\n        });\n      }).catch(() => {\n        messageSearchDispatcher({\n          type: messageActionTypes.CHANNEL_INVALID,\n          payload: null,\n        });\n      });\n    }\n  }, [channelUrl, sdkInit]);\n}\n\nexport default useSetChannel;\n","import { useEffect } from 'react';\n\nimport type { GroupChannel, SendbirdGroupChat } from '@sendbird/chat/groupChannel';\nimport type { MessageSearchQueryParams } from '@sendbird/chat/lib/__definition';\nimport type {\n  AdminMessage,\n  BaseMessage,\n  FileMessage,\n  UserMessage,\n} from '@sendbird/chat/message';\nimport type { SendbirdError } from '@sendbird/chat';\n\nimport type { Logger } from '../../../../lib/SendbirdState';\nimport * as messageActionTypes from '../dux/actionTypes';\n\nenum MessageSearchOrder {\n  SCORE = 'score',\n  TIMESTAMP = 'ts',\n}\n\ninterface MainProps {\n  currentChannel: GroupChannel;\n  channelUrl: string;\n  requestString?: string;\n  messageSearchQuery?: MessageSearchQueryParams;\n  onResultLoaded?: (\n    messages?: Array<BaseMessage | UserMessage | FileMessage | AdminMessage>,\n    error?: SendbirdError,\n  ) => void;\n  retryCount: number;\n}\ninterface ToolProps {\n  sdk: SendbirdGroupChat;\n  logger: Logger;\n  messageSearchDispatcher: (props: { type: string, payload: any }) => void;\n}\n\nfunction useGetSearchedMessages(\n  { currentChannel, channelUrl, requestString, messageSearchQuery, onResultLoaded, retryCount }: MainProps,\n  { sdk, logger, messageSearchDispatcher }: ToolProps,\n): void {\n  useEffect(() => {\n    messageSearchDispatcher({\n      type: messageActionTypes.START_MESSAGE_SEARCH,\n      payload: null,\n    });\n    if (sdk && channelUrl && sdk.createMessageSearchQuery && currentChannel) {\n      if (requestString) {\n        currentChannel.refresh().then((channel) => {\n          const inputSearchMessageQueryObject: MessageSearchQueryParams = {\n            order: MessageSearchOrder.TIMESTAMP,\n            channelUrl,\n            messageTimestampFrom: channel.invitedAt,\n            keyword: requestString,\n            ...messageSearchQuery,\n          };\n          const createdQuery = sdk.createMessageSearchQuery(inputSearchMessageQueryObject);\n          createdQuery.next().then((messages) => {\n            logger.info('MessageSearch | useGetSearchedMessages: succeeded getting messages', messages);\n            messageSearchDispatcher({\n              type: messageActionTypes.GET_SEARCHED_MESSAGES,\n              payload: {\n                messages,\n                createdQuery,\n              },\n            });\n            if (onResultLoaded && typeof onResultLoaded === 'function') {\n              onResultLoaded(messages, null);\n            }\n          }).catch((error) => {\n            logger.warning('MessageSearch | useGetSearchedMessages: getting failed', error);\n            messageSearchDispatcher({\n              type: messageActionTypes.SET_QUERY_INVALID,\n              payload: null,\n            });\n            if (onResultLoaded && typeof onResultLoaded === 'function') {\n              onResultLoaded(null, error);\n            }\n          });\n          messageSearchDispatcher({\n            type: messageActionTypes.START_GETTING_SEARCHED_MESSAGES,\n            payload: createdQuery,\n          });\n        });\n      } else {\n        logger.info('MessageSearch | useGetSeasrchedMessages: search string is empty');\n      }\n    }\n  }, [channelUrl, messageSearchQuery, requestString, currentChannel, retryCount]);\n}\n\nexport default useGetSearchedMessages;\n","import type { SendbirdError } from '@sendbird/chat';\nimport type { AdminMessage, FileMessage, MessageSearchQuery, UserMessage } from '@sendbird/chat/message';\nimport { useCallback } from 'react';\nimport { Logger } from '../../../..';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface MainProps {\n  currentMessageSearchQuery: MessageSearchQuery;\n  hasMoreResult: boolean;\n  onResultLoaded?: (\n    messages?: Array<UserMessage | FileMessage | AdminMessage>,\n    error?: SendbirdError,\n  ) => void;\n}\n\ntype MessageSearchDispatcherType = { type: string, payload: any };\n\ninterface ToolProps {\n  logger: Logger;\n  messageSearchDispatcher: (payload: MessageSearchDispatcherType) => void;\n}\n\nexport type CallbackReturn = (\n  callback: (\n    messages: Array<UserMessage | FileMessage | AdminMessage>,\n    /* eslint-disable @typescript-eslint/no-explicit-any */\n    error: any,\n  ) => void\n) => void;\n\nfunction useScrollCallback(\n  { currentMessageSearchQuery, hasMoreResult, onResultLoaded }: MainProps,\n  { logger, messageSearchDispatcher }: ToolProps,\n): CallbackReturn {\n  return useCallback((cb) => {\n    if (!hasMoreResult) {\n      logger.warning('MessageSearch | useScrollCallback: no more searched results', hasMoreResult);\n    }\n    if (currentMessageSearchQuery && currentMessageSearchQuery.hasNext) {\n      currentMessageSearchQuery.next().then((messages) => {\n        logger.info('MessageSearch | useScrollCallback: succeeded getting searched messages', messages);\n        messageSearchDispatcher({\n          type: messageActionTypes.GET_NEXT_SEARCHED_MESSAGES,\n          payload: messages,\n        });\n        cb(messages, null);\n        if (onResultLoaded && typeof onResultLoaded === 'function') {\n          onResultLoaded(messages, null);\n        }\n      }).catch((error) => {\n        logger.warning('MessageSearch | useScrollCallback: failed getting searched messages', error);\n        cb(null, error);\n        if (onResultLoaded && typeof onResultLoaded === 'function') {\n          onResultLoaded(null, error);\n        }\n      });\n    } else {\n      logger.warning('MessageSearch | useScrollCallback: no currentMessageSearchQuery');\n    }\n  }, [currentMessageSearchQuery, hasMoreResult]);\n}\n\nexport default useScrollCallback;\n","import { useState, useEffect } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface DynamicParams {\n  searchString: string;\n}\n\ninterface StaticParams {\n  messageSearchDispatcher: ({ type: string, payload: any }) => void;\n}\n\nconst DEBOUNCING_TIME = 500;\n\nfunction useSearchStringEffect(\n  { searchString }: DynamicParams,\n  { messageSearchDispatcher }: StaticParams,\n): string {\n  const [requestString, setRequestString] = useState('');\n  const [debouncingTimer, setDebouncingTimer] = useState(null);\n  useEffect(() => {\n    clearTimeout(debouncingTimer);\n    if (searchString) {\n      setDebouncingTimer(\n        setTimeout(() => {\n          setRequestString(searchString);\n        }, DEBOUNCING_TIME),\n      );\n    } else {\n      setRequestString('');\n      messageSearchDispatcher({\n        type: messageActionTypes.RESET_SEARCH_STRING,\n        payload: '',\n      });\n    }\n  }, [searchString]);\n  return requestString;\n}\n\nexport default useSearchStringEffect;\n","import React, {\n  useRef,\n  useState,\n  useReducer,\n} from 'react';\nimport { SendbirdError } from '@sendbird/chat';\nimport type { MessageSearchQuery } from '@sendbird/chat/message';\nimport type { GroupChannel } from '@sendbird/chat/groupChannel';\nimport type { MessageSearchQueryParams } from '@sendbird/chat/lib/__definition';\n\nimport useSendbirdStateContext from '../../../hooks/useSendbirdStateContext';\nimport { ClientSentMessages } from '../../../types';\n\nimport messageSearchReducer from './dux/reducers';\nimport messageSearchInitialState, { State as MessageSearchReducerState } from './dux/initialState';\n\nimport useSetChannel from './hooks/useSetChannel';\nimport useGetSearchMessages from './hooks/useGetSearchedMessages';\nimport useScrollCallback, {\n  CallbackReturn as UseScrollCallbackType,\n} from './hooks/useScrollCallback';\nimport useSearchStringEffect from './hooks/useSearchStringEffect';\n\nexport interface MessageSearchProviderProps {\n  channelUrl: string;\n  children?: React.ReactElement;\n  searchString?: string;\n  requestString?: string;\n  messageSearchQuery?: MessageSearchQueryParams;\n  onResultLoaded?(messages?: Array<ClientSentMessages>, error?: SendbirdError): void;\n  onResultClick?(message: ClientSentMessages): void;\n}\n\ninterface MessageSearchProviderInterface extends MessageSearchProviderProps {\n  retryCount: number;\n  setRetryCount: React.Dispatch<React.SetStateAction<number>>;\n  selectedMessageId: number;\n  setSelectedMessageId: React.Dispatch<React.SetStateAction<number>>;\n  messageSearchDispatcher: (props: { type: string, payload: any }) => void;\n  scrollRef: React.MutableRefObject<HTMLDivElement>;\n  allMessages: MessageSearchReducerState['allMessages'];\n  loading: boolean;\n  isInvalid: boolean;\n  currentChannel: GroupChannel;\n  currentMessageSearchQuery: MessageSearchQuery;\n  hasMoreResult: boolean;\n  onScroll: UseScrollCallbackType;\n  handleRetryToConnect: () => void;\n  handleOnScroll: (e: React.BaseSyntheticEvent) => void;\n}\n\nconst MessageSearchContext = React.createContext<MessageSearchProviderInterface | null>(undefined);\n\nconst MessageSearchProvider: React.FC<MessageSearchProviderProps> = (props: MessageSearchProviderProps) => {\n  const {\n    // message search props\n    channelUrl,\n    searchString,\n    messageSearchQuery,\n    onResultLoaded,\n    onResultClick,\n  } = props;\n\n  const globalState = useSendbirdStateContext();\n\n  // hook variables\n  const [retryCount, setRetryCount] = useState(0); // this is a trigger flag for activating useGetSearchMessages\n  const [selectedMessageId, setSelectedMessageId] = useState(0);\n  const [messageSearchStore, messageSearchDispatcher] = useReducer(messageSearchReducer, messageSearchInitialState);\n  const {\n    allMessages,\n    loading,\n    isInvalid,\n    currentChannel,\n    currentMessageSearchQuery,\n    hasMoreResult,\n  } = messageSearchStore;\n\n  const logger = globalState?.config?.logger;\n  const sdk = globalState?.stores?.sdkStore?.sdk;\n  const sdkInit = globalState?.stores?.sdkStore?.initialized;\n  const scrollRef = useRef(null);\n  const handleOnScroll = (e: React.BaseSyntheticEvent) => {\n    const scrollElement = e.target as HTMLDivElement;\n    const {\n      scrollTop,\n      scrollHeight,\n      clientHeight,\n    } = scrollElement;\n\n    if (!hasMoreResult) {\n      return;\n    }\n    if (scrollTop + clientHeight >= scrollHeight) {\n      onScroll(() => {\n        // after load more searched messages\n      });\n    }\n  };\n\n  useSetChannel(\n    { channelUrl, sdkInit },\n    { sdk, logger, messageSearchDispatcher },\n  );\n\n  const requestString = useSearchStringEffect({ searchString }, { messageSearchDispatcher });\n\n  useGetSearchMessages(\n    { currentChannel, channelUrl, requestString, messageSearchQuery, onResultLoaded, retryCount },\n    { sdk, logger, messageSearchDispatcher },\n  );\n\n  const onScroll = useScrollCallback(\n    { currentMessageSearchQuery, hasMoreResult, onResultLoaded },\n    { logger, messageSearchDispatcher },\n  );\n\n  const handleRetryToConnect = () => {\n    setRetryCount(retryCount + 1);\n  };\n  return (\n    <MessageSearchContext.Provider value={{\n      channelUrl,\n      searchString,\n      requestString,\n      messageSearchQuery,\n      onResultLoaded,\n      onResultClick,\n      retryCount,\n      setRetryCount,\n      selectedMessageId,\n      setSelectedMessageId,\n      messageSearchDispatcher,\n      allMessages,\n      loading,\n      isInvalid,\n      currentChannel,\n      currentMessageSearchQuery,\n      hasMoreResult,\n      onScroll,\n      scrollRef,\n      handleRetryToConnect,\n      handleOnScroll,\n    }}>\n      {props?.children}\n    </MessageSearchContext.Provider>\n  );\n};\n\nexport type UseMessageSearchType = () => MessageSearchProviderInterface;\nconst useMessageSearchContext: UseMessageSearchType = () => React.useContext(MessageSearchContext);\n\nexport {\n  MessageSearchProvider,\n  useMessageSearchContext,\n};\n"],"names":["GET_SEARCHED_MESSAGES","GET_NEXT_SEARCHED_MESSAGES","START_MESSAGE_SEARCH","START_GETTING_SEARCHED_MESSAGES","SET_QUERY_INVALID","SET_CURRENT_CHANNEL","CHANNEL_INVALID","RESET_SEARCH_STRING","reducer","state","action","type","actionTypes","currentChannel","payload","_objectSpread","initialized","messages","createdQuery","channelUrl","currentMessageSearchQuery","key","loading","isInvalid","allMessages","hasMoreResult","hasNext","initialState","useSetChannel","_ref","_ref2","sdkInit","sdk","logger","messageSearchDispatcher","useEffect","groupChannel","getChannel","then","info","messageActionTypes","catch","MessageSearchOrder","useGetSearchedMessages","requestString","messageSearchQuery","onResultLoaded","retryCount","createMessageSearchQuery","refresh","channel","inputSearchMessageQueryObject","order","TIMESTAMP","messageTimestampFrom","invitedAt","keyword","next","error","warning","useScrollCallback","useCallback","cb","DEBOUNCING_TIME","useSearchStringEffect","searchString","setRequestString","useState","debouncingTimer","setDebouncingTimer","clearTimeout","setTimeout","MessageSearchContext","React","createContext","undefined","MessageSearchProvider","props","_globalState$config","_globalState$stores","_globalState$stores$s","_globalState$stores2","_globalState$stores2$","onResultClick","globalState","useSendbirdStateContext","setRetryCount","selectedMessageId","setSelectedMessageId","messageSearchStore","useReducer","messageSearchReducer","messageSearchInitialState","config","stores","sdkStore","scrollRef","useRef","handleOnScroll","e","scrollElement","target","scrollTop","scrollHeight","clientHeight","onScroll","useGetSearchMessages","handleRetryToConnect","createElement","Provider","value","children","useMessageSearchContext","useContext"],"mappings":"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"}