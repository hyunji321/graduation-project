{"version":3,"file":"index-eaf0d65b.js","sources":["../src/modules/OpenChannelSettings/components/ParticipantUI/ParticipantsModal.tsx","../src/modules/OpenChannelSettings/components/ParticipantUI/ParticipantItem.tsx","../src/modules/OpenChannelSettings/components/ParticipantUI/index.tsx"],"sourcesContent":["import React, {\n  ReactElement,\n  useEffect,\n  useState,\n  useContext,\n} from 'react';\nimport type { Participant, User } from '@sendbird/chat';\nimport type { ParticipantListQuery } from '@sendbird/chat/openChannel';\n\nimport ContextMenu, { MenuItem, MenuItems } from '../../../../ui/ContextMenu';\nimport Modal from '../../../../ui/Modal';\nimport UserListItem from '../../../../ui/UserListItem';\nimport IconButton from '../../../../ui/IconButton';\nimport Icon, { IconTypes, IconColors } from '../../../../ui/Icon';\nimport { LocalizationContext } from '../../../../lib/LocalizationContext';\nimport { noop } from '../../../../utils/utils';\nimport { useOpenChannelSettingsContext } from '../../context/OpenChannelSettingsProvider';\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\n\ninterface Props {\n  onCancel(): void;\n}\n\nexport default function ParticipantsModal({\n  onCancel,\n}: Props): ReactElement {\n  const state = useSendbirdStateContext();\n  const { channel } = useOpenChannelSettingsContext();\n  const { stringSet } = useContext(LocalizationContext);\n  const [participants, setParticipants] = useState<Array<User> | null>([]);\n  const [participantListQuery, setParticipantListQuery] = useState<ParticipantListQuery | null>(null);\n  const userId = state?.config?.userId;\n  const sdk = state?.stores?.sdkStore?.sdk;\n  const isOperatorView = channel?.isOperator(userId);\n  useEffect(() => {\n    if (!channel || !channel?.createParticipantListQuery) {\n      return;\n    }\n    const participantListQuery = channel?.createParticipantListQuery({});\n    setParticipantListQuery(participantListQuery);\n    participantListQuery.next().then((participantList) => {\n      setParticipants(participantList);\n    });\n  }, []);\n  return (\n    <div>\n      <Modal\n        hideFooter\n        isFullScreenOnMobile\n        onCancel={() => onCancel()}\n        onSubmit={noop}\n        titleText={stringSet.OPEN_CHANNEL_SETTINGS__ALL_PARTICIPANTS_TITLE}\n      >\n        <div\n          className=\"sendbird-more-members__popup-scroll\"\n          onScroll={(e) => {\n            const { hasNext } = participantListQuery;\n            const target = e.target as HTMLTextAreaElement;\n            const fetchMore = (\n              target.clientHeight + target.scrollTop === target.scrollHeight\n            );\n\n            if (hasNext && fetchMore) {\n              participantListQuery.next().then((fetchedParticipants) => {\n                setParticipants([\n                  ...participants,\n                  ...fetchedParticipants,\n                ]);\n              });\n            }\n          }}\n        >\n          {\n            participants.map((p: Participant) => {\n              const isOperator = channel?.isOperator(p.userId);\n              return (\n                <UserListItem\n                  user={p}\n                  key={p.userId}\n                  currentUser={sdk?.currentUser?.userId}\n                  action={\n                    (userId !== p.userId && isOperatorView)\n                      ? ({ actionRef, parentRef }) => (\n                        <ContextMenu\n                          menuTrigger={(toggleDropdown) => (\n                            <IconButton\n                              className=\"sendbird-user-message__more__menu\"\n                              width=\"32px\"\n                              height=\"32px\"\n                              onClick={toggleDropdown}\n                            >\n                              <Icon\n                                width=\"24px\"\n                                height=\"24px\"\n                                type={IconTypes.MORE}\n                                fillColor={IconColors.CONTENT_INVERSE}\n                              />\n                            </IconButton>\n                          )}\n                          menuItems={(closeDropdown) => (\n                            <MenuItems\n                              parentContainRef={parentRef}\n                              parentRef={actionRef}\n                              closeDropdown={closeDropdown}\n                              openLeft\n                            >\n                              <MenuItem\n                                onClick={() => {\n                                  if (isOperator) {\n                                    channel?.removeOperators([p.userId]).then(() => {\n                                      closeDropdown();\n                                    });\n                                  } else {\n                                    channel?.addOperators([p.userId]).then(() => {\n                                      closeDropdown();\n                                    });\n                                  }\n                                }}\n                                dataSbId={`open_channel_setting_participant_context_menu_${(\n                                  isOperator) ? 'unregister_operator' : 'register_as_operator'}`\n                                }\n                              >\n                                {\n                                  isOperator\n                                    ? stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNREGISTER_OPERATOR\n                                    : stringSet.OPEN_CHANNEL_SETTING__MODERATION__REGISTER_AS_OPERATOR\n                                }\n                              </MenuItem>\n                              <MenuItem\n                                onClick={() => {\n                                  if (p.isMuted) {\n                                    channel?.unmuteUser(p).then(() => {\n                                      closeDropdown();\n                                    });\n                                  } else {\n                                    channel?.muteUser(p).then(() => {\n                                      closeDropdown();\n                                    });\n                                  }\n                                }}\n                                dataSbId={`open_channel_setting_participant_context_menu_${p.isMuted ? 'unmute' : 'mute'}`\n                                }\n                              >\n                                {\n                                  p.isMuted\n                                    ? stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNMUTE\n                                    : stringSet.OPEN_CHANNEL_SETTING__MODERATION__MUTE\n                                }\n                              </MenuItem>\n                              <MenuItem\n                                onClick={() => {\n                                  channel?.banUser(p).then(() => {\n                                    closeDropdown();\n                                  });\n                                }}\n                                dataSbId=\"open_channel_setting_participant_context_menu_ban\"\n                              >\n                                {stringSet.OPEN_CHANNEL_SETTING__MODERATION__BAN}\n                              </MenuItem>\n                            </MenuItems>\n                          )}\n                        />\n                      )\n                      : null\n                  }\n                />\n              );\n            })\n          }\n        </div>\n      </Modal>\n    </div>\n  );\n}\n","import React, {\n  ReactElement,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport type { Participant } from '@sendbird/chat';\nimport { LocalizationContext } from '../../../../lib/LocalizationContext';\n\nimport { UserProfileContext } from '../../../../lib/UserProfileContext';\nimport Button, { ButtonTypes, ButtonSizes } from '../../../../ui/Button';\nimport Accordion from '../../../../ui/Accordion';\nimport Icon, { IconTypes, IconColors } from '../../../../ui/Icon';\nimport Avatar from '../../../../ui/Avatar/index';\nimport Label, { LabelTypography, LabelColors } from '../../../../ui/Label';\nimport ParticipantsModal from './ParticipantsModal';\nimport UserProfile from '../../../../ui/UserProfile';\nimport ContextMenu, { MenuItems } from '../../../../ui/ContextMenu';\nimport { useOpenChannelSettingsContext } from '../../context/OpenChannelSettingsProvider';\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\nimport MutedAvatarOverlay from '../../../../ui/Avatar/MutedAvatarOverlay';\n\nconst SHOWN_MEMBER_MAX = 10;\n\ninterface ActionProps {\n  actionRef: React.RefObject<HTMLInputElement>;\n}\ninterface UserListItemProps {\n  user: Participant;\n  currentUser?: string;\n  isOperator?: boolean;\n  action?(props: ActionProps): ReactElement;\n}\n\nexport const UserListItem: React.FC<UserListItemProps> = ({\n  user,\n  currentUser,\n  isOperator,\n  action,\n}: UserListItemProps) => {\n  const avatarRef = useRef(null);\n  const actionRef = useRef(null);\n  const {\n    disableUserProfile,\n    renderUserProfile,\n  } = useContext(UserProfileContext);\n  const { stringSet } = useContext(LocalizationContext);\n  return (\n    <div className=\"sendbird-participants-accordion__member\">\n      <div className=\"sendbird-participants-accordion__member-avatar\">\n        <ContextMenu\n          menuTrigger={(toggleDropdown) => (\n            <>\n              <Avatar\n                className=\"sendbird-participants-accordion__member-avatar__avatar\"\n                onClick={() => {\n                  if (!disableUserProfile) {\n                    toggleDropdown();\n                  }\n                }}\n                ref={avatarRef}\n                src={user.profileUrl}\n                width={24}\n                height={24}\n              />\n              {user?.isMuted ? (<MutedAvatarOverlay />) : ''}\n            </>\n          )}\n          menuItems={(closeDropdown) => (\n            <MenuItems\n              openLeft\n              parentRef={avatarRef}\n              // for catching location(x, y) of MenuItems\n              parentContainRef={avatarRef}\n              // for toggling more options(menus & reactions)\n              closeDropdown={closeDropdown}\n              style={{ paddingTop: '0px', paddingBottom: '0px' }}\n            >\n              {\n                renderUserProfile\n                  ? renderUserProfile({\n                    user: user,\n                    currentUserId: currentUser,\n                    close: closeDropdown,\n                  })\n                  : (\n                    <UserProfile\n                      disableMessaging\n                      user={user}\n                      currentUserId={currentUser}\n                      onSuccess={closeDropdown}\n                    />\n                  )\n              }\n            </MenuItems>\n          )}\n        />\n      </div>\n      <Label\n        className=\"sendbird-participants-accordion__member__title\"\n        type={LabelTypography.SUBTITLE_2}\n        color={LabelColors.ONBACKGROUND_1}\n      >\n        {user.nickname || stringSet.NO_NAME}\n        {\n          (currentUser === user.userId) && (\n            stringSet.OPEN_CHANNEL_SETTINGS__MEMBERS__YOU\n          )\n        }\n      </Label>\n      { // if there is now nickname, display userId\n        !user.nickname && (\n          <Label\n            className=\"sendbird-participants-accordion__member__title user-id\"\n            type={LabelTypography.CAPTION_3}\n            color={LabelColors.ONBACKGROUND_2}\n          >\n            {user.userId}\n          </Label>\n        )\n      }\n      {\n        isOperator && (\n          <Label\n            className={\n              `sendbird-participants-accordion__member__title\n                ${user?.userId !== currentUser ? 'operator' : ''}\n                ${user?.userId === currentUser ? 'self-operator' : ''}\n              `\n            }\n            type={LabelTypography.SUBTITLE_2}\n            color={LabelColors.ONBACKGROUND_2}\n          >\n            {stringSet.OPEN_CHANNEL_SETTINGS__MEMBERS__OPERATOR}\n          </Label>\n        )\n      }\n      {\n        action && (\n          <div\n            className=\"sendbird-participants-accordion__member__action\"\n            ref={actionRef}\n          >\n            {action({ actionRef })}\n          </div>\n        )\n      }\n    </div>\n  );\n};\n\nexport interface ParticipantsAccordionProps {\n  maxMembers?: number;\n}\n\nexport default function ParticipantsAccordion(props: ParticipantsAccordionProps): ReactElement {\n  const maxMembers = props?.maxMembers || SHOWN_MEMBER_MAX;\n  const { channel } = useOpenChannelSettingsContext();\n  const globalState = useSendbirdStateContext();\n  const currentUser = globalState?.config?.userId;\n  const [participants, setParticipants] = useState([]);\n  const [showMoreModal, setShowMoreModal] = useState(false);\n  const { stringSet } = useContext(LocalizationContext);\n\n  useEffect(() => {\n    if (!channel || !channel?.createParticipantListQuery) {\n      return;\n    }\n    const participantListQuery = channel?.createParticipantListQuery({});\n    participantListQuery.next().then((participantList) => {\n      setParticipants(participantList);\n    });\n  }, [channel]);\n\n  return (\n    <Accordion\n      className=\"sendbird-participants-accordion\"\n      id=\"participants\"\n      renderTitle={() => (\n        <>\n          <Icon\n            type={IconTypes.MEMBERS}\n            fillColor={IconColors.PRIMARY}\n            width={24}\n            height={24}\n            className=\"sendbird-openchannel-settings__accordion-icon\"\n          />\n          <Label\n            type={LabelTypography.SUBTITLE_1}\n            color={LabelColors.ONBACKGROUND_1}\n          >\n            {stringSet.OPEN_CHANNEL_SETTINGS__PARTICIPANTS_ACCORDION_TITLE}\n          </Label>\n        </>\n      )}\n      renderContent={() => (\n        <div className=\"\">\n          <div className=\"sendbird-participants-accordion__list\">\n            {\n              participants.slice(0, maxMembers).map((p) => (\n                <UserListItem\n                  user={p}\n                  currentUser={currentUser}\n                  key={p.userId}\n                />\n              ))\n            }\n            {(participants && participants.length === 0)\n              ? (\n                <Label\n                  className=\"sendbird-channel-settings__empty-list\"\n                  type={LabelTypography.SUBTITLE_2}\n                  color={LabelColors.ONBACKGROUND_3}\n                >\n                  {stringSet.OPEN_CHANNEL_SETTINGS__EMPTY_LIST}\n                </Label>\n              ) : ''\n            }\n          </div>\n          {\n            participants.length >= maxMembers && (\n              <div className=\"sendbird-participants-accordion__footer\">\n                <Button\n                  className=\"sendbird-participants-accordion__footer__all-participants\"\n                  type={ButtonTypes.SECONDARY}\n                  size={ButtonSizes.SMALL}\n                  onClick={() => setShowMoreModal(true)}\n                >\n                  {stringSet.OPEN_CHANNEL_SETTINGS__SEE_ALL}\n                </Button>\n                {\n                  showMoreModal && (\n                    <ParticipantsModal\n                      onCancel={() => {\n                        setShowMoreModal(false);\n                      }}\n                    />\n                  )\n                }\n              </div>\n            )\n          }\n        </div>\n      )}\n    />\n  );\n}\n","import React, {\n  ReactElement,\n  useContext,\n  useState,\n  useEffect,\n  useCallback,\n} from 'react';\nimport type { Participant, User } from '@sendbird/chat';\nimport type { ParticipantListQuery } from '@sendbird/chat/openChannel';\n\nimport Button, { ButtonTypes, ButtonSizes } from '../../../../ui/Button';\nimport ContextMenu, { MenuItem, MenuItems } from '../../../../ui/ContextMenu';\nimport Icon, { IconTypes, IconColors } from '../../../../ui/Icon';\nimport IconButton from '../../../../ui/IconButton';\nimport Label, { LabelTypography, LabelColors } from '../../../../ui/Label';\n\nimport { UserListItem } from './ParticipantItem';\nimport ParticipantsModal from './ParticipantsModal';\nimport { LocalizationContext } from '../../../../lib/LocalizationContext';\nimport { useOpenChannelSettingsContext } from '../../context/OpenChannelSettingsProvider';\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\n\ninterface ParticipantListProps {\n  isOperatorView?: boolean;\n}\n\nexport default function ParticipantList({\n  isOperatorView = false,\n}: ParticipantListProps): ReactElement {\n  const globalState = useSendbirdStateContext();\n  const currentUserId = globalState?.config?.userId;\n  const { channel } = useOpenChannelSettingsContext();\n  const { stringSet } = useContext(LocalizationContext);\n  const [participants, setParticipants] = useState<Array<User> | null>(null);\n  const [participantListQuery, setParticipantListQuery] = useState<ParticipantListQuery | null>(null);\n  const [showParticipantsModal, setShowParticipantsModal] = useState<boolean>(false);\n  useEffect(() => {\n    if (!channel || !channel?.createParticipantListQuery) {\n      return;\n    }\n    const participantListQuery = channel?.createParticipantListQuery({ limit: 10 });\n    setParticipantListQuery(participantListQuery);\n    participantListQuery.next().then((participants) => {\n      setParticipants(participants);\n    });\n  }, [channel]);\n  const refreshList = useCallback(() => {\n    if (!channel) {\n      setParticipants([]);\n      return;\n    }\n    const participantListQuery = channel?.createParticipantListQuery({ limit: 10 });\n    participantListQuery.next().then((participants) => {\n      setParticipants(participants);\n    });\n  }, [channel]);\n  return (\n    <div\n      className=\"sendbird-openchannel-settings__participant-list\"\n      onScroll={(e) => {\n        const { hasNext } = participantListQuery;\n        const target = e.target as HTMLTextAreaElement;\n        const fetchMore = (\n          target.clientHeight + target.scrollTop === target.scrollHeight\n        );\n\n        if (hasNext && fetchMore) {\n          participantListQuery.next().then((fetchedParticipants) => {\n            setParticipants([\n              ...participants,\n              ...fetchedParticipants,\n            ]);\n          });\n        }\n      }}\n    >\n      <div>\n        {\n          participants?.map((p: Participant) => {\n            const isOperator = channel?.isOperator(p.userId);\n            return (\n              <UserListItem\n                user={p}\n                currentUser={currentUserId}\n                key={p.userId}\n                isOperator={isOperator}\n                action={({ actionRef }) => (\n                  (isOperatorView && currentUserId !== p?.userId)\n                    ? (\n                      <ContextMenu\n                        menuTrigger={(toggleDropdown) => (\n                          <IconButton\n                            className=\"sendbird-openchannel-participant-list__menu\"\n                            width=\"32px\"\n                            height=\"32px\"\n                            onClick={toggleDropdown}\n                          >\n                            <Icon\n                              width=\"24px\"\n                              height=\"24px\"\n                              type={IconTypes.MORE}\n                              fillColor={IconColors.CONTENT_INVERSE}\n                            />\n                          </IconButton>\n                        )}\n                        menuItems={(closeDropdown) => (\n                          <MenuItems\n                            parentRef={actionRef}\n                            closeDropdown={closeDropdown}\n                            openLeft\n                          >\n                            <MenuItem\n                              onClick={() => {\n                                if (isOperator) {\n                                  channel?.removeOperators([p.userId]).then(() => {\n                                    closeDropdown();\n                                    refreshList();\n                                  });\n                                } else {\n                                  channel?.addOperators([p.userId]).then(() => {\n                                    closeDropdown();\n                                    refreshList();\n                                  });\n                                }\n                              }}\n                              dataSbId={`open_channel_setting_partitipant_conext_menu_${(\n                                isOperator) ? 'unregister_operator' : 'register_as_operator'}`\n                              }\n                            >\n                              {\n                                isOperator\n                                  ? stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNREGISTER_OPERATOR\n                                  : stringSet.OPEN_CHANNEL_SETTING__MODERATION__REGISTER_AS_OPERATOR\n                              }\n                            </MenuItem>\n                            <MenuItem\n                              onClick={() => {\n                                if (p.isMuted) {\n                                  channel?.unmuteUser(p).then(() => {\n                                    closeDropdown();\n                                    refreshList();\n                                  });\n                                } else {\n                                  channel?.muteUser(p).then(() => {\n                                    closeDropdown();\n                                    refreshList();\n                                  });\n                                }\n                              }}\n                              dataSbId={`open_channel_setting_partitipant_conext_menu_${p.isMuted ? 'unmute' : 'mute'}`}\n                            >\n                              {\n                                p.isMuted\n                                  ? stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNMUTE\n                                  : stringSet.OPEN_CHANNEL_SETTING__MODERATION__MUTE\n                              }\n                            </MenuItem>\n                            <MenuItem\n                              onClick={() => {\n                                channel?.banUser(p).then(() => {\n                                  closeDropdown();\n                                  refreshList();\n                                });\n                              }}\n                              dataSbId=\"open_channel_setting_partitipant_conext_menu_ban\"\n                            >\n                              {stringSet.OPEN_CHANNEL_SETTING__MODERATION__BAN}\n                            </MenuItem>\n                          </MenuItems>\n                        )}\n                      />\n                    )\n                    : null\n                )}\n              />\n            );\n          })\n        }\n        {\n          (participants && participants.length === 0)\n            ? (\n              <Label\n                className=\"sendbird-channel-settings__empty-list\"\n                type={LabelTypography.SUBTITLE_2}\n                color={LabelColors.ONBACKGROUND_3}\n              >\n                {stringSet.OPEN_CHANNEL_SETTINGS__EMPTY_LIST}\n              </Label>\n            ) : null\n        }\n        <div className=\"sendbird-openchannel-participant-list__footer\">\n          {\n            participantListQuery?.hasNext && (\n              <Button\n                type={ButtonTypes.SECONDARY}\n                size={ButtonSizes.SMALL}\n                onClick={() => setShowParticipantsModal(true)}\n              >\n                {stringSet.OPEN_CHANNEL_SETTINGS__ALL_PARTICIPANTS_TITLE}\n              </Button>\n            )\n          }\n        </div>\n        {\n          showParticipantsModal && (\n            <ParticipantsModal\n              onCancel={() => {\n                setShowParticipantsModal(false);\n                refreshList();\n              }}\n            />\n          )\n        }\n      </div>\n    </div>\n  );\n}\n"],"names":["ParticipantsModal","_ref","_state$config","_state$stores","_state$stores$sdkStor","onCancel","state","useSendbirdStateContext","channel","useOpenChannelSettingsContext","stringSet","useContext","LocalizationContext","participants","setParticipants","useState","participantListQuery","setParticipantListQuery","userId","config","sdk","stores","sdkStore","isOperatorView","isOperator","useEffect","createParticipantListQuery","next","then","participantList","React","createElement","Modal","hideFooter","isFullScreenOnMobile","onSubmit","noop","titleText","OPEN_CHANNEL_SETTINGS__ALL_PARTICIPANTS_TITLE","className","onScroll","e","hasNext","target","fetchMore","clientHeight","scrollTop","scrollHeight","fetchedParticipants","map","p","_sdk$currentUser","UserListItem","user","key","currentUser","action","_ref2","actionRef","parentRef","ContextMenu","menuTrigger","toggleDropdown","IconButton","width","height","onClick","Icon","type","IconTypes","MORE","fillColor","IconColors","CONTENT_INVERSE","menuItems","closeDropdown","MenuItems","parentContainRef","openLeft","MenuItem","removeOperators","addOperators","dataSbId","OPEN_CHANNEL_SETTING__MODERATION__UNREGISTER_OPERATOR","OPEN_CHANNEL_SETTING__MODERATION__REGISTER_AS_OPERATOR","isMuted","unmuteUser","muteUser","OPEN_CHANNEL_SETTING__MODERATION__UNMUTE","OPEN_CHANNEL_SETTING__MODERATION__MUTE","banUser","OPEN_CHANNEL_SETTING__MODERATION__BAN","avatarRef","useRef","disableUserProfile","renderUserProfile","UserProfileContext","Fragment","Avatar","ref","src","profileUrl","MutedAvatarOverlay","style","paddingTop","paddingBottom","currentUserId","close","UserProfile","disableMessaging","onSuccess","Label","LabelTypography","SUBTITLE_2","color","LabelColors","ONBACKGROUND_1","nickname","NO_NAME","OPEN_CHANNEL_SETTINGS__MEMBERS__YOU","CAPTION_3","ONBACKGROUND_2","OPEN_CHANNEL_SETTINGS__MEMBERS__OPERATOR","ParticipantList","_globalState$config","globalState","showParticipantsModal","setShowParticipantsModal","limit","refreshList","useCallback","length","ONBACKGROUND_3","OPEN_CHANNEL_SETTINGS__EMPTY_LIST","Button","ButtonTypes","SECONDARY","size","ButtonSizes","SMALL"],"mappings":"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"}