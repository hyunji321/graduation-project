import React__default, { useContext } from 'react';
import useSendbirdStateContext from '../../useSendbirdStateContext.js';
import { useOpenChannelSettingsContext } from '../context.js';
import { U as UserProfileProvider } from '../../UserProfileContext-9cfbab4d.js';
import { a as LocalizationContext } from '../../LocalizationContext-076d6d2e.js';
import { L as Label, a as LabelTypography, b as LabelColors } from '../../index-63949de5.js';
import Icon, { IconTypes } from '../../ui/Icon.js';
import { P as PlaceHolder, b as PlaceHolderTypes } from '../../index-cef1cfff.js';
import { OperatorUI } from './OperatorUI.js';
import { P as ParticipantList } from '../../index-eaf0d65b.js';
import '../../withSendbird.js';
import '../../_rollupPluginBabelHelpers-6bb0305c.js';
import '@sendbird/chat/openChannel';
import '../../uuid-1adedf62.js';
import 'prop-types';
import '../../stringSet-13bbd4a2.js';
import '../../index-99aabd9e.js';
import '../../ui/Loader.js';
import './OpenChannelProfile.js';
import '../../ui/TextButton.js';
import '../../color-879cc347.js';
import '../../ui/OpenChannelAvatar.js';
import '../../ui/Avatar.js';
import '../../ui/ImageRenderer.js';
import '../../utils-d86ad6ab.js';
import './EditDetailsModal.js';
import '../../topics-b2b77fb9.js';
import '../../ui/Modal.js';
import 'react-dom';
import '../../index-38e61c64.js';
import '../../ui/Button.js';
import '../../ui/IconButton.js';
import '../../MediaQueryContext-11f0e43f.js';
import '../../ui/Input.js';
import '../../ui/Accordion.js';
import '../../ui/AccordionGroup.js';
import '../../context-63cbe5bd.js';
import '../../utils-4bbbca2c.js';
import '../../ui/ContextMenu.js';
import '../../ui/SortByRow.js';
import '../../index-7eb65acf.js';
import '../../utils/message/getOutgoingMessageState.js';
import '../../ui/UserListItem.js';
import '../../ui/MutedAvatarOverlay.js';
import '../../ui/Checkbox.js';
import '../../ui/UserProfile.js';
import '../../sendbirdSelectors.js';

function InvalidChannel(_ref) {
  let {
    onCloseClick
  } = _ref;
  const {
    stringSet
  } = useContext(LocalizationContext);
  return /*#__PURE__*/React__default.createElement("div", {
    className: "sendbird-openchannel-settings"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "sendbird-openchannel-settings__header"
  }, /*#__PURE__*/React__default.createElement(Label, {
    type: LabelTypography.H_2,
    color: LabelColors.ONBACKGROUND_1
  }, stringSet.CHANNEL_SETTING__HEADER__TITLE), /*#__PURE__*/React__default.createElement(Icon, {
    type: IconTypes.CLOSE,
    className: "sendbird-openchannel-settings__close-icon",
    height: "24px",
    width: "24px",
    onClick: () => {
      onCloseClick();
    }
  })), /*#__PURE__*/React__default.createElement("div", {
    className: "sendbird-openchannel-settings__placeholder"
  }, /*#__PURE__*/React__default.createElement(PlaceHolder, {
    type: PlaceHolderTypes.WRONG
  })));
}

const OpenChannelUI = _ref => {
  var _globalStore$config, _globalStore$stores, _globalStore$stores$u;
  let {
    renderOperatorUI,
    renderParticipantList
  } = _ref;
  const {
    channel,
    onCloseClick,
    isChannelInitialized
  } = useOpenChannelSettingsContext();
  const globalStore = useSendbirdStateContext();
  const logger = globalStore === null || globalStore === void 0 ? void 0 : (_globalStore$config = globalStore.config) === null || _globalStore$config === void 0 ? void 0 : _globalStore$config.logger;
  const user = globalStore === null || globalStore === void 0 ? void 0 : (_globalStore$stores = globalStore.stores) === null || _globalStore$stores === void 0 ? void 0 : (_globalStore$stores$u = _globalStore$stores.userStore) === null || _globalStore$stores$u === void 0 ? void 0 : _globalStore$stores$u.user;
  const {
    stringSet
  } = useContext(LocalizationContext);
  if (isChannelInitialized && !channel) {
    return /*#__PURE__*/React__default.createElement(InvalidChannel, {
      onCloseClick: () => {
        logger.info('OpenChannelSettings: Click close');
        if (onCloseClick) {
          onCloseClick();
        }
      }
    });
  }
  return /*#__PURE__*/React__default.createElement(UserProfileProvider, {
    isOpenChannel: true
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "sendbird-openchannel-settings"
  }, (channel === null || channel === void 0 ? void 0 : channel.isOperator(user)) && ((renderOperatorUI === null || renderOperatorUI === void 0 ? void 0 : renderOperatorUI()) || /*#__PURE__*/React__default.createElement(OperatorUI, null)), !(channel !== null && channel !== void 0 && channel.isOperator(user)) && /*#__PURE__*/React__default.createElement("div", {
    className: "sendbird-openchannel-settings__participant"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "sendbird-openchannel-settings__header"
  }, /*#__PURE__*/React__default.createElement(Label, {
    type: LabelTypography.H_2,
    color: LabelColors.ONBACKGROUND_1
  }, stringSet.OPEN_CHANNEL_SETTINGS__PARTICIPANTS_TITLE), /*#__PURE__*/React__default.createElement(Icon, {
    type: IconTypes.CLOSE,
    className: "sendbird-openchannel-settings__close-icon",
    height: "24px",
    width: "24px",
    onClick: () => {
      onCloseClick();
    }
  })), (renderParticipantList === null || renderParticipantList === void 0 ? void 0 : renderParticipantList()) || /*#__PURE__*/React__default.createElement(ParticipantList, null))));
};

export { OpenChannelUI as default };
//# sourceMappingURL=OpenChannelSettingsUI.js.map
