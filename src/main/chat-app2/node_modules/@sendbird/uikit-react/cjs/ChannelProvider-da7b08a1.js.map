{"version":3,"file":"ChannelProvider-da7b08a1.js","sources":["../../src/modules/Channel/context/dux/actionTypes.js","../../src/modules/Channel/context/utils.js","../../src/utils/getIsReactionEnabled.ts","../../src/modules/Channel/context/dux/initialState.js","../../src/modules/Channel/context/dux/reducers.js","../../src/modules/Channel/context/hooks/useHandleChannelEvents.ts","../../src/modules/Channel/context/hooks/useGetChannel.js","../../src/modules/Channel/context/hooks/useInitialMessagesFetch.js","../../src/modules/Channel/context/hooks/useHandleReconnect.ts","../../src/modules/Channel/context/hooks/useScrollCallback.js","../../src/modules/Channel/context/hooks/useScrollDownCallback.js","../../src/modules/Channel/context/hooks/useDeleteMessageCallback.js","../../src/modules/Channel/context/hooks/useUpdateMessageCallback.js","../../src/modules/Channel/context/hooks/useResendMessageCallback.js","../../src/modules/Channel/context/hooks/useSendMessageCallback.js","../../src/modules/Channel/context/hooks/useSendFileMessageCallback.js","../../src/modules/Channel/context/hooks/useToggleReactionCallback.js","../../src/modules/Channel/context/hooks/useScrollToMessage.ts","../../src/modules/Channel/context/hooks/useSendVoiceMessageCallback.ts","../../src/modules/Channel/context/ChannelProvider.tsx"],"sourcesContent":["export const RESET_MESSAGES = 'RESET_MESSAGES';\n\nexport const FETCH_INITIAL_MESSAGES_START = 'FETCH_INITIAL_MESSAGES_START';\nexport const FETCH_INITIAL_MESSAGES_SUCCESS = 'FETCH_INITIAL_MESSAGES_SUCCESS';\nexport const FETCH_INITIAL_MESSAGES_FAILURE = 'FETCH_INITIAL_MESSAGES_FAILURE';\nexport const FETCH_PREV_MESSAGES_SUCCESS = 'FETCH_PREV_MESSAGES_SUCCESS';\nexport const FETCH_PREV_MESSAGES_FAILURE = 'FETCH_PREV_MESSAGES_FAILURE';\nexport const FETCH_NEXT_MESSAGES_SUCCESS = 'FETCH_NEXT_MESSAGES_SUCCESS';\nexport const FETCH_NEXT_MESSAGES_FAILURE = 'FETCH_NEXT_MESSAGES_FAILURE';\n\nexport const SEND_MESSAGEGE_START = 'SEND_MESSAGEGE_START';\nexport const SEND_MESSAGEGE_SUCESS = 'SEND_MESSAGEGE_SUCESS';\nexport const SEND_MESSAGEGE_FAILURE = 'SEND_MESSAGEGE_FAILURE';\n\nexport const RESEND_MESSAGEGE_START = 'RESEND_MESSAGEGE_START';\n\nexport const ON_MESSAGE_RECEIVED = 'ON_MESSAGE_RECEIVED';\nexport const ON_MESSAGE_UPDATED = 'ON_MESSAGE_UPDATED';\nexport const ON_MESSAGE_THREAD_INFO_UPDATED = 'ON_MESSAGE_THREAD_INFO_UPDATED';\nexport const ON_MESSAGE_DELETED = 'ON_MESSAGE_DELETED';\nexport const ON_MESSAGE_DELETED_BY_REQ_ID = 'ON_MESSAGE_DELETED_BY_REQ_ID';\n\nexport const SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\nexport const SET_CHANNEL_INVALID = 'SET_CHANNEL_INVALID';\nexport const MARK_AS_READ = 'MARK_AS_READ';\n\nexport const ON_REACTION_UPDATED = 'ON_REACTION_UPDATED';\nexport const SET_EMOJI_CONTAINER = 'SET_EMOJI_CONTAINER';\n\nexport const MESSAGE_LIST_PARAMS_CHANGED = 'MESSAGE_LIST_PARAMS_CHANGED';\n","import format from 'date-fns/format';\nimport * as channelActions from './dux/actionTypes';\nimport topics from '../../../lib/pubSub/topics';\n\nimport { getSendingMessageStatus, isReadMessage } from '../../../utils';\nimport { OutgoingMessageStates } from '../../../utils/exports/getOutgoingMessageState';\n\nconst UNDEFINED = 'undefined';\nconst { SUCCEEDED, FAILED, PENDING } = getSendingMessageStatus();\n\nexport const scrollToRenderedMessage = (scrollRef, initialTimeStamp) => {\n  try {\n    const container = scrollRef.current;\n    // scroll into the message with initialTimeStamp\n    const element = container.querySelectorAll(`[data-sb-created-at=\"${initialTimeStamp}\"]`)?.[0];\n    if (element) {\n      // Calculate the offset of the element from the top of the container\n      const containerHeight = container.offsetHeight;\n      const elementHeight = element.offsetHeight;\n      const elementOffset = (containerHeight - elementHeight) / 2;\n      // Set the scroll position of the container to bring the element to the middle\n      container.scrollTop = element.offsetTop - elementOffset;\n    }\n  } catch {\n    // do nothing\n  }\n};\n\n/* eslint-disable default-param-last */\nexport const scrollIntoLast = (initialTry = 0, scrollRef) => {\n  const MAX_TRIES = 10;\n  const currentTry = initialTry;\n  if (currentTry > MAX_TRIES) {\n    return;\n  }\n  try {\n    const scrollDOM = scrollRef?.current || document.querySelector('.sendbird-conversation__messages-padding');\n    // eslint-disable-next-line no-multi-assign\n    scrollDOM.scrollTop = scrollDOM.scrollHeight;\n  } catch (error) {\n    setTimeout(() => {\n      scrollIntoLast(currentTry + 1, scrollRef);\n    }, 500 * currentTry);\n  }\n};\n\nexport const pubSubHandleRemover = (subscriber) => {\n  subscriber.forEach((s) => {\n    try {\n      s.remove();\n    } catch {\n      //\n    }\n  });\n};\n\nexport const pubSubHandler = ({\n  channelUrl,\n  pubSub,\n  dispatcher,\n  scrollRef,\n}) => {\n  const subscriber = new Map();\n  if (!pubSub || !pubSub.subscribe) return subscriber;\n  subscriber.set(topics.SEND_USER_MESSAGE, pubSub.subscribe(topics.SEND_USER_MESSAGE, (msg) => {\n    const { channel, message } = msg;\n    scrollIntoLast(0, scrollRef);\n    if (channelUrl === channel?.url) {\n      dispatcher({\n        type: channelActions.SEND_MESSAGEGE_SUCESS,\n        payload: message,\n      });\n    }\n  }));\n  subscriber.set(topics.SEND_MESSAGE_START, pubSub.subscribe(topics.SEND_MESSAGE_START, (msg) => {\n    const { channel, message } = msg;\n    if (channelUrl === channel?.url) {\n      dispatcher({\n        type: channelActions.SEND_MESSAGEGE_START,\n        payload: message,\n      });\n    }\n  }));\n  subscriber.set(topics.SEND_FILE_MESSAGE, pubSub.subscribe(topics.SEND_FILE_MESSAGE, (msg) => {\n    const { channel, message } = msg;\n    scrollIntoLast(0, scrollRef);\n    if (channelUrl === channel?.url) {\n      dispatcher({\n        type: channelActions.SEND_MESSAGEGE_SUCESS,\n        payload: message,\n      });\n    }\n  }));\n  subscriber.set(topics.UPDATE_USER_MESSAGE, pubSub.subscribe(topics.UPDATE_USER_MESSAGE, (msg) => {\n    const { channel, message, fromSelector } = msg;\n    if (fromSelector && (channelUrl === channel?.url)) {\n      dispatcher({\n        type: channelActions.ON_MESSAGE_UPDATED,\n        payload: { channel, message },\n      });\n    }\n  }));\n  subscriber.set(topics.DELETE_MESSAGE, pubSub.subscribe(topics.DELETE_MESSAGE, (msg) => {\n    const { channel, messageId } = msg;\n    if (channelUrl === channel?.url) {\n      dispatcher({\n        type: channelActions.ON_MESSAGE_DELETED,\n        payload: messageId,\n      });\n    }\n  }));\n\n  return subscriber;\n};\n\nexport const getParsedStatus = (message, currentGroupChannel) => {\n  if (message.requestState === FAILED) {\n    return OutgoingMessageStates.FAILED;\n  }\n\n  if (message.requestState === PENDING) {\n    return OutgoingMessageStates.PENDING;\n  }\n\n  if (message.requestState === SUCCEEDED) {\n    if (!currentGroupChannel) {\n      return OutgoingMessageStates.SENT;\n    }\n\n    const unreadMemberCount = currentGroupChannel?.getUnreadMemberCount(message);\n    if (unreadMemberCount === 0) {\n      return OutgoingMessageStates.READ;\n    }\n\n    const isDelivered = currentGroupChannel?.getUndeliveredMemberCount(message) === 0;\n    if (isDelivered) {\n      return OutgoingMessageStates.DELIVERED;\n    }\n\n    return OutgoingMessageStates.SENT;\n  }\n\n  return null;\n};\n\nexport const isOperator = (groupChannel = {}) => {\n  const myRole = groupChannel?.myRole;\n  return myRole === 'operator';\n};\n\nexport const isDisabledBecauseFrozen = (groupChannel = {}) => {\n  const isFrozen = groupChannel?.isFrozen;\n  return isFrozen && !isOperator(groupChannel);\n};\n\nexport const isDisabledBecauseMuted = (groupChannel = {}) => {\n  const myMutedState = groupChannel?.myMutedState;\n  return myMutedState === 'muted';\n};\n\nexport const getEmojiCategoriesFromEmojiContainer = (emojiContainer = {}) => (\n  emojiContainer.emojiCategories ? emojiContainer.emojiCategories : []\n);\n\nexport const getAllEmojisFromEmojiContainer = (emojiContainer = {}) => {\n  const { emojiCategories = [] } = emojiContainer;\n  const allEmojis = [];\n\n  for (let categoryIndex = 0; categoryIndex < emojiCategories.length; categoryIndex += 1) {\n    const { emojis } = emojiCategories[categoryIndex];\n    for (let emojiIndex = 0; emojiIndex < emojis.length; emojiIndex += 1) {\n      allEmojis.push(emojis[emojiIndex]);\n    }\n  }\n  return allEmojis;\n};\n\nexport const getEmojisFromEmojiContainer = (emojiContainer = {}, emojiCategoryId = '') => (\n  emojiContainer.emojiCategories\n    ? emojiContainer.emojiCategories\n      .filter((emojiCategory) => emojiCategory.id === emojiCategoryId)[0].emojis\n    : []\n);\n\nexport const getAllEmojisMapFromEmojiContainer = (emojiContainer = {}) => {\n  const { emojiCategories = [] } = emojiContainer;\n  const allEmojisMap = new Map();\n\n  for (let categoryIndex = 0; categoryIndex < emojiCategories.length; categoryIndex += 1) {\n    const { emojis } = emojiCategories[categoryIndex];\n    for (let emojiIndex = 0; emojiIndex < emojis.length; emojiIndex += 1) {\n      const { key, url } = emojis[emojiIndex];\n      allEmojisMap.set(key, url);\n    }\n  }\n  return allEmojisMap;\n};\n\nexport const getNicknamesMapFromMembers = (members = []) => {\n  const nicknamesMap = new Map();\n  for (let memberIndex = 0; memberIndex < members.length; memberIndex += 1) {\n    const { userId, nickname } = members[memberIndex];\n    nicknamesMap.set(userId, nickname);\n  }\n  return nicknamesMap;\n};\n\nconst getUniqueListBy = (arr, key) => [...new Map(arr.map((item) => [item[key], item])).values()];\nconst getUniqueListByMessageId = (arr) => getUniqueListBy(arr, 'messageId');\nconst sortByCreatedAt = (messages) => messages.sort((a, b) => a.createdAt - b.createdAt);\n\nexport const mergeAndSortMessages = (oldMessages, newMessages) => {\n  const lastOldMessage = oldMessages[oldMessages.length - 1];\n  const firstNewMessage = newMessages[0];\n  // If the last message of oldMessages is older than the first message of newMessages,\n  // then we can safely append newMessages to oldMessages.\n  if (lastOldMessage?.createdAt < firstNewMessage?.createdAt) {\n    return [...oldMessages, ...newMessages];\n  }\n\n  // todo: optimize this\n  // If the last message of oldMessages is newer than the first message of newMessages,\n  // then we need to merge the two arrays and sort them by createdAt.\n  const mergedMessages = [...oldMessages, ...newMessages];\n  const unique = getUniqueListByMessageId(mergedMessages);\n  return sortByCreatedAt(unique);\n};\n\nexport const getMessageCreatedAt = (message) => format(message.createdAt, 'p');\n\nexport const isSameGroup = (message, comparingMessage, currentChannel) => {\n  if (!(message\n    && comparingMessage\n    && message.messageType\n    && message.messageType !== 'admin'\n    && comparingMessage.messageType\n    && comparingMessage?.messageType !== 'admin'\n    && message?.sender\n    && comparingMessage?.sender\n    && message?.createdAt\n    && comparingMessage?.createdAt\n    && message?.sender?.userId\n    && comparingMessage?.sender?.userId\n  )) {\n    return false;\n  }\n  return (\n    message?.sendingStatus === comparingMessage?.sendingStatus\n    && message?.sender?.userId === comparingMessage?.sender?.userId\n    && getMessageCreatedAt(message) === getMessageCreatedAt(comparingMessage)\n    && isReadMessage(currentChannel, message) === isReadMessage(currentChannel, comparingMessage)\n  );\n};\n\nexport const compareMessagesForGrouping = (\n  prevMessage,\n  currMessage,\n  nextMessage,\n  currentChannel,\n  replyType,\n) => {\n  if (replyType === 'THREAD' && currMessage?.threadInfo) {\n    return [false, false];\n  }\n  const sendingStatus = currMessage?.sendingStatus || '';\n  const isAcceptable = sendingStatus !== 'pending' && sendingStatus !== 'failed';\n  return [\n    isSameGroup(prevMessage, currMessage, currentChannel) && isAcceptable,\n    isSameGroup(currMessage, nextMessage, currentChannel) && isAcceptable,\n  ];\n};\n\nexport const hasOwnProperty = (property) => (payload) => {\n  // eslint-disable-next-line no-prototype-builtins\n  if (payload && payload.hasOwnProperty && payload.hasOwnProperty(property)) {\n    return true;\n  }\n  return false;\n};\n\nexport const passUnsuccessfullMessages = (allMessages, newMessage) => {\n  const { sendingStatus = UNDEFINED } = newMessage;\n  if (sendingStatus === SUCCEEDED || sendingStatus === PENDING) {\n    const lastIndexOfSucceededMessage = allMessages\n      .map((message) => (\n        message.sendingStatus\n        || ((message.isAdminMessage && message.isAdminMessage()) ? SUCCEEDED : UNDEFINED)\n      ))\n      .lastIndexOf(SUCCEEDED);\n    if (lastIndexOfSucceededMessage + 1 < allMessages.length) {\n      const messages = [...allMessages];\n      messages.splice(lastIndexOfSucceededMessage + 1, 0, newMessage);\n      return messages;\n    }\n  }\n  return [\n    ...allMessages,\n    newMessage,\n  ];\n};\n\nexport const pxToNumber = (px) => {\n  if (typeof px === 'number') {\n    return px;\n  }\n  if (typeof px === 'string') {\n    const parsed = Number.parseFloat(px);\n    if (!Number.isNaN(parsed)) {\n      return parsed;\n    }\n  }\n  return null;\n};\n\nexport const isAboutSame = (a, b, px) => (Math.abs(a - b) <= px);\n\nexport default getParsedStatus;\n","/**\n * This function helps consider the every condition\n * related to enabling emoji reaction feature.\n */\n\nexport interface IsReactionEnabledProps {\n  isBroadcast?: boolean;\n  isSuper?: boolean;\n  globalLevel?: boolean;\n  moduleLevel?: boolean;\n}\n\nexport function getIsReactionEnabled({\n  isBroadcast = false,\n  isSuper = false,\n  globalLevel = true,\n  moduleLevel,\n}: IsReactionEnabledProps): boolean {\n  return !(isBroadcast || isSuper) && (moduleLevel ?? globalLevel);\n}\n","export default {\n  initialized: false,\n  loading: true,\n  allMessages: [],\n  currentGroupChannel: { members: [] },\n  // for scrollup\n  hasMorePrev: false,\n  oldestMessageTimeStamp: 0,\n  // for scroll down\n  // onScrollDownCallback is added for navigation to different timestamps on messageSearch\n  // hasMorePrev, onScrollCallback -> scroll up(default behavior)\n  // hasMoreNext, onScrollDownCallback -> scroll down\n  hasMoreNext: false,\n  latestMessageTimeStamp: 0,\n  emojiContainer: {},\n  unreadSince: null,\n  isInvalid: false,\n  messageListParams: null,\n};\n","import format from 'date-fns/format';\n\nimport * as actionTypes from './actionTypes';\nimport compareIds from '../../../../utils/compareIds';\nimport { PREV_RESULT_SIZE, NEXT_RESULT_SIZE } from '../const';\nimport { passUnsuccessfullMessages, mergeAndSortMessages } from '../utils';\nimport { filterMessageListParams, getSendingMessageStatus } from '../../../../utils';\n\nconst {\n  SUCCEEDED,\n} = getSendingMessageStatus();\nconst getOldestMessageTimeStamp = (messages = []) => {\n  const oldestMessage = messages[0];\n  return (oldestMessage && oldestMessage.createdAt) || null;\n};\nconst getLatestMessageTimeStamp = (messages = []) => {\n  const latestMessage = messages[messages.length - 1];\n  return (latestMessage && latestMessage.createdAt) || null;\n};\n\nexport default function reducer(state, action) {\n  switch (action.type) {\n    case actionTypes.RESET_MESSAGES:\n      return {\n        ...state,\n        // when user switches channel, if the previous channel `hasMorePrev`\n        // the onScroll gets called twice, setting hasMorePrev false prevents this\n        hasMorePrev: false,\n        hasMoreNext: false,\n        allMessages: [],\n      };\n    case actionTypes.FETCH_INITIAL_MESSAGES_START: {\n      return {\n        ...state,\n        loading: true,\n        allMessages: [\n          ...state.allMessages.filter((m) => (\n            m.sendingStatus !== SUCCEEDED\n          )),\n        ],\n      };\n    }\n    case actionTypes.FETCH_INITIAL_MESSAGES_SUCCESS: {\n      const {\n        currentGroupChannel,\n        messages,\n      } = action.payload;\n      if (!(currentGroupChannel?.url === state.currentGroupChannel?.url)) {\n        return state;\n      }\n      const oldestMessageTimeStamp = getOldestMessageTimeStamp(messages);\n      const latestMessageTimeStamp = getLatestMessageTimeStamp(messages);\n      return {\n        ...state,\n        loading: false,\n        initialized: true,\n        hasMorePrev: true,\n        hasMoreNext: true,\n        oldestMessageTimeStamp,\n        latestMessageTimeStamp,\n        allMessages: [...messages],\n      };\n    }\n    case actionTypes.FETCH_PREV_MESSAGES_SUCCESS: {\n      const {\n        currentGroupChannel,\n        messages,\n      } = action.payload;\n      if (!(currentGroupChannel?.url === state.currentGroupChannel?.url)) {\n        return state;\n      }\n      const hasMorePrev = messages && messages.length === PREV_RESULT_SIZE + 1;\n      const oldestMessageTimeStamp = getOldestMessageTimeStamp(messages);\n\n      // Remove duplicated messages\n      const duplicatedMessageIds = [];\n      const updatedOldMessages = state.allMessages.map((msg) => {\n        const duplicatedMessage = messages.find(({ messageId }) => (\n          compareIds(messageId, msg.messageId)\n        ));\n        if (!duplicatedMessage) {\n          return msg;\n        }\n        duplicatedMessageIds.push(duplicatedMessage.messageId);\n        return (duplicatedMessage.updatedAt > msg.updatedAt) ? duplicatedMessage : msg;\n      });\n      const filteredNewMessages = (duplicatedMessageIds.length > 0)\n        ? messages.filter((msg) => (\n          !duplicatedMessageIds.find((messageId) => compareIds(messageId, msg.messageId))\n        ))\n        : messages;\n\n      return {\n        ...state,\n        hasMorePrev,\n        oldestMessageTimeStamp,\n        allMessages: [\n          ...filteredNewMessages,\n          ...updatedOldMessages,\n        ],\n      };\n    }\n    case actionTypes.FETCH_NEXT_MESSAGES_SUCCESS: {\n      const {\n        currentGroupChannel,\n        messages,\n      } = action.payload;\n      if (!(currentGroupChannel?.url === state.currentGroupChannel?.url)) {\n        return state;\n      }\n      const hasMoreNext = messages && messages.length === NEXT_RESULT_SIZE + 1;\n      const latestMessageTimeStamp = getLatestMessageTimeStamp(messages);\n\n      // sort ~\n      const sortedMessages = mergeAndSortMessages(state.allMessages, messages);\n\n      return {\n        ...state,\n        hasMoreNext,\n        latestMessageTimeStamp,\n        allMessages: sortedMessages,\n      };\n    }\n    case actionTypes.FETCH_INITIAL_MESSAGES_FAILURE:\n    case actionTypes.FETCH_PREV_MESSAGES_FAILURE:\n    case actionTypes.FETCH_NEXT_MESSAGES_FAILURE: {\n      const { currentGroupChannel } = action.payload;\n      if (currentGroupChannel?.url !== state?.currentGroupChannel?.url) {\n        return state;\n      }\n      return {\n        ...state,\n        loading: false,\n        initialized: false,\n        allMessages: [],\n        hasMorePrev: false,\n        hasMoreNext: false,\n        oldestMessageTimeStamp: null,\n        latestMessageTimeStamp: null,\n      };\n    }\n    case actionTypes.SEND_MESSAGEGE_START:\n      return {\n        ...state,\n        allMessages: [\n          ...state.allMessages,\n          { ...action.payload },\n        ],\n      };\n    case actionTypes.SEND_MESSAGEGE_SUCESS: {\n      const message = action.payload;\n      const filteredMessages = state.allMessages.filter((m) => (\n        m?.reqId !== message?.reqId\n      ));\n      const pendingIndex = filteredMessages.findIndex((msg) => (\n        msg?.sendingStatus === 'pending' || msg?.sendingStatus === 'failed'\n      ));\n      return {\n        ...state,\n        allMessages: pendingIndex > -1\n          ? [\n            ...filteredMessages.slice(0, pendingIndex),\n            message,\n            ...filteredMessages.slice(pendingIndex),\n          ]\n          : [\n            ...filteredMessages,\n            message,\n          ],\n      };\n    }\n    case actionTypes.SEND_MESSAGEGE_FAILURE: {\n      // eslint-disable-next-line no-param-reassign\n      action.payload.failed = true;\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => (\n          compareIds(m.reqId, action.payload.reqId)\n            ? action.payload\n            : m\n        )),\n      };\n    }\n    case actionTypes.SET_CURRENT_CHANNEL: {\n      return {\n        ...state,\n        currentGroupChannel: action.payload,\n        isInvalid: false,\n      };\n    }\n    case actionTypes.SET_CHANNEL_INVALID: {\n      return {\n        ...state,\n        currentGroupChannel: null,\n        isInvalid: true,\n      };\n    }\n    case actionTypes.ON_MESSAGE_RECEIVED: {\n      const { channel, message } = action.payload;\n      const { members } = channel;\n      const { sender } = message;\n      const { currentGroupChannel = {}, unreadSince } = state;\n      const currentGroupChannelUrl = currentGroupChannel?.url;\n\n      if (!compareIds(channel?.url, currentGroupChannelUrl)) {\n        return state;\n      }\n      // Excluded overlapping messages\n      if (state.allMessages.some((msg) => msg.messageId === message.messageId)) {\n        return state;\n      }\n      // Filter by userFilledQuery\n      if (state.messageListParams && !filterMessageListParams(state.messageListParams, message)) {\n        return state;\n      }\n\n      if (message.isAdminMessage && message.isAdminMessage()) {\n        return {\n          ...state,\n          allMessages: passUnsuccessfullMessages(state.allMessages, message),\n        };\n      }\n\n      // Update members when sender profileUrl, nickname, friendName has been changed\n      const senderMember = members?.find((m) => (m?.userId === sender?.userId));\n      if ((senderMember?.profileUrl !== sender?.profileUrl)\n        || (senderMember?.friendName !== sender?.friendName)\n        || (senderMember?.nickname !== sender?.nickname)) {\n        channel.members = members.map((member) => {\n          if (member.userId === sender.userId) {\n            return sender;\n          }\n          return member;\n        });\n      }\n      return {\n        ...state,\n        currentGroupChannel: channel,\n        unreadSince: state?.unreadSince ? unreadSince : format(new Date(), 'p MMM dd'),\n        allMessages: passUnsuccessfullMessages(state.allMessages, message),\n      };\n    }\n    case actionTypes.ON_MESSAGE_UPDATED: {\n      const { channel, message } = action.payload;\n      const currentGroupChannelUrl = state?.currentGroupChannel?.url || '';\n      if (!compareIds(channel?.url, currentGroupChannelUrl)) {\n        return state; // Ignore event when it is not for the current channel\n      }\n      if (state.messageListParams && !filterMessageListParams(state.messageListParams, message)) {\n        // Delete the message if it doesn't match to the params anymore\n        return {\n          ...state,\n          allMessages: state.allMessages.filter((m) => (\n            !compareIds(m.messageId, message?.messageId)\n          )),\n        };\n      }\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => {\n          if (compareIds(m.messageId, message.messageId)) {\n            return message;\n          }\n          if (compareIds(m.parentMessageId, message.messageId)) {\n            m.parentMessage = message;// eslint-disable-line no-param-reassign\n          }\n          return m;\n        }),\n      };\n    }\n    case actionTypes.ON_MESSAGE_THREAD_INFO_UPDATED: {\n      const { channel, event } = action.payload;\n      const { channelUrl, threadInfo, targetMessageId } = event;\n      const currentGroupChannelUrl = state?.currentGroupChannel?.url || '';\n      if (\n        !compareIds(channel?.url, currentGroupChannelUrl)\n        || !compareIds(channel?.url, channelUrl)\n      ) {\n        return state; // Ignore event when it is not for the current channel\n      }\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => {\n          if (compareIds(m.messageId, targetMessageId)) {\n            // eslint-disable-next-line no-param-reassign\n            m.threadInfo = threadInfo; // Upsert threadInfo to the target message\n          }\n          return m;\n        }),\n      };\n    }\n    case actionTypes.RESEND_MESSAGEGE_START:\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => (\n          compareIds(m.reqId, action.payload.reqId)\n            ? action.payload\n            : m\n        )),\n      };\n    case actionTypes.MARK_AS_READ:\n      if (state.currentGroupChannel?.url !== action.payload?.channel?.url) {\n        return state;\n      }\n      return {\n        ...state,\n        unreadSince: null,\n      };\n    case actionTypes.ON_MESSAGE_DELETED:\n      return {\n        ...state,\n        allMessages: state.allMessages.filter((m) => (\n          !compareIds(m.messageId, action.payload)\n        )),\n      };\n    case actionTypes.ON_MESSAGE_DELETED_BY_REQ_ID:\n      return {\n        ...state,\n        allMessages: state.allMessages.filter((m) => (\n          !compareIds(m.reqId, action.payload)\n        )),\n      };\n    case actionTypes.SET_EMOJI_CONTAINER: {\n      return {\n        ...state,\n        emojiContainer: action.payload,\n      };\n    }\n    case actionTypes.ON_REACTION_UPDATED: {\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => {\n          if (compareIds(m.messageId, action.payload.messageId)) {\n            if (m.applyReactionEvent && typeof m.applyReactionEvent === 'function') {\n              m.applyReactionEvent(action.payload);\n            }\n            return m;\n          }\n          return m;\n        }),\n      };\n    }\n    case actionTypes.MESSAGE_LIST_PARAMS_CHANGED: {\n      return {\n        ...state,\n        messageListParams: action.payload,\n      };\n    }\n    default:\n      return state;\n  }\n}\n","import { useEffect } from 'react';\nimport { GroupChannel, GroupChannelHandler, SendbirdGroupChat } from '@sendbird/chat/groupChannel';\nimport { FileMessage, UserMessage } from '@sendbird/chat/message';\n\nimport { scrollIntoLast } from '../utils';\n\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport uuidv4 from '../../../../utils/uuid';\nimport compareIds from '../../../../utils/compareIds';\nimport * as messageActions from '../dux/actionTypes';\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\n\n/**\n * Handles ChannelEvents and send values to dispatcher using messagesDispatcher\n * messagesDispatcher: Dispatcher\n * sdk: sdkInstance\n * logger: loggerInstance\n * channelUrl: string\n * sdkInit: bool\n */\ninterface DynamicParams {\n  sdkInit: boolean;\n  currentUserId: string;\n  currentGroupChannel: GroupChannel;\n  disableMarkAsRead: boolean;\n}\ninterface StaticParams {\n  sdk: SendbirdGroupChat;\n  logger: Logger;\n  scrollRef: React.RefObject<HTMLDivElement>;\n  setQuoteMessage: React.Dispatch<React.SetStateAction<UserMessage | FileMessage>>;\n  messagesDispatcher: CustomUseReducerDispatcher;\n}\n\nconst DELIVERY_RECIPT = 'delivery_receipt';\n\nfunction useHandleChannelEvents({\n  sdkInit,\n  currentUserId,\n  currentGroupChannel,\n  disableMarkAsRead,\n}: DynamicParams, {\n  sdk,\n  logger,\n  scrollRef,\n  setQuoteMessage,\n  messagesDispatcher,\n}: StaticParams): void {\n  const store = useSendbirdStateContext();\n  const {\n    markAsReadScheduler,\n    markAsDeliveredScheduler,\n    disableMarkAsDelivered,\n  } = store.config;\n  const canSetMarkAsDelivered = store.stores.sdkStore.sdk?.appInfo?.premiumFeatureList\n    ?.find((feature) => (feature === DELIVERY_RECIPT));\n\n  useEffect(() => {\n    const channelUrl = currentGroupChannel?.url;\n    const channelHandlerId = uuidv4();\n    if (channelUrl && sdkInit) {\n      const channelHandler: GroupChannelHandler = {\n        onMessageReceived: (channel, message) => {\n          if (compareIds(channel?.url, channelUrl)) {\n            let scrollToEnd = false;\n            try {\n              const { current } = scrollRef;\n              scrollToEnd = current.offsetHeight + current.scrollTop >= current.scrollHeight - 10;\n              // 10 is a buffer\n            } catch (error) {\n              //\n            }\n\n            logger.info('Channel | useHandleChannelEvents: onMessageReceived', message);\n            messagesDispatcher({\n              type: messageActions.ON_MESSAGE_RECEIVED,\n              payload: { channel, message },\n            });\n            if (scrollToEnd\n              && document.getElementById('sendbird-dropdown-portal')?.childElementCount === 0\n              && document.getElementById('sendbird-emoji-list-portal')?.childElementCount === 0\n            ) {\n              // and !openContextMenu\n              try {\n                setTimeout(() => {\n                  scrollIntoLast(0, scrollRef);\n                });\n                if (!disableMarkAsRead) {\n                  markAsReadScheduler.push(currentGroupChannel);\n                }\n                if (canSetMarkAsDelivered && !disableMarkAsDelivered) {\n                  markAsDeliveredScheduler.push(currentGroupChannel);\n                }\n              } catch (error) {\n                logger.warning('Channel | onMessageReceived | scroll to end failed');\n              }\n            }\n          }\n        },\n        onUnreadMemberStatusUpdated: (channel) => {\n          logger.info('Channel | useHandleChannelEvents: onUnreadMemberStatusUpdated', channel);\n          if (compareIds(channel?.url, channelUrl)) {\n            messagesDispatcher({\n              type: messageActions.SET_CURRENT_CHANNEL,\n              payload: channel,\n            });\n          }\n        },\n        // before(onDeliveryReceiptUpdated)\n        onUndeliveredMemberStatusUpdated: (channel) => {\n          if (compareIds(channel?.url, channelUrl)) {\n            logger.info('Channel | useHandleChannelEvents: onDeliveryReceiptUpdated', channel);\n            messagesDispatcher({\n              type: messageActions.SET_CURRENT_CHANNEL,\n              payload: channel,\n            });\n          }\n        },\n        onMessageUpdated: (channel, message) => {\n          logger.info('Channel | useHandleChannelEvents: onMessageUpdated', message);\n          messagesDispatcher({\n            type: messageActions.ON_MESSAGE_UPDATED,\n            payload: { channel, message },\n          });\n        },\n        onThreadInfoUpdated: (channel, threadInfoUpdateEvent) => {\n          logger.info('Channel | useHandleChannelEvents: onThreadInfoUpdated', { channel, threadInfoUpdateEvent });\n          messagesDispatcher({\n            type: messageActions.ON_MESSAGE_THREAD_INFO_UPDATED,\n            payload: { channel, event: threadInfoUpdateEvent },\n          });\n        },\n        onMessageDeleted: (channel, messageId) => {\n          logger.info('Channel | useHandleChannelEvents: onMessageDeleted', { channel, messageId });\n          setQuoteMessage(null);\n          messagesDispatcher({\n            type: messageActions.ON_MESSAGE_DELETED,\n            payload: messageId,\n          });\n        },\n        onReactionUpdated: (channel, reactionEvent) => {\n          logger.info('Channel | useHandleChannelEvents: onReactionUpdated', { channel, reactionEvent });\n          messagesDispatcher({\n            type: messageActions.ON_REACTION_UPDATED,\n            payload: reactionEvent,\n          });\n        },\n        onChannelChanged: (channel) => {\n          if (compareIds(channel?.url, channelUrl)) {\n            logger.info('Channel | useHandleChannelEvents: onChannelChanged', channel);\n            messagesDispatcher({\n              type: messageActions.SET_CURRENT_CHANNEL,\n              payload: channel,\n            });\n          }\n        },\n        onChannelFrozen: (channel) => {\n          if (compareIds(channel?.url, channelUrl)) {\n            logger.info('Channel | useHandleChannelEvents: onChannelFrozen', channel);\n            messagesDispatcher({\n              type: messageActions.SET_CURRENT_CHANNEL,\n              payload: channel,\n            });\n          }\n        },\n        onChannelUnfrozen: (channel) => {\n          if (compareIds(channel?.url, channelUrl)) {\n            logger.info('Channel | useHandleChannelEvents: onChannelUnFrozen', channel);\n            messagesDispatcher({\n              type: messageActions.SET_CURRENT_CHANNEL,\n              payload: channel,\n            });\n          }\n        },\n        onUserMuted: (channel, user) => {\n          if (compareIds(channel?.url, channelUrl)) {\n            logger.info('Channel | useHandleChannelEvents: onUserMuted', { channel, user });\n            messagesDispatcher({\n              type: messageActions.SET_CURRENT_CHANNEL,\n              payload: channel,\n            });\n          }\n        },\n        onUserUnmuted: (channel, user) => {\n          if (compareIds(channel?.url, channelUrl)) {\n            logger.info('Channel | useHandleChannelEvents: onUserUnmuted', { channel, user });\n            messagesDispatcher({\n              type: messageActions.SET_CURRENT_CHANNEL,\n              payload: channel,\n            });\n          }\n        },\n        onUserBanned: (channel, user) => {\n          if (compareIds(channel?.url, channelUrl) && user?.userId === sdk?.currentUser?.userId) {\n            logger.info('Channel | useHandleChannelEvents: onUserBanned', { channel, user });\n            messagesDispatcher({\n              type: messageActions.SET_CURRENT_CHANNEL,\n              payload: null,\n            });\n          }\n        },\n        onOperatorUpdated: (channel, users) => {\n          if (compareIds(channel?.url, channelUrl)) {\n            logger.info('Channel | useHandleChannelEvents: onOperatorUpdated', { channel, users });\n            messagesDispatcher({\n              type: messageActions.SET_CURRENT_CHANNEL,\n              payload: channel,\n            });\n          }\n        },\n        onUserLeft: (channel, user) => {\n          if (compareIds(channel?.url, channelUrl)) {\n            logger.info('Channel | useHandleChannelEvents: onUserLeft', { channel, user });\n            if (user?.userId === currentUserId) {\n              messagesDispatcher({\n                type: messageActions.SET_CURRENT_CHANNEL,\n                payload: null,\n              });\n            }\n          }\n        },\n      };\n      logger.info('Channel | useHandleChannelEvents: Setup event handler', { channelHandlerId, channelHandler });\n      // Add this group channel handler to the Sendbird chat instance\n      sdk.groupChannel?.addGroupChannelHandler(channelHandlerId, new GroupChannelHandler(channelHandler));\n    }\n    return () => {\n      if (sdk?.groupChannel?.removeGroupChannelHandler) {\n        logger.info('Channel | useHandleChannelEvents: Removing message reciver handler', channelHandlerId);\n        sdk.groupChannel.removeGroupChannelHandler(channelHandlerId);\n      } else if (sdk?.groupChannel) {\n        logger.error('Channel | useHandleChannelEvents: Not found the removeGroupChannelHandler');\n      }\n    };\n  }, [currentGroupChannel?.url, sdkInit]);\n}\n\nexport default useHandleChannelEvents;\n","import { useEffect } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\n\nfunction useSetChannel({ channelUrl, sdkInit, disableMarkAsRead }, {\n  messagesDispatcher,\n  sdk,\n  logger,\n  markAsReadScheduler,\n}) {\n  useEffect(() => {\n    if (channelUrl && sdkInit && sdk && sdk.groupChannel) {\n      logger.info('Channel | useSetChannel fetching channel', channelUrl);\n      sdk.groupChannel.getChannel(channelUrl)\n        .then((groupChannel) => {\n          logger.info('Channel | useSetChannel fetched channel', groupChannel);\n          messagesDispatcher({\n            type: messageActionTypes.SET_CURRENT_CHANNEL,\n            payload: groupChannel,\n          });\n\n          logger.info('Channel: Mark as read', groupChannel);\n          if (!disableMarkAsRead) {\n            markAsReadScheduler.push(groupChannel);\n          }\n        })\n        .catch((e) => {\n          logger.warning('Channel | useSetChannel fetch channel failed', { channelUrl, e });\n          messagesDispatcher({\n            type: messageActionTypes.SET_CHANNEL_INVALID,\n          });\n        });\n      sdk.getAllEmoji().then((emojiContainer_) => {\n        logger.info('Channel: Getting emojis success', emojiContainer_);\n        messagesDispatcher({\n          type: messageActionTypes.SET_EMOJI_CONTAINER,\n          payload: emojiContainer_,\n        });\n      }).catch((err) => {\n        logger.error('Channel: Getting emojis failed', err);\n      });\n      sdk.getAllEmoji();\n    }\n  }, [channelUrl, sdkInit]);\n}\n\nexport default useSetChannel;\n","import { useEffect } from 'react';\nimport { ReplyType } from '@sendbird/chat/message';\n\nimport * as utils from '../utils';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport { PREV_RESULT_SIZE, NEXT_RESULT_SIZE } from '../const';\n\nfunction useInitialMessagesFetch({\n  currentGroupChannel,\n  userFilledMessageListQuery,\n  initialTimeStamp,\n  replyType,\n}, {\n  logger,\n  scrollRef,\n  messagesDispatcher,\n}) {\n  const channelUrl = currentGroupChannel?.url;\n  useEffect(() => {\n    logger.info('Channel useInitialMessagesFetch: Setup started', currentGroupChannel);\n    messagesDispatcher({\n      type: messageActionTypes.RESET_MESSAGES,\n      payload: null,\n    });\n\n    if (currentGroupChannel && currentGroupChannel?.getMessagesByTimestamp) {\n      const messageListParams = {};\n      messageListParams.prevResultSize = PREV_RESULT_SIZE;\n      if (initialTimeStamp) {\n        messageListParams.nextResultSize = NEXT_RESULT_SIZE;\n      }\n      messageListParams.isInclusive = true;\n      messageListParams.includeReactions = true;\n      messageListParams.includeMetaArray = true;\n      if (replyType && (replyType === 'QUOTE_REPLY' || replyType === 'THREAD')) {\n        messageListParams.includeThreadInfo = true;\n        messageListParams.includeParentMessageInfo = true;\n        messageListParams.replyType = ReplyType.ONLY_REPLY_TO_CHANNEL;\n      }\n      if (userFilledMessageListQuery) {\n        Object.keys(userFilledMessageListQuery).forEach((key) => {\n          messageListParams[key] = userFilledMessageListQuery[key];\n        });\n      }\n      if ((replyType && (replyType === 'QUOTE_REPLY' || replyType === 'THREAD')) || userFilledMessageListQuery) {\n        logger.info('Channel useInitialMessagesFetch: Setup messageListParams', messageListParams);\n        messagesDispatcher({\n          type: messageActionTypes.MESSAGE_LIST_PARAMS_CHANGED,\n          payload: messageListParams,\n        });\n      }\n\n      logger.info('Channel: Fetching messages', { currentGroupChannel, userFilledMessageListQuery });\n      messagesDispatcher({\n        type: messageActionTypes.FETCH_INITIAL_MESSAGES_START,\n        payload: null,\n      });\n\n      currentGroupChannel.getMessagesByTimestamp(\n        initialTimeStamp || new Date().getTime(),\n        messageListParams,\n      )\n        .then((messages) => {\n          messagesDispatcher({\n            type: messageActionTypes.FETCH_INITIAL_MESSAGES_SUCCESS,\n            payload: {\n              currentGroupChannel,\n              messages,\n            },\n          });\n        })\n        .catch((error) => {\n          logger.error('Channel: Fetching messages failed', error);\n          messagesDispatcher({\n            type: messageActionTypes.FETCH_INITIAL_MESSAGES_FAILURE,\n            payload: { currentGroupChannel },\n          });\n        })\n        .finally(() => {\n          if (!initialTimeStamp) {\n            setTimeout(() => utils.scrollIntoLast(0, scrollRef));\n          } else {\n            setTimeout(() => {\n              utils.scrollToRenderedMessage(scrollRef, initialTimeStamp);\n            }, 500);\n          }\n        });\n    }\n  }, [channelUrl, userFilledMessageListQuery, initialTimeStamp]);\n  /**\n   * Note - useEffect(() => {}, [currentGroupChannel])\n   * was buggy, that is why we did\n   * const channelUrl = currentGroupChannel && currentGroupChannel.url;\n   * useEffect(() => {}, [channelUrl])\n   * Again, this hook is supposed to execute when currentGroupChannel changes\n   * The 'channelUrl' here is not the same memory reference from Conversation.props\n   */\n}\n\nexport default useInitialMessagesFetch;\n","import { useEffect } from 'react';\n\nimport type { GroupChannel, SendbirdGroupChat } from '@sendbird/chat/groupChannel';\nimport { MessageListParams, ReplyType } from '@sendbird/chat/message';\nimport * as utils from '../utils';\nimport { PREV_RESULT_SIZE, NEXT_RESULT_SIZE } from '../const';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport { Logger } from '../../../../lib/SendbirdState';\nimport { MarkAsReadSchedulerType } from '../../../../lib/hooks/useMarkAsReadScheduler';\n\ninterface DynamicParams {\n  isOnline: boolean;\n  replyType?: string;\n  disableMarkAsRead: boolean;\n}\n\ninterface StaticParams {\n  logger: Logger;\n  sdk: SendbirdGroupChat;\n  currentGroupChannel: GroupChannel;\n  scrollRef: React.RefObject<HTMLDivElement>;\n  markAsReadScheduler: MarkAsReadSchedulerType;\n  messagesDispatcher: (props: { type: string, payload: any }) => void;\n  userFilledMessageListQuery?: Record<string, any>;\n}\n\nfunction useHandleReconnect(\n  { isOnline, replyType, disableMarkAsRead }: DynamicParams,\n  {\n    logger,\n    sdk,\n    scrollRef,\n    currentGroupChannel,\n    messagesDispatcher,\n    markAsReadScheduler,\n    userFilledMessageListQuery,\n  }: StaticParams,\n): void {\n  useEffect(() => {\n    const wasOffline = !isOnline;\n    return () => {\n      // state changed from offline to online\n      if (wasOffline && currentGroupChannel?.url) {\n        logger.info('Refreshing conversation state');\n        const isReactionEnabled = sdk?.appInfo?.useReaction || false;\n\n        const messageListParams: MessageListParams = {\n          prevResultSize: PREV_RESULT_SIZE,\n          isInclusive: true,\n          includeReactions: isReactionEnabled,\n          nextResultSize: NEXT_RESULT_SIZE,\n        };\n        if (replyType && replyType === 'QUOTE_REPLY') {\n          messageListParams.includeThreadInfo = true;\n          messageListParams.includeParentMessageInfo = true;\n          messageListParams.replyType = ReplyType.ONLY_REPLY_TO_CHANNEL;\n        }\n        if (userFilledMessageListQuery) {\n          Object.keys(userFilledMessageListQuery).forEach((key) => {\n            messageListParams[key] = userFilledMessageListQuery[key];\n          });\n        }\n        logger.info('Channel: Fetching messages', { currentGroupChannel, userFilledMessageListQuery });\n        messagesDispatcher({\n          type: messageActionTypes.FETCH_INITIAL_MESSAGES_START,\n          payload: null,\n        });\n\n        sdk?.groupChannel?.getChannel(currentGroupChannel?.url)\n          .then((groupChannel) => {\n            const lastMessageTime = new Date().getTime();\n\n            groupChannel.getMessagesByTimestamp(\n              lastMessageTime,\n              messageListParams,\n            )\n              .then((messages) => {\n                messagesDispatcher({\n                  type: messageActionTypes.FETCH_INITIAL_MESSAGES_SUCCESS,\n                  payload: {\n                    currentGroupChannel,\n                    messages,\n                  },\n                });\n                setTimeout(() => utils.scrollIntoLast(0, scrollRef));\n              })\n              .catch((error) => {\n                logger.error('Channel: Fetching messages failed', error);\n                messagesDispatcher({\n                  type: messageActionTypes.FETCH_INITIAL_MESSAGES_FAILURE,\n                  payload: { currentGroupChannel },\n                });\n              });\n            if (!disableMarkAsRead) {\n              markAsReadScheduler.push(currentGroupChannel);\n            }\n          });\n      }\n    };\n  }, [isOnline, replyType]);\n}\n\nexport default useHandleReconnect;\n","import { useCallback } from 'react';\nimport { ReplyType } from '@sendbird/chat/message';\n\nimport * as messageActionTypes from '../dux/actionTypes';\nimport { PREV_RESULT_SIZE } from '../const';\n\nfunction useScrollCallback({\n  currentGroupChannel,\n  oldestMessageTimeStamp,\n  userFilledMessageListQuery,\n  replyType,\n}, {\n  hasMorePrev,\n  logger,\n  messagesDispatcher,\n  sdk,\n}) {\n  return useCallback((cb) => {\n    if (!hasMorePrev) { return; }\n    const { appInfo = {} } = sdk;\n    const isReactionEnabled = appInfo.useReaction || false;\n\n    const messageListParams = {\n      prevResultSize: PREV_RESULT_SIZE,\n      isInclusive: true,\n      includeReactions: isReactionEnabled,\n    };\n    messageListParams.includeMetaArray = true;\n    if (replyType === 'QUOTE_REPLY' || replyType === 'THREAD') {\n      messageListParams.includeThreadInfo = true;\n      messageListParams.includeParentMessageInfo = true;\n      messageListParams.replyType = ReplyType.ONLY_REPLY_TO_CHANNEL;\n    }\n    if (userFilledMessageListQuery) {\n      Object.keys(userFilledMessageListQuery).forEach((key) => {\n        messageListParams[key] = userFilledMessageListQuery[key];\n      });\n    }\n    logger.info('Channel: Fetching messages', { currentGroupChannel, userFilledMessageListQuery });\n\n    currentGroupChannel.getMessagesByTimestamp(\n      oldestMessageTimeStamp || new Date().getTime(),\n      messageListParams,\n    )\n      .then((messages) => {\n        messagesDispatcher({\n          type: messageActionTypes.FETCH_PREV_MESSAGES_SUCCESS,\n          payload: { currentGroupChannel, messages },\n        });\n        cb([messages, null]);\n      })\n      .catch((error) => {\n        logger.error('Channel: Fetching messages failed', error);\n        messagesDispatcher({\n          type: messageActionTypes.FETCH_PREV_MESSAGES_FAILURE,\n          payload: { currentGroupChannel },\n        });\n        cb([null, error]);\n      });\n  }, [currentGroupChannel, oldestMessageTimeStamp, replyType]);\n}\n\nexport default useScrollCallback;\n","import { useCallback } from 'react';\nimport { ReplyType } from '@sendbird/chat/message';\n\nimport * as messageActionTypes from '../dux/actionTypes';\nimport { NEXT_RESULT_SIZE } from '../const';\n\nfunction useScrollDownCallback({\n  currentGroupChannel,\n  latestMessageTimeStamp,\n  userFilledMessageListQuery,\n  hasMoreNext,\n  replyType,\n}, {\n  logger,\n  messagesDispatcher,\n  sdk,\n}) {\n  return useCallback((cb) => {\n    if (!hasMoreNext) { return; }\n    const { appInfo = {} } = sdk;\n    const isReactionEnabled = appInfo.useReaction || false;\n    const messageListParams = {\n      nextResultSize: NEXT_RESULT_SIZE,\n      isInclusive: true,\n      includeReactions: isReactionEnabled,\n    };\n    messageListParams.includeMetaArray = true;\n    if (replyType && (replyType === 'QUOTE_REPLY' || replyType === 'THREAD')) {\n      messageListParams.includeThreadInfo = true;\n      messageListParams.includeParentMessageInfo = true;\n      messageListParams.replyType = ReplyType.ONLY_REPLY_TO_CHANNEL;\n    }\n    if (userFilledMessageListQuery) {\n      Object.keys(userFilledMessageListQuery).forEach((key) => {\n        messageListParams[key] = userFilledMessageListQuery[key];\n      });\n    }\n    logger.info('Channel: Fetching later messages', { currentGroupChannel, userFilledMessageListQuery });\n\n    currentGroupChannel.getMessagesByTimestamp(\n      latestMessageTimeStamp || new Date().getTime(),\n      messageListParams,\n    )\n      .then((messages) => {\n        messagesDispatcher({\n          type: messageActionTypes.FETCH_NEXT_MESSAGES_SUCCESS,\n          payload: { currentGroupChannel, messages },\n        });\n        cb([messages, null]);\n      })\n      .catch((error) => {\n        logger.error('Channel: Fetching later messages failed', error);\n        messagesDispatcher({\n          type: messageActionTypes.FETCH_NEXT_MESSAGES_FAILURE,\n          payload: { currentGroupChannel },\n        });\n        cb([null, error]);\n      });\n  }, [currentGroupChannel, latestMessageTimeStamp, hasMoreNext, replyType]);\n}\n\nexport default useScrollDownCallback;\n","import { useCallback } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\n\nfunction useDeleteMessageCallback({ currentGroupChannel, messagesDispatcher }, { logger }) {\n  return useCallback((message) => {\n    logger.info('Channel | useDeleteMessageCallback: Deleting message', message);\n    const { requestState } = message;\n    return new Promise((resolve, reject) => {\n      logger.info('Channel | useDeleteMessageCallback: Deleting message requestState:', requestState);\n      // Message is only on local\n      if (requestState === 'failed' || requestState === 'pending') {\n        logger.info('Channel | useDeleteMessageCallback: Deleted message from local:', message);\n        messagesDispatcher({\n          type: messageActionTypes.ON_MESSAGE_DELETED_BY_REQ_ID,\n          payload: message.reqId,\n        });\n        resolve(message);\n      }\n\n      logger.info('Channel | useDeleteMessageCallback: Deleting message from remote:', requestState);\n      currentGroupChannel.deleteMessage(message)\n        .then(() => {\n          logger.info('Channel | useDeleteMessageCallback: Deleting message success!', message);\n          messagesDispatcher({\n            type: messageActionTypes.ON_MESSAGE_DELETED,\n            payload: message.messageId,\n          });\n          resolve(message);\n        })\n        .catch((err) => {\n          logger.warning('Channel | useDeleteMessageCallback: Deleting message failed!', err);\n          reject(err);\n        });\n    });\n  }, [currentGroupChannel, messagesDispatcher]);\n}\n\nexport default useDeleteMessageCallback;\n","import { useCallback } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\nimport topics from '../../../../lib/pubSub/topics';\n\nfunction useUpdateMessageCallback({\n  currentGroupChannel,\n  messagesDispatcher,\n  onBeforeUpdateUserMessage,\n  isMentionEnabled,\n}, {\n  logger,\n  pubSub,\n}) {\n  return useCallback((props, callback) => {\n    const {\n      messageId,\n      message,\n      mentionedUsers,\n      mentionTemplate,\n    } = props;\n    const createParamsDefault = () => {\n      const params = {};\n      params.message = message;\n      if (isMentionEnabled && mentionedUsers?.length > 0) {\n        params.mentionedUsers = mentionedUsers;\n      }\n      if (isMentionEnabled && mentionTemplate) {\n        params.mentionedMessageTemplate = mentionTemplate;\n      } else {\n        params.mentionedMessageTemplate = message;\n      }\n      return params;\n    };\n\n    const createCustomPrams = onBeforeUpdateUserMessage\n      && typeof onBeforeUpdateUserMessage === 'function';\n\n    if (createCustomPrams) {\n      logger.info('Channel: creating params using onBeforeUpdateUserMessage', onBeforeUpdateUserMessage);\n    }\n\n    const params = onBeforeUpdateUserMessage\n      ? onBeforeUpdateUserMessage(message)\n      : createParamsDefault(message);\n\n    logger.info('Channel: Updating message!', params);\n    currentGroupChannel.updateUserMessage(messageId, params).then((msg, err) => {\n      if (callback) {\n        callback(err, msg);\n      }\n\n      logger.info('Channel: Updating message success!', msg);\n      messagesDispatcher({\n        type: messageActionTypes.ON_MESSAGE_UPDATED,\n        payload: {\n          channel: currentGroupChannel,\n          message: msg,\n        },\n      });\n      pubSub.publish(\n        topics.UPDATE_USER_MESSAGE,\n        {\n          message: msg,\n          channel: currentGroupChannel,\n        },\n      );\n    });\n  }, [currentGroupChannel?.url, messagesDispatcher, onBeforeUpdateUserMessage]);\n}\n\nexport default useUpdateMessageCallback;\n","import { useCallback } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\n\nfunction useResendMessageCallback({\n  currentGroupChannel,\n  messagesDispatcher,\n}, {\n  logger,\n}) {\n  return useCallback((failedMessage) => {\n    logger.info('Channel: Resending message has started', failedMessage);\n    const { messageType, file } = failedMessage;\n    if (failedMessage?.isResendable) {\n      // Move the logic setting sendingStatus to pending into the reducer\n      // eslint-disable-next-line no-param-reassign\n      failedMessage.requestState = 'pending';\n      // eslint-disable-next-line no-param-reassign\n      failedMessage.sendingStatus = 'pending';\n      messagesDispatcher({\n        type: messageActionTypes.RESEND_MESSAGEGE_START,\n        payload: failedMessage,\n      });\n\n      // userMessage\n      if (messageType === 'user') {\n        currentGroupChannel.resendUserMessage(failedMessage)\n          .then((message) => {\n            logger.info('Channel: Resending message success!', message);\n            messagesDispatcher({\n              type: messageActionTypes.SEND_MESSAGEGE_SUCESS,\n              payload: message,\n            });\n          })\n          .catch((e) => {\n            logger.warning('Channel: Resending message failed!', e);\n            // eslint-disable-next-line no-param-reassign\n            failedMessage.requestState = 'failed';\n            // eslint-disable-next-line no-param-reassign\n            failedMessage.sendingStatus = 'failed';\n            messagesDispatcher({\n              type: messageActionTypes.SEND_MESSAGEGE_FAILURE,\n              payload: failedMessage,\n            });\n          });\n\n        // eslint-disable-next-line no-param-reassign\n        failedMessage.requestState = 'pending';\n        // eslint-disable-next-line no-param-reassign\n        failedMessage.sendingStatus = 'pending';\n        messagesDispatcher({\n          type: messageActionTypes.RESEND_MESSAGEGE_START,\n          payload: failedMessage,\n        });\n        return;\n      }\n\n      if (messageType === 'file') {\n        currentGroupChannel\n          .resendFileMessage(failedMessage, file)\n          .then((message) => {\n            logger.info('Channel: Resending file message success!', message);\n            messagesDispatcher({\n              type: messageActionTypes.SEND_MESSAGEGE_SUCESS,\n              payload: message,\n            });\n          })\n          .catch((e) => {\n            logger.warning('Channel: Resending file message failed!', e);\n            // eslint-disable-next-line no-param-reassign\n            failedMessage.requestState = 'failed';\n            // eslint-disable-next-line no-param-reassign\n            failedMessage.sendingStatus = 'failed';\n            messagesDispatcher({\n              type: messageActionTypes.SEND_MESSAGEGE_FAILURE,\n              payload: failedMessage,\n            });\n          });\n\n        // eslint-disable-next-line no-param-reassign\n        failedMessage.requestState = 'pending';\n        // eslint-disable-next-line no-param-reassign\n        failedMessage.sendingStatus = 'pending';\n        messagesDispatcher({\n          type: messageActionTypes.RESEND_MESSAGEGE_START,\n          payload: failedMessage,\n        });\n      }\n    } else {\n      // to alert user on console\n      // eslint-disable-next-line no-console\n      console.error('Message is not resendable');\n      logger.warning('Message is not resendable', failedMessage);\n    }\n  }, [currentGroupChannel, messagesDispatcher]);\n}\n\nexport default useResendMessageCallback;\n","import { useRef, useCallback } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\nimport * as utils from '../utils';\nimport topics from '../../../../lib/pubSub/topics';\n\nexport default function useSendMessageCallback({\n  isMentionEnabled,\n  currentGroupChannel,\n  onBeforeSendUserMessage,\n}, {\n  logger,\n  pubSub,\n  scrollRef,\n  messagesDispatcher,\n}) {\n  const messageInputRef = useRef(null);\n\n  const sendMessage = useCallback(\n    (props) => {\n      const {\n        quoteMessage = null,\n        message,\n        mentionTemplate,\n        // mentionedUserIds,\n        mentionedUsers,\n      } = props;\n      const createParamsDefault = () => {\n        const params = {};\n        params.message = message;\n        // if (isMentionEnabled && mentionedUserIds?.length > 0) {\n        if (isMentionEnabled && mentionedUsers?.length > 0) {\n          // params.mentionedUserIds = mentionedUserIds;\n          params.mentionedUsers = mentionedUsers;\n        }\n        // if (isMentionEnabled && mentionTemplate && mentionedUserIds?.length > 0) {\n        if (isMentionEnabled && mentionTemplate && mentionedUsers?.length > 0) {\n          params.mentionedMessageTemplate = mentionTemplate;\n        }\n        if (quoteMessage) {\n          params.isReplyToChannel = true;\n          params.parentMessageId = quoteMessage.messageId;\n        }\n        return params;\n      };\n\n      const createCustomPrams = onBeforeSendUserMessage\n        && typeof onBeforeSendUserMessage === 'function';\n\n      if (createCustomPrams) {\n        logger.info('Channel: creating params using onBeforeSendUserMessage', onBeforeSendUserMessage);\n      }\n\n      const params = onBeforeSendUserMessage\n        ? onBeforeSendUserMessage(message, quoteMessage)\n        : createParamsDefault();\n\n      logger.info('Channel: Sending message has started', params);\n      currentGroupChannel.sendUserMessage(params)\n        .onPending((pendingMsg) => {\n          pubSub.publish(topics.SEND_MESSAGE_START, {\n            /* pubSub is used instead of messagesDispatcher\n              to avoid redundantly calling `messageActionTypes.SEND_MESSAGEGE_START` */\n            message: pendingMsg,\n            channel: currentGroupChannel,\n          });\n          setTimeout(() => utils.scrollIntoLast(0, scrollRef));\n        })\n        .onFailed((err, msg) => {\n          logger.warning('Channel: Sending message failed!', { message: msg, error: err });\n          messagesDispatcher({\n            type: messageActionTypes.SEND_MESSAGEGE_FAILURE,\n            payload: msg,\n          });\n        })\n        .onSucceeded((msg) => {\n          logger.info('Channel: Sending message success!', msg);\n          messagesDispatcher({\n            type: messageActionTypes.SEND_MESSAGEGE_SUCESS,\n            payload: msg,\n          });\n        });\n    },\n    [currentGroupChannel, onBeforeSendUserMessage],\n  );\n\n  return [messageInputRef, sendMessage];\n}\n","import { useCallback } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\nimport * as utils from '../utils';\nimport topics from '../../../../lib/pubSub/topics';\n\nexport default function useSendFileMessageCallback({\n  currentGroupChannel,\n  onBeforeSendFileMessage,\n  imageCompression = {},\n}, {\n  logger,\n  pubSub,\n  scrollRef,\n  messagesDispatcher,\n}) {\n  const sendMessage = useCallback((file, quoteMessage = null) => {\n    const {\n      compressionRate,\n      resizingWidth,\n      resizingHeight,\n    } = imageCompression;\n    const createCustomParams = onBeforeSendFileMessage && typeof onBeforeSendFileMessage === 'function';\n\n    const compressibleFileType = (file.type === 'image/jpg' || file.type === 'image/png' || file.type === 'image/jpeg');\n    const compressibleRatio = (compressionRate > 0) && (compressionRate < 1);\n    // pxToNumber returns null if values are invalid\n    const compressibleDiamensions = utils.pxToNumber(resizingWidth)\n      || utils.pxToNumber(resizingHeight);\n\n    const canCompressImage = compressibleFileType && (compressibleRatio || compressibleDiamensions);\n\n    const createParamsDefault = (file_) => {\n      const params = {};\n      params.file = file_;\n      if (quoteMessage) {\n        params.isReplyToChannel = true;\n        params.parentMessageId = quoteMessage.messageId;\n      }\n      return params;\n    };\n\n    if (canCompressImage) { // Using image compression\n      try {\n        const image = document.createElement('img');\n        image.src = URL.createObjectURL(file);\n        image.onload = () => {\n          URL.revokeObjectURL(image.src);\n          const canvas = document.createElement('canvas');\n          const imageWdith = image.naturalWidth || image.width;\n          const imageHeight = image.naturalHeight || image.height;\n\n          let targetWidth = utils.pxToNumber(resizingWidth) || imageWdith;\n          let targetHeight = utils.pxToNumber(resizingHeight) || imageHeight;\n\n          // In canvas.toBlob(callback, mimeType, qualityArgument)\n          // qualityArgument doesnt work\n          // so in case compressibleDiamensions are not present, we use ratio\n          if (file.type === 'image/png' && !compressibleDiamensions) {\n            targetWidth *= compressionRate;\n            targetHeight *= compressionRate;\n          }\n\n          canvas.width = targetWidth;\n          canvas.height = targetHeight;\n          const context = canvas.getContext('2d');\n          context.drawImage(image, 0, 0, targetWidth, targetHeight);\n          context.canvas.toBlob(\n            (newImageBlob) => {\n              const compressedFile = new File([newImageBlob], file.name, { type: file.type });\n              if (createCustomParams) {\n                logger.info('Channel: Creating params using onBeforeSendFileMessage', onBeforeSendFileMessage);\n              }\n              const params = createCustomParams\n                ? onBeforeSendFileMessage(compressedFile, quoteMessage)\n                : createParamsDefault(compressedFile);\n              logger.info('Channel: Uploading file message start!', params);\n              currentGroupChannel.sendFileMessage(params)\n                .onPending((pendingMessage) => {\n                  pubSub.publish(topics.SEND_MESSAGE_START, {\n                    /* pubSub is used instead of messagesDispatcher\n                      to avoid redundantly calling `messageActionTypes.SEND_MESSAGEGE_START` */\n                    message: {\n                      ...pendingMessage,\n                      url: URL.createObjectURL(compressedFile),\n                      // pending thumbnail message seems to be failed\n                      requestState: 'pending',\n                    },\n                    channel: currentGroupChannel,\n                  });\n                  setTimeout(() => utils.scrollIntoLast(0, scrollRef), 1000);\n                })\n                .onFailed((err, failedMessage) => {\n                  logger.error('Channel: Sending file message failed!', { failedMessage, err });\n                  // eslint-disable-next-line no-param-reassign\n                  failedMessage.localUrl = URL.createObjectURL(compressedFile);\n                  // eslint-disable-next-line no-param-reassign\n                  failedMessage.file = compressedFile;\n                  messagesDispatcher({\n                    type: messageActionTypes.SEND_MESSAGEGE_FAILURE,\n                    payload: failedMessage,\n                  });\n                })\n                .onSucceeded((succeededMessage) => {\n                  logger.info('Channel: Sending file message success!', succeededMessage);\n                  messagesDispatcher({\n                    type: messageActionTypes.SEND_MESSAGEGE_SUCESS,\n                    payload: succeededMessage,\n                  });\n                });\n            },\n            file.type,\n            compressionRate,\n          );\n        };\n      } catch (error) {\n        logger.error('Channel: Sending file message failed!', error);\n      }\n    } else { // Not using image compression\n      if (createCustomParams) {\n        logger.info('Channel: creating params using onBeforeSendFileMessage', onBeforeSendFileMessage);\n      }\n      const params = onBeforeSendFileMessage\n        ? onBeforeSendFileMessage(file, quoteMessage)\n        : createParamsDefault(file);\n      logger.info('Channel: Uploading file message start!', params);\n\n      currentGroupChannel.sendFileMessage(params)\n        .onPending((pendingMsg) => {\n          pubSub.publish(topics.SEND_MESSAGE_START, {\n            /* pubSub is used instead of messagesDispatcher\n              to avoid redundantly calling `messageActionTypes.SEND_MESSAGEGE_START` */\n            message: {\n              ...pendingMsg,\n              url: URL.createObjectURL(file),\n              // pending thumbnail message seems to be failed\n              requestState: 'pending',\n            },\n            channel: currentGroupChannel,\n          });\n          setTimeout(() => utils.scrollIntoLast(0, scrollRef), 1000);\n        })\n        .onFailed((error, message) => {\n          logger.error('Channel: Sending file message failed!', { message, error });\n          // eslint-disable-next-line no-param-reassign\n          message.localUrl = URL.createObjectURL(file);\n          // eslint-disable-next-line no-param-reassign\n          message.file = file;\n          messagesDispatcher({\n            type: messageActionTypes.SEND_MESSAGEGE_FAILURE,\n            payload: message,\n          });\n        })\n        .onSucceeded((message) => {\n          logger.info('Channel: Sending message success!', message);\n          messagesDispatcher({\n            type: messageActionTypes.SEND_MESSAGEGE_SUCESS,\n            payload: message,\n          });\n        });\n    }\n  }, [currentGroupChannel, onBeforeSendFileMessage, imageCompression]);\n  return [sendMessage];\n}\n","import { useCallback } from 'react';\n\nexport default function useToggleReactionCallback({ currentGroupChannel }, { logger }) {\n  return useCallback((message, key, isReacted) => {\n    if (isReacted) {\n      currentGroupChannel.deleteReaction(message, key)\n        .then((res) => {\n          logger.info('Delete reaction success', res);\n        })\n        .catch((err) => {\n          logger.warning('Delete reaction failed', err);\n        });\n      return;\n    }\n    currentGroupChannel.addReaction(message, key)\n      .then((res) => {\n        logger.info('Add reaction success', res);\n      })\n      .catch((err) => {\n        logger.warning('Add reaction failed', err);\n      });\n  }, [currentGroupChannel]);\n}\n","import type { BaseMessage } from '@sendbird/chat/message';\nimport { useCallback } from 'react';\n\nimport { Logger } from '../../../../index';\nimport { scrollToRenderedMessage } from '../utils';\n\ninterface DynamicParams {\n  setInitialTimeStamp: React.Dispatch<React.SetStateAction<number>>;\n  setAnimatedMessageId: React.Dispatch<React.SetStateAction<number>>;\n  allMessages: BaseMessage[];\n  scrollRef: React.RefObject<HTMLDivElement>;\n}\n\ninterface StaticParams {\n  logger: Logger;\n}\n\nfunction useScrollToMessage({\n  setInitialTimeStamp,\n  setAnimatedMessageId,\n  allMessages,\n  scrollRef,\n}: DynamicParams,\n{ logger }: StaticParams,\n): (createdAt: number, messageId: number) => void {\n  return useCallback(\n    (createdAt: number, messageId: number) => {\n      const isPresent = allMessages.find((m) => (\n        m.messageId === messageId\n      ));\n      setAnimatedMessageId(null);\n      setTimeout(() => {\n        if (isPresent) {\n          logger.info('Channel: scroll to message - message is present');\n          setAnimatedMessageId(messageId);\n          scrollToRenderedMessage(scrollRef, createdAt);\n        } else {\n          logger.info('Channel: scroll to message - fetching older messages');\n          setInitialTimeStamp(null);\n          setInitialTimeStamp(createdAt);\n          setAnimatedMessageId(messageId);\n        }\n      });\n    }, [\n      setInitialTimeStamp,\n      setAnimatedMessageId,\n      allMessages,\n    ],\n  );\n}\n\nexport default useScrollToMessage;\n","import { useCallback } from 'react';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { FileMessage, FileMessageCreateParams, MessageMetaArray, UserMessage } from '@sendbird/chat/message';\nimport { Logger } from '../../../../lib/SendbirdState';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport * as utils from '../utils';\nimport topics from '../../../../lib/pubSub/topics';\nimport {\n  META_ARRAY_MESSAGE_TYPE_KEY,\n  META_ARRAY_MESSAGE_TYPE_VALUE__VOICE,\n  META_ARRAY_VOICE_DURATION_KEY,\n  VOICE_MESSAGE_FILE_NAME,\n  VOICE_MESSAGE_MIME_TYPE,\n} from '../../../../utils/consts';\n\ninterface DynamicParams {\n  currentGroupChannel: GroupChannel;\n  onBeforeSendVoiceMessage?: (file: File, quoteMessage?: UserMessage | FileMessage) => FileMessageCreateParams;\n}\ninterface StaticParams {\n  logger: Logger;\n  pubSub: any;\n  scrollRef: React.RefObject<HTMLDivElement>;\n  messagesDispatcher: (props: { type: string, payload: any }) => void;\n}\ntype FuncType = (file: File, duration: number, quoteMessage: UserMessage | FileMessage) => void;\n\nexport const useSendVoiceMessageCallback = ({\n  currentGroupChannel,\n  onBeforeSendVoiceMessage,\n}: DynamicParams,\n{\n  logger,\n  pubSub,\n  scrollRef,\n  messagesDispatcher,\n}: StaticParams): Array<FuncType> => {\n  const sendMessage = useCallback((file: File, duration: number, quoteMessage: UserMessage | FileMessage) => {\n    const messageParams: FileMessageCreateParams = (\n      onBeforeSendVoiceMessage\n      && typeof onBeforeSendVoiceMessage === 'function'\n    )\n      ? onBeforeSendVoiceMessage(file, quoteMessage)\n      : {\n        file,\n        fileName: VOICE_MESSAGE_FILE_NAME,\n        mimeType: VOICE_MESSAGE_MIME_TYPE,\n        metaArrays: [\n          new MessageMetaArray({\n            key: META_ARRAY_VOICE_DURATION_KEY,\n            value: [`${duration}`],\n          }),\n          new MessageMetaArray({\n            key: META_ARRAY_MESSAGE_TYPE_KEY,\n            value: [META_ARRAY_MESSAGE_TYPE_VALUE__VOICE],\n          }),\n        ],\n      };\n    if (quoteMessage) {\n      messageParams.isReplyToChannel = true;\n      messageParams.parentMessageId = quoteMessage.messageId;\n    }\n    logger.info('Channel: Start sending voice message', messageParams);\n    currentGroupChannel.sendFileMessage(messageParams)\n      .onPending((pendingMessage) => {\n        pubSub.publish(topics.SEND_MESSAGE_START, {\n          /* pubSub is used instead of messagesDispatcher\n            to avoid redundantly calling `messageActionTypes.SEND_MESSAGEGE_START` */\n          message: pendingMessage,\n          channel: currentGroupChannel,\n        });\n        setTimeout(() => utils.scrollIntoLast(0, scrollRef), 1000);\n      })\n      .onFailed((err, failedMessage) => {\n        logger.error('Channel: Sending voice message failed!', { failedMessage, err });\n        messagesDispatcher({\n          type: messageActionTypes.SEND_MESSAGEGE_FAILURE,\n          payload: failedMessage,\n        });\n      })\n      .onSucceeded((succeededMessage) => {\n        logger.info('Channel: Sending voice message success!', succeededMessage);\n        messagesDispatcher({\n          type: messageActionTypes.SEND_MESSAGEGE_SUCESS,\n          payload: succeededMessage,\n        });\n      });\n  }, [\n    currentGroupChannel,\n    onBeforeSendVoiceMessage,\n  ]);\n  return [sendMessage];\n};\n\nexport default useSendVoiceMessageCallback;\n","import React, {\n  useEffect,\n  useState,\n  useReducer,\n  useRef,\n  useMemo,\n} from 'react';\n\nimport type { GroupChannel, SendbirdGroupChat } from '@sendbird/chat/groupChannel';\nimport type {\n  BaseMessage,\n  FileMessage,\n  FileMessageCreateParams,\n  UserMessage,\n  UserMessageCreateParams,\n  UserMessageUpdateParams,\n} from '@sendbird/chat/message';\nimport type { SendbirdError, User } from '@sendbird/chat';\n\nimport { ReplyType, RenderUserProfileProps, Nullable } from '../../../types';\nimport { UserProfileProvider } from '../../../lib/UserProfileContext';\nimport useSendbirdStateContext from '../../../hooks/useSendbirdStateContext';\nimport { CoreMessageType } from '../../../utils';\n\nimport * as utils from './utils';\nimport { getIsReactionEnabled } from '../../../utils/getIsReactionEnabled';\n\nimport messagesInitialState from './dux/initialState';\nimport messagesReducer from './dux/reducers';\nimport * as messageActionTypes from './dux/actionTypes';\n\nimport useHandleChannelEvents from './hooks/useHandleChannelEvents';\nimport useGetChannel from './hooks/useGetChannel';\nimport useInitialMessagesFetch from './hooks/useInitialMessagesFetch';\nimport useHandleReconnect from './hooks/useHandleReconnect';\nimport useScrollCallback from './hooks/useScrollCallback';\nimport useScrollDownCallback from './hooks/useScrollDownCallback';\nimport useDeleteMessageCallback from './hooks/useDeleteMessageCallback';\nimport useUpdateMessageCallback from './hooks/useUpdateMessageCallback';\nimport useResendMessageCallback from './hooks/useResendMessageCallback';\nimport useSendMessageCallback from './hooks/useSendMessageCallback';\nimport useSendFileMessageCallback from './hooks/useSendFileMessageCallback';\nimport useToggleReactionCallback from './hooks/useToggleReactionCallback';\nimport useScrollToMessage from './hooks/useScrollToMessage';\nimport { CustomUseReducerDispatcher } from '../../../lib/SendbirdState';\nimport useSendVoiceMessageCallback from './hooks/useSendVoiceMessageCallback';\n\nexport type MessageListParams = {\n  // https://sendbird.github.io/core-sdk-javascript/module-model_params_messageListParams-MessageListParams.html\n  replyType?: string,\n  messageType?: string,\n  prevResultSize?: number,\n  nextResultSize?: number,\n  reverse?: boolean,\n  isInclusive?: boolean,\n  includeMetaArray?: boolean,\n  includeReactions?: boolean,\n  includeThreadInfo?: boolean,\n  includeParentMessageInfo?: boolean,\n  showSubchannelMessagesOnly?: boolean,\n  customTypes?: Array<string>,\n  senderUserIds?: Array<string>,\n};\n\nexport type ChannelQueries = {\n  messageListParams?: MessageListParams;\n};\n\nexport enum ThreadReplySelectType {\n  PARENT = 'PARENT',\n  THREAD = 'THREAD',\n}\n\nexport type ChannelContextProps = {\n  children?: React.ReactElement;\n  channelUrl: string;\n  isReactionEnabled?: boolean;\n  isMessageGroupingEnabled?: boolean;\n  showSearchIcon?: boolean;\n  animatedMessage?: number | null;\n  highlightedMessage?: number | null;\n  startingPoint?: number | null;\n  onBeforeSendUserMessage?(text: string, quotedMessage?: UserMessage | FileMessage): UserMessageCreateParams;\n  onBeforeSendFileMessage?(file: File, quotedMessage?: UserMessage | FileMessage): FileMessageCreateParams;\n  onBeforeUpdateUserMessage?(text: string): UserMessageUpdateParams;\n  onChatHeaderActionClick?(event: React.MouseEvent<HTMLElement>): void;\n  onBeforeSendVoiceMessage?: (file: File, quotedMessage?: UserMessage | FileMessage) => FileMessageCreateParams;\n  onSearchClick?(): void;\n  onBackClick?(): void;\n  replyType?: ReplyType;\n  threadReplySelectType?: ThreadReplySelectType;\n  queries?: ChannelQueries;\n  renderUserProfile?: (props: RenderUserProfileProps) => React.ReactElement;\n  filterMessageList?(messages: BaseMessage): boolean;\n  disableUserProfile?: boolean;\n  disableMarkAsRead?: boolean;\n  onReplyInThread?: (props: { message: UserMessage | FileMessage }) => void;\n  onQuoteMessageClick?: (props: { message: UserMessage | FileMessage }) => void;\n  onMessageAnimated?: () => void;\n  onMessageHighlighted?: () => void;\n};\n\ninterface MessageStoreInterface {\n  allMessages: CoreMessageType[];\n  loading: boolean;\n  initialized: boolean;\n  unreadSince: string;\n  isInvalid: boolean;\n  currentGroupChannel: Nullable<GroupChannel>;\n  hasMorePrev: boolean;\n  oldestMessageTimeStamp: number;\n  hasMoreNext: boolean;\n  latestMessageTimeStamp: number;\n  emojiContainer: any;\n  readStatus: any;\n}\n\ninterface SendMessageParams {\n  message: string;\n  quoteMessage?: UserMessage | FileMessage;\n  // mentionedUserIds?: Array<string>;\n  mentionedUsers?: Array<User>;\n  mentionTemplate?: string;\n}\n\ninterface UpdateMessageProps {\n  messageId: string | number;\n  message: string;\n  mentionedUsers?: Array<User>;\n  mentionTemplate?: string;\n}\n\ninterface ChannelProviderInterface extends ChannelContextProps, MessageStoreInterface {\n  scrollToMessage?(createdAt: number, messageId: number): void;\n  messageActionTypes: Record<string, string>;\n  messagesDispatcher: CustomUseReducerDispatcher;\n  quoteMessage: UserMessage | FileMessage;\n  setQuoteMessage: React.Dispatch<React.SetStateAction<UserMessage | FileMessage>>;\n  initialTimeStamp: number;\n  setInitialTimeStamp: React.Dispatch<React.SetStateAction<number>>;\n  animatedMessageId: number;\n  highLightedMessageId: number;\n  nicknamesMap: Map<string, string>;\n  emojiAllMap: any;\n  onScrollCallback: any;\n  onScrollDownCallback: any;\n  scrollRef: React.MutableRefObject<HTMLDivElement>;\n  setAnimatedMessageId: React.Dispatch<React.SetStateAction<number>>;\n  setHighLightedMessageId: React.Dispatch<React.SetStateAction<number>>;\n  messageInputRef: React.MutableRefObject<HTMLInputElement>,\n  deleteMessage(message: CoreMessageType): Promise<CoreMessageType>,\n  updateMessage(props: UpdateMessageProps, callback?: (err: SendbirdError, message: UserMessage) => void): Promise<CoreMessageType>,\n  resendMessage(failedMessage: UserMessage | FileMessage): Promise<UserMessage | FileMessage>,\n  // TODO: Good to change interface to using params / This part need refactoring\n  sendMessage(props: SendMessageParams): Promise<UserMessage>,\n  sendFileMessage(file: File, quoteMessage: UserMessage | FileMessage): Promise<FileMessage>,\n  sendVoiceMessage: (file: File, duration: number, quoteMessage?: UserMessage | FileMessage) => void,\n  // sendMessage(messageParams: SendBird.UserMessageParams): Promise<SendBird.UserMessage>,\n  // sendFileMessage(messageParams: SendBird.FileMessageParams): Promise<SendBird.FileMessage>,\n  toggleReaction(message: UserMessage | FileMessage, emojiKey: string, isReacted: boolean): void,\n  renderUserMentionItem?: (props: { user: User }) => JSX.Element;\n}\n\nconst ChannelContext = React.createContext<ChannelProviderInterface | null>(undefined);\n\nconst ChannelProvider: React.FC<ChannelContextProps> = (props: ChannelContextProps) => {\n  const {\n    channelUrl,\n    children,\n    isReactionEnabled,\n    isMessageGroupingEnabled = true,\n    showSearchIcon,\n    animatedMessage,\n    highlightedMessage,\n    startingPoint,\n    onBeforeSendUserMessage,\n    onBeforeSendFileMessage,\n    onBeforeUpdateUserMessage,\n    onBeforeSendVoiceMessage,\n    onChatHeaderActionClick,\n    onSearchClick,\n    onBackClick,\n    replyType,\n    threadReplySelectType = ThreadReplySelectType.THREAD,\n    queries,\n    filterMessageList,\n    disableMarkAsRead = false,\n    onReplyInThread,\n    onQuoteMessageClick,\n    onMessageAnimated,\n    onMessageHighlighted,\n  } = props;\n\n  const globalStore = useSendbirdStateContext();\n  const { config } = globalStore;\n  const {\n    pubSub,\n    logger,\n    userId,\n    isOnline,\n    imageCompression,\n    isMentionEnabled,\n    isVoiceMessageEnabled,\n    onUserProfileMessage,\n    markAsReadScheduler,\n  } = config;\n  const sdk = globalStore?.stores?.sdkStore?.sdk as SendbirdGroupChat;\n  const sdkInit = globalStore?.stores?.sdkStore?.initialized;\n\n  const [initialTimeStamp, setInitialTimeStamp] = useState(startingPoint);\n  useEffect(() => {\n    setInitialTimeStamp(startingPoint);\n  }, [startingPoint, channelUrl]);\n  const [animatedMessageId, setAnimatedMessageId] = useState(0);\n  const [highLightedMessageId, setHighLightedMessageId] = useState(highlightedMessage);\n  useEffect(() => {\n    setHighLightedMessageId(highlightedMessage);\n  }, [highlightedMessage]);\n  const userFilledMessageListQuery = queries?.messageListParams;\n  const [quoteMessage, setQuoteMessage] = useState<UserMessage | FileMessage>(null);\n\n  const [messagesStore, messagesDispatcher] = useReducer(\n    messagesReducer,\n    messagesInitialState,\n  ) as [MessageStoreInterface, CustomUseReducerDispatcher];\n  const scrollRef = useRef(null);\n\n  const {\n    allMessages,\n    loading,\n    initialized,\n    unreadSince,\n    isInvalid,\n    currentGroupChannel,\n    hasMorePrev,\n    oldestMessageTimeStamp,\n    hasMoreNext,\n    latestMessageTimeStamp,\n    emojiContainer,\n    readStatus,\n  } = messagesStore;\n\n  const isSuper = currentGroupChannel?.isSuper || false;\n  const isBroadcast = currentGroupChannel?.isBroadcast || false;\n  const usingReaction = getIsReactionEnabled({\n    isBroadcast,\n    isSuper,\n    globalLevel: config?.isReactionEnabled,\n    moduleLevel: isReactionEnabled,\n  });\n\n  const emojiAllMap = useMemo(() => (\n    usingReaction\n      ? utils.getAllEmojisMapFromEmojiContainer(emojiContainer)\n      : new Map()\n  ), [emojiContainer]);\n  const nicknamesMap: Map<string, string> = useMemo(() => (\n    (usingReaction && currentGroupChannel)\n      ? utils.getNicknamesMapFromMembers(currentGroupChannel?.members)\n      : new Map()\n  ), [currentGroupChannel?.members]);\n\n  // Animate message\n  useEffect(() => {\n    if (animatedMessage) {\n      setAnimatedMessageId(animatedMessage);\n    }\n  }, [animatedMessage]);\n\n  // Scrollup is default scroll for channel\n  const onScrollCallback = useScrollCallback({\n    currentGroupChannel,\n    oldestMessageTimeStamp,\n    userFilledMessageListQuery,\n    replyType,\n    isVoiceMessageEnabled,\n  }, {\n    hasMorePrev,\n    logger,\n    messagesDispatcher,\n    sdk,\n  });\n\n  const scrollToMessage = useScrollToMessage({\n    setInitialTimeStamp,\n    setAnimatedMessageId,\n    allMessages,\n    scrollRef,\n  }, { logger });\n\n  // onScrollDownCallback is added for navigation to different timestamps on messageSearch\n  // hasMorePrev, onScrollCallback -> scroll up(default behavior)\n  // hasMoreNext, onScrollDownCallback -> scroll down\n  const onScrollDownCallback = useScrollDownCallback({\n    currentGroupChannel,\n    latestMessageTimeStamp,\n    userFilledMessageListQuery,\n    hasMoreNext,\n    replyType,\n    isVoiceMessageEnabled,\n  }, {\n    logger,\n    messagesDispatcher,\n    sdk,\n  });\n\n  const toggleReaction = useToggleReactionCallback({ currentGroupChannel }, { logger });\n\n  // to create message-datasource\n  // this hook sets currentGroupChannel asynchronously\n  useGetChannel(\n    { channelUrl, sdkInit, disableMarkAsRead },\n    { messagesDispatcher, sdk, logger, markAsReadScheduler },\n  );\n\n  // to set quote message as null\n  useEffect(() => {\n    setQuoteMessage(null);\n  }, [channelUrl]);\n\n  // Hook to handle ChannelEvents and send values to useReducer using messagesDispatcher\n  useHandleChannelEvents(\n    {\n      currentGroupChannel,\n      sdkInit,\n      currentUserId: userId,\n      disableMarkAsRead,\n    },\n    {\n      messagesDispatcher,\n      sdk,\n      logger,\n      scrollRef,\n      setQuoteMessage,\n    },\n  );\n\n  // hook that fetches messages when channel changes\n  // to be clear here useGetChannel sets currentGroupChannel\n  // and useInitialMessagesFetch executes when currentGroupChannel changes\n  // p.s This one executes on initialTimeStamp change too\n  useInitialMessagesFetch({\n    currentGroupChannel,\n    userFilledMessageListQuery,\n    initialTimeStamp,\n    latestMessageTimeStamp,\n    replyType,\n    isVoiceMessageEnabled,\n  }, {\n    logger,\n    scrollRef,\n    messagesDispatcher,\n  });\n\n  // handles API calls from withSendbird\n  useEffect(() => {\n    const subscriber = utils.pubSubHandler({\n      channelUrl,\n      pubSub,\n      dispatcher: messagesDispatcher,\n      scrollRef,\n    });\n    return () => {\n      utils.pubSubHandleRemover(subscriber);\n    };\n  }, [channelUrl, sdkInit]);\n\n  // handling connection breaks\n  useHandleReconnect({ isOnline, replyType, disableMarkAsRead }, {\n    logger,\n    sdk,\n    scrollRef,\n    currentGroupChannel,\n    messagesDispatcher,\n    userFilledMessageListQuery,\n    markAsReadScheduler,\n  });\n\n  // callbacks for Message CURD actions\n  const deleteMessage = useDeleteMessageCallback({ currentGroupChannel, messagesDispatcher },\n    { logger });\n  const updateMessage = useUpdateMessageCallback(\n    { currentGroupChannel, messagesDispatcher, onBeforeUpdateUserMessage, isMentionEnabled },\n    { logger, pubSub },\n  );\n  const resendMessage = useResendMessageCallback(\n    { currentGroupChannel, messagesDispatcher },\n    { logger },\n  );\n  const [messageInputRef, sendMessage] = useSendMessageCallback(\n    { currentGroupChannel, onBeforeSendUserMessage, isMentionEnabled },\n    {\n      logger,\n      pubSub,\n      scrollRef,\n      messagesDispatcher,\n    },\n  );\n  const [sendFileMessage] = useSendFileMessageCallback(\n    { currentGroupChannel, onBeforeSendFileMessage, imageCompression },\n    {\n      logger,\n      pubSub,\n      scrollRef,\n      messagesDispatcher,\n    },\n  );\n  const [sendVoiceMessage] = useSendVoiceMessageCallback(\n    {\n      currentGroupChannel,\n      onBeforeSendVoiceMessage,\n    },\n    {\n      logger,\n      pubSub,\n      scrollRef,\n      messagesDispatcher,\n    },\n  );\n\n  return (\n    <ChannelContext.Provider value={{\n      // props\n      channelUrl,\n      isReactionEnabled: usingReaction,\n      isMessageGroupingEnabled,\n      showSearchIcon,\n      highlightedMessage,\n      startingPoint,\n      onBeforeSendUserMessage,\n      onBeforeSendFileMessage,\n      onBeforeUpdateUserMessage,\n      onChatHeaderActionClick,\n      onSearchClick,\n      onBackClick,\n      replyType,\n      threadReplySelectType,\n      queries,\n      filterMessageList,\n      disableMarkAsRead,\n      onReplyInThread,\n      onQuoteMessageClick,\n      onMessageAnimated,\n      onMessageHighlighted,\n\n      // messagesStore\n      allMessages,\n      loading,\n      initialized,\n      unreadSince,\n      isInvalid,\n      currentGroupChannel,\n      hasMorePrev,\n      hasMoreNext,\n      oldestMessageTimeStamp,\n      latestMessageTimeStamp,\n      emojiContainer,\n      readStatus,\n\n      // utils\n      scrollToMessage,\n      quoteMessage,\n      setQuoteMessage,\n      deleteMessage,\n      updateMessage,\n      resendMessage,\n      messageInputRef,\n      sendMessage,\n      sendFileMessage,\n      sendVoiceMessage,\n      initialTimeStamp,\n      messageActionTypes,\n      messagesDispatcher,\n      setInitialTimeStamp,\n      setAnimatedMessageId,\n      setHighLightedMessageId,\n      animatedMessageId,\n      highLightedMessageId,\n      nicknamesMap,\n      emojiAllMap,\n      onScrollCallback,\n      onScrollDownCallback,\n      scrollRef,\n      toggleReaction,\n    }}>\n      <UserProfileProvider\n        disableUserProfile={props?.disableUserProfile}\n        renderUserProfile={props?.renderUserProfile}\n        onUserProfileMessage={onUserProfileMessage}\n      >\n        {children}\n      </UserProfileProvider>\n    </ChannelContext.Provider>\n  );\n};\n\nexport type UseChannelType = () => ChannelProviderInterface;\nconst useChannelContext: UseChannelType = () => React.useContext(ChannelContext);\n\nexport {\n  ChannelProvider,\n  useChannelContext,\n};\n"],"names":["RESET_MESSAGES","FETCH_INITIAL_MESSAGES_START","FETCH_INITIAL_MESSAGES_SUCCESS","FETCH_INITIAL_MESSAGES_FAILURE","FETCH_PREV_MESSAGES_SUCCESS","FETCH_PREV_MESSAGES_FAILURE","FETCH_NEXT_MESSAGES_SUCCESS","FETCH_NEXT_MESSAGES_FAILURE","SEND_MESSAGEGE_START","SEND_MESSAGEGE_SUCESS","SEND_MESSAGEGE_FAILURE","RESEND_MESSAGEGE_START","ON_MESSAGE_RECEIVED","ON_MESSAGE_UPDATED","ON_MESSAGE_THREAD_INFO_UPDATED","ON_MESSAGE_DELETED","ON_MESSAGE_DELETED_BY_REQ_ID","SET_CURRENT_CHANNEL","SET_CHANNEL_INVALID","MARK_AS_READ","ON_REACTION_UPDATED","SET_EMOJI_CONTAINER","MESSAGE_LIST_PARAMS_CHANGED","UNDEFINED","SUCCEEDED","FAILED","PENDING","getSendingMessageStatus","scrollToRenderedMessage","scrollRef","initialTimeStamp","_container$querySelec","container","current","element","querySelectorAll","containerHeight","offsetHeight","elementHeight","elementOffset","scrollTop","offsetTop","_unused","scrollIntoLast","initialTry","arguments","length","undefined","MAX_TRIES","currentTry","scrollDOM","document","querySelector","scrollHeight","error","setTimeout","pubSubHandleRemover","subscriber","forEach","s","remove","_unused2","pubSubHandler","_ref","channelUrl","pubSub","dispatcher","Map","subscribe","set","topics","SEND_USER_MESSAGE","msg","channel","message","url","type","channelActions","payload","SEND_MESSAGE_START","SEND_FILE_MESSAGE","UPDATE_USER_MESSAGE","fromSelector","DELETE_MESSAGE","messageId","isOperator","groupChannel","myRole","isDisabledBecauseFrozen","isFrozen","isDisabledBecauseMuted","myMutedState","getAllEmojisMapFromEmojiContainer","emojiContainer","emojiCategories","allEmojisMap","categoryIndex","emojis","emojiIndex","key","getNicknamesMapFromMembers","members","nicknamesMap","memberIndex","userId","nickname","getUniqueListBy","arr","map","item","values","getUniqueListByMessageId","sortByCreatedAt","messages","sort","a","b","createdAt","mergeAndSortMessages","oldMessages","newMessages","lastOldMessage","firstNewMessage","mergedMessages","unique","getMessageCreatedAt","format","isSameGroup","comparingMessage","currentChannel","_message$sender","_comparingMessage$sen","_message$sender2","_comparingMessage$sen2","messageType","sender","sendingStatus","isReadMessage","compareMessagesForGrouping","prevMessage","currMessage","nextMessage","replyType","threadInfo","isAcceptable","passUnsuccessfullMessages","allMessages","newMessage","lastIndexOfSucceededMessage","isAdminMessage","lastIndexOf","splice","pxToNumber","px","parsed","Number","parseFloat","isNaN","isAboutSame","Math","abs","getIsReactionEnabled","isBroadcast","isSuper","globalLevel","moduleLevel","initialized","loading","currentGroupChannel","hasMorePrev","oldestMessageTimeStamp","hasMoreNext","latestMessageTimeStamp","unreadSince","isInvalid","messageListParams","getOldestMessageTimeStamp","oldestMessage","getLatestMessageTimeStamp","latestMessage","reducer","state","action","_state$currentGroupCh7","_action$payload","_action$payload$chann","actionTypes","_objectSpread","filter","m","_state$currentGroupCh","_state$currentGroupCh2","PREV_RESULT_SIZE","duplicatedMessageIds","updatedOldMessages","duplicatedMessage","find","compareIds","push","updatedAt","filteredNewMessages","_state$currentGroupCh3","NEXT_RESULT_SIZE","sortedMessages","_state$currentGroupCh4","filteredMessages","reqId","pendingIndex","findIndex","slice","failed","currentGroupChannelUrl","some","filterMessageListParams","senderMember","profileUrl","friendName","member","Date","_state$currentGroupCh5","parentMessageId","parentMessage","_state$currentGroupCh6","event","targetMessageId","applyReactionEvent","DELIVERY_RECIPT","useHandleChannelEvents","_ref2","_store$stores$sdkStor","_store$stores$sdkStor2","_store$stores$sdkStor3","sdkInit","currentUserId","disableMarkAsRead","sdk","logger","setQuoteMessage","messagesDispatcher","store","useSendbirdStateContext","markAsReadScheduler","markAsDeliveredScheduler","disableMarkAsDelivered","config","canSetMarkAsDelivered","stores","sdkStore","appInfo","premiumFeatureList","feature","useEffect","channelHandlerId","uuidv4","_sdk$groupChannel","channelHandler","onMessageReceived","_document$getElementB","_document$getElementB2","scrollToEnd","info","messageActions","getElementById","childElementCount","warning","onUnreadMemberStatusUpdated","onUndeliveredMemberStatusUpdated","onMessageUpdated","onThreadInfoUpdated","threadInfoUpdateEvent","onMessageDeleted","onReactionUpdated","reactionEvent","onChannelChanged","onChannelFrozen","onChannelUnfrozen","onUserMuted","user","onUserUnmuted","onUserBanned","_sdk$currentUser","currentUser","onOperatorUpdated","users","onUserLeft","addGroupChannelHandler","GroupChannelHandler","_sdk$groupChannel2","removeGroupChannelHandler","useSetChannel","getChannel","then","messageActionTypes","catch","e","getAllEmoji","emojiContainer_","err","useInitialMessagesFetch","userFilledMessageListQuery","getMessagesByTimestamp","prevResultSize","nextResultSize","isInclusive","includeReactions","includeMetaArray","includeThreadInfo","includeParentMessageInfo","ReplyType","ONLY_REPLY_TO_CHANNEL","Object","keys","getTime","finally","utils","useHandleReconnect","isOnline","wasOffline","_sdk$appInfo","isReactionEnabled","useReaction","lastMessageTime","useScrollCallback","useCallback","cb","useScrollDownCallback","useDeleteMessageCallback","requestState","Promise","resolve","reject","deleteMessage","useUpdateMessageCallback","onBeforeUpdateUserMessage","isMentionEnabled","props","callback","mentionedUsers","mentionTemplate","createParamsDefault","params","mentionedMessageTemplate","createCustomPrams","updateUserMessage","publish","useResendMessageCallback","failedMessage","file","isResendable","resendUserMessage","resendFileMessage","console","useSendMessageCallback","onBeforeSendUserMessage","messageInputRef","useRef","sendMessage","quoteMessage","isReplyToChannel","sendUserMessage","onPending","pendingMsg","onFailed","onSucceeded","useSendFileMessageCallback","onBeforeSendFileMessage","imageCompression","compressionRate","resizingWidth","resizingHeight","createCustomParams","compressibleFileType","compressibleRatio","compressibleDiamensions","canCompressImage","file_","image","createElement","src","URL","createObjectURL","onload","revokeObjectURL","canvas","imageWdith","naturalWidth","width","imageHeight","naturalHeight","height","targetWidth","targetHeight","context","getContext","drawImage","toBlob","newImageBlob","compressedFile","File","name","sendFileMessage","pendingMessage","localUrl","succeededMessage","useToggleReactionCallback","isReacted","deleteReaction","res","addReaction","useScrollToMessage","setInitialTimeStamp","setAnimatedMessageId","isPresent","useSendVoiceMessageCallback","onBeforeSendVoiceMessage","duration","messageParams","fileName","VOICE_MESSAGE_FILE_NAME","mimeType","VOICE_MESSAGE_MIME_TYPE","metaArrays","MessageMetaArray","META_ARRAY_VOICE_DURATION_KEY","value","META_ARRAY_MESSAGE_TYPE_KEY","META_ARRAY_MESSAGE_TYPE_VALUE__VOICE","ThreadReplySelectType","ChannelContext","React","createContext","ChannelProvider","_globalStore$stores","_globalStore$stores$s","_globalStore$stores2","_globalStore$stores2$","children","isMessageGroupingEnabled","showSearchIcon","animatedMessage","highlightedMessage","startingPoint","onChatHeaderActionClick","onSearchClick","onBackClick","threadReplySelectType","THREAD","queries","filterMessageList","onReplyInThread","onQuoteMessageClick","onMessageAnimated","onMessageHighlighted","globalStore","isVoiceMessageEnabled","onUserProfileMessage","useState","animatedMessageId","highLightedMessageId","setHighLightedMessageId","messagesStore","useReducer","messagesReducer","messagesInitialState","readStatus","usingReaction","emojiAllMap","useMemo","onScrollCallback","scrollToMessage","onScrollDownCallback","toggleReaction","useGetChannel","updateMessage","resendMessage","sendVoiceMessage","Provider","UserProfileProvider","disableUserProfile","renderUserProfile","useChannelContext","useContext"],"mappings":"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"}