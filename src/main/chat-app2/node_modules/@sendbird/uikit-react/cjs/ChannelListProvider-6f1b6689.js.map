{"version":3,"file":"ChannelListProvider-6f1b6689.js","sources":["../../src/modules/ChannelList/dux/actionTypes.js","../../src/modules/ChannelList/utils.js","../../src/modules/ChannelList/dux/initialState.js","../../src/modules/ChannelList/dux/reducers.js","../../src/modules/ChannelList/context/hooks/useActiveChannelUrl.ts","../../src/modules/ChannelList/context/ChannelListProvider.tsx"],"sourcesContent":["export const RESET_CHANNEL_LIST = 'RESET_CHANNEL_LIST';\nexport const CREATE_CHANNEL = 'CREATE_CHANNEL';\nexport const USER_INVITED = 'USER_INVITED';\nexport const UNLOAD_CHANNELS = 'UNLOAD_CHANNELS';\nexport const SET_CHANNEL_LOADING = 'SET_CHANNEL_LOADING';\nexport const LEAVE_CHANNEL_SUCCESS = 'LEAVE_CHANNEL_SUCCESS';\n\nexport const SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\n\nexport const FETCH_CHANNELS_START = 'FETCH_CHANNELS_START';\nexport const FETCH_CHANNELS_SUCCESS = 'FETCH_CHANNELS_SUCCESS';\nexport const FETCH_CHANNELS_FAILURE = 'FETCH_CHANNELS_FAILURE';\n\nexport const INIT_CHANNELS_START = 'INIT_CHANNELS_START';\nexport const INIT_CHANNELS_SUCCESS = 'INIT_CHANNELS_SUCCESS';\nexport const INIT_CHANNELS_FAILURE = 'INIT_CHANNELS_FAILURE';\n\nexport const INVITE_MEMBERS_SUCESS = 'INVITE_MEMBERS_SUCESS';\n\nexport const ON_USER_JOINED = 'ON_USER_JOINED';\nexport const ON_CHANNEL_DELETED = 'ON_CHANNEL_DELETED';\nexport const ON_LAST_MESSAGE_UPDATED = 'ON_LAST_MESSAGE_UPDATED';\nexport const ON_USER_LEFT = 'ON_USER_LEFT';\nexport const ON_CHANNEL_CHANGED = 'ON_CHANNEL_CHANGED';\nexport const ON_CHANNEL_ARCHIVED = 'ON_CHANNEL_ARCHIVED';\nexport const ON_CHANNEL_FROZEN = 'ON_CHANNEL_FROZEN';\nexport const ON_CHANNEL_UNFROZEN = 'ON_CHANNEL_UNFROZEN';\n\nexport const ON_READ_RECEIPT_UPDATED = 'ON_READ_RECEIPT_UPDATED';\nexport const ON_DELIVERY_RECEIPT_UPDATED = 'ON_DELIVERY_RECEIPT_UPDATED';\n\nexport const CHANNEL_REPLACED_TO_TOP = 'CHANNEL_REPLACED_TO_TOP';\nexport const CHANNEL_LIST_PARAMS_UPDATED = 'CHANNEL_LIST_PARAMS_UPDATED';\n","import { GroupChannelHandler } from '@sendbird/chat/groupChannel';\nimport * as channelActions from './dux/actionTypes';\nimport topics from '../../lib/pubSub/topics';\n\nconst DELIVERY_RECIPT = 'delivery_receipt';\n\nconst createEventHandler = ({\n  sdk,\n  sdkChannelHandlerId,\n  channelListDispatcher,\n  logger,\n}) => {\n  const ChannelHandler = new GroupChannelHandler({\n    onChannelChanged: (channel) => {\n      logger.info('ChannelList: onChannelChanged', channel);\n      channelListDispatcher({\n        type: channelActions.ON_CHANNEL_CHANGED,\n        payload: channel,\n      });\n    },\n    onChannelDeleted: (channelUrl) => {\n      logger.info('ChannelList: onChannelDeleted', channelUrl);\n      channelListDispatcher({\n        type: channelActions.ON_CHANNEL_DELETED,\n        payload: channelUrl,\n      });\n    },\n    onUserJoined: (channel) => {\n      logger.info('ChannelList: onUserJoined', channel);\n      if (channel?.lastMessage) {\n        channelListDispatcher({\n          type: channelActions.ON_USER_JOINED,\n          payload: channel,\n        });\n      }\n    },\n    onUserReceivedInvitation: (channel, inviter, invitees) => {\n      logger.info('ChannelList: onUserReceivedInvitation', { channel, inviter, invitees });\n      const { currentUser } = sdk;\n      const isInvited = invitees.find((user) => user?.userId === currentUser?.userId);\n      // The newly created channel should be displayed only when there's a message\n      if (isInvited && channel?.lastMessage) {\n        channelListDispatcher({\n          type: channelActions.USER_INVITED,\n          payload: channel,\n        });\n      }\n    },\n    onUserBanned: (channel, user) => {\n      const { currentUser } = sdk;\n      logger.info('Channel: onUserBanned', channel);\n      if (user.userId === currentUser.userId) {\n        channelListDispatcher({\n          type: channelActions.ON_USER_LEFT,\n          payload: {\n            channel,\n            isMe: true,\n          },\n        });\n      } else {\n        channelListDispatcher({\n          type: channelActions.ON_USER_LEFT,\n          payload: {\n            channel,\n            isMe: false,\n          },\n        });\n      }\n    },\n    onUserLeft: (channel, leftUser) => {\n      const { currentUser } = sdk;\n      const isMe = (currentUser.userId === leftUser.userId);\n      logger.info('ChannelList: onUserLeft', channel);\n      channelListDispatcher({\n        type: channelActions.ON_USER_LEFT,\n        payload: {\n          channel,\n          isMe,\n        },\n      });\n    },\n\n    onReadStatus: (channel) => {\n      logger.info('ChannelList: onReadStatus', channel);\n      channelListDispatcher({\n        type: channelActions.ON_READ_RECEIPT_UPDATED,\n        payload: channel,\n      });\n    },\n\n    onDeliveryReceiptUpdated: (channel) => {\n      logger.info('ChannelList: onDeliveryReceiptUpdated', channel);\n      if (channel?.lastMessage) {\n        channelListDispatcher({\n          type: channelActions.ON_DELIVERY_RECEIPT_UPDATED,\n          payload: channel,\n        });\n      }\n    },\n\n    onMessageUpdated: (channel, message) => {\n      if (channel?.lastMessage.isEqual(message)) {\n        logger.info('ChannelList: onMessageUpdated', channel);\n        channelListDispatcher({\n          type: channelActions.ON_LAST_MESSAGE_UPDATED,\n          payload: channel,\n        });\n      }\n    },\n\n    onChannelHidden: (channel) => {\n      logger.info('ChannelList: onChannelHidden', channel);\n      channelListDispatcher({\n        type: channelActions.ON_CHANNEL_ARCHIVED,\n        payload: channel,\n      });\n    },\n\n    onChannelFrozen: (channel) => {\n      logger.info('ChannelList: onChannelFrozen', channel);\n      channelListDispatcher({\n        type: channelActions.ON_CHANNEL_FROZEN,\n        payload: channel,\n      });\n    },\n\n    onChannelUnfrozen: (channel) => {\n      logger.info('ChannelList: onChannelUnfrozen', channel);\n      channelListDispatcher({\n        type: channelActions.ON_CHANNEL_UNFROZEN,\n        payload: channel,\n      });\n    },\n  });\n\n  logger.info('ChannelList: Added channelHandler');\n  sdk.groupChannel.addGroupChannelHandler(sdkChannelHandlerId, ChannelHandler);\n};\n\nconst createChannelListQuery = ({ sdk, userFilledChannelListQuery = {} }) => {\n  const param = {};\n  param.includeEmpty = false;\n  param.limit = 20; // The value of pagination limit could be set up to 100.\n  param.order = 'latest_last_message'; // 'chronological', 'latest_last_message', 'channel_name_alphabetical', and 'metadata_value_alphabetical'\n\n  if (userFilledChannelListQuery) {\n    Object.keys(userFilledChannelListQuery).forEach((key) => {\n      param[key] = userFilledChannelListQuery[key];\n    });\n  }\n\n  const channelListQuery = sdk.groupChannel.createMyGroupChannelListQuery(param);\n\n  return channelListQuery;\n};\n\n/**\n * Setup event listener\n * create channel source query\n * addloading screen\n */\nfunction setupChannelList({\n  sdk,\n  sdkChannelHandlerId,\n  channelListDispatcher,\n  setChannelSource,\n  onChannelSelect,\n  userFilledChannelListQuery,\n  logger,\n  sortChannelList,\n  disableAutoSelect,\n  markAsDeliveredScheduler,\n  disableMarkAsDelivered,\n}) {\n  if (sdk?.groupChannel) {\n    createEventHandler({\n      sdk,\n      channelListDispatcher,\n      sdkChannelHandlerId,\n      logger,\n    });\n  } else {\n    logger.warning('ChannelList - createEventHandler: sdk or sdk.ChannelHandler does not exist', sdk);\n  }\n\n  logger.info('ChannelList - creating query', { userFilledChannelListQuery });\n  const channelListQuery = createChannelListQuery({ sdk, userFilledChannelListQuery });\n  logger.info('ChannelList - created query', channelListQuery);\n  setChannelSource(channelListQuery);\n\n  channelListDispatcher({\n    type: channelActions.INIT_CHANNELS_START,\n  });\n\n  if (userFilledChannelListQuery) {\n    logger.info('ChannelList - setting up channelListQuery', channelListQuery);\n    channelListDispatcher({\n      type: channelActions.CHANNEL_LIST_PARAMS_UPDATED,\n      payload: {\n        channelListQuery,\n        currentUserId: sdk && sdk.currentUser && sdk.currentUser.userId,\n      },\n    });\n  }\n\n  logger.info('ChannelList - fetching channels');\n  if (channelListQuery.hasNext) {\n    channelListQuery.next().then((channelList) => {\n      logger.info('ChannelList - fetched channels', channelList);\n      // select first channel\n      logger.info('ChannelList - highlight channel', channelList[0]);\n      let sortedChannelList = channelList;\n      if (sortChannelList && typeof sortChannelList === 'function') {\n        sortedChannelList = sortChannelList(channelList);\n        logger.info('ChannelList - channel list sorted', sortedChannelList);\n      }\n      if (!disableAutoSelect) {\n        onChannelSelect(sortedChannelList[0]);\n      }\n      channelListDispatcher({\n        type: channelActions.INIT_CHANNELS_SUCCESS,\n        payload: { channelList: sortedChannelList, disableAutoSelect },\n      });\n      const canSetMarkAsDelivered = sdk?.appInfo?.premiumFeatureList\n        ?.find((feature) => (feature === DELIVERY_RECIPT));\n\n      if (canSetMarkAsDelivered && !disableMarkAsDelivered) {\n        sortedChannelList.forEach((channel) => {\n          markAsDeliveredScheduler.push(channel);\n        });\n      }\n    }).catch((err) => {\n      if (err) {\n        logger.error('ChannelList - couldnt fetch channels', err);\n        channelListDispatcher({\n          type: channelActions.INIT_CHANNELS_FAILURE,\n        });\n      }\n    });\n  } else {\n    logger.info('ChannelList - there are no more channels');\n  }\n}\n\nexport const pubSubHandleRemover = (subscriber) => {\n  subscriber.forEach((s) => {\n    try {\n      s.remove();\n    } catch {\n      //\n    }\n  });\n};\n\nexport const pubSubHandler = (pubSub, channelListDispatcher) => {\n  const subscriber = new Map();\n  if (!pubSub) return subscriber;\n  subscriber.set(topics.CREATE_CHANNEL, pubSub.subscribe(topics.CREATE_CHANNEL, (msg) => {\n    const { channel } = msg;\n    channelListDispatcher({\n      type: 'CREATE_CHANNEL',\n      payload: channel,\n    });\n  }));\n\n  subscriber.set(topics.UPDATE_USER_MESSAGE, pubSub.subscribe(topics.UPDATE_USER_MESSAGE, (msg) => {\n    const { channel, message } = msg;\n    const updatedChannel = channel;\n    if (updatedChannel?.lastMessage?.messageId === message.messageId) {\n      updatedChannel.lastMessage = message;\n    }\n    if (channel) {\n      channelListDispatcher({\n        type: channelActions.ON_LAST_MESSAGE_UPDATED,\n        payload: updatedChannel,\n      });\n    }\n  }));\n\n  subscriber.set(topics.LEAVE_CHANNEL, pubSub.subscribe(topics.LEAVE_CHANNEL, (msg) => {\n    const { channel } = msg;\n    channelListDispatcher({\n      type: channelActions.LEAVE_CHANNEL_SUCCESS,\n      payload: channel?.url,\n    });\n  }));\n\n  subscriber.set(topics.SEND_MESSAGE_START, pubSub.subscribe(topics.SEND_MESSAGE_START, (msg) => {\n    const { channel } = msg;\n    channelListDispatcher({\n      type: channelActions.CHANNEL_REPLACED_TO_TOP,\n      payload: channel,\n    });\n  }));\n\n  return subscriber;\n};\n\nexport default setupChannelList;\n","export default {\n  // we might not need this initialized state -> should remove\n  initialized: false,\n  loading: true,\n  allChannels: [],\n  currentChannel: null,\n  channelListQuery: null,\n  currentUserId: '',\n  disableAutoSelect: false,\n};\n","import { filterChannelListParams, getChannelsWithUpsertedChannel } from '../../../utils';\nimport * as actions from './actionTypes';\nimport initialState from './initialState';\n\nexport default function reducer(state, action) {\n  switch (action.type) {\n    case actions.INIT_CHANNELS_START:\n      return {\n        ...state,\n        loading: true,\n      };\n    case actions.RESET_CHANNEL_LIST:\n      return initialState;\n    case actions.INIT_CHANNELS_SUCCESS: {\n      const { channelList, disableAutoSelect } = action.payload;\n      return {\n        ...state,\n        initialized: true,\n        loading: false,\n        allChannels: channelList,\n        disableAutoSelect,\n        currentChannel: (\n          !disableAutoSelect\n          && channelList\n          && channelList.length\n          && channelList.length > 0\n        )\n          ? channelList[0]\n          : null,\n      };\n    }\n    case actions.FETCH_CHANNELS_SUCCESS: {\n      const currentChannels = state.allChannels.map((c) => c.url);\n      const filteredChannels = action.payload.filter(\n        ({ url }) => !(currentChannels.find((c) => c === url)),\n      );\n      return {\n        ...state,\n        allChannels: [\n          ...state.allChannels,\n          ...filteredChannels,\n        ],\n      };\n    }\n    case actions.USER_INVITED: {\n      const channel = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel),\n          };\n        }\n        return {\n          ...state,\n          currentChannel: channel,\n        };\n      }\n      return {\n        ...state,\n        allChannels: [channel, ...state.allChannels.filter((ch) => ch.url !== channel?.url)],\n      };\n    }\n    case actions.CREATE_CHANNEL: {\n      const channel = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel),\n          };\n        }\n        return {\n          ...state,\n          currentChannel: channel,\n        };\n      }\n      return {\n        ...state,\n        allChannels: [channel, ...state.allChannels.filter((ch) => ch.url !== channel?.url)],\n        currentChannel: channel,\n      };\n    }\n    case actions.ON_CHANNEL_ARCHIVED: {\n      const channel = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel),\n          };\n          // TODO: Check if we have to set current channel\n        }\n      }\n      const nextChannel = (channel?.url === state.currentChannel?.url)\n        ? state.allChannels[state.allChannels[0].url === channel?.url ? 1 : 0]\n        : state.currentChannel;\n      return {\n        ...state,\n        allChannels: state.allChannels.filter(({ url }) => url !== channel?.url),\n        currentChannel: state.disableAutoSelect ? null : nextChannel,\n      };\n    }\n    case actions.LEAVE_CHANNEL_SUCCESS:\n    case actions.ON_CHANNEL_DELETED: {\n      const channelUrl = action.payload;\n      return {\n        ...state,\n        currentChannel: (channelUrl === state.currentChannel?.url)\n          ? state.allChannels[0]\n          : state.currentChannel,\n        allChannels: state.allChannels.filter(({ url }) => url !== channelUrl),\n      };\n    }\n    case actions.ON_USER_LEFT: {\n      const { channel, isMe } = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          const filteredChannels = getChannelsWithUpsertedChannel(state.allChannels, channel);\n          const nextChannel = (isMe && (channel?.url === state.currentChannel?.url))\n            ? filteredChannels[0]\n            : state.currentChannel;\n          return {\n            ...state,\n            currentChannel: state.disableAutoSelect ? null : nextChannel,\n            allChannels: filteredChannels,\n          };\n        }\n        const nextChannel = (channel?.url === state.currentChannel?.url)\n          ? state.allChannels[0]\n          : state.currentChannel;\n        return {\n          ...state,\n          currentChannel: state.disableAutoSelect ? null : nextChannel,\n          allChannels: state.allChannels.filter(({ url }) => url !== channel?.url),\n        };\n      }\n      const filteredChannels = state.allChannels.filter((c) => !(c.url === channel?.url && isMe));\n      const nextChannel = (isMe && (channel?.url === state.currentChannel?.url))\n        ? filteredChannels[0]\n        : state.currentChannel;\n      return {\n        ...state,\n        currentChannel: state.disableAutoSelect ? null : nextChannel,\n        allChannels: filteredChannels,\n      };\n    }\n    case actions.ON_USER_JOINED:\n    case actions.ON_CHANNEL_CHANGED:\n    case actions.ON_READ_RECEIPT_UPDATED:\n    case actions.ON_DELIVERY_RECEIPT_UPDATED: {\n      const { allChannels = [] } = state;\n      const channel = action.payload;\n      const { unreadMessageCount } = channel;\n      if (!channel?.lastMessage) return state;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(allChannels, channel),\n          };\n        }\n        const nextChannel = (channel?.url === state.currentChannel?.url)\n          ? state.allChannels[state.allChannels[0].url === channel?.url ? 1 : 0]\n          // if coming channel is first of channel list, current channel will be the next one\n          : state.currentChannel;\n        return {\n          ...state,\n          currentChannel: state.disableAutoSelect ? null : nextChannel,\n          allChannels: state.allChannels.filter(({ url }) => url !== channel?.url),\n        };\n      }\n      // if its only an unread message count change, dont push to top\n      if (unreadMessageCount === 0) {\n        const currentChannel = allChannels.find(({ url }) => url === channel?.url);\n        const currentUnreadCount = currentChannel && currentChannel.unreadMessageCount;\n        if (currentUnreadCount === 0) {\n          return {\n            ...state,\n            allChannels: state.allChannels.map((ch) => (ch.url === channel?.url ? channel : ch)),\n          };\n        }\n      }\n      return {\n        ...state,\n        allChannels: [\n          channel,\n          ...state.allChannels.filter(({ url }) => url !== action.payload.url),\n        ],\n      };\n    }\n    case actions.SET_CURRENT_CHANNEL:\n      return {\n        ...state,\n        currentChannel: action.payload,\n      };\n    case actions.ON_LAST_MESSAGE_UPDATED: {\n      return {\n        ...state,\n        allChannels: state.allChannels.map((channel) => (\n          channel?.url === action.payload.url ? action.payload : channel)),\n      };\n    }\n    case actions.ON_CHANNEL_FROZEN: {\n      const channel = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel),\n          };\n        }\n        const nextChannel = (channel?.url === state.currentChannel?.url)\n          ? state.allChannels[state.allChannels[0].url === channel?.url ? 1 : 0]\n          // if coming channel is first of channel list, current channel will be the next one\n          : state.currentChannel;\n        return {\n          ...state,\n          allChannels: state.allChannels.filter(({ url }) => url !== channel?.url),\n          currentChannel: state.disableAutoSelect ? null : nextChannel,\n        };\n      }\n      return {\n        ...state,\n        allChannels: state.allChannels.map((ch) => {\n          if (ch.url === channel?.url) {\n            // eslint-disable-next-line no-param-reassign\n            ch.isFrozen = true;\n            return ch;\n          }\n          return ch;\n        }),\n      };\n    }\n    case actions.ON_CHANNEL_UNFROZEN: {\n      const channel = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel),\n          };\n        }\n        const nextChannel = (channel?.url === state.currentChannel?.url)\n          ? state.allChannels[state.allChannels[0].url === channel?.url ? 1 : 0]\n          // if coming channel is first of channel list, current channel will be the next one\n          : state.currentChannel;\n        return {\n          ...state,\n          allChannels: state.allChannels.filter(({ url }) => url !== channel?.url),\n          currentChannel: state.disableAutoSelect ? null : nextChannel,\n        };\n      }\n      return {\n        ...state,\n        allChannels: state.allChannels.map((ch) => {\n          if (ch.url === channel?.url) {\n            // eslint-disable-next-line no-param-reassign\n            ch.isFrozen = false;\n            return ch;\n          }\n          return ch;\n        }),\n      };\n    }\n    case actions.CHANNEL_REPLACED_TO_TOP: {\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, action.payload, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: [\n              action.payload,\n              ...state.allChannels.filter((channel) => channel?.url !== action.payload.url),\n            ],\n          };\n        }\n        return state;\n      }\n      return {\n        ...state,\n        allChannels: [\n          action.payload,\n          ...state.allChannels.filter((channel) => channel?.url !== action.payload.url),\n        ],\n      };\n    }\n    case actions.CHANNEL_LIST_PARAMS_UPDATED:\n      return {\n        ...state,\n        currentUserId: action.payload.currentUserId,\n        channelListQuery: action.payload.channelListQuery,\n      };\n    default:\n      return state;\n  }\n}\n","import { useEffect } from 'react';\nimport * as messageActionTypes from '../../dux/actionTypes';\nimport { GroupChannel, SendbirdGroupChat } from '@sendbird/chat/groupChannel';\nimport { Logger } from '../../../../lib/SendbirdState';\n\nexport type DynamicProps = {\n  activeChannelUrl?: string;\n  channels?: GroupChannel[];\n  sdk?: SendbirdGroupChat;\n};\n\nexport type StaticProps = {\n  logger: Logger;\n  channelListDispatcher: React.Dispatch<any>;\n};\n\nfunction useActiveChannelUrl({\n  activeChannelUrl,\n  channels,\n  sdk,\n}: DynamicProps, {\n  logger,\n  channelListDispatcher,\n}: StaticProps): void {\n  return useEffect(() => {\n    if (activeChannelUrl) {\n      logger.info('ChannelListProvider: looking for active channel', { activeChannelUrl });\n      const activeChannel = channels?.find(channel => channel.url === activeChannelUrl);\n      if (activeChannel) {\n        channelListDispatcher({\n          type: messageActionTypes.SET_CURRENT_CHANNEL,\n          payload: activeChannel,\n        });\n      } else {\n        logger.info('ChannelListProvider: searching backend for active channel', { activeChannelUrl });\n        sdk?.groupChannel?.getChannel(activeChannelUrl)\n          .then((channel) => {\n            channelListDispatcher({\n              type: messageActionTypes.FETCH_CHANNELS_SUCCESS,\n              payload: [channel],\n            });\n            channelListDispatcher({\n              type: messageActionTypes.SET_CURRENT_CHANNEL,\n              payload: channel,\n            });\n          })\n          .catch(() => {\n            logger.warning('ChannelListProvider: Active channel not found');\n          });\n      }\n    }\n  }, [activeChannelUrl]);\n}\n\nexport default useActiveChannelUrl;\n","import React, {\n  useState,\n  useEffect,\n  useContext,\n  useReducer,\n  useMemo,\n} from 'react';\n\nimport type { User } from '@sendbird/chat';\nimport {\n  GroupChannel,\n  GroupChannelCreateParams,\n  GroupChannelHandler,\n  SendbirdGroupChat,\n  GroupChannelListQuery as GroupChannelListQuerySb,\n  GroupChannelUserIdsFilter,\n} from '@sendbird/chat/groupChannel';\n\nimport { RenderUserProfileProps } from '../../../types';\n\nimport setupChannelList, {\n  pubSubHandler,\n  pubSubHandleRemover,\n} from '../utils';\nimport { uuidv4 } from '../../../utils/uuid';\nimport { noop } from '../../../utils/utils';\n\nimport * as channelListActions from '../dux/actionTypes';\n\nimport { UserProfileProvider } from '../../../lib/UserProfileContext';\nimport useSendbirdStateContext from '../../../hooks/useSendbirdStateContext';\nimport { CustomUseReducerDispatcher } from '../../../lib/SendbirdState';\nimport channelListReducers from '../dux/reducers';\nimport channelListInitialState from '../dux/initialState';\nimport { CHANNEL_TYPE } from '../../CreateChannel/types';\nimport useActiveChannelUrl from './hooks/useActiveChannelUrl';\n\ninterface ApplicationUserListQuery {\n  limit?: number;\n  userIdsFilter?: Array<string>;\n  metaDataKeyFilter?: string;\n  metaDataValuesFilter?: Array<string>;\n}\n\ninterface GroupChannelListQuery {\n  limit?: number;\n  includeEmpty?: boolean;\n  order?: 'latest_last_message' | 'chronological' | 'channel_name_alphabetical' | 'metadata_value_alphabetical';\n  userIdsExactFilter?: Array<string>;\n  userIdsIncludeFilter?: Array<string>;\n  userIdsIncludeFilterQueryType?: 'AND' | 'OR';\n  nicknameContainsFilter?: string;\n  channelNameContainsFilter?: string;\n  customTypesFilter?: Array<string>;\n  customTypeStartsWithFilter?: string;\n  channelUrlsFilter?: Array<string>;\n  superChannelFilter?: 'all' | 'super' | 'nonsuper';\n  publicChannelFilter?: 'all' | 'public' | 'private';\n  metadataOrderKeyFilter?: string;\n  memberStateFilter?: 'all' | 'joined_only' | 'invited_only' | 'invited_by_friend' | 'invited_by_non_friend';\n  hiddenChannelFilter?: 'unhidden_only' | 'hidden_only' | 'hidden_allow_auto_unhide' | 'hidden_prevent_auto_unhide';\n  unreadChannelFilter?: 'all' | 'unread_message';\n  includeFrozen?: boolean;\n  userIdsFilter?: GroupChannelUserIdsFilter;\n}\n\ninterface ChannelListQueries {\n  applicationUserListQuery?: ApplicationUserListQuery;\n  channelListQuery?: GroupChannelListQuery;\n}\n\ntype OverrideInviteUserType = {\n  users: Array<string>;\n  onClose: () => void;\n  channelType: CHANNEL_TYPE;\n};\n\nexport interface ChannelListProviderProps {\n  allowProfileEdit?: boolean;\n  onBeforeCreateChannel?(users: Array<string>): GroupChannelCreateParams;\n  overrideInviteUser?(params: OverrideInviteUserType): void;\n  onThemeChange?(theme: string): void;\n  onProfileEditSuccess?(user: User): void;\n  onChannelSelect?(channel: GroupChannel | null): void;\n  sortChannelList?: (channels: GroupChannel[]) => GroupChannel[];\n  queries?: ChannelListQueries;\n  children?: React.ReactElement;\n  className?: string | string[];\n  renderUserProfile?: (props: RenderUserProfileProps) => React.ReactElement;\n  disableUserProfile?: boolean;\n  disableAutoSelect?: boolean;\n  activeChannelUrl?: string;\n  typingChannels?: Array<GroupChannel>;\n  isTypingIndicatorEnabled?: boolean;\n  isMessageReceiptStatusEnabled?: boolean;\n}\n\nexport interface ChannelListProviderInterface extends ChannelListProviderProps {\n  initialized: boolean;\n  loading: boolean;\n  allChannels: GroupChannel[];\n  currentChannel: GroupChannel;\n  channelListQuery: GroupChannelListQuery;\n  currentUserId: string;\n  channelListDispatcher: CustomUseReducerDispatcher;\n  channelSource: GroupChannelListQuerySb | null;\n}\n\ninterface ChannelListStoreInterface {\n  initialized: boolean;\n  loading: boolean;\n  allChannels: GroupChannel[];\n  currentChannel: GroupChannel;\n  channelListQuery: GroupChannelListQuery;\n  currentUserId: string;\n  disableAutoSelect: boolean;\n}\n\nconst ChannelListContext = React.createContext<ChannelListProviderInterface | null>({\n  disableUserProfile: true,\n  allowProfileEdit: true,\n  onBeforeCreateChannel: null,\n  onThemeChange: null,\n  onProfileEditSuccess: null,\n  onChannelSelect: null,\n  queries: {},\n  className: null,\n  initialized: false,\n  loading: false,\n  allChannels: [],\n  currentChannel: null,\n  channelListQuery: {},\n  currentUserId: null,\n  channelListDispatcher: null,\n  channelSource: null,\n  typingChannels: [],\n});\n\nconst ChannelListProvider: React.FC<ChannelListProviderProps> = (props: ChannelListProviderProps) => {\n  // destruct props\n  const {\n    children,\n    className,\n    disableUserProfile,\n    allowProfileEdit,\n    queries,\n    onProfileEditSuccess,\n    onThemeChange,\n    onBeforeCreateChannel,\n    sortChannelList,\n    overrideInviteUser,\n    activeChannelUrl,\n    isTypingIndicatorEnabled = null,\n    isMessageReceiptStatusEnabled = null,\n  } = props;\n  // disable autoselect, if activeChannelUrl is provided\n  // useActiveChannelUrl should be executed when activeChannelUrl is present\n  const disableAutoSelect = props?.disableAutoSelect || !!activeChannelUrl;\n  const onChannelSelect = props?.onChannelSelect || noop;\n  // fetch store from <SendbirdProvider />\n  const globalStore = useSendbirdStateContext();\n  const { config, stores } = globalStore;\n  const { sdkStore } = stores;\n  const { pubSub, logger, onUserProfileMessage } = config;\n  const {\n    markAsDeliveredScheduler,\n    disableMarkAsDelivered = false,\n    isTypingIndicatorEnabledOnChannelList = false,\n    isMessageReceiptStatusEnabledOnChannelList = false,\n  } = config;\n  const sdk = sdkStore?.sdk as SendbirdGroupChat;\n\n  // derive some variables\n  // enable if it is true atleast once(both are flase by default)\n  const userDefinedDisableUserProfile = disableUserProfile || config?.disableUserProfile;\n  const userDefinedRenderProfile = config?.renderUserProfile;\n  const enableEditProfile = allowProfileEdit || config?.allowProfileEdit;\n\n  const userFilledChannelListQuery = queries?.channelListQuery;\n  const userFilledApplicationUserListQuery = queries?.applicationUserListQuery;\n\n  const sdkIntialized = sdkStore?.initialized;\n\n  const [channelListStore, channelListDispatcher] = useReducer(\n    channelListReducers,\n    channelListInitialState,\n  ) as [ChannelListStoreInterface, CustomUseReducerDispatcher];\n  const { currentChannel } = channelListStore;\n\n  const [channelSource, setChannelSource] = useState<GroupChannelListQuerySb | null>(null);\n  const [typingChannels, setTypingChannels] = useState<Array<GroupChannel>>([]);\n\n  useEffect(() => {\n    const subscriber = pubSubHandler(pubSub, channelListDispatcher);\n    return () => {\n      pubSubHandleRemover(subscriber);\n    };\n  }, [sdkIntialized]);\n\n  useEffect(() => {\n    const sdkChannelHandlerId = uuidv4();\n    if (sdkIntialized) {\n      logger.info('ChannelList: Setup channelHandlers');\n      setupChannelList({\n        sdk,\n        sdkChannelHandlerId,\n        channelListDispatcher,\n        setChannelSource,\n        onChannelSelect,\n        userFilledChannelListQuery,\n        logger,\n        sortChannelList,\n        disableAutoSelect,\n        markAsDeliveredScheduler,\n        disableMarkAsDelivered,\n      });\n    } else {\n      logger.info('ChannelList: Removing channelHandlers');\n      // remove previous channelHandlers\n      if (sdk?.groupChannel?.removeGroupChannelHandler) {\n        sdk.groupChannel.removeGroupChannelHandler(sdkChannelHandlerId);\n      }\n      // remove channelSource\n      setChannelSource(null);\n      // cleanup\n      channelListDispatcher({\n        type: channelListActions.RESET_CHANNEL_LIST,\n        payload: null,\n      });\n    }\n    return () => {\n      logger.info('ChannelList: Removing channelHandlers');\n      if (sdk?.groupChannel?.removeGroupChannelHandler) {\n        sdk?.groupChannel?.removeGroupChannelHandler(sdkChannelHandlerId);\n      }\n    };\n  }, [sdkIntialized, userFilledChannelListQuery, sortChannelList]);\n\n  useEffect(() => {\n    let typingHandlerId = '';\n    if (sdk?.groupChannel?.addGroupChannelHandler) {\n      typingHandlerId = uuidv4();\n      const handler = new GroupChannelHandler({\n        onTypingStatusUpdated: (channel) => {\n          const typingMemberCount = channel?.getTypingUsers()?.length;\n          const channelList = typingChannels.filter(ch => ch.url !== channel.url);\n          if (typingMemberCount > 0) {\n            setTypingChannels([...channelList, channel]);\n          } else {\n            setTypingChannels(channelList);\n          }\n        },\n        onUnreadMemberStatusUpdated(channel) {\n          channelListDispatcher({\n            type: channelListActions.ON_LAST_MESSAGE_UPDATED,\n            payload: channel,\n          });\n        },\n        onUndeliveredMemberStatusUpdated(channel) {\n          channelListDispatcher({\n            type: channelListActions.ON_LAST_MESSAGE_UPDATED,\n            payload: channel,\n          });\n        },\n        onMessageUpdated(channel) {\n          channelListDispatcher({\n            type: channelListActions.ON_LAST_MESSAGE_UPDATED,\n            payload: channel,\n          });\n          sdk.groupChannel.getChannelWithoutCache(channel.url)\n            .then((ch) => {\n              channelListDispatcher({\n                type: channelListActions.ON_LAST_MESSAGE_UPDATED,\n                payload: ch,\n              });\n            });\n        },\n        onMentionReceived(channel) {\n          channelListDispatcher({\n            type: channelListActions.ON_LAST_MESSAGE_UPDATED,\n            payload: channel,\n          });\n          sdk.groupChannel.getChannelWithoutCache(channel.url)\n            .then((ch) => {\n              channelListDispatcher({\n                type: channelListActions.ON_LAST_MESSAGE_UPDATED,\n                payload: ch,\n              });\n            });\n        },\n      });\n      sdk?.groupChannel?.addGroupChannelHandler(typingHandlerId, handler);\n    }\n    return () => {\n      if (sdk?.groupChannel?.removeGroupChannelHandler && typingHandlerId !== '') {\n        sdk.groupChannel.removeGroupChannelHandler(typingHandlerId);\n      }\n    };\n  }, [sdk?.currentUser?.userId]);\n\n  const queries_ = useMemo(() => {\n    return {\n      applicationUserListQuery: userFilledApplicationUserListQuery,\n      channelListQuery: userFilledChannelListQuery,\n    };\n  }, [\n    userFilledApplicationUserListQuery,\n    userFilledChannelListQuery,\n  ]);\n\n  const { allChannels } = channelListStore;\n  const sortedChannels = (sortChannelList && typeof sortChannelList === 'function')\n    ? sortChannelList(allChannels)\n    : allChannels;\n\n  if (sortedChannels.length !== allChannels.length) {\n    const warning = `ChannelList: You have removed/added extra channels on sortChannelList\n      this could cause unexpected problems`;\n    // eslint-disable-next-line no-console\n    console.warn(warning, { before: allChannels, after: sortedChannels });\n    logger.warning(warning, { before: allChannels, after: sortedChannels });\n  }\n\n  // Set current channel (by on_channel_selected event)\n  useEffect(() => {\n    if (!sdk || !sdk.groupChannel || !currentChannel || !currentChannel?.url) {\n      return;\n    }\n    sdk.groupChannel.getChannel(currentChannel.url).then((groupChannel) => {\n      if (groupChannel) {\n        onChannelSelect(groupChannel);\n      } else {\n        onChannelSelect(null);\n      }\n    });\n  }, [currentChannel?.url]);\n\n  // Set active channel (by url)\n  useActiveChannelUrl({\n    activeChannelUrl,\n    channels: sortedChannels,\n    sdk,\n  }, {\n    logger,\n    channelListDispatcher,\n  });\n\n  return (\n    <ChannelListContext.Provider value={{\n      className,\n      disableUserProfile,\n      queries: queries_,\n      onProfileEditSuccess,\n      onThemeChange,\n      onBeforeCreateChannel,\n      overrideInviteUser,\n      onChannelSelect,\n      sortChannelList,\n      allowProfileEdit: enableEditProfile,\n      channelListDispatcher,\n      channelSource,\n      ...channelListStore,\n      allChannels: sortedChannels,\n      typingChannels,\n      isTypingIndicatorEnabled: (isTypingIndicatorEnabled !== null) ? isTypingIndicatorEnabled : isTypingIndicatorEnabledOnChannelList,\n      isMessageReceiptStatusEnabled: (isMessageReceiptStatusEnabled !== null) ? isMessageReceiptStatusEnabled : isMessageReceiptStatusEnabledOnChannelList,\n    }}>\n      <UserProfileProvider\n        disableUserProfile={userDefinedDisableUserProfile}\n        renderUserProfile={userDefinedRenderProfile}\n        onUserProfileMessage={onUserProfileMessage}\n      >\n        <div className={`sendbird-channel-list ${className}`}>\n          {children}\n        </div>\n      </UserProfileProvider>\n    </ChannelListContext.Provider>\n  );\n};\n\nfunction useChannelListContext(): ChannelListProviderInterface {\n  const context: ChannelListProviderInterface = useContext(ChannelListContext);\n  return context;\n}\n\nexport {\n  ChannelListProvider,\n  useChannelListContext,\n};\n"],"names":["RESET_CHANNEL_LIST","CREATE_CHANNEL","USER_INVITED","LEAVE_CHANNEL_SUCCESS","SET_CURRENT_CHANNEL","FETCH_CHANNELS_START","FETCH_CHANNELS_SUCCESS","FETCH_CHANNELS_FAILURE","INIT_CHANNELS_START","INIT_CHANNELS_SUCCESS","INIT_CHANNELS_FAILURE","ON_USER_JOINED","ON_CHANNEL_DELETED","ON_LAST_MESSAGE_UPDATED","ON_USER_LEFT","ON_CHANNEL_CHANGED","ON_CHANNEL_ARCHIVED","ON_CHANNEL_FROZEN","ON_CHANNEL_UNFROZEN","ON_READ_RECEIPT_UPDATED","ON_DELIVERY_RECEIPT_UPDATED","CHANNEL_REPLACED_TO_TOP","CHANNEL_LIST_PARAMS_UPDATED","DELIVERY_RECIPT","createEventHandler","_ref","sdk","sdkChannelHandlerId","channelListDispatcher","logger","ChannelHandler","GroupChannelHandler","onChannelChanged","channel","info","type","channelActions","payload","onChannelDeleted","channelUrl","onUserJoined","lastMessage","onUserReceivedInvitation","inviter","invitees","currentUser","isInvited","find","user","userId","onUserBanned","isMe","onUserLeft","leftUser","onReadStatus","onDeliveryReceiptUpdated","onMessageUpdated","message","isEqual","onChannelHidden","onChannelFrozen","onChannelUnfrozen","groupChannel","addGroupChannelHandler","createChannelListQuery","_ref2","userFilledChannelListQuery","param","includeEmpty","limit","order","Object","keys","forEach","key","channelListQuery","createMyGroupChannelListQuery","setupChannelList","_ref3","setChannelSource","onChannelSelect","sortChannelList","disableAutoSelect","markAsDeliveredScheduler","disableMarkAsDelivered","warning","currentUserId","hasNext","next","then","channelList","_sdk$appInfo","_sdk$appInfo$premiumF","sortedChannelList","canSetMarkAsDelivered","appInfo","premiumFeatureList","feature","push","catch","err","error","pubSubHandleRemover","subscriber","s","remove","_unused","pubSubHandler","pubSub","Map","set","topics","subscribe","msg","UPDATE_USER_MESSAGE","_updatedChannel$lastM","updatedChannel","messageId","LEAVE_CHANNEL","url","SEND_MESSAGE_START","initialized","loading","allChannels","currentChannel","reducer","state","action","actions","_objectSpread","initialState","length","currentChannels","map","c","filteredChannels","filter","filterChannelListParams","getChannelsWithUpsertedChannel","ch","_state$currentChannel","nextChannel","_state$currentChannel2","_state$currentChannel5","_state$currentChannel4","_state$currentChannel3","_ref4","unreadMessageCount","_state$currentChannel6","_ref5","_ref6","currentUnreadCount","_ref7","_state$currentChannel7","_ref8","isFrozen","_state$currentChannel8","_ref9","useActiveChannelUrl","activeChannelUrl","channels","useEffect","activeChannel","messageActionTypes","_sdk$groupChannel","getChannel","ChannelListContext","React","createContext","disableUserProfile","allowProfileEdit","onBeforeCreateChannel","onThemeChange","onProfileEditSuccess","queries","className","channelSource","typingChannels","ChannelListProvider","props","_sdk$currentUser","children","overrideInviteUser","isTypingIndicatorEnabled","isMessageReceiptStatusEnabled","noop","globalStore","useSendbirdStateContext","config","stores","sdkStore","onUserProfileMessage","isTypingIndicatorEnabledOnChannelList","isMessageReceiptStatusEnabledOnChannelList","userDefinedDisableUserProfile","userDefinedRenderProfile","renderUserProfile","enableEditProfile","userFilledApplicationUserListQuery","applicationUserListQuery","sdkIntialized","channelListStore","useReducer","channelListReducers","channelListInitialState","useState","setTypingChannels","uuidv4","removeGroupChannelHandler","channelListActions","_sdk$groupChannel2","_sdk$groupChannel3","_sdk$groupChannel4","typingHandlerId","_sdk$groupChannel5","handler","onTypingStatusUpdated","_channel$getTypingUse","typingMemberCount","getTypingUsers","onUnreadMemberStatusUpdated","onUndeliveredMemberStatusUpdated","getChannelWithoutCache","onMentionReceived","_sdk$groupChannel6","queries_","useMemo","sortedChannels","console","warn","before","after","createElement","Provider","value","UserProfileProvider","useChannelListContext","context","useContext"],"mappings":";;;;;;;;;;;;;;;;AAAO,MAAMA,kBAAkB,GAAG,oBAAoB,CAAA;AAC/C,MAAMC,cAAc,GAAG,gBAAgB,CAAA;AACvC,MAAMC,YAAY,GAAG,cAAc,CAAA;AAGnC,MAAMC,qBAAqB,GAAG,wBAAuB;AAErD,MAAMC,mBAAmB,GAAG,sBAAqB;AAEjD,MAAMC,oBAAoB,GAAG,uBAAsB;AACnD,MAAMC,sBAAsB,GAAG,yBAAwB;AACvD,MAAMC,sBAAsB,GAAG,yBAAwB;AAEvD,MAAMC,mBAAmB,GAAG,qBAAqB,CAAA;AACjD,MAAMC,qBAAqB,GAAG,uBAAuB,CAAA;AACrD,MAAMC,qBAAqB,GAAG,uBAAuB,CAAA;AAIrD,MAAMC,cAAc,GAAG,gBAAgB,CAAA;AACvC,MAAMC,kBAAkB,GAAG,oBAAoB,CAAA;AAC/C,MAAMC,uBAAuB,GAAG,yBAAyB,CAAA;AACzD,MAAMC,YAAY,GAAG,cAAc,CAAA;AACnC,MAAMC,kBAAkB,GAAG,oBAAoB,CAAA;AAC/C,MAAMC,mBAAmB,GAAG,qBAAqB,CAAA;AACjD,MAAMC,iBAAiB,GAAG,mBAAmB,CAAA;AAC7C,MAAMC,mBAAmB,GAAG,qBAAqB,CAAA;AAEjD,MAAMC,uBAAuB,GAAG,yBAAyB,CAAA;AACzD,MAAMC,2BAA2B,GAAG,6BAA6B,CAAA;AAEjE,MAAMC,uBAAuB,GAAG,yBAAyB,CAAA;AACzD,MAAMC,2BAA2B,GAAG,6BAA6B;;AC5BxE,MAAMC,eAAe,GAAG,kBAAkB,CAAA;AAE1C,MAAMC,kBAAkB,GAAGC,IAAA,IAKrB;EAAA,IALsB;IAC1BC,GAAG;IACHC,mBAAmB;IACnBC,qBAAqB;AACrBC,IAAAA,MAAAA;AACF,GAAC,GAAAJ,IAAA,CAAA;AACC,EAAA,MAAMK,cAAc,GAAG,IAAIC,gCAAmB,CAAC;IAC7CC,gBAAgB,EAAGC,OAAO,IAAK;AAC7BJ,MAAAA,MAAM,CAACK,IAAI,CAAC,+BAA+B,EAAED,OAAO,CAAC,CAAA;AACrDL,MAAAA,qBAAqB,CAAC;QACpBO,IAAI,EAAEC,kBAAiC;AACvCC,QAAAA,OAAO,EAAEJ,OAAAA;AACX,OAAC,CAAC,CAAA;KACH;IACDK,gBAAgB,EAAGC,UAAU,IAAK;AAChCV,MAAAA,MAAM,CAACK,IAAI,CAAC,+BAA+B,EAAEK,UAAU,CAAC,CAAA;AACxDX,MAAAA,qBAAqB,CAAC;QACpBO,IAAI,EAAEC,kBAAiC;AACvCC,QAAAA,OAAO,EAAEE,UAAAA;AACX,OAAC,CAAC,CAAA;KACH;IACDC,YAAY,EAAGP,OAAO,IAAK;AACzBJ,MAAAA,MAAM,CAACK,IAAI,CAAC,2BAA2B,EAAED,OAAO,CAAC,CAAA;AACjD,MAAA,IAAIA,OAAO,KAAPA,IAAAA,IAAAA,OAAO,eAAPA,OAAO,CAAEQ,WAAW,EAAE;AACxBb,QAAAA,qBAAqB,CAAC;UACpBO,IAAI,EAAEC,cAA6B;AACnCC,UAAAA,OAAO,EAAEJ,OAAAA;AACX,SAAC,CAAC,CAAA;AACJ,OAAA;KACD;AACDS,IAAAA,wBAAwB,EAAEA,CAACT,OAAO,EAAEU,OAAO,EAAEC,QAAQ,KAAK;AACxDf,MAAAA,MAAM,CAACK,IAAI,CAAC,uCAAuC,EAAE;QAAED,OAAO;QAAEU,OAAO;AAAEC,QAAAA,QAAAA;AAAS,OAAC,CAAC,CAAA;MACpF,MAAM;AAAEC,QAAAA,WAAAA;AAAY,OAAC,GAAGnB,GAAG,CAAA;MAC3B,MAAMoB,SAAS,GAAGF,QAAQ,CAACG,IAAI,CAAEC,IAAI,IAAK,CAAAA,IAAI,KAAJA,IAAAA,IAAAA,IAAI,uBAAJA,IAAI,CAAEC,MAAM,OAAKJ,WAAW,KAAA,IAAA,IAAXA,WAAW,KAAXA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,WAAW,CAAEI,MAAM,CAAC,CAAA,CAAA;AAC/E;MACA,IAAIH,SAAS,IAAIb,OAAO,KAAA,IAAA,IAAPA,OAAO,KAAPA,KAAAA,CAAAA,IAAAA,OAAO,CAAEQ,WAAW,EAAE;AACrCb,QAAAA,qBAAqB,CAAC;UACpBO,IAAI,EAAEC,YAA2B;AACjCC,UAAAA,OAAO,EAAEJ,OAAAA;AACX,SAAC,CAAC,CAAA;AACJ,OAAA;KACD;AACDiB,IAAAA,YAAY,EAAEA,CAACjB,OAAO,EAAEe,IAAI,KAAK;MAC/B,MAAM;AAAEH,QAAAA,WAAAA;AAAY,OAAC,GAAGnB,GAAG,CAAA;AAC3BG,MAAAA,MAAM,CAACK,IAAI,CAAC,uBAAuB,EAAED,OAAO,CAAC,CAAA;AAC7C,MAAA,IAAIe,IAAI,CAACC,MAAM,KAAKJ,WAAW,CAACI,MAAM,EAAE;AACtCrB,QAAAA,qBAAqB,CAAC;UACpBO,IAAI,EAAEC,YAA2B;AACjCC,UAAAA,OAAO,EAAE;YACPJ,OAAO;AACPkB,YAAAA,IAAI,EAAE,IAAA;AACR,WAAA;AACF,SAAC,CAAC,CAAA;AACJ,OAAC,MAAM;AACLvB,QAAAA,qBAAqB,CAAC;UACpBO,IAAI,EAAEC,YAA2B;AACjCC,UAAAA,OAAO,EAAE;YACPJ,OAAO;AACPkB,YAAAA,IAAI,EAAE,KAAA;AACR,WAAA;AACF,SAAC,CAAC,CAAA;AACJ,OAAA;KACD;AACDC,IAAAA,UAAU,EAAEA,CAACnB,OAAO,EAAEoB,QAAQ,KAAK;MACjC,MAAM;AAAER,QAAAA,WAAAA;AAAY,OAAC,GAAGnB,GAAG,CAAA;MAC3B,MAAMyB,IAAI,GAAIN,WAAW,CAACI,MAAM,KAAKI,QAAQ,CAACJ,MAAO,CAAA;AACrDpB,MAAAA,MAAM,CAACK,IAAI,CAAC,yBAAyB,EAAED,OAAO,CAAC,CAAA;AAC/CL,MAAAA,qBAAqB,CAAC;QACpBO,IAAI,EAAEC,YAA2B;AACjCC,QAAAA,OAAO,EAAE;UACPJ,OAAO;AACPkB,UAAAA,IAAAA;AACF,SAAA;AACF,OAAC,CAAC,CAAA;KACH;IAEDG,YAAY,EAAGrB,OAAO,IAAK;AACzBJ,MAAAA,MAAM,CAACK,IAAI,CAAC,2BAA2B,EAAED,OAAO,CAAC,CAAA;AACjDL,MAAAA,qBAAqB,CAAC;QACpBO,IAAI,EAAEC,uBAAsC;AAC5CC,QAAAA,OAAO,EAAEJ,OAAAA;AACX,OAAC,CAAC,CAAA;KACH;IAEDsB,wBAAwB,EAAGtB,OAAO,IAAK;AACrCJ,MAAAA,MAAM,CAACK,IAAI,CAAC,uCAAuC,EAAED,OAAO,CAAC,CAAA;AAC7D,MAAA,IAAIA,OAAO,KAAPA,IAAAA,IAAAA,OAAO,eAAPA,OAAO,CAAEQ,WAAW,EAAE;AACxBb,QAAAA,qBAAqB,CAAC;UACpBO,IAAI,EAAEC,2BAA0C;AAChDC,UAAAA,OAAO,EAAEJ,OAAAA;AACX,SAAC,CAAC,CAAA;AACJ,OAAA;KACD;AAEDuB,IAAAA,gBAAgB,EAAEA,CAACvB,OAAO,EAAEwB,OAAO,KAAK;AACtC,MAAA,IAAIxB,OAAO,KAAA,IAAA,IAAPA,OAAO,KAAA,KAAA,CAAA,IAAPA,OAAO,CAAEQ,WAAW,CAACiB,OAAO,CAACD,OAAO,CAAC,EAAE;AACzC5B,QAAAA,MAAM,CAACK,IAAI,CAAC,+BAA+B,EAAED,OAAO,CAAC,CAAA;AACrDL,QAAAA,qBAAqB,CAAC;UACpBO,IAAI,EAAEC,uBAAsC;AAC5CC,UAAAA,OAAO,EAAEJ,OAAAA;AACX,SAAC,CAAC,CAAA;AACJ,OAAA;KACD;IAED0B,eAAe,EAAG1B,OAAO,IAAK;AAC5BJ,MAAAA,MAAM,CAACK,IAAI,CAAC,8BAA8B,EAAED,OAAO,CAAC,CAAA;AACpDL,MAAAA,qBAAqB,CAAC;QACpBO,IAAI,EAAEC,mBAAkC;AACxCC,QAAAA,OAAO,EAAEJ,OAAAA;AACX,OAAC,CAAC,CAAA;KACH;IAED2B,eAAe,EAAG3B,OAAO,IAAK;AAC5BJ,MAAAA,MAAM,CAACK,IAAI,CAAC,8BAA8B,EAAED,OAAO,CAAC,CAAA;AACpDL,MAAAA,qBAAqB,CAAC;QACpBO,IAAI,EAAEC,iBAAgC;AACtCC,QAAAA,OAAO,EAAEJ,OAAAA;AACX,OAAC,CAAC,CAAA;KACH;IAED4B,iBAAiB,EAAG5B,OAAO,IAAK;AAC9BJ,MAAAA,MAAM,CAACK,IAAI,CAAC,gCAAgC,EAAED,OAAO,CAAC,CAAA;AACtDL,MAAAA,qBAAqB,CAAC;QACpBO,IAAI,EAAEC,mBAAkC;AACxCC,QAAAA,OAAO,EAAEJ,OAAAA;AACX,OAAC,CAAC,CAAA;AACJ,KAAA;AACF,GAAC,CAAC,CAAA;AAEFJ,EAAAA,MAAM,CAACK,IAAI,CAAC,mCAAmC,CAAC,CAAA;EAChDR,GAAG,CAACoC,YAAY,CAACC,sBAAsB,CAACpC,mBAAmB,EAAEG,cAAc,CAAC,CAAA;AAC9E,CAAC,CAAA;AAED,MAAMkC,sBAAsB,GAAGC,KAAA,IAA8C;EAAA,IAA7C;IAAEvC,GAAG;AAAEwC,IAAAA,0BAA0B,GAAG,EAAC;AAAE,GAAC,GAAAD,KAAA,CAAA;EACtE,MAAME,KAAK,GAAG,EAAE,CAAA;EAChBA,KAAK,CAACC,YAAY,GAAG,KAAK,CAAA;AAC1BD,EAAAA,KAAK,CAACE,KAAK,GAAG,EAAE,CAAC;AACjBF,EAAAA,KAAK,CAACG,KAAK,GAAG,qBAAqB,CAAC;;AAEpC,EAAA,IAAIJ,0BAA0B,EAAE;IAC9BK,MAAM,CAACC,IAAI,CAACN,0BAA0B,CAAC,CAACO,OAAO,CAAEC,GAAG,IAAK;AACvDP,MAAAA,KAAK,CAACO,GAAG,CAAC,GAAGR,0BAA0B,CAACQ,GAAG,CAAC,CAAA;AAC9C,KAAC,CAAC,CAAA;AACJ,GAAA;EAEA,MAAMC,gBAAgB,GAAGjD,GAAG,CAACoC,YAAY,CAACc,6BAA6B,CAACT,KAAK,CAAC,CAAA;AAE9E,EAAA,OAAOQ,gBAAgB,CAAA;AACzB,CAAC,CAAA;;AAED;AACA;AACA;AACA;AACA;AACA,SAASE,gBAAgBA,CAAAC,KAAA,EAYtB;EAAA,IAZuB;IACxBpD,GAAG;IACHC,mBAAmB;IACnBC,qBAAqB;IACrBmD,gBAAgB;IAChBC,eAAe;IACfd,0BAA0B;IAC1BrC,MAAM;IACNoD,eAAe;IACfC,iBAAiB;IACjBC,wBAAwB;AACxBC,IAAAA,sBAAAA;AACF,GAAC,GAAAN,KAAA,CAAA;AACC,EAAA,IAAIpD,GAAG,KAAHA,IAAAA,IAAAA,GAAG,eAAHA,GAAG,CAAEoC,YAAY,EAAE;AACrBtC,IAAAA,kBAAkB,CAAC;MACjBE,GAAG;MACHE,qBAAqB;MACrBD,mBAAmB;AACnBE,MAAAA,MAAAA;AACF,KAAC,CAAC,CAAA;AACJ,GAAC,MAAM;AACLA,IAAAA,MAAM,CAACwD,OAAO,CAAC,4EAA4E,EAAE3D,GAAG,CAAC,CAAA;AACnG,GAAA;AAEAG,EAAAA,MAAM,CAACK,IAAI,CAAC,8BAA8B,EAAE;AAAEgC,IAAAA,0BAAAA;AAA2B,GAAC,CAAC,CAAA;EAC3E,MAAMS,gBAAgB,GAAGX,sBAAsB,CAAC;IAAEtC,GAAG;AAAEwC,IAAAA,0BAAAA;AAA2B,GAAC,CAAC,CAAA;AACpFrC,EAAAA,MAAM,CAACK,IAAI,CAAC,6BAA6B,EAAEyC,gBAAgB,CAAC,CAAA;EAC5DI,gBAAgB,CAACJ,gBAAgB,CAAC,CAAA;AAElC/C,EAAAA,qBAAqB,CAAC;IACpBO,IAAI,EAAEC,mBAAe5B;AACvB,GAAC,CAAC,CAAA;AAEF,EAAA,IAAI0D,0BAA0B,EAAE;AAC9BrC,IAAAA,MAAM,CAACK,IAAI,CAAC,2CAA2C,EAAEyC,gBAAgB,CAAC,CAAA;AAC1E/C,IAAAA,qBAAqB,CAAC;MACpBO,IAAI,EAAEC,2BAA0C;AAChDC,MAAAA,OAAO,EAAE;QACPsC,gBAAgB;QAChBW,aAAa,EAAE5D,GAAG,IAAIA,GAAG,CAACmB,WAAW,IAAInB,GAAG,CAACmB,WAAW,CAACI,MAAAA;AAC3D,OAAA;AACF,KAAC,CAAC,CAAA;AACJ,GAAA;AAEApB,EAAAA,MAAM,CAACK,IAAI,CAAC,iCAAiC,CAAC,CAAA;EAC9C,IAAIyC,gBAAgB,CAACY,OAAO,EAAE;AAC5BZ,IAAAA,gBAAgB,CAACa,IAAI,EAAE,CAACC,IAAI,CAAEC,WAAW,IAAK;MAAA,IAAAC,YAAA,EAAAC,qBAAA,CAAA;AAC5C/D,MAAAA,MAAM,CAACK,IAAI,CAAC,gCAAgC,EAAEwD,WAAW,CAAC,CAAA;AAC1D;MACA7D,MAAM,CAACK,IAAI,CAAC,iCAAiC,EAAEwD,WAAW,CAAC,CAAC,CAAC,CAAC,CAAA;MAC9D,IAAIG,iBAAiB,GAAGH,WAAW,CAAA;AACnC,MAAA,IAAIT,eAAe,IAAI,OAAOA,eAAe,KAAK,UAAU,EAAE;AAC5DY,QAAAA,iBAAiB,GAAGZ,eAAe,CAACS,WAAW,CAAC,CAAA;AAChD7D,QAAAA,MAAM,CAACK,IAAI,CAAC,mCAAmC,EAAE2D,iBAAiB,CAAC,CAAA;AACrE,OAAA;MACA,IAAI,CAACX,iBAAiB,EAAE;AACtBF,QAAAA,eAAe,CAACa,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAA;AACvC,OAAA;AACAjE,MAAAA,qBAAqB,CAAC;QACpBO,IAAI,EAAEC,qBAAoC;AAC1CC,QAAAA,OAAO,EAAE;AAAEqD,UAAAA,WAAW,EAAEG,iBAAiB;AAAEX,UAAAA,iBAAAA;AAAkB,SAAA;AAC/D,OAAC,CAAC,CAAA;AACF,MAAA,MAAMY,qBAAqB,GAAGpE,GAAG,KAAA,IAAA,IAAHA,GAAG,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAAiE,YAAA,GAAHjE,GAAG,CAAEqE,OAAO,MAAA,IAAA,IAAAJ,YAAA,KAAAC,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,CAAAA,qBAAA,GAAZD,YAAA,CAAcK,kBAAkB,MAAAJ,IAAAA,IAAAA,qBAAA,uBAAhCA,qBAAA,CAC1B7C,IAAI,CAAEkD,OAAO,IAAMA,OAAO,KAAK1E,eAAgB,CAAC,CAAA;AAEpD,MAAA,IAAIuE,qBAAqB,IAAI,CAACV,sBAAsB,EAAE;AACpDS,QAAAA,iBAAiB,CAACpB,OAAO,CAAExC,OAAO,IAAK;AACrCkD,UAAAA,wBAAwB,CAACe,IAAI,CAACjE,OAAO,CAAC,CAAA;AACxC,SAAC,CAAC,CAAA;AACJ,OAAA;AACF,KAAC,CAAC,CAACkE,KAAK,CAAEC,GAAG,IAAK;AAChB,MAAA,IAAIA,GAAG,EAAE;AACPvE,QAAAA,MAAM,CAACwE,KAAK,CAAC,sCAAsC,EAAED,GAAG,CAAC,CAAA;AACzDxE,QAAAA,qBAAqB,CAAC;UACpBO,IAAI,EAAEC,qBAAe1B;AACvB,SAAC,CAAC,CAAA;AACJ,OAAA;AACF,KAAC,CAAC,CAAA;AACJ,GAAC,MAAM;AACLmB,IAAAA,MAAM,CAACK,IAAI,CAAC,0CAA0C,CAAC,CAAA;AACzD,GAAA;AACF,CAAA;AAEO,MAAMoE,mBAAmB,GAAIC,UAAU,IAAK;AACjDA,EAAAA,UAAU,CAAC9B,OAAO,CAAE+B,CAAC,IAAK;IACxB,IAAI;MACFA,CAAC,CAACC,MAAM,EAAE,CAAA;KACX,CAAC,OAAAC,OAAA,EAAM;AACN;AAAA,KAAA;AAEJ,GAAC,CAAC,CAAA;AACJ,CAAC,CAAA;AAEM,MAAMC,aAAa,GAAGA,CAACC,MAAM,EAAEhF,qBAAqB,KAAK;AAC9D,EAAA,MAAM2E,UAAU,GAAG,IAAIM,GAAG,EAAE,CAAA;AAC5B,EAAA,IAAI,CAACD,MAAM,EAAE,OAAOL,UAAU,CAAA;AAC9BA,EAAAA,UAAU,CAACO,GAAG,CAACC,oBAAM,CAAC9G,cAAc,EAAE2G,MAAM,CAACI,SAAS,CAACD,oBAAM,CAAC9G,cAAc,EAAGgH,GAAG,IAAK;IACrF,MAAM;AAAEhF,MAAAA,OAAAA;AAAQ,KAAC,GAAGgF,GAAG,CAAA;AACvBrF,IAAAA,qBAAqB,CAAC;AACpBO,MAAAA,IAAI,EAAE,gBAAgB;AACtBE,MAAAA,OAAO,EAAEJ,OAAAA;AACX,KAAC,CAAC,CAAA;AACJ,GAAC,CAAC,CAAC,CAAA;AAEHsE,EAAAA,UAAU,CAACO,GAAG,CAACC,oBAAM,CAACG,mBAAmB,EAAEN,MAAM,CAACI,SAAS,CAACD,oBAAM,CAACG,mBAAmB,EAAGD,GAAG,IAAK;AAAA,IAAA,IAAAE,qBAAA,CAAA;IAC/F,MAAM;MAAElF,OAAO;AAAEwB,MAAAA,OAAAA;AAAQ,KAAC,GAAGwD,GAAG,CAAA;IAChC,MAAMG,cAAc,GAAGnF,OAAO,CAAA;IAC9B,IAAI,CAAAmF,cAAc,KAAdA,IAAAA,IAAAA,cAAc,wBAAAD,qBAAA,GAAdC,cAAc,CAAE3E,WAAW,cAAA0E,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAA3BA,qBAAA,CAA6BE,SAAS,MAAK5D,OAAO,CAAC4D,SAAS,EAAE;MAChED,cAAc,CAAC3E,WAAW,GAAGgB,OAAO,CAAA;AACtC,KAAA;AACA,IAAA,IAAIxB,OAAO,EAAE;AACXL,MAAAA,qBAAqB,CAAC;QACpBO,IAAI,EAAEC,uBAAsC;AAC5CC,QAAAA,OAAO,EAAE+E,cAAAA;AACX,OAAC,CAAC,CAAA;AACJ,KAAA;AACF,GAAC,CAAC,CAAC,CAAA;AAEHb,EAAAA,UAAU,CAACO,GAAG,CAACC,oBAAM,CAACO,aAAa,EAAEV,MAAM,CAACI,SAAS,CAACD,oBAAM,CAACO,aAAa,EAAGL,GAAG,IAAK;IACnF,MAAM;AAAEhF,MAAAA,OAAAA;AAAQ,KAAC,GAAGgF,GAAG,CAAA;AACvBrF,IAAAA,qBAAqB,CAAC;MACpBO,IAAI,EAAEC,qBAAoC;AAC1CC,MAAAA,OAAO,EAAEJ,OAAO,KAAA,IAAA,IAAPA,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAPA,OAAO,CAAEsF,GAAAA;AACpB,KAAC,CAAC,CAAA;AACJ,GAAC,CAAC,CAAC,CAAA;AAEHhB,EAAAA,UAAU,CAACO,GAAG,CAACC,oBAAM,CAACS,kBAAkB,EAAEZ,MAAM,CAACI,SAAS,CAACD,oBAAM,CAACS,kBAAkB,EAAGP,GAAG,IAAK;IAC7F,MAAM;AAAEhF,MAAAA,OAAAA;AAAQ,KAAC,GAAGgF,GAAG,CAAA;AACvBrF,IAAAA,qBAAqB,CAAC;MACpBO,IAAI,EAAEC,uBAAsC;AAC5CC,MAAAA,OAAO,EAAEJ,OAAAA;AACX,KAAC,CAAC,CAAA;AACJ,GAAC,CAAC,CAAC,CAAA;AAEH,EAAA,OAAOsE,UAAU,CAAA;AACnB,CAAC;;ACxSD,8BAAe;AACb;AACAkB,EAAAA,WAAW,EAAE,KAAK;AAClBC,EAAAA,OAAO,EAAE,IAAI;AACbC,EAAAA,WAAW,EAAE,EAAE;AACfC,EAAAA,cAAc,EAAE,IAAI;AACpBjD,EAAAA,gBAAgB,EAAE,IAAI;AACtBW,EAAAA,aAAa,EAAE,EAAE;AACjBJ,EAAAA,iBAAiB,EAAE,KAAA;AACrB,CAAC;;ACLc,SAAS2C,OAAOA,CAACC,KAAK,EAAEC,MAAM,EAAE;EAC7C,QAAQA,MAAM,CAAC5F,IAAI;IACjB,KAAK6F,mBAA2B;AAC9B,MAAA,OAAAC,wCAAA,CAAAA,wCAAA,CAAA,EAAA,EACKH,KAAK,CAAA,EAAA,EAAA,EAAA;AACRJ,QAAAA,OAAO,EAAE,IAAA;AAAI,OAAA,CAAA,CAAA;IAEjB,KAAKM,kBAA0B;AAC7B,MAAA,OAAOE,uBAAY,CAAA;IACrB,KAAKF,qBAA6B;AAAE,MAAA;QAClC,MAAM;UAAEtC,WAAW;AAAER,UAAAA,iBAAAA;SAAmB,GAAG6C,MAAM,CAAC1F,OAAO,CAAA;AACzD,QAAA,OAAA4F,wCAAA,CAAAA,wCAAA,CAAA,EAAA,EACKH,KAAK,CAAA,EAAA,EAAA,EAAA;AACRL,UAAAA,WAAW,EAAE,IAAI;AACjBC,UAAAA,OAAO,EAAE,KAAK;AACdC,UAAAA,WAAW,EAAEjC,WAAW;UACxBR,iBAAiB;UACjB0C,cAAc,EACZ,CAAC1C,iBAAiB,IACfQ,WAAW,IACXA,WAAW,CAACyC,MAAM,IAClBzC,WAAW,CAACyC,MAAM,GAAG,CAAC,GAEvBzC,WAAW,CAAC,CAAC,CAAC,GACd,IAAA;AAAI,SAAA,CAAA,CAAA;AAEZ,OAAA;IACA,KAAKsC,sBAA8B;AAAE,MAAA;AACnC,QAAA,MAAMI,eAAe,GAAGN,KAAK,CAACH,WAAW,CAACU,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACf,GAAG,CAAC,CAAA;QAC3D,MAAMgB,gBAAgB,GAAGR,MAAM,CAAC1F,OAAO,CAACmG,MAAM,CAC5C/G,IAAA,IAAA;UAAA,IAAC;AAAE8F,YAAAA,GAAAA;AAAI,WAAC,GAAA9F,IAAA,CAAA;UAAA,OAAK,CAAE2G,eAAe,CAACrF,IAAI,CAAEuF,CAAC,IAAKA,CAAC,KAAKf,GAAG,CAAE,CAAA;SACvD,CAAA,CAAA;AACD,QAAA,OAAAU,wCAAA,CAAAA,wCAAA,CAAA,EAAA,EACKH,KAAK,CAAA,EAAA,EAAA,EAAA;UACRH,WAAW,EAAE,CACX,GAAGG,KAAK,CAACH,WAAW,EACpB,GAAGY,gBAAgB,CAAA;AACpB,SAAA,CAAA,CAAA;AAEL,OAAA;IACA,KAAKP,YAAoB;AAAE,MAAA;AACzB,QAAA,MAAM/F,OAAO,GAAG8F,MAAM,CAAC1F,OAAO,CAAA;QAC9B,IAAIyF,KAAK,CAACnD,gBAAgB,EAAE;AAC1B,UAAA,IAAI8D,6BAAuB,CAACX,KAAK,CAACnD,gBAAgB,EAAE1C,OAAO,EAAE6F,KAAK,CAACxC,aAAa,CAAC,EAAE;AACjF,YAAA,OAAA2C,wCAAA,CAAAA,wCAAA,CAAA,EAAA,EACKH,KAAK,CAAA,EAAA,EAAA,EAAA;AACRH,cAAAA,WAAW,EAAEe,oCAA8B,CAACZ,KAAK,CAACH,WAAW,EAAE1F,OAAO,CAAA;AAAC,aAAA,CAAA,CAAA;AAE3E,WAAA;AACA,UAAA,OAAAgG,wCAAA,CAAAA,wCAAA,CAAA,EAAA,EACKH,KAAK,CAAA,EAAA,EAAA,EAAA;AACRF,YAAAA,cAAc,EAAE3F,OAAAA;AAAO,WAAA,CAAA,CAAA;AAE3B,SAAA;AACA,QAAA,OAAAgG,wCAAA,CAAAA,wCAAA,CAAA,EAAA,EACKH,KAAK,CAAA,EAAA,EAAA,EAAA;UACRH,WAAW,EAAE,CAAC1F,OAAO,EAAE,GAAG6F,KAAK,CAACH,WAAW,CAACa,MAAM,CAAEG,EAAE,IAAKA,EAAE,CAACpB,GAAG,MAAKtF,OAAO,KAAA,IAAA,IAAPA,OAAO,KAAPA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,OAAO,CAAEsF,GAAG,CAAC,CAAA,CAAA;AAAC,SAAA,CAAA,CAAA;AAExF,OAAA;IACA,KAAKS,cAAsB;AAAE,MAAA;AAC3B,QAAA,MAAM/F,OAAO,GAAG8F,MAAM,CAAC1F,OAAO,CAAA;QAC9B,IAAIyF,KAAK,CAACnD,gBAAgB,EAAE;AAC1B,UAAA,IAAI8D,6BAAuB,CAACX,KAAK,CAACnD,gBAAgB,EAAE1C,OAAO,EAAE6F,KAAK,CAACxC,aAAa,CAAC,EAAE;AACjF,YAAA,OAAA2C,wCAAA,CAAAA,wCAAA,CAAA,EAAA,EACKH,KAAK,CAAA,EAAA,EAAA,EAAA;AACRH,cAAAA,WAAW,EAAEe,oCAA8B,CAACZ,KAAK,CAACH,WAAW,EAAE1F,OAAO,CAAA;AAAC,aAAA,CAAA,CAAA;AAE3E,WAAA;AACA,UAAA,OAAAgG,wCAAA,CAAAA,wCAAA,CAAA,EAAA,EACKH,KAAK,CAAA,EAAA,EAAA,EAAA;AACRF,YAAAA,cAAc,EAAE3F,OAAAA;AAAO,WAAA,CAAA,CAAA;AAE3B,SAAA;AACA,QAAA,OAAAgG,wCAAA,CAAAA,wCAAA,CAAA,EAAA,EACKH,KAAK,CAAA,EAAA,EAAA,EAAA;UACRH,WAAW,EAAE,CAAC1F,OAAO,EAAE,GAAG6F,KAAK,CAACH,WAAW,CAACa,MAAM,CAAEG,EAAE,IAAKA,EAAE,CAACpB,GAAG,MAAKtF,OAAO,KAAA,IAAA,IAAPA,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAPA,OAAO,CAAEsF,GAAG,CAAA,CAAC,CAAC;AACpFK,UAAAA,cAAc,EAAE3F,OAAAA;AAAO,SAAA,CAAA,CAAA;AAE3B,OAAA;IACA,KAAK+F,mBAA2B;AAAE,MAAA;AAAA,QAAA,IAAAY,qBAAA,CAAA;AAChC,QAAA,MAAM3G,OAAO,GAAG8F,MAAM,CAAC1F,OAAO,CAAA;QAC9B,IAAIyF,KAAK,CAACnD,gBAAgB,EAAE;AAC1B,UAAA,IAAI8D,6BAAuB,CAACX,KAAK,CAACnD,gBAAgB,EAAE1C,OAAO,EAAE6F,KAAK,CAACxC,aAAa,CAAC,EAAE;AACjF,YAAA,OAAA2C,wCAAA,CAAAA,wCAAA,CAAA,EAAA,EACKH,KAAK,CAAA,EAAA,EAAA,EAAA;AACRH,cAAAA,WAAW,EAAEe,oCAA8B,CAACZ,KAAK,CAACH,WAAW,EAAE1F,OAAO,CAAA;AAAC,aAAA,CAAA,CAAA;AAEzE;AACF,WAAA;AACF,SAAA;;QACA,MAAM4G,WAAW,GAAI,CAAA5G,OAAO,aAAPA,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAPA,OAAO,CAAEsF,GAAG,OAAA,CAAAqB,qBAAA,GAAKd,KAAK,CAACF,cAAc,MAAAgB,IAAAA,IAAAA,qBAAA,uBAApBA,qBAAA,CAAsBrB,GAAG,CAAA,GAC3DO,KAAK,CAACH,WAAW,CAACG,KAAK,CAACH,WAAW,CAAC,CAAC,CAAC,CAACJ,GAAG,MAAKtF,OAAO,KAAPA,IAAAA,IAAAA,OAAO,uBAAPA,OAAO,CAAEsF,GAAG,CAAA,GAAG,CAAC,GAAG,CAAC,CAAC,GACpEO,KAAK,CAACF,cAAc,CAAA;AACxB,QAAA,OAAAK,wCAAA,CAAAA,wCAAA,CAAA,EAAA,EACKH,KAAK,CAAA,EAAA,EAAA,EAAA;AACRH,UAAAA,WAAW,EAAEG,KAAK,CAACH,WAAW,CAACa,MAAM,CAACvE,KAAA,IAAA;YAAA,IAAC;AAAEsD,cAAAA,GAAAA;AAAI,aAAC,GAAAtD,KAAA,CAAA;YAAA,OAAKsD,GAAG,MAAKtF,OAAO,KAAA,IAAA,IAAPA,OAAO,KAAPA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,OAAO,CAAEsF,GAAG,CAAA,CAAA;WAAC,CAAA;AACxEK,UAAAA,cAAc,EAAEE,KAAK,CAAC5C,iBAAiB,GAAG,IAAI,GAAG2D,WAAAA;AAAW,SAAA,CAAA,CAAA;AAEhE,OAAA;IACA,KAAKb,qBAA6B,CAAA;IAClC,KAAKA,kBAA0B;AAAE,MAAA;AAAA,QAAA,IAAAc,sBAAA,CAAA;AAC/B,QAAA,MAAMvG,UAAU,GAAGwF,MAAM,CAAC1F,OAAO,CAAA;AACjC,QAAA,OAAA4F,wCAAA,CAAAA,wCAAA,CAAA,EAAA,EACKH,KAAK,CAAA,EAAA,EAAA,EAAA;UACRF,cAAc,EAAGrF,UAAU,MAAA,CAAAuG,sBAAA,GAAKhB,KAAK,CAACF,cAAc,MAAAkB,IAAAA,IAAAA,sBAAA,KAApBA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,sBAAA,CAAsBvB,GAAG,CAAA,GACrDO,KAAK,CAACH,WAAW,CAAC,CAAC,CAAC,GACpBG,KAAK,CAACF,cAAc;AACxBD,UAAAA,WAAW,EAAEG,KAAK,CAACH,WAAW,CAACa,MAAM,CAAC1D,KAAA,IAAA;YAAA,IAAC;AAAEyC,cAAAA,GAAAA;AAAI,aAAC,GAAAzC,KAAA,CAAA;YAAA,OAAKyC,GAAG,KAAKhF,UAAU,CAAA;AAAA,WAAA,CAAA;AAAC,SAAA,CAAA,CAAA;AAE1E,OAAA;IACA,KAAKyF,YAAoB;AAAE,MAAA;AAAA,QAAA,IAAAe,sBAAA,CAAA;QACzB,MAAM;UAAE9G,OAAO;AAAEkB,UAAAA,IAAAA;SAAM,GAAG4E,MAAM,CAAC1F,OAAO,CAAA;QACxC,IAAIyF,KAAK,CAACnD,gBAAgB,EAAE;AAAA,UAAA,IAAAqE,sBAAA,CAAA;AAC1B,UAAA,IAAIP,6BAAuB,CAACX,KAAK,CAACnD,gBAAgB,EAAE1C,OAAO,EAAE6F,KAAK,CAACxC,aAAa,CAAC,EAAE;AAAA,YAAA,IAAA2D,sBAAA,CAAA;YACjF,MAAMV,gBAAgB,GAAGG,oCAA8B,CAACZ,KAAK,CAACH,WAAW,EAAE1F,OAAO,CAAC,CAAA;AACnF,YAAA,MAAM4G,WAAW,GAAI1F,IAAI,IAAK,CAAAlB,OAAO,KAAA,IAAA,IAAPA,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAPA,OAAO,CAAEsF,GAAG,OAAA,CAAA0B,sBAAA,GAAKnB,KAAK,CAACF,cAAc,MAAAqB,IAAAA,IAAAA,sBAAA,KAApBA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,sBAAA,CAAsB1B,GAAG,CAAC,GACrEgB,gBAAgB,CAAC,CAAC,CAAC,GACnBT,KAAK,CAACF,cAAc,CAAA;AACxB,YAAA,OAAAK,wCAAA,CAAAA,wCAAA,CAAA,EAAA,EACKH,KAAK,CAAA,EAAA,EAAA,EAAA;AACRF,cAAAA,cAAc,EAAEE,KAAK,CAAC5C,iBAAiB,GAAG,IAAI,GAAG2D,WAAW;AAC5DlB,cAAAA,WAAW,EAAEY,gBAAAA;AAAgB,aAAA,CAAA,CAAA;AAEjC,WAAA;AACA,UAAA,MAAMM,WAAW,GAAI,CAAA5G,OAAO,aAAPA,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAPA,OAAO,CAAEsF,GAAG,OAAA,CAAAyB,sBAAA,GAAKlB,KAAK,CAACF,cAAc,MAAAoB,IAAAA,IAAAA,sBAAA,KAApBA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,sBAAA,CAAsBzB,GAAG,IAC3DO,KAAK,CAACH,WAAW,CAAC,CAAC,CAAC,GACpBG,KAAK,CAACF,cAAc,CAAA;AACxB,UAAA,OAAAK,wCAAA,CAAAA,wCAAA,CAAA,EAAA,EACKH,KAAK,CAAA,EAAA,EAAA,EAAA;AACRF,YAAAA,cAAc,EAAEE,KAAK,CAAC5C,iBAAiB,GAAG,IAAI,GAAG2D,WAAW;AAC5DlB,YAAAA,WAAW,EAAEG,KAAK,CAACH,WAAW,CAACa,MAAM,CAACU,KAAA,IAAA;cAAA,IAAC;AAAE3B,gBAAAA,GAAAA;AAAI,eAAC,GAAA2B,KAAA,CAAA;cAAA,OAAK3B,GAAG,MAAKtF,OAAO,KAAA,IAAA,IAAPA,OAAO,KAAPA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,OAAO,CAAEsF,GAAG,CAAA,CAAA;AAAA,aAAA,CAAA;AAAC,WAAA,CAAA,CAAA;AAE5E,SAAA;QACA,MAAMgB,gBAAgB,GAAGT,KAAK,CAACH,WAAW,CAACa,MAAM,CAAEF,CAAC,IAAK,EAAEA,CAAC,CAACf,GAAG,MAAKtF,OAAO,KAAA,IAAA,IAAPA,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAPA,OAAO,CAAEsF,GAAG,CAAA,IAAIpE,IAAI,CAAC,CAAC,CAAA;AAC3F,QAAA,MAAM0F,WAAW,GAAI1F,IAAI,IAAK,CAAAlB,OAAO,KAAA,IAAA,IAAPA,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAPA,OAAO,CAAEsF,GAAG,OAAA,CAAAwB,sBAAA,GAAKjB,KAAK,CAACF,cAAc,MAAAmB,IAAAA,IAAAA,sBAAA,KAApBA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,sBAAA,CAAsBxB,GAAG,CAAC,GACrEgB,gBAAgB,CAAC,CAAC,CAAC,GACnBT,KAAK,CAACF,cAAc,CAAA;AACxB,QAAA,OAAAK,wCAAA,CAAAA,wCAAA,CAAA,EAAA,EACKH,KAAK,CAAA,EAAA,EAAA,EAAA;AACRF,UAAAA,cAAc,EAAEE,KAAK,CAAC5C,iBAAiB,GAAG,IAAI,GAAG2D,WAAW;AAC5DlB,UAAAA,WAAW,EAAEY,gBAAAA;AAAgB,SAAA,CAAA,CAAA;AAEjC,OAAA;IACA,KAAKP,cAAsB,CAAA;IAC3B,KAAKA,kBAA0B,CAAA;IAC/B,KAAKA,uBAA+B,CAAA;IACpC,KAAKA,2BAAmC;AAAE,MAAA;QACxC,MAAM;AAAEL,UAAAA,WAAW,GAAG,EAAA;AAAG,SAAC,GAAGG,KAAK,CAAA;AAClC,QAAA,MAAM7F,OAAO,GAAG8F,MAAM,CAAC1F,OAAO,CAAA;QAC9B,MAAM;AAAE8G,UAAAA,kBAAAA;AAAmB,SAAC,GAAGlH,OAAO,CAAA;QACtC,IAAI,EAACA,OAAO,KAAA,IAAA,IAAPA,OAAO,KAAA,KAAA,CAAA,IAAPA,OAAO,CAAEQ,WAAW,CAAE,EAAA,OAAOqF,KAAK,CAAA;QACvC,IAAIA,KAAK,CAACnD,gBAAgB,EAAE;AAAA,UAAA,IAAAyE,sBAAA,CAAA;AAC1B,UAAA,IAAIX,6BAAuB,CAACX,KAAK,CAACnD,gBAAgB,EAAE1C,OAAO,EAAE6F,KAAK,CAACxC,aAAa,CAAC,EAAE;AACjF,YAAA,OAAA2C,wCAAA,CAAAA,wCAAA,CAAA,EAAA,EACKH,KAAK,CAAA,EAAA,EAAA,EAAA;AACRH,cAAAA,WAAW,EAAEe,oCAA8B,CAACf,WAAW,EAAE1F,OAAO,CAAA;AAAC,aAAA,CAAA,CAAA;AAErE,WAAA;UACA,MAAM4G,WAAW,GAAI,CAAA5G,OAAO,aAAPA,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAPA,OAAO,CAAEsF,GAAG,QAAA6B,sBAAA,GAAKtB,KAAK,CAACF,cAAc,cAAAwB,sBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAApBA,sBAAA,CAAsB7B,GAAG,CAAA,GAC3DO,KAAK,CAACH,WAAW,CAACG,KAAK,CAACH,WAAW,CAAC,CAAC,CAAC,CAACJ,GAAG,MAAKtF,OAAO,KAAA,IAAA,IAAPA,OAAO,KAAPA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,OAAO,CAAEsF,GAAG,CAAA,GAAG,CAAC,GAAG,CAAC,CAAA;AACrE;YACEO,KAAK,CAACF,cAAc,CAAA;AACxB,UAAA,OAAAK,wCAAA,CAAAA,wCAAA,CAAA,EAAA,EACKH,KAAK,CAAA,EAAA,EAAA,EAAA;AACRF,YAAAA,cAAc,EAAEE,KAAK,CAAC5C,iBAAiB,GAAG,IAAI,GAAG2D,WAAW;AAC5DlB,YAAAA,WAAW,EAAEG,KAAK,CAACH,WAAW,CAACa,MAAM,CAACa,KAAA,IAAA;cAAA,IAAC;AAAE9B,gBAAAA,GAAAA;AAAI,eAAC,GAAA8B,KAAA,CAAA;cAAA,OAAK9B,GAAG,MAAKtF,OAAO,KAAA,IAAA,IAAPA,OAAO,KAAPA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,OAAO,CAAEsF,GAAG,CAAA,CAAA;AAAA,aAAA,CAAA;AAAC,WAAA,CAAA,CAAA;AAE5E,SAAA;AACA;QACA,IAAI4B,kBAAkB,KAAK,CAAC,EAAE;AAC5B,UAAA,MAAMvB,cAAc,GAAGD,WAAW,CAAC5E,IAAI,CAACuG,KAAA,IAAA;YAAA,IAAC;AAAE/B,cAAAA,GAAAA;AAAI,aAAC,GAAA+B,KAAA,CAAA;YAAA,OAAK/B,GAAG,MAAKtF,OAAO,KAAA,IAAA,IAAPA,OAAO,KAAPA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,OAAO,CAAEsF,GAAG,CAAA,CAAA;WAAC,CAAA,CAAA;AAC1E,UAAA,MAAMgC,kBAAkB,GAAG3B,cAAc,IAAIA,cAAc,CAACuB,kBAAkB,CAAA;UAC9E,IAAII,kBAAkB,KAAK,CAAC,EAAE;AAC5B,YAAA,OAAAtB,wCAAA,CAAAA,wCAAA,CAAA,EAAA,EACKH,KAAK,CAAA,EAAA,EAAA,EAAA;cACRH,WAAW,EAAEG,KAAK,CAACH,WAAW,CAACU,GAAG,CAAEM,EAAE,IAAMA,EAAE,CAACpB,GAAG,MAAKtF,OAAO,KAAPA,IAAAA,IAAAA,OAAO,KAAPA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,OAAO,CAAEsF,GAAG,CAAA,GAAGtF,OAAO,GAAG0G,EAAG,CAAA;AAAC,aAAA,CAAA,CAAA;AAExF,WAAA;AACF,SAAA;AACA,QAAA,OAAAV,wCAAA,CAAAA,wCAAA,CAAA,EAAA,EACKH,KAAK,CAAA,EAAA,EAAA,EAAA;UACRH,WAAW,EAAE,CACX1F,OAAO,EACP,GAAG6F,KAAK,CAACH,WAAW,CAACa,MAAM,CAACgB,KAAA,IAAA;YAAA,IAAC;AAAEjC,cAAAA,GAAAA;AAAI,aAAC,GAAAiC,KAAA,CAAA;AAAA,YAAA,OAAKjC,GAAG,KAAKQ,MAAM,CAAC1F,OAAO,CAACkF,GAAG,CAAA;WAAC,CAAA,CAAA;AACrE,SAAA,CAAA,CAAA;AAEL,OAAA;IACA,KAAKS,mBAA2B;AAC9B,MAAA,OAAAC,wCAAA,CAAAA,wCAAA,CAAA,EAAA,EACKH,KAAK,CAAA,EAAA,EAAA,EAAA;QACRF,cAAc,EAAEG,MAAM,CAAC1F,OAAAA;AAAO,OAAA,CAAA,CAAA;IAElC,KAAK2F,uBAA+B;AAAE,MAAA;AACpC,QAAA,OAAAC,wCAAA,CAAAA,wCAAA,CAAA,EAAA,EACKH,KAAK,CAAA,EAAA,EAAA,EAAA;AACRH,UAAAA,WAAW,EAAEG,KAAK,CAACH,WAAW,CAACU,GAAG,CAAEpG,OAAO,IACzC,CAAAA,OAAO,KAAA,IAAA,IAAPA,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAPA,OAAO,CAAEsF,GAAG,MAAKQ,MAAM,CAAC1F,OAAO,CAACkF,GAAG,GAAGQ,MAAM,CAAC1F,OAAO,GAAGJ,OAAQ,CAAA;AAAC,SAAA,CAAA,CAAA;AAEtE,OAAA;IACA,KAAK+F,iBAAyB;AAAE,MAAA;AAC9B,QAAA,MAAM/F,OAAO,GAAG8F,MAAM,CAAC1F,OAAO,CAAA;QAC9B,IAAIyF,KAAK,CAACnD,gBAAgB,EAAE;AAAA,UAAA,IAAA8E,sBAAA,CAAA;AAC1B,UAAA,IAAIhB,6BAAuB,CAACX,KAAK,CAACnD,gBAAgB,EAAE1C,OAAO,EAAE6F,KAAK,CAACxC,aAAa,CAAC,EAAE;AACjF,YAAA,OAAA2C,wCAAA,CAAAA,wCAAA,CAAA,EAAA,EACKH,KAAK,CAAA,EAAA,EAAA,EAAA;AACRH,cAAAA,WAAW,EAAEe,oCAA8B,CAACZ,KAAK,CAACH,WAAW,EAAE1F,OAAO,CAAA;AAAC,aAAA,CAAA,CAAA;AAE3E,WAAA;UACA,MAAM4G,WAAW,GAAI,CAAA5G,OAAO,aAAPA,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAPA,OAAO,CAAEsF,GAAG,QAAAkC,sBAAA,GAAK3B,KAAK,CAACF,cAAc,cAAA6B,sBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAApBA,sBAAA,CAAsBlC,GAAG,CAAA,GAC3DO,KAAK,CAACH,WAAW,CAACG,KAAK,CAACH,WAAW,CAAC,CAAC,CAAC,CAACJ,GAAG,MAAKtF,OAAO,KAAA,IAAA,IAAPA,OAAO,KAAPA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,OAAO,CAAEsF,GAAG,CAAA,GAAG,CAAC,GAAG,CAAC,CAAA;AACrE;YACEO,KAAK,CAACF,cAAc,CAAA;AACxB,UAAA,OAAAK,wCAAA,CAAAA,wCAAA,CAAA,EAAA,EACKH,KAAK,CAAA,EAAA,EAAA,EAAA;AACRH,YAAAA,WAAW,EAAEG,KAAK,CAACH,WAAW,CAACa,MAAM,CAACkB,KAAA,IAAA;cAAA,IAAC;AAAEnC,gBAAAA,GAAAA;AAAI,eAAC,GAAAmC,KAAA,CAAA;cAAA,OAAKnC,GAAG,MAAKtF,OAAO,KAAA,IAAA,IAAPA,OAAO,KAAPA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,OAAO,CAAEsF,GAAG,CAAA,CAAA;aAAC,CAAA;AACxEK,YAAAA,cAAc,EAAEE,KAAK,CAAC5C,iBAAiB,GAAG,IAAI,GAAG2D,WAAAA;AAAW,WAAA,CAAA,CAAA;AAEhE,SAAA;AACA,QAAA,OAAAZ,wCAAA,CAAAA,wCAAA,CAAA,EAAA,EACKH,KAAK,CAAA,EAAA,EAAA,EAAA;UACRH,WAAW,EAAEG,KAAK,CAACH,WAAW,CAACU,GAAG,CAAEM,EAAE,IAAK;YACzC,IAAIA,EAAE,CAACpB,GAAG,MAAKtF,OAAO,KAAPA,IAAAA,IAAAA,OAAO,KAAPA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,OAAO,CAAEsF,GAAG,CAAE,EAAA;AAC3B;cACAoB,EAAE,CAACgB,QAAQ,GAAG,IAAI,CAAA;AAClB,cAAA,OAAOhB,EAAE,CAAA;AACX,aAAA;AACA,YAAA,OAAOA,EAAE,CAAA;WACV,CAAA;AAAC,SAAA,CAAA,CAAA;AAEN,OAAA;IACA,KAAKX,mBAA2B;AAAE,MAAA;AAChC,QAAA,MAAM/F,OAAO,GAAG8F,MAAM,CAAC1F,OAAO,CAAA;QAC9B,IAAIyF,KAAK,CAACnD,gBAAgB,EAAE;AAAA,UAAA,IAAAiF,sBAAA,CAAA;AAC1B,UAAA,IAAInB,6BAAuB,CAACX,KAAK,CAACnD,gBAAgB,EAAE1C,OAAO,EAAE6F,KAAK,CAACxC,aAAa,CAAC,EAAE;AACjF,YAAA,OAAA2C,wCAAA,CAAAA,wCAAA,CAAA,EAAA,EACKH,KAAK,CAAA,EAAA,EAAA,EAAA;AACRH,cAAAA,WAAW,EAAEe,oCAA8B,CAACZ,KAAK,CAACH,WAAW,EAAE1F,OAAO,CAAA;AAAC,aAAA,CAAA,CAAA;AAE3E,WAAA;UACA,MAAM4G,WAAW,GAAI,CAAA5G,OAAO,aAAPA,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAPA,OAAO,CAAEsF,GAAG,QAAAqC,sBAAA,GAAK9B,KAAK,CAACF,cAAc,cAAAgC,sBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAApBA,sBAAA,CAAsBrC,GAAG,CAAA,GAC3DO,KAAK,CAACH,WAAW,CAACG,KAAK,CAACH,WAAW,CAAC,CAAC,CAAC,CAACJ,GAAG,MAAKtF,OAAO,KAAA,IAAA,IAAPA,OAAO,KAAPA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,OAAO,CAAEsF,GAAG,CAAA,GAAG,CAAC,GAAG,CAAC,CAAA;AACrE;YACEO,KAAK,CAACF,cAAc,CAAA;AACxB,UAAA,OAAAK,wCAAA,CAAAA,wCAAA,CAAA,EAAA,EACKH,KAAK,CAAA,EAAA,EAAA,EAAA;AACRH,YAAAA,WAAW,EAAEG,KAAK,CAACH,WAAW,CAACa,MAAM,CAACqB,KAAA,IAAA;cAAA,IAAC;AAAEtC,gBAAAA,GAAAA;AAAI,eAAC,GAAAsC,KAAA,CAAA;cAAA,OAAKtC,GAAG,MAAKtF,OAAO,KAAA,IAAA,IAAPA,OAAO,KAAPA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,OAAO,CAAEsF,GAAG,CAAA,CAAA;aAAC,CAAA;AACxEK,YAAAA,cAAc,EAAEE,KAAK,CAAC5C,iBAAiB,GAAG,IAAI,GAAG2D,WAAAA;AAAW,WAAA,CAAA,CAAA;AAEhE,SAAA;AACA,QAAA,OAAAZ,wCAAA,CAAAA,wCAAA,CAAA,EAAA,EACKH,KAAK,CAAA,EAAA,EAAA,EAAA;UACRH,WAAW,EAAEG,KAAK,CAACH,WAAW,CAACU,GAAG,CAAEM,EAAE,IAAK;YACzC,IAAIA,EAAE,CAACpB,GAAG,MAAKtF,OAAO,KAAPA,IAAAA,IAAAA,OAAO,KAAPA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,OAAO,CAAEsF,GAAG,CAAE,EAAA;AAC3B;cACAoB,EAAE,CAACgB,QAAQ,GAAG,KAAK,CAAA;AACnB,cAAA,OAAOhB,EAAE,CAAA;AACX,aAAA;AACA,YAAA,OAAOA,EAAE,CAAA;WACV,CAAA;AAAC,SAAA,CAAA,CAAA;AAEN,OAAA;IACA,KAAKX,uBAA+B;AAAE,MAAA;QACpC,IAAIF,KAAK,CAACnD,gBAAgB,EAAE;AAC1B,UAAA,IAAI8D,6BAAuB,CAACX,KAAK,CAACnD,gBAAgB,EAAEoD,MAAM,CAAC1F,OAAO,EAAEyF,KAAK,CAACxC,aAAa,CAAC,EAAE;AACxF,YAAA,OAAA2C,wCAAA,CAAAA,wCAAA,CAAA,EAAA,EACKH,KAAK,CAAA,EAAA,EAAA,EAAA;AACRH,cAAAA,WAAW,EAAE,CACXI,MAAM,CAAC1F,OAAO,EACd,GAAGyF,KAAK,CAACH,WAAW,CAACa,MAAM,CAAEvG,OAAO,IAAK,CAAAA,OAAO,KAAA,IAAA,IAAPA,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAPA,OAAO,CAAEsF,GAAG,MAAKQ,MAAM,CAAC1F,OAAO,CAACkF,GAAG,CAAC,CAAA;AAC9E,aAAA,CAAA,CAAA;AAEL,WAAA;AACA,UAAA,OAAOO,KAAK,CAAA;AACd,SAAA;AACA,QAAA,OAAAG,wCAAA,CAAAA,wCAAA,CAAA,EAAA,EACKH,KAAK,CAAA,EAAA,EAAA,EAAA;AACRH,UAAAA,WAAW,EAAE,CACXI,MAAM,CAAC1F,OAAO,EACd,GAAGyF,KAAK,CAACH,WAAW,CAACa,MAAM,CAAEvG,OAAO,IAAK,CAAAA,OAAO,KAAA,IAAA,IAAPA,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAPA,OAAO,CAAEsF,GAAG,MAAKQ,MAAM,CAAC1F,OAAO,CAACkF,GAAG,CAAC,CAAA;AAC9E,SAAA,CAAA,CAAA;AAEL,OAAA;IACA,KAAKS,2BAAmC;AACtC,MAAA,OAAAC,wCAAA,CAAAA,wCAAA,CAAA,EAAA,EACKH,KAAK,CAAA,EAAA,EAAA,EAAA;AACRxC,QAAAA,aAAa,EAAEyC,MAAM,CAAC1F,OAAO,CAACiD,aAAa;AAC3CX,QAAAA,gBAAgB,EAAEoD,MAAM,CAAC1F,OAAO,CAACsC,gBAAAA;AAAgB,OAAA,CAAA,CAAA;AAErD,IAAA;AACE,MAAA,OAAOmD,KAAK,CAAA;AAAC,GAAA;AAEnB;;ACvRA,SAASgC,mBAAmBA,CAAArI,IAAA,EAAAwC,KAAA,EAON;EAAA,IAPO;IAC3B8F,gBAAgB;IAChBC,QAAQ;AACRtI,IAAAA,GAAAA;AACY,GAAC,GAAAD,IAAA,CAAA;EAAA,IAAE;IACfI,MAAM;AACND,IAAAA,qBAAAA;AACW,GAAC,GAAAqC,KAAA,CAAA;EACZ,OAAOgG,eAAS,CAAC,MAAM;AACrB,IAAA,IAAIF,gBAAgB,EAAE;AACpBlI,MAAAA,MAAM,CAACK,IAAI,CAAC,iDAAiD,EAAE;AAAE6H,QAAAA,gBAAAA;AAAiB,OAAC,CAAC,CAAA;AACpF,MAAA,MAAMG,aAAa,GAAGF,QAAQ,KAARA,IAAAA,IAAAA,QAAQ,uBAARA,QAAQ,CAAEjH,IAAI,CAACd,OAAO,IAAIA,OAAO,CAACsF,GAAG,KAAKwC,gBAAgB,CAAC,CAAA;AACjF,MAAA,IAAIG,aAAa,EAAE;AACjBtI,QAAAA,qBAAqB,CAAC;UACpBO,IAAI,EAAEgI,mBAAsC;AAC5C9H,UAAAA,OAAO,EAAE6H,aAAAA;AACX,SAAC,CAAC,CAAA;AACJ,OAAC,MAAM;AAAA,QAAA,IAAAE,iBAAA,CAAA;AACLvI,QAAAA,MAAM,CAACK,IAAI,CAAC,2DAA2D,EAAE;AAAE6H,UAAAA,gBAAAA;AAAiB,SAAC,CAAC,CAAA;QAC9FrI,GAAG,KAAA,IAAA,IAAHA,GAAG,KAAA0I,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,CAAAA,iBAAA,GAAH1I,GAAG,CAAEoC,YAAY,MAAAsG,IAAAA,IAAAA,iBAAA,uBAAjBA,iBAAA,CAAmBC,UAAU,CAACN,gBAAgB,CAAC,CAC5CtE,IAAI,CAAExD,OAAO,IAAK;AACjBL,UAAAA,qBAAqB,CAAC;YACpBO,IAAI,EAAEgI,sBAAyC;YAC/C9H,OAAO,EAAE,CAACJ,OAAO,CAAA;AACnB,WAAC,CAAC,CAAA;AACFL,UAAAA,qBAAqB,CAAC;YACpBO,IAAI,EAAEgI,mBAAsC;AAC5C9H,YAAAA,OAAO,EAAEJ,OAAAA;AACX,WAAC,CAAC,CAAA;AACJ,SAAC,CAAC,CACDkE,KAAK,CAAC,MAAM;AACXtE,UAAAA,MAAM,CAACwD,OAAO,CAAC,+CAA+C,CAAC,CAAA;AACjE,SAAC,CAAC,CAAA;AACN,OAAA;AACF,KAAA;AACF,GAAC,EAAE,CAAC0E,gBAAgB,CAAC,CAAC,CAAA;AACxB;;ACkEA,MAAMO,kBAAkB,gBAAGC,yBAAK,CAACC,aAAa,CAAsC;AAClFC,EAAAA,kBAAkB,EAAE,IAAI;AACxBC,EAAAA,gBAAgB,EAAE,IAAI;AACtBC,EAAAA,qBAAqB,EAAE,IAAI;AAC3BC,EAAAA,aAAa,EAAE,IAAI;AACnBC,EAAAA,oBAAoB,EAAE,IAAI;AAC1B7F,EAAAA,eAAe,EAAE,IAAI;EACrB8F,OAAO,EAAE,EAAE;AACXC,EAAAA,SAAS,EAAE,IAAI;AACftD,EAAAA,WAAW,EAAE,KAAK;AAClBC,EAAAA,OAAO,EAAE,KAAK;AACdC,EAAAA,WAAW,EAAE,EAAE;AACfC,EAAAA,cAAc,EAAE,IAAI;EACpBjD,gBAAgB,EAAE,EAAE;AACpBW,EAAAA,aAAa,EAAE,IAAI;AACnB1D,EAAAA,qBAAqB,EAAE,IAAI;AAC3BoJ,EAAAA,aAAa,EAAE,IAAI;AACnBC,EAAAA,cAAc,EAAE,EAAA;AAClB,CAAC,CAAC,CAAA;AAEIC,MAAAA,mBAAuD,GAAIC,KAA+B,IAAK;AAAA,EAAA,IAAAC,gBAAA,CAAA;AACnG;EACA,MAAM;IACJC,QAAQ;IACRN,SAAS;IACTN,kBAAkB;IAClBC,gBAAgB;IAChBI,OAAO;IACPD,oBAAoB;IACpBD,aAAa;IACbD,qBAAqB;IACrB1F,eAAe;IACfqG,kBAAkB;IAClBvB,gBAAgB;AAChBwB,IAAAA,wBAAwB,GAAG,IAAI;AAC/BC,IAAAA,6BAA6B,GAAG,IAAA;AAClC,GAAC,GAAGL,KAAK,CAAA;AACT;AACA;AACA,EAAA,MAAMjG,iBAAiB,GAAG,CAAAiG,KAAK,KAALA,IAAAA,IAAAA,KAAK,KAALA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,KAAK,CAAEjG,iBAAiB,KAAI,CAAC,CAAC6E,gBAAgB,CAAA;EACxE,MAAM/E,eAAe,GAAG,CAAAmG,KAAK,KAAA,IAAA,IAALA,KAAK,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAALA,KAAK,CAAEnG,eAAe,KAAIyG,UAAI,CAAA;AACtD;EACA,MAAMC,WAAW,GAAGC,uBAAuB,EAAE,CAAA;EAC7C,MAAM;IAAEC,MAAM;AAAEC,IAAAA,MAAAA;AAAO,GAAC,GAAGH,WAAW,CAAA;EACtC,MAAM;AAAEI,IAAAA,QAAAA;AAAS,GAAC,GAAGD,MAAM,CAAA;EAC3B,MAAM;IAAEjF,MAAM;IAAE/E,MAAM;AAAEkK,IAAAA,oBAAAA;AAAqB,GAAC,GAAGH,MAAM,CAAA;EACvD,MAAM;IACJzG,wBAAwB;AACxBC,IAAAA,sBAAsB,GAAG,KAAK;AAC9B4G,IAAAA,qCAAqC,GAAG,KAAK;AAC7CC,IAAAA,0CAA0C,GAAG,KAAA;AAC/C,GAAC,GAAGL,MAAM,CAAA;EACV,MAAMlK,GAAG,GAAGoK,QAAQ,KAAA,IAAA,IAARA,QAAQ,KAARA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,QAAQ,CAAEpK,GAAwB,CAAA;;AAE9C;AACA;EACA,MAAMwK,6BAA6B,GAAGzB,kBAAkB,KAAImB,MAAM,aAANA,MAAM,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAANA,MAAM,CAAEnB,kBAAkB,CAAA,CAAA;EACtF,MAAM0B,wBAAwB,GAAGP,MAAM,KAAA,IAAA,IAANA,MAAM,KAANA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,MAAM,CAAEQ,iBAAiB,CAAA;EAC1D,MAAMC,iBAAiB,GAAG3B,gBAAgB,KAAIkB,MAAM,aAANA,MAAM,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAANA,MAAM,CAAElB,gBAAgB,CAAA,CAAA;EAEtE,MAAMxG,0BAA0B,GAAG4G,OAAO,KAAA,IAAA,IAAPA,OAAO,KAAPA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,OAAO,CAAEnG,gBAAgB,CAAA;EAC5D,MAAM2H,kCAAkC,GAAGxB,OAAO,KAAA,IAAA,IAAPA,OAAO,KAAPA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,OAAO,CAAEyB,wBAAwB,CAAA;EAE5E,MAAMC,aAAa,GAAGV,QAAQ,KAAA,IAAA,IAARA,QAAQ,KAARA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,QAAQ,CAAErE,WAAW,CAAA;EAE3C,MAAM,CAACgF,gBAAgB,EAAE7K,qBAAqB,CAAC,GAAG8K,gBAAU,CAC1DC,OAAmB,EACnBC,uBAAuB,CACmC,CAAA;EAC5D,MAAM;AAAEhF,IAAAA,cAAAA;AAAe,GAAC,GAAG6E,gBAAgB,CAAA;EAE3C,MAAM,CAACzB,aAAa,EAAEjG,gBAAgB,CAAC,GAAG8H,cAAQ,CAAiC,IAAI,CAAC,CAAA;EACxF,MAAM,CAAC5B,cAAc,EAAE6B,iBAAiB,CAAC,GAAGD,cAAQ,CAAsB,EAAE,CAAC,CAAA;AAE7E5C,EAAAA,eAAS,CAAC,MAAM;AACd,IAAA,MAAM1D,UAAU,GAAGI,aAAa,CAACC,MAAM,EAAEhF,qBAAqB,CAAC,CAAA;AAC/D,IAAA,OAAO,MAAM;MACX0E,mBAAmB,CAACC,UAAU,CAAC,CAAA;KAChC,CAAA;AACH,GAAC,EAAE,CAACiG,aAAa,CAAC,CAAC,CAAA;AAEnBvC,EAAAA,eAAS,CAAC,MAAM;IACd,MAAMtI,mBAAmB,GAAGoL,WAAM,EAAE,CAAA;AACpC,IAAA,IAAIP,aAAa,EAAE;AACjB3K,MAAAA,MAAM,CAACK,IAAI,CAAC,oCAAoC,CAAC,CAAA;AACjD2C,MAAAA,gBAAgB,CAAC;QACfnD,GAAG;QACHC,mBAAmB;QACnBC,qBAAqB;QACrBmD,gBAAgB;QAChBC,eAAe;QACfd,0BAA0B;QAC1BrC,MAAM;QACNoD,eAAe;QACfC,iBAAiB;QACjBC,wBAAwB;AACxBC,QAAAA,sBAAAA;AACF,OAAC,CAAC,CAAA;AACJ,KAAC,MAAM;AAAA,MAAA,IAAAgF,iBAAA,CAAA;AACLvI,MAAAA,MAAM,CAACK,IAAI,CAAC,uCAAuC,CAAC,CAAA;AACpD;AACA,MAAA,IAAIR,GAAG,KAAA,IAAA,IAAHA,GAAG,KAAA,KAAA,CAAA,IAAA,CAAA0I,iBAAA,GAAH1I,GAAG,CAAEoC,YAAY,cAAAsG,iBAAA,KAAA,KAAA,CAAA,IAAjBA,iBAAA,CAAmB4C,yBAAyB,EAAE;AAChDtL,QAAAA,GAAG,CAACoC,YAAY,CAACkJ,yBAAyB,CAACrL,mBAAmB,CAAC,CAAA;AACjE,OAAA;AACA;MACAoD,gBAAgB,CAAC,IAAI,CAAC,CAAA;AACtB;AACAnD,MAAAA,qBAAqB,CAAC;QACpBO,IAAI,EAAE8K,kBAAqC;AAC3C5K,QAAAA,OAAO,EAAE,IAAA;AACX,OAAC,CAAC,CAAA;AACJ,KAAA;AACA,IAAA,OAAO,MAAM;AAAA,MAAA,IAAA6K,kBAAA,CAAA;AACXrL,MAAAA,MAAM,CAACK,IAAI,CAAC,uCAAuC,CAAC,CAAA;AACpD,MAAA,IAAIR,GAAG,KAAA,IAAA,IAAHA,GAAG,KAAA,KAAA,CAAA,IAAA,CAAAwL,kBAAA,GAAHxL,GAAG,CAAEoC,YAAY,cAAAoJ,kBAAA,KAAA,KAAA,CAAA,IAAjBA,kBAAA,CAAmBF,yBAAyB,EAAE;AAAA,QAAA,IAAAG,kBAAA,CAAA;AAChDzL,QAAAA,GAAG,aAAHA,GAAG,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAAyL,kBAAA,GAAHzL,GAAG,CAAEoC,YAAY,MAAAqJ,IAAAA,IAAAA,kBAAA,uBAAjBA,kBAAA,CAAmBH,yBAAyB,CAACrL,mBAAmB,CAAC,CAAA;AACnE,OAAA;KACD,CAAA;GACF,EAAE,CAAC6K,aAAa,EAAEtI,0BAA0B,EAAEe,eAAe,CAAC,CAAC,CAAA;AAEhEgF,EAAAA,eAAS,CAAC,MAAM;AAAA,IAAA,IAAAmD,kBAAA,CAAA;IACd,IAAIC,eAAe,GAAG,EAAE,CAAA;AACxB,IAAA,IAAI3L,GAAG,KAAA,IAAA,IAAHA,GAAG,KAAA,KAAA,CAAA,IAAA,CAAA0L,kBAAA,GAAH1L,GAAG,CAAEoC,YAAY,cAAAsJ,kBAAA,KAAA,KAAA,CAAA,IAAjBA,kBAAA,CAAmBrJ,sBAAsB,EAAE;AAAA,MAAA,IAAAuJ,kBAAA,CAAA;MAC7CD,eAAe,GAAGN,WAAM,EAAE,CAAA;AAC1B,MAAA,MAAMQ,OAAO,GAAG,IAAIxL,gCAAmB,CAAC;QACtCyL,qBAAqB,EAAGvL,OAAO,IAAK;AAAA,UAAA,IAAAwL,qBAAA,CAAA;AAClC,UAAA,MAAMC,iBAAiB,GAAGzL,OAAO,KAAPA,IAAAA,IAAAA,OAAO,wBAAAwL,qBAAA,GAAPxL,OAAO,CAAE0L,cAAc,EAAE,MAAA,IAAA,IAAAF,qBAAA,KAAzBA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,qBAAA,CAA2BtF,MAAM,CAAA;AAC3D,UAAA,MAAMzC,WAAW,GAAGuF,cAAc,CAACzC,MAAM,CAACG,EAAE,IAAIA,EAAE,CAACpB,GAAG,KAAKtF,OAAO,CAACsF,GAAG,CAAC,CAAA;UACvE,IAAImG,iBAAiB,GAAG,CAAC,EAAE;AACzBZ,YAAAA,iBAAiB,CAAC,CAAC,GAAGpH,WAAW,EAAEzD,OAAO,CAAC,CAAC,CAAA;AAC9C,WAAC,MAAM;YACL6K,iBAAiB,CAACpH,WAAW,CAAC,CAAA;AAChC,WAAA;SACD;QACDkI,2BAA2BA,CAAC3L,OAAO,EAAE;AACnCL,UAAAA,qBAAqB,CAAC;YACpBO,IAAI,EAAE8K,uBAA0C;AAChD5K,YAAAA,OAAO,EAAEJ,OAAAA;AACX,WAAC,CAAC,CAAA;SACH;QACD4L,gCAAgCA,CAAC5L,OAAO,EAAE;AACxCL,UAAAA,qBAAqB,CAAC;YACpBO,IAAI,EAAE8K,uBAA0C;AAChD5K,YAAAA,OAAO,EAAEJ,OAAAA;AACX,WAAC,CAAC,CAAA;SACH;QACDuB,gBAAgBA,CAACvB,OAAO,EAAE;AACxBL,UAAAA,qBAAqB,CAAC;YACpBO,IAAI,EAAE8K,uBAA0C;AAChD5K,YAAAA,OAAO,EAAEJ,OAAAA;AACX,WAAC,CAAC,CAAA;AACFP,UAAAA,GAAG,CAACoC,YAAY,CAACgK,sBAAsB,CAAC7L,OAAO,CAACsF,GAAG,CAAC,CACjD9B,IAAI,CAAEkD,EAAE,IAAK;AACZ/G,YAAAA,qBAAqB,CAAC;cACpBO,IAAI,EAAE8K,uBAA0C;AAChD5K,cAAAA,OAAO,EAAEsG,EAAAA;AACX,aAAC,CAAC,CAAA;AACJ,WAAC,CAAC,CAAA;SACL;QACDoF,iBAAiBA,CAAC9L,OAAO,EAAE;AACzBL,UAAAA,qBAAqB,CAAC;YACpBO,IAAI,EAAE8K,uBAA0C;AAChD5K,YAAAA,OAAO,EAAEJ,OAAAA;AACX,WAAC,CAAC,CAAA;AACFP,UAAAA,GAAG,CAACoC,YAAY,CAACgK,sBAAsB,CAAC7L,OAAO,CAACsF,GAAG,CAAC,CACjD9B,IAAI,CAAEkD,EAAE,IAAK;AACZ/G,YAAAA,qBAAqB,CAAC;cACpBO,IAAI,EAAE8K,uBAA0C;AAChD5K,cAAAA,OAAO,EAAEsG,EAAAA;AACX,aAAC,CAAC,CAAA;AACJ,WAAC,CAAC,CAAA;AACN,SAAA;AACF,OAAC,CAAC,CAAA;AACFjH,MAAAA,GAAG,aAAHA,GAAG,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA4L,kBAAA,GAAH5L,GAAG,CAAEoC,YAAY,MAAA,IAAA,IAAAwJ,kBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAjBA,kBAAA,CAAmBvJ,sBAAsB,CAACsJ,eAAe,EAAEE,OAAO,CAAC,CAAA;AACrE,KAAA;AACA,IAAA,OAAO,MAAM;AAAA,MAAA,IAAAS,kBAAA,CAAA;AACX,MAAA,IAAItM,GAAG,KAAHA,IAAAA,IAAAA,GAAG,gBAAAsM,kBAAA,GAAHtM,GAAG,CAAEoC,YAAY,cAAAkK,kBAAA,KAAA,KAAA,CAAA,IAAjBA,kBAAA,CAAmBhB,yBAAyB,IAAIK,eAAe,KAAK,EAAE,EAAE;AAC1E3L,QAAAA,GAAG,CAACoC,YAAY,CAACkJ,yBAAyB,CAACK,eAAe,CAAC,CAAA;AAC7D,OAAA;KACD,CAAA;AACH,GAAC,EAAE,CAAC3L,GAAG,aAAHA,GAAG,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA0J,gBAAA,GAAH1J,GAAG,CAAEmB,WAAW,cAAAuI,gBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAhBA,gBAAA,CAAkBnI,MAAM,CAAC,CAAC,CAAA;AAE9B,EAAA,MAAMgL,QAAQ,GAAGC,aAAO,CAAC,MAAM;IAC7B,OAAO;AACL3B,MAAAA,wBAAwB,EAAED,kCAAkC;AAC5D3H,MAAAA,gBAAgB,EAAET,0BAAAA;KACnB,CAAA;AACH,GAAC,EAAE,CACDoI,kCAAkC,EAClCpI,0BAA0B,CAC3B,CAAC,CAAA;EAEF,MAAM;AAAEyD,IAAAA,WAAAA;AAAY,GAAC,GAAG8E,gBAAgB,CAAA;AACxC,EAAA,MAAM0B,cAAc,GAAIlJ,eAAe,IAAI,OAAOA,eAAe,KAAK,UAAU,GAC5EA,eAAe,CAAC0C,WAAW,CAAC,GAC5BA,WAAW,CAAA;AAEf,EAAA,IAAIwG,cAAc,CAAChG,MAAM,KAAKR,WAAW,CAACQ,MAAM,EAAE;AAChD,IAAA,MAAM9C,OAAO,GAAI,CAAA;AACrB,0CAA2C,CAAA,CAAA;AACvC;AACA+I,IAAAA,OAAO,CAACC,IAAI,CAAChJ,OAAO,EAAE;AAAEiJ,MAAAA,MAAM,EAAE3G,WAAW;AAAE4G,MAAAA,KAAK,EAAEJ,cAAAA;AAAe,KAAC,CAAC,CAAA;AACrEtM,IAAAA,MAAM,CAACwD,OAAO,CAACA,OAAO,EAAE;AAAEiJ,MAAAA,MAAM,EAAE3G,WAAW;AAAE4G,MAAAA,KAAK,EAAEJ,cAAAA;AAAe,KAAC,CAAC,CAAA;AACzE,GAAA;;AAEA;AACAlE,EAAAA,eAAS,CAAC,MAAM;AACd,IAAA,IAAI,CAACvI,GAAG,IAAI,CAACA,GAAG,CAACoC,YAAY,IAAI,CAAC8D,cAAc,IAAI,EAACA,cAAc,KAAdA,IAAAA,IAAAA,cAAc,eAAdA,cAAc,CAAEL,GAAG,CAAE,EAAA;AACxE,MAAA,OAAA;AACF,KAAA;AACA7F,IAAAA,GAAG,CAACoC,YAAY,CAACuG,UAAU,CAACzC,cAAc,CAACL,GAAG,CAAC,CAAC9B,IAAI,CAAE3B,YAAY,IAAK;AACrE,MAAA,IAAIA,YAAY,EAAE;QAChBkB,eAAe,CAAClB,YAAY,CAAC,CAAA;AAC/B,OAAC,MAAM;QACLkB,eAAe,CAAC,IAAI,CAAC,CAAA;AACvB,OAAA;AACF,KAAC,CAAC,CAAA;GACH,EAAE,CAAC4C,cAAc,KAAdA,IAAAA,IAAAA,cAAc,uBAAdA,cAAc,CAAEL,GAAG,CAAC,CAAC,CAAA;;AAEzB;AACAuC,EAAAA,mBAAmB,CAAC;IAClBC,gBAAgB;AAChBC,IAAAA,QAAQ,EAAEmE,cAAc;AACxBzM,IAAAA,GAAAA;AACF,GAAC,EAAE;IACDG,MAAM;AACND,IAAAA,qBAAAA;AACF,GAAC,CAAC,CAAA;AAEF,EAAA,oBACE2I,yBAAA,CAAAiE,aAAA,CAAClE,kBAAkB,CAACmE,QAAQ,EAAA;IAACC,KAAK,EAAAzG,wCAAA,CAAAA,wCAAA,CAAA;MAChC8C,SAAS;MACTN,kBAAkB;AAClBK,MAAAA,OAAO,EAAEmD,QAAQ;MACjBpD,oBAAoB;MACpBD,aAAa;MACbD,qBAAqB;MACrBW,kBAAkB;MAClBtG,eAAe;MACfC,eAAe;AACfyF,MAAAA,gBAAgB,EAAE2B,iBAAiB;MACnCzK,qBAAqB;AACrBoJ,MAAAA,aAAAA;AAAa,KAAA,EACVyB,gBAAgB,CAAA,EAAA,EAAA,EAAA;AACnB9E,MAAAA,WAAW,EAAEwG,cAAc;MAC3BlD,cAAc;AACdM,MAAAA,wBAAwB,EAAGA,wBAAwB,KAAK,IAAI,GAAIA,wBAAwB,GAAGS,qCAAqC;AAChIR,MAAAA,6BAA6B,EAAGA,6BAA6B,KAAK,IAAI,GAAIA,6BAA6B,GAAGS,0CAAAA;AAA0C,KAAA,CAAA;AACpJ,GAAA,eACA1B,yBAAA,CAAAiE,aAAA,CAACG,sCAAmB,EAAA;AAClBlE,IAAAA,kBAAkB,EAAEyB,6BAA8B;AAClDE,IAAAA,iBAAiB,EAAED,wBAAyB;AAC5CJ,IAAAA,oBAAoB,EAAEA,oBAAAA;GAEtBxB,eAAAA,yBAAA,CAAAiE,aAAA,CAAA,KAAA,EAAA;IAAKzD,SAAS,EAAG,yBAAwBA,SAAU,CAAA,CAAA;GAChDM,EAAAA,QAAQ,CACL,CACc,CACM,CAAA;AAElC,EAAC;AAED,SAASuD,qBAAqBA,GAAiC;AAC7D,EAAA,MAAMC,OAAqC,GAAGC,gBAAU,CAACxE,kBAAkB,CAAC,CAAA;AAC5E,EAAA,OAAOuE,OAAO,CAAA;AAChB;;;;;;;;;;"}