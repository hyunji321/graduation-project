{"version":3,"file":"OpenChannelListProvider-b7914f1a.js","sources":["../../src/modules/OpenChannelList/context/OpenChannelListInterfaces.ts","../../src/modules/OpenChannelList/context/dux/actionTypes.ts","../../src/modules/OpenChannelList/context/dux/reducer.ts","../../src/modules/OpenChannelList/context/dux/initialState.ts","../../src/modules/OpenChannelList/context/hooks/useFetchNextCallback.ts","../../src/modules/OpenChannelList/context/hooks/createChannelListQuery.ts","../../src/modules/OpenChannelList/context/hooks/useSetupOpenChannelList.ts","../../src/modules/OpenChannelList/context/hooks/useRefreshOpenChannelList.ts","../../src/modules/OpenChannelList/context/OpenChannelListProvider.tsx"],"sourcesContent":["import { OpenChannel } from '@sendbird/chat/openChannel';\nimport { Dispatch } from 'react';\nimport { Logger } from '../../../lib/SendbirdState';\nimport OpenChannelListActionTypes from './dux/actionTypes';\nimport { FetchNextCallbackType } from './hooks/useFetchNextCallback';\n\nexport interface UserFilledOpenChannelListQuery {\n  // https://sendbird.com/docs/chat/v4/javascript/ref/interfaces/_sendbird_chat_openChannel.OpenChannelListQueryParams.html\n  customTypes?: Array<string>;\n  includeFrozen?: boolean;\n  includeMetaData?: boolean;\n  limit?: number;\n  nameKeyword?: string;\n  urlKeyword?: string;\n}\n\nexport enum OpenChannelListFetchingStatus {\n  EMPTY = 'EMPTY',\n  FETCHING = 'FETCHING',\n  DONE = 'DONE',\n  ERROR = 'ERROR',\n}\n\nexport type OnOpenChannelSelected = (channel: OpenChannel, e?: React.MouseEvent<HTMLDivElement | unknown>) => void;\nexport type OpenChannelListDispatcherType = Dispatch<{ type: OpenChannelListActionTypes, payload: any }>;\n\nexport interface OpenChannelListProviderProps {\n  className?: string;\n  children?: React.ReactElement;\n  queries?: { openChannelListQuery?: UserFilledOpenChannelListQuery };\n  onChannelSelected?: OnOpenChannelSelected;\n}\n\nexport interface OpenChannelListProviderInterface extends OpenChannelListProviderProps {\n  logger: Logger;\n  currentChannel: OpenChannel;\n  allChannels: Array<OpenChannel>;\n  fetchingStatus: OpenChannelListFetchingStatus;\n  customOpenChannelListQuery?: UserFilledOpenChannelListQuery;\n  fetchNextChannels: FetchNextCallbackType;\n  refreshOpenChannelList: () => void;\n  openChannelListDispatcher: OpenChannelListDispatcherType;\n}\n","enum OpenChannelListActionTypes {\n  // actions\n  INIT_OPEN_CHANNEL_LIST_START = 'INIT_OPEN_CHANNEL_LIST_START',\n  INIT_OPEN_CHANNEL_LIST_SUCCESS = 'INIT_OPEN_CHANNEL_LIST_SUCCESS',\n  INIT_OPEN_CHANNEL_LIST_FAILURE = 'INIT_OPEN_CHANNEL_LIST_FAILURE',\n  RESET_OPEN_CHANNEL_LIST = 'RESET_OPEN_CHANNEL_LIST',\n  FETCH_OPEN_CHANNEL_LIST_START = 'FETCH_OPEN_CHANNEL_LIST_START',\n  FETCH_OPEN_CHANNEL_LIST_SUCCESS = 'FETCH_OPEN_CHANNEL_LIST_SUCCESS',\n  FETCH_OPEN_CHANNEL_LIST_FAILURE = 'FETCH_OPEN_CHANNEL_LIST_FAILURE',\n  CREATE_OPEN_CHANNEL = 'CREATE_OPEN_CHANNEL',\n  SET_CURRENT_OPEN_CHANNEL = 'SET_CURRENT_OPEN_CHANNEL',\n  UPDATE_OPEN_CHANNEL_LIST_QUERY = 'UPDATE_OPEN_CHANNEL_LIST_QUERY',\n  UPDATE_OPEN_CHANNEL = 'UPDATE_OPEN_CHANNEL',\n}\n\nexport default OpenChannelListActionTypes;\n","import { OpenChannelListFetchingStatus } from '../OpenChannelListInterfaces';\nimport actionTypes from './actionTypes';\nimport { OpenChannelListInitialInterface } from './initialState';\n\nexport default function reducer(\n  state: OpenChannelListInitialInterface,\n  action: { type: actionTypes, payload: any },\n): OpenChannelListInitialInterface {\n  switch (action.type) {\n    case actionTypes.INIT_OPEN_CHANNEL_LIST_START: {\n      return {\n        ...state,\n        fetchingStatus: OpenChannelListFetchingStatus.FETCHING,\n      };\n    }\n    case actionTypes.INIT_OPEN_CHANNEL_LIST_SUCCESS: {\n      const channelList = action.payload;\n      return {\n        ...state,\n        allChannels: channelList,\n        fetchingStatus: channelList.length > 0\n          ? OpenChannelListFetchingStatus.DONE\n          : OpenChannelListFetchingStatus.EMPTY,\n      };\n    }\n    case actionTypes.INIT_OPEN_CHANNEL_LIST_FAILURE: {\n      return {\n        ...state,\n        allChannels: [],\n        fetchingStatus: OpenChannelListFetchingStatus.ERROR,\n      };\n    }\n    case actionTypes.RESET_OPEN_CHANNEL_LIST: {\n      return {\n        ...state,\n        allChannels: [],\n        fetchingStatus: OpenChannelListFetchingStatus.EMPTY,\n      };\n    }\n    case actionTypes.FETCH_OPEN_CHANNEL_LIST_START: {\n      return state;\n    }\n    case actionTypes.FETCH_OPEN_CHANNEL_LIST_SUCCESS: {\n      return {\n        ...state,\n        allChannels: [...state.allChannels, ...action.payload],\n      };\n    }\n    case actionTypes.FETCH_OPEN_CHANNEL_LIST_FAILURE: {\n      return state;\n    }\n    case actionTypes.CREATE_OPEN_CHANNEL: {\n      return {\n        ...state,\n        currentChannel: action.payload,\n        allChannels: [action.payload, ...state.allChannels],\n      };\n    }\n    case actionTypes.SET_CURRENT_OPEN_CHANNEL: {\n      return {\n        ...state,\n        currentChannel: action.payload,\n      };\n    }\n    case actionTypes.UPDATE_OPEN_CHANNEL_LIST_QUERY: {\n      return {\n        ...state,\n        channelListQuery: action?.payload,\n      };\n    }\n    case actionTypes.UPDATE_OPEN_CHANNEL: {\n      return {\n        ...state,\n        allChannels: state.allChannels.map((channel) => (\n          channel?.url === action.payload?.url ? action.payload : channel\n        )),\n        currentChannel: (state.currentChannel?.url === action?.payload?.url)\n          ? state.currentChannel\n          : action.payload,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import { OpenChannel, OpenChannelListQuery } from '@sendbird/chat/openChannel';\nimport { OpenChannelListFetchingStatus } from '../OpenChannelListInterfaces';\n\nexport interface OpenChannelListInitialInterface {\n  allChannels: Array<OpenChannel>;\n  currentChannel: OpenChannel;\n  fetchingStatus: OpenChannelListFetchingStatus;\n  channelListQuery: OpenChannelListQuery;\n}\n\nexport default {\n  allChannels: [],\n  currentChannel: null,\n  fetchingStatus: OpenChannelListFetchingStatus.EMPTY,\n  channelListQuery: null,\n} as OpenChannelListInitialInterface;\n","import { useCallback } from 'react';\n\nimport { SendbirdError } from '@sendbird/chat';\nimport { OpenChannel, OpenChannelListQuery } from '@sendbird/chat/openChannel';\n\nimport { Logger } from '../../../../lib/SendbirdState';\nimport OpenChannelListActionTypes from '../dux/actionTypes';\nimport { OpenChannelListDispatcherType } from '../OpenChannelListInterfaces';\n\ninterface DynamicParams {\n  sdkInitialized: boolean;\n  openChannelListQuery: OpenChannelListQuery;\n}\ninterface StaticParams {\n  logger: Logger;\n  openChannelListDispatcher: OpenChannelListDispatcherType;\n}\n\nexport type FetchNextCallbackType = (callback: (channels?: Array<OpenChannel>, err?: SendbirdError) => void) => void;\n\nfunction useFetchNextCallback(\n  {\n    sdkInitialized,\n    openChannelListQuery,\n  }: DynamicParams,\n  {\n    logger,\n    openChannelListDispatcher,\n  }: StaticParams,\n): FetchNextCallbackType {\n  return useCallback((callback) => {\n    if (sdkInitialized && openChannelListQuery?.hasNext) {\n      logger.info('OpenChannelList|useFetchNextCallback : Fetch channels');\n      openChannelListDispatcher({\n        type: OpenChannelListActionTypes.FETCH_OPEN_CHANNEL_LIST_START,\n        payload: null,\n      });\n      openChannelListQuery.next()\n        .then((channelList) => {\n          callback(channelList, null);\n          logger.info('OpenChannelList|useFetchNextCallback: Succeeded fetching channels', channelList);\n          openChannelListDispatcher({\n            type: OpenChannelListActionTypes.FETCH_OPEN_CHANNEL_LIST_SUCCESS,\n            payload: channelList,\n          });\n        })\n        .catch((err) => {\n          callback(null, err);\n          logger.error('OpenChannelList|useFetchNextCallback: Failed fetching channels', err);\n          openChannelListDispatcher({\n            type: OpenChannelListActionTypes.FETCH_OPEN_CHANNEL_LIST_FAILURE,\n            payload: null,\n          });\n        });\n    } else {\n      logger.info('OpenChannelList|useFetchNextCallback : There is no more channels');\n    }\n  }, [sdkInitialized, openChannelListQuery]);\n}\n\nexport default useFetchNextCallback;\n","import { OpenChannelListQuery, OpenChannelListQueryParams, SendbirdOpenChat } from '@sendbird/chat/openChannel';\nimport { Logger } from '../../../../lib/SendbirdState';\nimport OpenChannelListActionTypes from '../dux/actionTypes';\nimport { OpenChannelListDispatcherType, UserFilledOpenChannelListQuery } from '../OpenChannelListInterfaces';\n\ninterface createChannelListQueryProps {\n  sdk: SendbirdOpenChat;\n  logMessage: string;\n  openChannelListQuery: UserFilledOpenChannelListQuery;\n  logger: Logger;\n  openChannelListDispatcher: OpenChannelListDispatcherType;\n}\n\nfunction createChannelListQuery({\n  sdk,\n  logMessage,\n  openChannelListQuery,\n  logger,\n  openChannelListDispatcher,\n}: createChannelListQueryProps): OpenChannelListQuery {\n  const params = {} as OpenChannelListQueryParams;\n  params.limit = 20;\n  params.includeFrozen = true;\n  if (openChannelListQuery) {\n    Object.keys(openChannelListQuery).forEach((key) => {\n      params[key] = openChannelListQuery[key];\n    });\n  }\n  const channelListQuery = sdk?.openChannel?.createOpenChannelListQuery?.(params);\n  logger.info(logMessage, channelListQuery);\n  openChannelListDispatcher({\n    type: OpenChannelListActionTypes.UPDATE_OPEN_CHANNEL_LIST_QUERY,\n    payload: channelListQuery,\n  });\n  return channelListQuery;\n}\n\nexport default createChannelListQuery;\n","import { useEffect } from 'react';\nimport SendbirdChat from '@sendbird/chat';\nimport { SendbirdOpenChat } from '@sendbird/chat/openChannel';\n\nimport { Logger } from '../../../../lib/SendbirdState';\nimport OpenChannelListActionTypes from '../dux/actionTypes';\nimport { OpenChannelListDispatcherType, UserFilledOpenChannelListQuery } from '../OpenChannelListInterfaces';\nimport createChannelListQuery from './createChannelListQuery';\n\ninterface DynamicParams {\n  sdk: SendbirdChat & SendbirdOpenChat;\n  sdkInitialized: boolean;\n  openChannelListQuery: UserFilledOpenChannelListQuery;\n}\ninterface StaticParams {\n  logger: Logger;\n  openChannelListDispatcher: OpenChannelListDispatcherType;\n}\n\nfunction useSetupOpenChannelList(\n  {\n    sdk,\n    sdkInitialized,\n    openChannelListQuery,\n  }: DynamicParams,\n  {\n    logger,\n    openChannelListDispatcher,\n  }: StaticParams,\n): void {\n  useEffect(() => {\n    if (sdkInitialized) {\n      if (sdk?.openChannel) {\n        if (sdk?.openChannel?.createOpenChannelListQuery) {\n          logger.info('OpenChannelList|useSetupOpenChannelList: Setup OpenChannelList', { sdkInitialized });\n          const channelListQuery = createChannelListQuery({\n            sdk,\n            logger,\n            openChannelListQuery,\n            openChannelListDispatcher,\n            logMessage: 'OpenChannelList|useSetupOpenChannelList: Succeeded create channelListQuery',\n          });\n\n          if (channelListQuery?.hasNext) {\n            logger.info('OpenChannelList|useSetupOpenChannelList: Fetch channels');\n            openChannelListDispatcher({\n              type: OpenChannelListActionTypes.INIT_OPEN_CHANNEL_LIST_START,\n              payload: null,\n            });\n            channelListQuery.next()\n              .then((channelList) => {\n                logger.info('OpenChannelList|useSetupOpenChannelList: Succeeded fetching channels', channelList);\n                openChannelListDispatcher({\n                  type: OpenChannelListActionTypes.INIT_OPEN_CHANNEL_LIST_SUCCESS,\n                  payload: channelList,\n                });\n              })\n              .catch((err) => {\n                logger.error('OpenChannelList|useSetupOpenChannelList: Failed fetching channels', err);\n                openChannelListDispatcher({\n                  type: OpenChannelListActionTypes.INIT_OPEN_CHANNEL_LIST_FAILURE,\n                  payload: null,\n                });\n              });\n          } else {\n            logger.info('OpenChannelList|useSetupOpenChannelList: There is no more channels');\n          }\n        } else {\n          logger.warning('OpenChannelList|useSetupOpenChannelList: createOpenChannelListQuery is not included in the openChannel', sdk.openChannel);\n        }\n      } else {\n        logger.warning('OpenChannelList|useSetupOpenChannelList: openChannel is not included in the Chat SDK', sdk);\n      }\n    } else {\n      logger.info('OpenChannelList|useSetupOpenChannelList: Reset OpenChannelList', { sdkInitialized });\n      openChannelListDispatcher({\n        type: OpenChannelListActionTypes.RESET_OPEN_CHANNEL_LIST,\n        payload: null,\n      });\n    }\n  }, [sdkInitialized, openChannelListQuery]);\n}\n\nexport default useSetupOpenChannelList;\n","import { useCallback } from 'react';\nimport SendbirdChat from '@sendbird/chat';\nimport { SendbirdOpenChat } from '@sendbird/chat/openChannel';\n\nimport { Logger } from '../../../../lib/SendbirdState';\nimport createChannelListQuery from './createChannelListQuery';\nimport { OpenChannelListDispatcherType, UserFilledOpenChannelListQuery } from '../OpenChannelListInterfaces';\nimport OpenChannelListActionTypes from '../dux/actionTypes';\n\ninterface DynamicParams {\n  sdk: SendbirdChat & SendbirdOpenChat;\n  sdkInitialized: boolean;\n  openChannelListQuery: UserFilledOpenChannelListQuery;\n}\ninterface StaticParams {\n  logger: Logger;\n  openChannelListDispatcher: OpenChannelListDispatcherType;\n}\n\nfunction useRefreshOpenChannelList(\n  {\n    sdk,\n    sdkInitialized,\n    openChannelListQuery,\n  }: DynamicParams,\n  {\n    logger,\n    openChannelListDispatcher,\n  }: StaticParams,\n): () => void {\n  return useCallback(() => {\n    if (!sdkInitialized) {\n      logger.info('OpenChannelList|useRefreshOpenChannelList: Reset OpenChannelList', { sdkInitialized });\n      openChannelListDispatcher({\n        type: OpenChannelListActionTypes.RESET_OPEN_CHANNEL_LIST,\n        payload: null,\n      });\n      return;\n    }\n    if (!sdk?.openChannel) {\n      logger.warning('OpenChannelList|useRefreshOpenChannelList: openChannel is not included in the Chat SDK', sdk);\n      return;\n    }\n    if (!sdk?.openChannel?.createOpenChannelListQuery) {\n      logger.warning('OpenChannelList|useRefreshOpenChannelList: createOpenChannelListQuery is not included in the openChannel', sdk.openChannel);\n      return;\n    }\n\n    logger.info('OpenChannelList|useRefreshOpenChannelList: Setup OpenChannelList', { sdkInitialized });\n\n    const channelListQuery = createChannelListQuery({\n      sdk,\n      logger,\n      openChannelListQuery,\n      openChannelListDispatcher,\n      logMessage: 'OpenChannelList|useRefreshOpenChannelList: Succeeded create channelListQuery',\n    });\n\n    if (channelListQuery.hasNext) {\n      logger.info('OpenChannelList|useRefreshOpenChannelList: Fetch channels');\n      openChannelListDispatcher({\n        type: OpenChannelListActionTypes.INIT_OPEN_CHANNEL_LIST_START,\n        payload: null,\n      });\n      channelListQuery.next()\n        .then((channelList) => {\n          logger.info('OpenChannelList|useRefreshOpenChannelList: Succeeded fetching channels', channelList);\n          openChannelListDispatcher({\n            type: OpenChannelListActionTypes.INIT_OPEN_CHANNEL_LIST_SUCCESS,\n            payload: channelList,\n          });\n        })\n        .catch((err) => {\n          logger.error('OpenChannelList|useRefreshOpenChannelList: Failed fetching channels', err);\n          openChannelListDispatcher({\n            type: OpenChannelListActionTypes.INIT_OPEN_CHANNEL_LIST_FAILURE,\n            payload: null,\n          });\n        });\n    } else {\n      logger.info('OpenChannelList|useRefreshOpenChannelList: There is no more channels');\n    }\n  }, [sdkInitialized, openChannelListQuery]);\n}\n\nexport default useRefreshOpenChannelList;\n","import React, { useContext, useReducer, useMemo, useEffect } from 'react';\n\nimport pubSubTopics from '../../../lib/pubSub/topics';\nimport useSendbirdStateContext from '../../../hooks/useSendbirdStateContext';\n\nimport openChannelListReducer from './dux/reducer';\nimport openChannelListInitialState, { OpenChannelListInitialInterface } from './dux/initialState';\nimport {\n  OpenChannelListFetchingStatus,\n  OpenChannelListProviderProps,\n  OpenChannelListProviderInterface,\n  OpenChannelListDispatcherType,\n} from './OpenChannelListInterfaces';\nimport useFetchNextCallback from './hooks/useFetchNextCallback';\nimport useSetupOpenChannelList from './hooks/useSetupOpenChannelList';\nimport useRefreshOpenChannelList from './hooks/useRefreshOpenChannelList';\nimport OpenChannelListActionTypes from './dux/actionTypes';\n\nconst OpenChannelListContext = React.createContext<OpenChannelListProviderInterface | null>({\n  onChannelSelected: null,\n  currentChannel: null,\n  allChannels: [],\n  fetchingStatus: OpenChannelListFetchingStatus.EMPTY,\n  customOpenChannelListQuery: {},\n  fetchNextChannels: null,\n  refreshOpenChannelList: null,\n  openChannelListDispatcher: null,\n  logger: null,\n});\n\nexport function useOpenChannelListContext(): OpenChannelListProviderInterface {\n  const context: OpenChannelListProviderInterface = useContext(OpenChannelListContext);\n  return context;\n}\n\nexport const OpenChannelListProvider: React.FC<OpenChannelListProviderProps> = ({\n  className,\n  children,\n  queries,\n  onChannelSelected,\n}: OpenChannelListProviderProps): React.ReactElement => {\n  // props\n  const { stores, config } = useSendbirdStateContext();\n  const { logger, pubSub } = config;\n  const sdk = stores?.sdkStore?.sdk || null;\n  const sdkInitialized = stores?.sdkStore?.initialized || false;\n  const customOpenChannelListQuery = useMemo(() => {\n    return queries?.openChannelListQuery || null;\n  }, [queries?.openChannelListQuery]);\n\n  // dux\n  const [openChannelListStore, openChannelListDispatcher]: [OpenChannelListInitialInterface, OpenChannelListDispatcherType] = useReducer(\n    openChannelListReducer,\n    openChannelListInitialState,\n  );\n  const {\n    allChannels,\n    currentChannel,\n    fetchingStatus,\n    channelListQuery,\n  } = openChannelListStore;\n\n  // Initialize\n  useSetupOpenChannelList({\n    sdk,\n    sdkInitialized,\n    openChannelListQuery: customOpenChannelListQuery,\n  }, {\n    logger,\n    openChannelListDispatcher,\n  });\n\n  // Events & PubSub\n  useEffect(() => {\n    const subscriber = pubSub?.subscribe ? new Map() : null;\n    subscriber?.set(\n      pubSubTopics.UPDATE_OPEN_CHANNEL,\n      pubSub?.subscribe(pubSubTopics.UPDATE_OPEN_CHANNEL, (channel) => {\n        openChannelListDispatcher({\n          type: OpenChannelListActionTypes.UPDATE_OPEN_CHANNEL,\n          payload: channel,\n        });\n      }),\n    );\n    return () => {\n      subscriber?.forEach((s) => {\n        try { s.remove(); } catch {\n          //\n        }\n      });\n    };\n  }, [sdkInitialized, pubSub]);\n\n  // Fetch next channels by scroll event\n  const fetchNextChannels = useFetchNextCallback({\n    sdkInitialized: sdkInitialized,\n    openChannelListQuery: channelListQuery,\n  }, {\n    logger,\n    openChannelListDispatcher,\n  });\n\n  // Refresh channel list by click event of 'refresh button'\n  const refreshOpenChannelList = useRefreshOpenChannelList({\n    sdk,\n    sdkInitialized,\n    openChannelListQuery: customOpenChannelListQuery,\n  }, {\n    logger,\n    openChannelListDispatcher,\n  });\n\n  return (\n    <OpenChannelListContext.Provider\n      value={{\n        // props\n        onChannelSelected: onChannelSelected,\n        customOpenChannelListQuery: customOpenChannelListQuery,\n        // interface\n        logger: logger,\n        currentChannel: currentChannel,\n        allChannels: allChannels,\n        fetchingStatus: fetchingStatus,\n        fetchNextChannels: fetchNextChannels,\n        refreshOpenChannelList: refreshOpenChannelList,\n        openChannelListDispatcher: openChannelListDispatcher,\n      }}\n    >\n      <div className={`sendbird-open-channel-list ${className}`}>\n        {children}\n      </div>\n    </OpenChannelListContext.Provider>\n  );\n};\n\nexport default {\n  OpenChannelListProvider,\n  useOpenChannelListContext,\n};\n"],"names":["OpenChannelListFetchingStatus","OpenChannelListActionTypes","reducer","state","action","type","actionTypes","INIT_OPEN_CHANNEL_LIST_START","_objectSpread","fetchingStatus","FETCHING","INIT_OPEN_CHANNEL_LIST_SUCCESS","channelList","payload","allChannels","length","DONE","EMPTY","INIT_OPEN_CHANNEL_LIST_FAILURE","ERROR","RESET_OPEN_CHANNEL_LIST","FETCH_OPEN_CHANNEL_LIST_START","FETCH_OPEN_CHANNEL_LIST_SUCCESS","FETCH_OPEN_CHANNEL_LIST_FAILURE","CREATE_OPEN_CHANNEL","currentChannel","SET_CURRENT_OPEN_CHANNEL","UPDATE_OPEN_CHANNEL_LIST_QUERY","channelListQuery","UPDATE_OPEN_CHANNEL","_state$currentChannel","_action$payload2","map","channel","_action$payload","url","useFetchNextCallback","_ref","_ref2","sdkInitialized","openChannelListQuery","logger","openChannelListDispatcher","useCallback","callback","hasNext","info","next","then","catch","err","error","createChannelListQuery","_sdk$openChannel","_sdk$openChannel$crea","sdk","logMessage","params","limit","includeFrozen","Object","keys","forEach","key","openChannel","createOpenChannelListQuery","call","useSetupOpenChannelList","useEffect","warning","useRefreshOpenChannelList","OpenChannelListContext","React","createContext","onChannelSelected","customOpenChannelListQuery","fetchNextChannels","refreshOpenChannelList","useOpenChannelListContext","context","useContext","OpenChannelListProvider","_stores$sdkStore","_stores$sdkStore2","className","children","queries","stores","config","useSendbirdStateContext","pubSub","sdkStore","initialized","useMemo","openChannelListStore","useReducer","openChannelListReducer","openChannelListInitialState","subscriber","subscribe","Map","set","pubSubTopics","s","remove","_unused","createElement","Provider","value"],"mappings":"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"}