{"version":3,"file":"context.js","sources":["../../../src/modules/ChannelSettings/context/ChannelSettingsProvider.tsx"],"sourcesContent":["import React, {\n  useEffect,\n  useState,\n} from 'react';\nimport {\n  GroupChannel,\n  GroupChannelUpdateParams,\n  SendbirdGroupChat,\n} from '@sendbird/chat/groupChannel';\n\nimport useSendbirdStateContext from '../../../hooks/useSendbirdStateContext';\nimport { RenderUserProfileProps } from '../../../types';\nimport { UserProfileProvider } from '../../../lib/UserProfileContext';\nimport uuidv4 from '../../../utils/uuid';\n\ninterface ApplicationUserListQuery {\n  limit?: number;\n  userIdsFilter?: Array<string>;\n  metaDataKeyFilter?: string;\n  metaDataValuesFilter?: Array<string>;\n}\n\ninterface ChannelSettingsQueries {\n  applicationUserListQuery?: ApplicationUserListQuery;\n}\n\ntype OverrideInviteUserType = {\n  users: Array<string>;\n  onClose: () => void;\n  channel: GroupChannel;\n};\n\nexport type ChannelSettingsContextProps = {\n  children?: React.ReactElement;\n  channelUrl: string;\n  className?: string;\n  onCloseClick?(): void;\n  onLeaveChannel?(): void;\n  overrideInviteUser?(params: OverrideInviteUserType): void;\n  onChannelModified?(channel: GroupChannel): void;\n  onBeforeUpdateChannel?(currentTitle: string, currentImg: File, data: string): GroupChannelUpdateParams;\n  queries?: ChannelSettingsQueries;\n  renderUserProfile?: (props: RenderUserProfileProps) => React.ReactElement;\n  disableUserProfile?: boolean;\n};\n\ninterface ChannelSettingsProviderInterface {\n  channelUrl: string;\n  onCloseClick?(): void;\n  onLeaveChannel?(): void;\n  overrideInviteUser?(params: OverrideInviteUserType): void;\n  onChannelModified?(channel: GroupChannel): void;\n  onBeforeUpdateChannel?(currentTitle: string, currentImg: File, data: string): GroupChannelUpdateParams;\n  queries?: ChannelSettingsQueries;\n  setChannelUpdateId(uniqId: string): void;\n  forceUpdateUI(): void;\n  channel: GroupChannel;\n  invalidChannel: boolean;\n}\n\nconst ChannelSettingsContext = React.createContext<ChannelSettingsProviderInterface|null>(undefined);\n\nconst ChannelSettingsProvider: React.FC<ChannelSettingsContextProps> = (props: ChannelSettingsContextProps) => {\n  const {\n    children,\n    className,\n    channelUrl,\n    onCloseClick,\n    onLeaveChannel,\n    onChannelModified,\n    overrideInviteUser,\n    onBeforeUpdateChannel,\n    queries,\n  } = props;\n\n  // fetch store from <SendbirdProvider />\n  const globalStore = useSendbirdStateContext();\n  const { config, stores } = globalStore;\n  const { sdkStore } = stores;\n  const { logger, onUserProfileMessage } = config;\n\n  const { initialized } = sdkStore;\n  const sdk = sdkStore?.sdk as SendbirdGroupChat;\n\n  // hack to keep track of channel updates by triggering useEffect\n  const [channelUpdateId, setChannelUpdateId] = useState(uuidv4());\n  const [channel, setChannel] = useState(null);\n  const [invalidChannel, setInvalidChannel] = useState(false);\n\n  const forceUpdateUI = () => {\n    setChannelUpdateId(uuidv4());\n  };\n\n  useEffect(() => {\n    logger.info('ChannelSettings: Setting up');\n    if (!channelUrl || !initialized || !sdk) {\n      logger.warning('ChannelSettings: Setting up failed', 'No channelUrl or sdk uninitialized');\n      setInvalidChannel(false);\n    } else {\n      if (!sdk || !sdk.groupChannel) {\n        logger.warning('ChannelSettings: No GroupChannel');\n        return;\n      }\n      sdk.groupChannel.getChannel(channelUrl).then((groupChannel) => {\n        if (!groupChannel) {\n          logger.warning('ChannelSettings: Channel not found');\n          setInvalidChannel(true);\n        } else {\n          logger.info('ChannelSettings: Fetched group channel', groupChannel);\n          setInvalidChannel(false);\n          setChannel(groupChannel);\n        }\n      });\n    }\n  }, [channelUrl, initialized, channelUpdateId]);\n\n  return (\n    <ChannelSettingsContext.Provider value={{\n      channelUrl,\n      onCloseClick,\n      onLeaveChannel,\n      onChannelModified,\n      onBeforeUpdateChannel,\n      queries,\n      overrideInviteUser,\n      setChannelUpdateId,\n      forceUpdateUI,\n      channel,\n      invalidChannel,\n    }}>\n      <UserProfileProvider\n        renderUserProfile={props?.renderUserProfile}\n        disableUserProfile={props?.disableUserProfile}\n        onUserProfileMessage={onUserProfileMessage}\n      >\n        <div className={`sendbird-channel-settings ${className}`}>\n          {children}\n        </div>\n      </UserProfileProvider>\n    </ChannelSettingsContext.Provider>\n  );\n};\n\nexport type UseChannelSettingsType = () => ChannelSettingsProviderInterface;\nconst useChannelSettingsContext: UseChannelSettingsType = () => React.useContext(ChannelSettingsContext);\n\nexport {\n  ChannelSettingsProvider,\n  useChannelSettingsContext,\n};\n"],"names":["ChannelSettingsContext","React","createContext","undefined","ChannelSettingsProvider","props","children","className","channelUrl","onCloseClick","onLeaveChannel","onChannelModified","overrideInviteUser","onBeforeUpdateChannel","queries","globalStore","useSendbirdStateContext","config","stores","sdkStore","logger","onUserProfileMessage","initialized","sdk","channelUpdateId","setChannelUpdateId","useState","uuidv4","channel","setChannel","invalidChannel","setInvalidChannel","forceUpdateUI","useEffect","info","warning","groupChannel","getChannel","then","createElement","Provider","value","UserProfileProvider","renderUserProfile","disableUserProfile","useChannelSettingsContext","useContext"],"mappings":"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"}