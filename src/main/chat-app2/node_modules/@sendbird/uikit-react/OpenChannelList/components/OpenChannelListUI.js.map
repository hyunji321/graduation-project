{"version":3,"file":"OpenChannelListUI.js","sources":["../../../src/modules/OpenChannelList/components/OpenChannelListUI/index.tsx"],"sourcesContent":["import React, { useContext, useMemo, useRef, useState } from 'react';\nimport { OpenChannel } from '@sendbird/chat/openChannel';\n\nimport './index.scss';\n\nimport OpenChannelPreview from '../OpenChannelPreview';\nimport PlaceHolder, { PlaceHolderTypes } from '../../../../ui/PlaceHolder';\nimport IconButton from '../../../../ui/IconButton';\nimport Icon, { IconTypes, IconColors } from '../../../../ui/Icon';\nimport Label, { LabelTypography, LabelColors } from '../../../../ui/Label';\nimport { OnOpenChannelSelected, OpenChannelListFetchingStatus } from '../../context/OpenChannelListInterfaces';\nimport { useOpenChannelListContext } from '../../context/OpenChannelListProvider';\nimport OpenChannelListActionTypes from '../../context/dux/actionTypes';\nimport CreateOpenChannel from '../../../CreateOpenChannel';\nimport { LocalizationContext } from '../../../../lib/LocalizationContext';\nimport { SCROLL_BUFFER } from '../../../../utils/consts';\n\ninterface RenderOpenChannelPreviewProps {\n  channel: OpenChannel;\n  isSelected: boolean;\n  onChannelSelected: OnOpenChannelSelected;\n}\n\nexport interface OpenChannelListUIProps {\n  renderHeader?: () => React.ReactElement;\n  renderChannelPreview?: (props: RenderOpenChannelPreviewProps) => React.ReactElement;\n  renderPlaceHolderEmpty?: () => React.ReactElement;\n  renderPlaceHolderError?: () => React.ReactElement;\n  renderPlaceHolderLoading?: () => React.ReactElement;\n}\n\nfunction OpenChannelListUI({\n  renderHeader,\n  renderChannelPreview,\n  renderPlaceHolderEmpty,\n  renderPlaceHolderError,\n  renderPlaceHolderLoading,\n}: OpenChannelListUIProps): React.ReactElement {\n  const [showCreateChannelModal, setShowCreateChannel] = useState(false);\n  const scrollRef = useRef(null);\n  const {\n    logger,\n    currentChannel,\n    allChannels,\n    fetchingStatus,\n    onChannelSelected,\n    fetchNextChannels,\n    refreshOpenChannelList,\n    openChannelListDispatcher,\n  } = useOpenChannelListContext();\n  const { stringSet } = useContext(LocalizationContext);\n\n  const handleScroll = (e) => {\n    const element = e.target;\n    const {\n      scrollTop,\n      clientHeight,\n      scrollHeight,\n    } = element;\n    const isAboutSame = (a, b, px) => (Math.abs(a - b) <= px);\n    if (isAboutSame(clientHeight + scrollTop, scrollHeight, SCROLL_BUFFER)) {\n      fetchNextChannels((messages) => {\n        if (messages) {\n          try {\n            element.scrollTop = scrollHeight - clientHeight;\n          } catch (error) {\n            //\n          }\n        }\n      });\n    }\n  };\n  const handleOnClickCreateChannel = () => {\n    setShowCreateChannel(true);\n  };\n\n  const MemoizedHeader: React.ReactElement = useMemo(() => {\n    return renderHeader?.() || null;\n  }, [renderHeader]);\n  const MemoizedPlaceHolder: React.ReactElement = useMemo(() => {\n    if (fetchingStatus === OpenChannelListFetchingStatus.EMPTY) {\n      return renderPlaceHolderEmpty?.() || (\n        <PlaceHolder\n          className=\"sendbird-open-channel-list-ui__channel-list--place-holder--empty\"\n          type={PlaceHolderTypes.NO_CHANNELS}\n        />\n      );\n    }\n    if (fetchingStatus === OpenChannelListFetchingStatus.FETCHING) {\n      return renderPlaceHolderLoading?.() || (\n        <div className=\"sendbird-open-channel-list-ui__channel-list--place-holder--loading\">\n          <PlaceHolder\n            iconSize=\"24px\"\n            type={PlaceHolderTypes.LOADING}\n          />\n        </div>\n      );\n    }\n    if (fetchingStatus === OpenChannelListFetchingStatus.ERROR) {\n      return renderPlaceHolderError?.() || (\n        <PlaceHolder\n          className=\"sendbird-open-channel-list-ui__channel-list--place-holder--error\"\n          type={PlaceHolderTypes.WRONG}\n        />\n      );\n    }\n    return null;\n  }, [fetchingStatus, renderPlaceHolderEmpty, renderPlaceHolderLoading, renderPlaceHolderError]);\n  const MemoizedAllChannels = useMemo(() => {\n    if (fetchingStatus === OpenChannelListFetchingStatus.DONE) {\n      return allChannels.map((channel) => {\n        const isSelected = channel?.url === currentChannel?.url;\n        const handleClick = (e) => {\n          onChannelSelected?.(channel, e);\n          logger.info('OpenChannelList|ChannelPreview: A channel is selected', channel);\n          openChannelListDispatcher({\n            type: OpenChannelListActionTypes.SET_CURRENT_OPEN_CHANNEL,\n            payload: channel,\n          });\n        };\n        return renderChannelPreview\n          ? (\n            <div\n              className=\"sendbird-open-channel-list-ui__channel-list__item\"\n              onClick={handleClick}\n            >\n              {renderChannelPreview({ channel, isSelected, onChannelSelected })}\n            </div>\n          )\n          : (\n            <OpenChannelPreview\n              className=\"sendbird-open-channel-list-ui__channel-list__item\"\n              channel={channel}\n              isSelected={isSelected}\n              onClick={handleClick}\n              key={channel?.url}\n            />\n          );\n      });\n    }\n    return null;\n  }, [allChannels, allChannels.length, currentChannel]);\n\n  return (\n    <div className=\"sendbird-open-channel-list-ui\">\n      {\n        showCreateChannelModal && (\n          <CreateOpenChannel\n            closeModal={() => setShowCreateChannel(false)}\n            onCreateChannel={(openChannel) => {\n              onChannelSelected?.(openChannel);\n              openChannelListDispatcher({\n                type: OpenChannelListActionTypes.CREATE_OPEN_CHANNEL,\n                payload: openChannel,\n              });\n            }}\n          />\n        )\n      }\n      {\n        MemoizedHeader || (\n          <div className=\"sendbird-open-channel-list-ui__header\">\n            <Label\n              className=\"sendbird-open-channel-list-ui__header__title\"\n              type={LabelTypography.H_2}\n              color={LabelColors.ONBACKGROUND_1}\n            >\n              {stringSet.OPEN_CHANNEL_LIST__TITLE}\n            </Label>\n            <IconButton\n              className=\"sendbird-open-channel-list-ui__header__button-refresh\"\n              width=\"32px\"\n              height=\"32px\"\n              type=\"button\"\n              onClick={() => refreshOpenChannelList()}\n            >\n              <Icon\n                type={IconTypes.REFRESH}\n                fillColor={IconColors.PRIMARY}\n                width=\"22px\"\n                height=\"22px\"\n              />\n            </IconButton>\n            <IconButton\n              className=\"sendbird-open-channel-list-ui__header__button-create-channel\"\n              width=\"32px\"\n              height=\"32px\"\n              type=\"button\"\n              onClick={handleOnClickCreateChannel}\n            >\n              <Icon\n                type={IconTypes.CREATE}\n                fillColor={IconColors.PRIMARY}\n                width=\"22px\"\n                height=\"22px\"\n              />\n            </IconButton>\n          </div>\n        )\n      }\n      <div\n        className=\"sendbird-open-channel-list-ui__channel-list\"\n        ref={scrollRef}\n        onScroll={handleScroll}\n        >\n        {MemoizedPlaceHolder}\n        {MemoizedAllChannels}\n      </div>\n    </div>\n  );\n}\n\nexport default OpenChannelListUI;\n"],"names":["OpenChannelListUI","_ref","renderHeader","renderChannelPreview","renderPlaceHolderEmpty","renderPlaceHolderError","renderPlaceHolderLoading","showCreateChannelModal","setShowCreateChannel","useState","scrollRef","useRef","logger","currentChannel","allChannels","fetchingStatus","onChannelSelected","fetchNextChannels","refreshOpenChannelList","openChannelListDispatcher","useOpenChannelListContext","stringSet","useContext","LocalizationContext","handleScroll","e","element","target","scrollTop","clientHeight","scrollHeight","isAboutSame","a","b","px","Math","abs","SCROLL_BUFFER","messages","error","handleOnClickCreateChannel","MemoizedHeader","useMemo","MemoizedPlaceHolder","OpenChannelListFetchingStatus","EMPTY","React","createElement","PlaceHolder","className","type","PlaceHolderTypes","NO_CHANNELS","FETCHING","iconSize","LOADING","ERROR","WRONG","MemoizedAllChannels","DONE","map","channel","isSelected","url","handleClick","info","OpenChannelListActionTypes","SET_CURRENT_OPEN_CHANNEL","payload","onClick","OpenChannelPreview","key","length","CreateOpenChannel","closeModal","onCreateChannel","openChannel","CREATE_OPEN_CHANNEL","Label","LabelTypography","H_2","color","LabelColors","ONBACKGROUND_1","OPEN_CHANNEL_LIST__TITLE","IconButton","width","height","Icon","IconTypes","REFRESH","fillColor","IconColors","PRIMARY","CREATE","ref","onScroll"],"mappings":"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"}