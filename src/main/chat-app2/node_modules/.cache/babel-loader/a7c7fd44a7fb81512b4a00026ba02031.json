{"ast":null,"code":"// note to SDK team:\n// using enum inside .d.ts won’t work for jest, but const enum will work.\nvar Role = {\n  OPERATOR: 'operator',\n  NONE: 'none'\n};\n\n// type getUpdateFileMessage = (\n//   channel: GroupChannel | OpenChannel,\n//   messageId: string | number,\n//   params: FileMessageUpdateParams,\n// ) => Promise<FileMessage>;\n\nexport { Role as R };","map":{"version":3,"mappings":"AA4BA;AACA;AACO,IAAMA,IAAI,GAAG;EAClBC,QAAQ,EAAE,UAAU;EACpBC,IAAI,EAAE;AACR;;AA2IA;AACA;AACA;AACA;AACA","names":["Role","OPERATOR","NONE"],"sources":["C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\lib\\types.ts"],"sourcesContent":["import type SendbirdChat from '@sendbird/chat';\nimport type { User } from '@sendbird/chat';\nimport type {\n  GroupChannel,\n  GroupChannelCreateParams,\n  SendbirdGroupChat,\n} from '@sendbird/chat/groupChannel';\nimport type {\n  OpenChannel,\n  OpenChannelCreateParams,\n  SendbirdOpenChat,\n} from '@sendbird/chat/openChannel';\nimport type {\n  AdminMessage,\n  FileMessage,\n  FileMessageCreateParams,\n  UserMessage,\n  UserMessageCreateParams,\n  UserMessageUpdateParams,\n} from '@sendbird/chat/message';\n\nimport type SendBirdTypes from '../types';\nimport { UikitMessageHandler } from './selectors';\nimport { Logger } from './SendbirdState';\nimport { ReplyType } from 'SendbirdUIKitGlobal';\nimport { MarkAsReadSchedulerType } from './hooks/useMarkAsReadScheduler';\nimport { MarkAsDeliveredSchedulerType } from './hooks/useMarkAsDeliveredScheduler';\n\n// note to SDK team:\n// using enum inside .d.ts won’t work for jest, but const enum will work.\nexport const Role = {\n  OPERATOR: 'operator',\n  NONE: 'none',\n} as const;\n\nexport interface SendBirdProviderProps {\n  userId: string;\n  appId: string;\n  accessToken?: string;\n  children?: React.ReactElement;\n  theme?: 'light' | 'dark';\n  nickname?: string;\n  profileUrl?: string;\n  dateLocale?: Locale;\n  disableUserProfile?: boolean;\n  disableMarkAsDelivered?: boolean;\n  renderUserProfile?: (props: SendBirdTypes.RenderUserProfileProps) => React.ReactElement;\n  allowProfileEdit?: boolean;\n  userListQuery?(): SendBirdTypes.UserListQuery;\n  config?: SendBirdTypes.SendBirdProviderConfig;\n  stringSet?: Record<string, string>;\n  colorSet?: Record<string, string>;\n  isMentionEnabled?: boolean;\n  isVoiceMessageEnabled?: boolean;\n  voiceRecord?: {\n    maxRecordingTime: number;\n    minRecordingTime: number;\n  };\n  imageCompression?: {\n    compressionRate?: number,\n    resizingWidth?: number | string,\n    resizingHeight?: number | string,\n  };\n  isTypingIndicatorEnabledOnChannelList?: boolean;\n  isMessageReceiptStatusEnabledOnChannelList?: boolean;\n}\n\nexport interface SendBirdStateConfig {\n  disableUserProfile: boolean;\n  disableMarkAsDelivered: boolean;\n  renderUserProfile?: (props: SendBirdTypes.RenderUserProfileProps) => React.ReactElement;\n  onUserProfileMessage?: (props: GroupChannel) => void;\n  allowProfileEdit: boolean;\n  isOnline: boolean;\n  userId: string;\n  appId: string;\n  accessToken: string;\n  theme: string;\n  pubSub: any;\n  logger: Logger;\n  setCurrenttheme: (theme: string) => void;\n  userListQuery?(): SendBirdTypes.UserListQuery;\n  isReactionEnabled: boolean;\n  isMentionEnabled: boolean;\n  isVoiceMessageEnabled?: boolean;\n  voiceRecord?: {\n    maxRecordingTime: number;\n    minRecordingTime: number;\n  };\n  userMention: {\n    maxMentionCount: number,\n    maxSuggestionCount: number,\n  };\n  imageCompression?: {\n    compressionRate?: number,\n    resizingWidth?: number | string,\n    resizingHeight?: number | string,\n  };\n  markAsReadScheduler: MarkAsReadSchedulerType;\n  markAsDeliveredScheduler: MarkAsDeliveredSchedulerType;\n  isTypingIndicatorEnabledOnChannelList?: boolean;\n  isMessageReceiptStatusEnabledOnChannelList?: boolean;\n  replyType: ReplyType;\n}\nexport interface SdkStore {\n  error: boolean;\n  initialized: boolean;\n  loading: boolean;\n  sdk: SendbirdChat & SendbirdGroupChat & SendbirdOpenChat;\n}\nexport interface UserStore {\n  initialized: boolean;\n  loading: boolean;\n  user: User;\n}\nexport interface SendBirdStateStore {\n  sdkStore: SdkStore;\n  userStore: UserStore;\n}\n\nexport type SendBirdState = {\n  config: SendBirdStateConfig;\n  stores: SendBirdStateStore;\n  dispatchers: {\n    userDispatcher: UserDispatcher,\n  },\n};\n\ntype UserDispatcherParams = {\n  type: string,\n  payload: User,\n};\n\ntype UserDispatcher = (params: UserDispatcherParams) => void;\n\ntype GetSdk = SendbirdChat | undefined;\ntype GetConnect = (\n  userId: string,\n  accessToken?: string\n) => Promise<User>;\ntype GetDisconnect = () => Promise<void>;\ntype GetUpdateUserInfo = (\n  nickName: string,\n  profileUrl?: string\n) => Promise<User>;\ntype GetCreateGroupChannel = (channelParams: GroupChannelCreateParams) => Promise<GroupChannel>;\ntype GetCreateOpenChannel = (channelParams: OpenChannelCreateParams) => Promise<OpenChannel>;\ntype GetGetGroupChannel = (\n  channelUrl: string,\n  isSelected?: boolean,\n) => Promise<GroupChannel>;\ntype GetGetOpenChannel = (\n  channelUrl: string,\n) => Promise<OpenChannel>;\ntype GetLeaveGroupChannel = (channel: GroupChannel) => Promise<void>;\ntype GetEnterOpenChannel = (channel: OpenChannel) => Promise<OpenChannel>;\ntype GetExitOpenChannel = (channel: OpenChannel) => Promise<void>;\ntype GetFreezeChannel = (channel: GroupChannel | OpenChannel) => Promise<void>;\ntype GetUnFreezeChannel = (channel: GroupChannel | OpenChannel) => Promise<void>;\ntype GetSendUserMessage = (\n  channel: GroupChannel | OpenChannel,\n  userMessageParams: UserMessageCreateParams,\n) => UikitMessageHandler;\ntype GetSendFileMessage = (\n  channel: GroupChannel | OpenChannel,\n  fileMessageParams: FileMessageCreateParams\n) => UikitMessageHandler;\ntype GetUpdateUserMessage = (\n  channel: GroupChannel | OpenChannel,\n  messageId: string | number,\n  params: UserMessageUpdateParams\n) => Promise<UserMessage>;\n// type getUpdateFileMessage = (\n//   channel: GroupChannel | OpenChannel,\n//   messageId: string | number,\n//   params: FileMessageUpdateParams,\n// ) => Promise<FileMessage>;\ntype GetDeleteMessage = (\n  channel: GroupChannel | OpenChannel,\n  message: AdminMessage | UserMessage | FileMessage\n) => Promise<void>;\ntype GetResendUserMessage = (\n  channel: GroupChannel | OpenChannel,\n  failedMessage: UserMessage\n) => Promise<UserMessage>;\ntype GetResendFileMessage = (\n  channel: GroupChannel | OpenChannel,\n  failedMessage: FileMessage\n) => Promise<FileMessage>;\n\nexport interface sendbirdSelectorsInterface {\n  getSdk: (store: SendBirdState) => GetSdk;\n  getConnect: (store: SendBirdState) => GetConnect\n  getDisconnect: (store: SendBirdState) => GetDisconnect;\n  getUpdateUserInfo: (store: SendBirdState) => GetUpdateUserInfo;\n  getCreateGroupChannel: (store: SendBirdState) => GetCreateGroupChannel;\n  getCreateOpenChannel: (store: SendBirdState) => GetCreateOpenChannel;\n  getGetGroupChannel: (store: SendBirdState) => GetGetGroupChannel;\n  getGetOpenChannel: (store: SendBirdState) => GetGetOpenChannel;\n  getLeaveGroupChannel: (store: SendBirdState) => GetLeaveGroupChannel;\n  getEnterOpenChannel: (store: SendBirdState) => GetEnterOpenChannel;\n  getExitOpenChannel: (store: SendBirdState) => GetExitOpenChannel;\n  getFreezeChannel: (store: SendBirdState) => GetFreezeChannel;\n  getUnFreezeChannel: (store: SendBirdState) => GetUnFreezeChannel;\n  getSendUserMessage: (store: SendBirdState) => GetSendUserMessage;\n  getSendFileMessage: (store: SendBirdState) => GetSendFileMessage;\n  getUpdateUserMessage: (store: SendBirdState) => GetUpdateUserMessage;\n  // getUpdateFileMessage: (store: SendBirdState) => GetUpdateFileMessage;\n  getDeleteMessage: (store: SendBirdState) => GetDeleteMessage;\n  getResendUserMessage: (store: SendBirdState) => GetResendUserMessage;\n  getResendFileMessage: (store: SendBirdState) => GetResendFileMessage;\n}\n"]},"metadata":{},"sourceType":"module"}