{"ast":null,"code":"import React__default, { useContext, useMemo } from 'react';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../index-63949de5.js';\nimport { h as getClassName, B as isEditedMessage } from '../index-7eb65acf.js';\nimport { a as LocalizationContext } from '../LocalizationContext-076d6d2e.js';\nimport { t as tokenizeMessage } from '../tokenize-c40f2b57.js';\nimport { T as TextFragment } from '../index-2c3e11ea.js';\nimport { T as TEXT_MESSAGE_BODY_CLASSNAME } from '../consts-c41580ae.js';\nimport 'prop-types';\nimport '../stringSet-13bbd4a2.js';\nimport '../_rollupPluginBabelHelpers-6bb0305c.js';\nimport '../utils/message/getOutgoingMessageState.js';\nimport '../index-99aabd9e.js';\nimport '../index.module-54d57ec3.js';\nimport '../Message/context.js';\nimport './MentionLabel.js';\nimport './ContextMenu.js';\nimport 'react-dom';\nimport './SortByRow.js';\nimport '../uuid-1adedf62.js';\nimport './UserProfile.js';\nimport '../UserProfileContext-9cfbab4d.js';\nimport '../sendbirdSelectors.js';\nimport '../topics-b2b77fb9.js';\nimport '../utils-4bbbca2c.js';\nimport './Avatar.js';\nimport './ImageRenderer.js';\nimport './Icon.js';\nimport './Button.js';\nimport '../useSendbirdStateContext.js';\nimport '../withSendbird.js';\nimport './LinkLabel.js';\nfunction TextMessageItemBody(_ref) {\n  var _message$mentionedMes, _message$mentionedUse, _message$reactions;\n  let {\n    className = '',\n    message,\n    isByMe = false,\n    mouseHover = false,\n    isMentionEnabled = false,\n    isReactionEnabled = false\n  } = _ref;\n  const {\n    stringSet\n  } = useContext(LocalizationContext);\n  const isMessageMentioned = isMentionEnabled && (message === null || message === void 0 ? void 0 : (_message$mentionedMes = message.mentionedMessageTemplate) === null || _message$mentionedMes === void 0 ? void 0 : _message$mentionedMes.length) > 0 && (message === null || message === void 0 ? void 0 : (_message$mentionedUse = message.mentionedUsers) === null || _message$mentionedUse === void 0 ? void 0 : _message$mentionedUse.length) > 0;\n  const tokens = useMemo(() => {\n    if (isMessageMentioned) {\n      return tokenizeMessage({\n        mentionedUsers: message === null || message === void 0 ? void 0 : message.mentionedUsers,\n        messageText: message === null || message === void 0 ? void 0 : message.mentionedMessageTemplate\n      });\n    }\n    return tokenizeMessage({\n      messageText: message === null || message === void 0 ? void 0 : message.message\n    });\n  }, [message === null || message === void 0 ? void 0 : message.updatedAt]);\n  return /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.BODY_1,\n    color: isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName([className, TEXT_MESSAGE_BODY_CLASSNAME, isByMe ? 'outgoing' : 'incoming', mouseHover ? 'mouse-hover' : '', isReactionEnabled && (message === null || message === void 0 ? void 0 : (_message$reactions = message.reactions) === null || _message$reactions === void 0 ? void 0 : _message$reactions.length) > 0 ? 'reactions' : ''])\n  }, /*#__PURE__*/React__default.createElement(TextFragment, {\n    tokens: tokens\n  }), isEditedMessage(message) && /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-text-message-item-body__message edited\",\n    type: LabelTypography.BODY_1,\n    color: isByMe ? LabelColors.ONCONTENT_2 : LabelColors.ONBACKGROUND_2\n  }, ` ${stringSet.MESSAGE_EDITED} `)));\n}\nexport { TextMessageItemBody as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBe,SAASA,mBAAmBA,OAOnB;EAAA;EAAA,IAPoB;IAC1CC,SAAS,GAAG,EAAE;IACdC,OAAO;IACPC,MAAM,GAAG,KAAK;IACdC,UAAU,GAAG,KAAK;IAClBC,gBAAgB,GAAG,KAAK;IACxBC,iBAAiB,GAAG;EACf,CAAC;EACN,MAAM;IAAEC;EAAU,CAAC,GAAGC,UAAU,CAACC,mBAAmB,CAAC;EACrD,MAAMC,kBAAkB,GAAGL,gBAAgB,IACtC,QAAO,aAAPH,OAAO,gDAAPA,OAAO,CAAES,wBAAwB,0DAAjCC,sBAAmCC,MAAM,IAAG,CAAC,IAC7C,QAAO,aAAPX,OAAO,gDAAPA,OAAO,CAAEY,cAAc,0DAAvBC,sBAAyBF,MAAM,IAAG,CAAC;EACxC,MAAMG,MAAM,GAAGC,OAAO,CAAC,MAAM;IAC3B,IAAIP,kBAAkB,EAAE;MACtB,OAAOQ,eAAe,CAAC;QACrBJ,cAAc,EAAEZ,OAAO,aAAPA,OAAO,KAAPA,yBAAO,CAAEY,cAAc;QACvCK,WAAW,EAAEjB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAES;MACxB,CAAC,CAAC;IACJ;IACA,OAAOO,eAAe,CAAC;MACrBC,WAAW,EAAEjB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEA;IACxB,CAAC,CAAC;GACH,EAAE,CAACA,OAAO,KAAPA,eAAO,uBAAPA,OAAO,CAAEkB,SAAS,CAAC,CAAC;EACxB,oBACEC,6BAACC,KAAK;IACJC,IAAI,EAAEC,eAAe,CAACC,MAAO;IAC7BC,KAAK,EAAEvB,MAAM,GAAGwB,WAAW,CAACC,WAAW,GAAGD,WAAW,CAACE;GAEtDR;IAAKpB,SAAS,EAAE6B,YAAY,CAAC,CAC3B7B,SAAS,EACT8B,2BAA2B,EAC3B5B,MAAM,GAAG,UAAU,GAAG,UAAU,EAChCC,UAAU,GAAG,aAAa,GAAG,EAAE,EAC9BE,iBAAiB,IAAI,QAAO,aAAPJ,OAAO,6CAAPA,OAAO,CAAE8B,SAAS,uDAAlBC,mBAAoBpB,MAAM,IAAG,CAAC,GAAI,WAAW,GAAG,EAAE,CACzE;EAAE,gBACDQ,6BAACa,YAAY;IAAClB,MAAM,EAAEA;GAAU,GAE9BmB,eAAe,CAACjC,OAAO,CAAC,iBACtBmB,6BAACC,KAAK;IACJrB,SAAS,EAAC,iDAAiD;IAC3DsB,IAAI,EAAEC,eAAe,CAACC,MAAO;IAC7BC,KAAK,EAAEvB,MAAM,GAAGwB,WAAW,CAACS,WAAW,GAAGT,WAAW,CAACU;EAAe,GAEnE,IAAG9B,SAAS,CAAC+B,cAAiB,IAEnC,CAEC,CACA;AAEZ","names":["TextMessageItemBody","className","message","isByMe","mouseHover","isMentionEnabled","isReactionEnabled","stringSet","useContext","LocalizationContext","isMessageMentioned","mentionedMessageTemplate","_message$mentionedMes","length","mentionedUsers","_message$mentionedUse","tokens","useMemo","tokenizeMessage","messageText","updatedAt","React","Label","type","LabelTypography","BODY_1","color","LabelColors","ONCONTENT_1","ONBACKGROUND_1","getClassName","TEXT_MESSAGE_BODY_CLASSNAME","reactions","_message$reactions","TextFragment","isEditedMessage","ONCONTENT_2","ONBACKGROUND_2","MESSAGE_EDITED"],"sources":["C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\ui\\TextMessageItemBody\\index.tsx"],"sourcesContent":["import './index.scss';\nimport React, { ReactElement, useContext, useMemo } from 'react';\nimport type { UserMessage } from '@sendbird/chat/message';\n\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport { getClassName, isEditedMessage } from '../../utils';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport { tokenizeMessage } from '../../modules/Message/utils/tokens/tokenize';\nimport TextFragment from '../../modules/Message/components/TextFragment';\nimport { TEXT_MESSAGE_BODY_CLASSNAME } from './consts';\n\ninterface Props {\n  className?: string | Array<string>;\n  message: UserMessage;\n  isByMe?: boolean;\n  mouseHover?: boolean;\n  isMentionEnabled?: boolean;\n  isReactionEnabled?: boolean;\n}\n\nexport default function TextMessageItemBody({\n  className = '',\n  message,\n  isByMe = false,\n  mouseHover = false,\n  isMentionEnabled = false,\n  isReactionEnabled = false,\n}: Props): ReactElement {\n  const { stringSet } = useContext(LocalizationContext);\n  const isMessageMentioned = isMentionEnabled\n    && message?.mentionedMessageTemplate?.length > 0\n    && message?.mentionedUsers?.length > 0;\n  const tokens = useMemo(() => {\n    if (isMessageMentioned) {\n      return tokenizeMessage({\n        mentionedUsers: message?.mentionedUsers,\n        messageText: message?.mentionedMessageTemplate,\n      });\n    }\n    return tokenizeMessage({\n      messageText: message?.message,\n    });\n  }, [message?.updatedAt]);\n  return (\n    <Label\n      type={LabelTypography.BODY_1}\n      color={isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1}\n    >\n      <div className={getClassName([\n        className,\n        TEXT_MESSAGE_BODY_CLASSNAME,\n        isByMe ? 'outgoing' : 'incoming',\n        mouseHover ? 'mouse-hover' : '',\n        (isReactionEnabled && message?.reactions?.length > 0) ? 'reactions' : '',\n      ])}>\n        <TextFragment tokens={tokens} />\n        {\n          isEditedMessage(message) && (\n            <Label\n              className=\"sendbird-text-message-item-body__message edited\"\n              type={LabelTypography.BODY_1}\n              color={isByMe ? LabelColors.ONCONTENT_2 : LabelColors.ONBACKGROUND_2}\n            >\n              {` ${stringSet.MESSAGE_EDITED} `}\n            </Label>\n          )\n        }\n      </div>\n    </Label>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}