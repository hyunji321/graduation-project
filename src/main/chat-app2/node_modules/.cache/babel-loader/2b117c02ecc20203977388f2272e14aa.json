{"ast":null,"code":"import React__default, { useRef, useState, useEffect } from 'react';\nimport { u as useLocalization } from './LocalizationContext-076d6d2e.js';\nimport { useVoicePlayer } from './VoicePlayer/useVoicePlayer.js';\nimport { useVoiceRecorder, VoiceRecorderStatus } from './VoiceRecorder/useVoiceRecorder.js';\nimport { a as isDisabledBecauseFrozen, b as isDisabledBecauseMuted } from './ChannelProvider-910bbc1f.js';\nimport { V as VoiceMessageInputStatus, a as VoiceMessageInput } from './index-e6e562c5.js';\nimport Modal from './ui/Modal.js';\nimport Button, { ButtonTypes, ButtonSizes } from './ui/Button.js';\nimport useSendbirdStateContext from './useSendbirdStateContext.js';\nimport { a as VOICE_RECORDER_DEFAULT_MIN } from './consts-95d8566e.js';\nimport { a as VOICE_PLAYER_STATUS } from './index-5c985608.js';\nimport { u as uuidv4 } from './uuid-1adedf62.js';\nconst VoiceMessageInputWrapper = _ref => {\n  var _config$voiceRecord;\n  let {\n    channel,\n    onCancelClick,\n    onSubmitClick\n  } = _ref;\n  const uuid = useRef(uuidv4()).current;\n  const [audioFile, setAudioFile] = useState(null);\n  const [voiceInputState, setVoiceInputState] = useState(VoiceMessageInputStatus.READY_TO_RECORD);\n  const [isSubmitted, setSubmit] = useState(false);\n  const [isDisabled, setDisabled] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const {\n    stringSet\n  } = useLocalization();\n  const {\n    config\n  } = useSendbirdStateContext();\n  const minRecordingTime = (config === null || config === void 0 ? void 0 : (_config$voiceRecord = config.voiceRecord) === null || _config$voiceRecord === void 0 ? void 0 : _config$voiceRecord.minRecordingTime) || VOICE_RECORDER_DEFAULT_MIN;\n  const {\n    start,\n    stop,\n    cancel,\n    recordingTime,\n    recordingStatus,\n    recordingLimit\n  } = useVoiceRecorder({\n    onRecordingStarted: () => {\n      setVoiceInputState(VoiceMessageInputStatus.RECORDING);\n    },\n    onRecordingEnded: audioFile => {\n      setAudioFile(audioFile);\n    }\n  });\n  const voicePlayer = useVoicePlayer({\n    channelUrl: channel === null || channel === void 0 ? void 0 : channel.url,\n    key: uuid,\n    audioFile: audioFile\n  });\n  const {\n    play,\n    pause,\n    playbackTime,\n    playingStatus\n  } = voicePlayer;\n  const stopVoicePlayer = voicePlayer.stop;\n\n  // disabled state: muted & frozen\n  useEffect(() => {\n    if (isDisabledBecauseFrozen(channel) || isDisabledBecauseMuted(channel)) {\n      setDisabled(true);\n    } else {\n      setDisabled(false);\n    }\n  }, [channel === null || channel === void 0 ? void 0 : channel.myRole, channel === null || channel === void 0 ? void 0 : channel.isFrozen, channel === null || channel === void 0 ? void 0 : channel.myMutedState]);\n\n  // call onSubmitClick when submit button is clicked and recorded audio file is created\n  useEffect(() => {\n    if (isSubmitted && audioFile) {\n      onSubmitClick(audioFile, recordingTime);\n      setSubmit(false);\n      setAudioFile(null);\n    }\n  }, [isSubmitted, audioFile, recordingTime]);\n  // operate which control button should be displayed\n  useEffect(() => {\n    if (audioFile) {\n      if (recordingTime < minRecordingTime) {\n        setVoiceInputState(VoiceMessageInputStatus.READY_TO_RECORD);\n        setAudioFile(null);\n      } else if (playingStatus === VOICE_PLAYER_STATUS.PLAYING) {\n        setVoiceInputState(VoiceMessageInputStatus.PLAYING);\n      } else {\n        setVoiceInputState(VoiceMessageInputStatus.READY_TO_PLAY);\n      }\n    }\n  }, [audioFile, recordingTime, playingStatus]);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-voice-message-input-wrapper\"\n  }, /*#__PURE__*/React__default.createElement(VoiceMessageInput, {\n    currentValue: recordingStatus === VoiceRecorderStatus.COMPLETED ? playbackTime : recordingTime,\n    maximumValue: recordingStatus === VoiceRecorderStatus.COMPLETED ? recordingTime : recordingLimit,\n    currentType: voiceInputState,\n    onCancelClick: () => {\n      onCancelClick();\n      cancel();\n    },\n    onSubmitClick: () => {\n      if (isDisabled) {\n        setShowModal(true);\n        setVoiceInputState(VoiceMessageInputStatus.READY_TO_RECORD);\n      } else {\n        stop();\n        pause();\n        setSubmit(true);\n      }\n    },\n    onControlClick: type => {\n      switch (type) {\n        case VoiceMessageInputStatus.READY_TO_RECORD:\n          {\n            stopVoicePlayer();\n            start();\n            break;\n          }\n        case VoiceMessageInputStatus.RECORDING:\n          {\n            if (recordingTime >= minRecordingTime && !isDisabled) {\n              stop();\n            } else if (isDisabled) {\n              cancel();\n              setShowModal(true);\n              setVoiceInputState(VoiceMessageInputStatus.READY_TO_RECORD);\n            } else {\n              cancel();\n              setVoiceInputState(VoiceMessageInputStatus.READY_TO_RECORD);\n            }\n            break;\n          }\n        case VoiceMessageInputStatus.READY_TO_PLAY:\n          {\n            play();\n            break;\n          }\n        case VoiceMessageInputStatus.PLAYING:\n          {\n            pause();\n            break;\n          }\n      }\n    }\n  }), showModal && /*#__PURE__*/React__default.createElement(Modal, {\n    className: \"sendbird-voice-message-input-wrapper-alert\",\n    titleText: isDisabledBecauseMuted(channel) ? stringSet.MODAL__VOICE_MESSAGE_INPUT_DISABLED__TITLE_MUTED : stringSet.MODAL__VOICE_MESSAGE_INPUT_DISABLED__TITLE_FROZEN,\n    hideFooter: true,\n    isCloseOnClickOutside: true,\n    onCancel: () => {\n      setShowModal(false);\n      onCancelClick();\n    }\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-voice-message-input-wrapper-alert__body\"\n  }, /*#__PURE__*/React__default.createElement(Button, {\n    className: \"sendbird-voice-message-input-wrapper-alert__body__ok-button\",\n    type: ButtonTypes.PRIMARY,\n    size: ButtonSizes.BIG,\n    onClick: () => {\n      setShowModal(false);\n      onCancelClick();\n    }\n  }, stringSet.BUTTON__OK))));\n};\nexport { VoiceMessageInputWrapper as V };","map":{"version":3,"mappings":"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","names":["VoiceMessageInputWrapper","_ref","channel","onCancelClick","onSubmitClick","uuid","useRef","uuidv4","current","audioFile","setAudioFile","useState","voiceInputState","setVoiceInputState","VoiceMessageInputStatus","READY_TO_RECORD","isSubmitted","setSubmit","isDisabled","setDisabled","showModal","setShowModal","stringSet","useLocalization","config","useSendbirdStateContext","minRecordingTime","voiceRecord","_config$voiceRecord","VOICE_RECORDER_DEFAULT_MIN","start","stop","cancel","recordingTime","recordingStatus","recordingLimit","useVoiceRecorder","onRecordingStarted","RECORDING","onRecordingEnded","voicePlayer","useVoicePlayer","channelUrl","url","key","play","pause","playbackTime","playingStatus","stopVoicePlayer","useEffect","isDisabledBecauseFrozen","isDisabledBecauseMuted","myRole","isFrozen","myMutedState","VOICE_PLAYER_STATUS","PLAYING","READY_TO_PLAY","React","className","VoiceMessageInput","currentValue","VoiceRecorderStatus","COMPLETED","maximumValue","currentType","onControlClick","type","Modal","titleText","MODAL__VOICE_MESSAGE_INPUT_DISABLED__TITLE_MUTED","MODAL__VOICE_MESSAGE_INPUT_DISABLED__TITLE_FROZEN","hideFooter","isCloseOnClickOutside","onCancel","Button","ButtonTypes","PRIMARY","size","ButtonSizes","BIG","onClick","BUTTON__OK"],"sources":["C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Channel\\components\\MessageInput\\VoiceMessageInputWrapper.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\nimport './voice-message-wrapper.scss';\n\nimport { useLocalization } from '../../../../lib/LocalizationContext';\nimport { useVoicePlayer } from '../../../../hooks/VoicePlayer/useVoicePlayer';\nimport { useVoiceRecorder, VoiceRecorderStatus } from '../../../../hooks/VoiceRecorder/useVoiceRecorder';\nimport { isDisabledBecauseFrozen, isDisabledBecauseMuted } from '../../context/utils';\n\nimport { VoiceMessageInput } from '../../../../ui/VoiceMessageInput';\nimport { VoiceMessageInputStatus } from '../../../../ui/VoiceMessageInput/types';\nimport Modal from '../../../../ui/Modal';\nimport Button, { ButtonSizes, ButtonTypes } from '../../../../ui/Button';\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\nimport { VOICE_RECORDER_DEFAULT_MIN } from '../../../../utils/consts';\nimport { VOICE_PLAYER_STATUS } from '../../../../hooks/VoicePlayer/dux/initialState';\nimport uuidv4 from '../../../../utils/uuid';\n\nexport interface VoiceMessageInputWrapperProps {\n  channel?: GroupChannel;\n  onCancelClick?: () => void;\n  onSubmitClick?: (file: File, duration: number) => void;\n}\n\nexport const VoiceMessageInputWrapper = ({\n  channel,\n  onCancelClick,\n  onSubmitClick,\n}: VoiceMessageInputWrapperProps): React.ReactElement => {\n  const uuid = useRef<string>(uuidv4()).current;\n  const [audioFile, setAudioFile] = useState<File>(null);\n  const [voiceInputState, setVoiceInputState] = useState<VoiceMessageInputStatus>(VoiceMessageInputStatus.READY_TO_RECORD);\n  const [isSubmitted, setSubmit] = useState(false);\n  const [isDisabled, setDisabled] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const { stringSet } = useLocalization();\n  const { config } = useSendbirdStateContext();\n  const minRecordingTime = config?.voiceRecord?.minRecordingTime || VOICE_RECORDER_DEFAULT_MIN;\n  const {\n    start,\n    stop,\n    cancel,\n    recordingTime,\n    recordingStatus,\n    recordingLimit,\n  } = useVoiceRecorder({\n    onRecordingStarted: () => {\n      setVoiceInputState(VoiceMessageInputStatus.RECORDING);\n    },\n    onRecordingEnded: (audioFile) => {\n      setAudioFile(audioFile);\n    },\n  });\n  const voicePlayer = useVoicePlayer({\n    channelUrl: channel?.url,\n    key: uuid,\n    audioFile: audioFile,\n  });\n  const {\n    play,\n    pause,\n    playbackTime,\n    playingStatus,\n  } = voicePlayer;\n  const stopVoicePlayer = voicePlayer.stop;\n\n  // disabled state: muted & frozen\n  useEffect(() => {\n    if (isDisabledBecauseFrozen(channel) || isDisabledBecauseMuted(channel)) {\n      setDisabled(true);\n    } else {\n      setDisabled(false);\n    }\n  }, [channel?.myRole, channel?.isFrozen, channel?.myMutedState]);\n\n  // call onSubmitClick when submit button is clicked and recorded audio file is created\n  useEffect(() => {\n    if (isSubmitted && audioFile) {\n      onSubmitClick(audioFile, recordingTime);\n      setSubmit(false);\n      setAudioFile(null);\n    }\n  }, [isSubmitted, audioFile, recordingTime]);\n  // operate which control button should be displayed\n  useEffect(() => {\n    if (audioFile) {\n      if (recordingTime < minRecordingTime) {\n        setVoiceInputState(VoiceMessageInputStatus.READY_TO_RECORD);\n        setAudioFile(null);\n      } else if (playingStatus === VOICE_PLAYER_STATUS.PLAYING) {\n        setVoiceInputState(VoiceMessageInputStatus.PLAYING);\n      } else {\n        setVoiceInputState(VoiceMessageInputStatus.READY_TO_PLAY);\n      }\n    }\n  }, [audioFile, recordingTime, playingStatus]);\n\n  return (\n    <div className=\"sendbird-voice-message-input-wrapper\">\n      <VoiceMessageInput\n        currentValue={recordingStatus === VoiceRecorderStatus.COMPLETED ? playbackTime : recordingTime}\n        maximumValue={recordingStatus === VoiceRecorderStatus.COMPLETED ? recordingTime : recordingLimit}\n        currentType={voiceInputState}\n        onCancelClick={() => {\n          onCancelClick();\n          cancel();\n        }}\n        onSubmitClick={() => {\n          if (isDisabled) {\n            setShowModal(true);\n            setVoiceInputState(VoiceMessageInputStatus.READY_TO_RECORD);\n          } else {\n            stop();\n            pause();\n            setSubmit(true);\n          }\n        }}\n        onControlClick={(type) => {\n          switch (type) {\n            case VoiceMessageInputStatus.READY_TO_RECORD: {\n              stopVoicePlayer();\n              start();\n              break;\n            }\n            case VoiceMessageInputStatus.RECORDING: {\n              if (recordingTime >= minRecordingTime && !isDisabled) {\n                stop();\n              } else if (isDisabled) {\n                cancel();\n                setShowModal(true);\n                setVoiceInputState(VoiceMessageInputStatus.READY_TO_RECORD);\n              } else {\n                cancel();\n                setVoiceInputState(VoiceMessageInputStatus.READY_TO_RECORD);\n              }\n              break;\n            }\n            case VoiceMessageInputStatus.READY_TO_PLAY: {\n              play();\n              break;\n            }\n            case VoiceMessageInputStatus.PLAYING: {\n              pause();\n              break;\n            }\n          }\n        }}\n      />\n      {\n        showModal && (\n          <Modal\n            className=\"sendbird-voice-message-input-wrapper-alert\"\n            titleText={isDisabledBecauseMuted(channel)\n              ? stringSet.MODAL__VOICE_MESSAGE_INPUT_DISABLED__TITLE_MUTED\n              : stringSet.MODAL__VOICE_MESSAGE_INPUT_DISABLED__TITLE_FROZEN\n            }\n            hideFooter\n            isCloseOnClickOutside\n            onCancel={() => {\n              setShowModal(false);\n              onCancelClick();\n            }}\n          >\n            <div className=\"sendbird-voice-message-input-wrapper-alert__body\">\n              <Button\n                className=\"sendbird-voice-message-input-wrapper-alert__body__ok-button\"\n                type={ButtonTypes.PRIMARY}\n                size={ButtonSizes.BIG}\n                onClick={() => {\n                  setShowModal(false);\n                  onCancelClick();\n                }}\n              >\n                {stringSet.BUTTON__OK}\n              </Button>\n            </div>\n          </Modal>\n        )\n      }\n    </div>\n  );\n};\n\nexport default VoiceMessageInputWrapper;\n"]},"metadata":{},"sourceType":"module"}