{"ast":null,"code":"import { b as _extends, _ as _objectSpread2 } from '../_rollupPluginBabelHelpers-6bb0305c.js';\nimport React__default, { useContext, useRef, useState } from 'react';\nimport { f as format } from '../index-7cdd58b8.js';\nimport Avatar from './Avatar.js';\nimport UserProfile from './UserProfile.js';\nimport { M as MessageStatus } from '../index-5c1b672d.js';\nimport MessageItemMenu from './MessageItemMenu.js';\nimport MessageItemReactionMenu from './MessageItemReactionMenu.js';\nimport ContextMenu, { MenuItems } from './ContextMenu.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../index-63949de5.js';\nimport EmojiReactions from './EmojiReactions.js';\nimport AdminMessage from './AdminMessage.js';\nimport TextMessageItemBody from './TextMessageItemBody.js';\nimport FileMessageItemBody from './FileMessageItemBody.js';\nimport ThumbnailMessageItemBody from './ThumbnailMessageItemBody.js';\nimport OGMessageItemBody from './OGMessageItemBody.js';\nimport UnknownMessageItemBody from './UnknownMessageItemBody.js';\nimport QuoteMessage from './QuoteMessage.js';\nimport { s as getUIKitMessageTypes, h as getClassName, u as getSenderName, v as isTextMessage, w as isOGMessage, r as getUIKitMessageType, d as isVoiceMessage, m as isThumbnailMessage } from '../index-7eb65acf.js';\nimport { a as UserProfileContext } from '../UserProfileContext-9cfbab4d.js';\nimport { u as useLocalization } from '../LocalizationContext-076d6d2e.js';\nimport useSendbirdStateContext from '../useSendbirdStateContext.js';\nimport { u as useLongPress } from '../useLongPress-1303953d.js';\nimport { M as MobileMenu } from '../index-aca30408.js';\nimport { u as useMediaQueryContext } from '../MediaQueryContext-11f0e43f.js';\nimport ThreadReplies from './ThreadReplies.js';\nimport { T as ThreadReplySelectType } from '../const-b3f02313.js';\nimport { VoiceMessageItemBody } from './VoiceMessageItemBody.js';\nimport { n as noop } from '../utils-4bbbca2c.js';\nimport '../index-99aabd9e.js';\nimport './ImageRenderer.js';\nimport './Icon.js';\nimport 'prop-types';\nimport '../uuid-1adedf62.js';\nimport '../sendbirdSelectors.js';\nimport '../topics-b2b77fb9.js';\nimport './Button.js';\nimport '../stringSet-13bbd4a2.js';\nimport './Loader.js';\nimport '../utils/message/getOutgoingMessageState.js';\nimport '../index-306bc4ab.js';\nimport '../index-fe932783.js';\nimport './IconButton.js';\nimport '../types-4ff4177c.js';\nimport './ReactionButton.js';\nimport 'react-dom';\nimport './SortByRow.js';\nimport './ReactionBadge.js';\nimport './BottomSheet.js';\nimport '../index-38e61c64.js';\nimport './UserListItem.js';\nimport './MutedAvatarOverlay.js';\nimport './Checkbox.js';\nimport './Tooltip.js';\nimport './TooltipWrapper.js';\nimport '../Message/context.js';\nimport '../tokenize-c40f2b57.js';\nimport '../index-2c3e11ea.js';\nimport '../index.module-54d57ec3.js';\nimport './MentionLabel.js';\nimport './LinkLabel.js';\nimport '../consts-c41580ae.js';\nimport './TextButton.js';\nimport '../color-879cc347.js';\nimport '../consts-81544e52.js';\nimport '../withSendbird.js';\nimport './ProgressBar.js';\nimport '../VoicePlayer/useVoicePlayer.js';\nimport '../index-5c985608.js';\nimport '../consts-95d8566e.js';\nimport '../VoiceRecorder/context.js';\nimport './PlaybackTime.js';\n\n// should initialize in UserProfileContext.jsx\n\nfunction MessageContent(_ref) {\n  var _sender, _message$threadInfo, _message$isAdminMessa, _channel$members2, _channel$members2$fin, _channel$joinedAt, _message$parentMessag, _message$parentMessag2, _channel$url, _message$reactions, _message$isUserMessag, _message$isFileMessag;\n  let {\n    className,\n    userId,\n    channel,\n    message,\n    disabled = false,\n    chainTop = false,\n    chainBottom = false,\n    isReactionEnabled = false,\n    disableQuoteMessage = false,\n    replyType,\n    threadReplySelectType,\n    nicknamesMap,\n    emojiContainer,\n    scrollToMessage,\n    showEdit,\n    showRemove,\n    showFileViewer,\n    resendMessage,\n    toggleReaction,\n    setQuoteMessage,\n    onReplyInThread,\n    onQuoteMessageClick,\n    onMessageHeightChange\n  } = _ref;\n  const messageTypes = getUIKitMessageTypes();\n  const {\n    dateLocale\n  } = useLocalization();\n  const {\n    config\n  } = (useSendbirdStateContext === null || useSendbirdStateContext === void 0 ? void 0 : useSendbirdStateContext()) || {};\n  const {\n    disableUserProfile,\n    renderUserProfile\n  } = useContext(UserProfileContext);\n  const avatarRef = useRef(null);\n  const contentRef = useRef(null);\n  const {\n    isMobile\n  } = useMediaQueryContext();\n  const [showMenu, setShowMenu] = useState(false);\n  const [mouseHover, setMouseHover] = useState(false);\n  const [supposedHover, setSupposedHover] = useState(false);\n  const isByMe = userId === (message === null || message === void 0 ? void 0 : (_sender = message.sender) === null || _sender === void 0 ? void 0 : _sender.userId) || (message === null || message === void 0 ? void 0 : message.sendingStatus) === 'pending' || (message === null || message === void 0 ? void 0 : message.sendingStatus) === 'failed';\n  const isByMeClassName = isByMe ? 'outgoing' : 'incoming';\n  const chainTopClassName = chainTop ? 'chain-top' : '';\n  const isReactionEnabledInChannel = isReactionEnabled && !(channel !== null && channel !== void 0 && channel.isEphemeral);\n  const isReactionEnabledClassName = isReactionEnabledInChannel ? 'use-reactions' : '';\n  const supposedHoverClassName = supposedHover ? 'sendbird-mouse-hover' : '';\n  const useReplying = !!((replyType === 'QUOTE_REPLY' || replyType === 'THREAD') && message !== null && message !== void 0 && message.parentMessageId && message !== null && message !== void 0 && message.parentMessage && !disableQuoteMessage);\n  const useReplyingClassName = useReplying ? 'use-quote' : '';\n\n  // Thread replies\n  const displayThreadReplies = (message === null || message === void 0 ? void 0 : (_message$threadInfo = message.threadInfo) === null || _message$threadInfo === void 0 ? void 0 : _message$threadInfo.replyCount) > 0 && replyType === 'THREAD';\n\n  // onMouseDown: (e: React.MouseEvent<T>) => void;\n  // onTouchStart: (e: React.TouchEvent<T>) => void;\n  // onMouseUp: (e: React.MouseEvent<T>) => void;\n  // onMouseLeave: (e: React.MouseEvent<T>) => void;\n  // onTouchEnd: (e: React.TouchEvent<T>) => void;\n  const longPress = useLongPress({\n    onLongPress: () => {\n      if (isMobile) {\n        setShowMenu(true);\n      }\n    },\n    onClick: noop\n  }, {\n    delay: 300,\n    shouldPreventDefault: false\n  });\n  if (message !== null && message !== void 0 && (_message$isAdminMessa = message.isAdminMessage) !== null && _message$isAdminMessa !== void 0 && _message$isAdminMessa.call(message) || (message === null || message === void 0 ? void 0 : message.messageType) === 'admin') {\n    return /*#__PURE__*/React__default.createElement(AdminMessage, {\n      message: message\n    });\n  }\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName([className, 'sendbird-message-content', isByMeClassName]),\n    onMouseOver: () => setMouseHover(true),\n    onMouseLeave: () => setMouseHover(false)\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName(['sendbird-message-content__left', isReactionEnabledClassName, isByMeClassName, useReplyingClassName])\n  }, !isByMe && !chainBottom && /*#__PURE__*/\n  /** user profile */\n  React__default.createElement(ContextMenu, {\n    menuTrigger: toggleDropdown => {\n      var _channel$members, _channel$members$find, _message$sender2;\n      return /*#__PURE__*/React__default.createElement(Avatar, {\n        className: `sendbird-message-content__left__avatar ${displayThreadReplies ? 'use-thread-replies' : ''}`\n        // @ts-ignore\n        ,\n\n        src: (channel === null || channel === void 0 ? void 0 : (_channel$members = channel.members) === null || _channel$members === void 0 ? void 0 : (_channel$members$find = _channel$members.find(member => {\n          var _message$sender;\n          return (member === null || member === void 0 ? void 0 : member.userId) === (message === null || message === void 0 ? void 0 : (_message$sender = message.sender) === null || _message$sender === void 0 ? void 0 : _message$sender.userId);\n        })) === null || _channel$members$find === void 0 ? void 0 : _channel$members$find.profileUrl) || (message === null || message === void 0 ? void 0 : (_message$sender2 = message.sender) === null || _message$sender2 === void 0 ? void 0 : _message$sender2.profileUrl) || ''\n        // TODO: Divide getting profileUrl logic to utils\n        ,\n\n        ref: avatarRef,\n        width: \"28px\",\n        height: \"28px\",\n        onClick: () => {\n          if (!disableUserProfile) toggleDropdown();\n        }\n      });\n    },\n    menuItems: closeDropdown => /*#__PURE__*/React__default.createElement(MenuItems\n    /**\n    * parentRef: For catching location(x, y) of MenuItems\n    * parentContainRef: For toggling more options(menus & reactions)\n    */, {\n      parentRef: avatarRef,\n      parentContainRef: avatarRef,\n      closeDropdown: closeDropdown,\n      style: {\n        paddingTop: '0px',\n        paddingBottom: '0px'\n      }\n    }, renderUserProfile\n    // @ts-ignore\n    ? renderUserProfile({\n      user: message === null || message === void 0 ? void 0 : message.sender,\n      close: closeDropdown\n    })\n    // @ts-ignore\n    : /*#__PURE__*/React__default.createElement(UserProfile, {\n      user: message.sender,\n      onSuccess: closeDropdown\n    }))\n  }), isByMe && !isMobile && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName(['sendbird-message-content-menu', isReactionEnabledClassName, supposedHoverClassName, isByMeClassName])\n  }, /*#__PURE__*/React__default.createElement(MessageItemMenu, {\n    className: \"sendbird-message-content-menu__normal-menu\",\n    channel: channel,\n    message: message,\n    isByMe: isByMe,\n    replyType: replyType,\n    disabled: disabled,\n    showEdit: showEdit,\n    showRemove: showRemove,\n    resendMessage: resendMessage,\n    setQuoteMessage: setQuoteMessage,\n    setSupposedHover: setSupposedHover,\n    onReplyInThread: _ref2 => {\n      let {\n        message\n      } = _ref2;\n      if (threadReplySelectType === ThreadReplySelectType.THREAD) {\n        onReplyInThread({\n          message\n        });\n      } else if (threadReplySelectType === ThreadReplySelectType.PARENT) {\n        scrollToMessage(message.parentMessage.createdAt, message.parentMessageId);\n      }\n    }\n  }), isReactionEnabledInChannel && /*#__PURE__*/React__default.createElement(MessageItemReactionMenu, {\n    className: \"sendbird-message-content-menu__reaction-menu\",\n    message: message,\n    userId: userId,\n    spaceFromTrigger: {},\n    emojiContainer: emojiContainer,\n    toggleReaction: toggleReaction,\n    setSupposedHover: setSupposedHover\n  }))), /*#__PURE__*/React__default.createElement(\"div\", _extends({\n    className: \"sendbird-message-content__middle\"\n  }, isMobile ? _objectSpread2({}, longPress) : {}, {\n    ref: contentRef\n  }), !isByMe && !chainTop && !useReplying && /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-message-content__middle__sender-name\",\n    type: LabelTypography.CAPTION_2,\n    color: LabelColors.ONBACKGROUND_2\n  },\n  // @ts-ignore\n  (channel === null || channel === void 0 ? void 0 : (_channel$members2 = channel.members) === null || _channel$members2 === void 0 ? void 0 : (_channel$members2$fin = _channel$members2.find(member => {\n    var _message$sender3;\n    return (member === null || member === void 0 ? void 0 : member.userId) === (message === null || message === void 0 ? void 0 : (_message$sender3 = message.sender) === null || _message$sender3 === void 0 ? void 0 : _message$sender3.userId);\n  })) === null || _channel$members2$fin === void 0 ? void 0 : _channel$members2$fin.nickname) || getSenderName(message)\n  // TODO: Divide getting profileUrl logic to utils\n  ), useReplying ? /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName(['sendbird-message-content__middle__quote-message', isByMe ? 'outgoing' : 'incoming', useReplyingClassName])\n  }, /*#__PURE__*/React__default.createElement(QuoteMessage, {\n    className: \"sendbird-message-content__middle__quote-message__quote\",\n    message: message,\n    userId: userId,\n    isByMe: isByMe,\n    isUnavailable: replyType === 'THREAD' && ((_channel$joinedAt = channel === null || channel === void 0 ? void 0 : channel.joinedAt) !== null && _channel$joinedAt !== void 0 ? _channel$joinedAt : 0 * 1000) > ((_message$parentMessag = (_message$parentMessag2 = message.parentMessage) === null || _message$parentMessag2 === void 0 ? void 0 : _message$parentMessag2.createdAt) !== null && _message$parentMessag !== void 0 ? _message$parentMessag : 0),\n    onClick: () => {\n      var _message$parentMessag3;\n      if (replyType === 'THREAD' && threadReplySelectType === ThreadReplySelectType.THREAD) {\n        onQuoteMessageClick === null || onQuoteMessageClick === void 0 ? void 0 : onQuoteMessageClick({\n          message: message\n        });\n      }\n      if ((replyType === 'QUOTE_REPLY' || replyType === 'THREAD' && threadReplySelectType === ThreadReplySelectType.PARENT) && message !== null && message !== void 0 && (_message$parentMessag3 = message.parentMessage) !== null && _message$parentMessag3 !== void 0 && _message$parentMessag3.createdAt && message !== null && message !== void 0 && message.parentMessageId) {\n        scrollToMessage(message.parentMessage.createdAt, message.parentMessageId);\n      }\n    }\n  })) : null, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName(['sendbird-message-content__middle__body-container'])\n  }, isByMe && !chainBottom && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName(['sendbird-message-content__middle__body-container__created-at', 'left', supposedHoverClassName])\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message-content__middle__body-container__created-at__component-container\"\n  }, /*#__PURE__*/React__default.createElement(MessageStatus, {\n    message: message,\n    channel: channel\n  }))), isTextMessage(message) && /*#__PURE__*/React__default.createElement(TextMessageItemBody, {\n    className: \"sendbird-message-content__middle__message-item-body\",\n    message: message,\n    isByMe: isByMe,\n    mouseHover: mouseHover,\n    isMentionEnabled: (config === null || config === void 0 ? void 0 : config.isMentionEnabled) || false,\n    isReactionEnabled: isReactionEnabledInChannel\n  }), isOGMessage(message) && /*#__PURE__*/React__default.createElement(OGMessageItemBody, {\n    className: \"sendbird-message-content__middle__message-item-body\",\n    message: message,\n    isByMe: isByMe,\n    mouseHover: mouseHover,\n    isMentionEnabled: (config === null || config === void 0 ? void 0 : config.isMentionEnabled) || false,\n    isReactionEnabled: isReactionEnabledInChannel,\n    onMessageHeightChange: onMessageHeightChange\n  }), getUIKitMessageType(message) === messageTypes.FILE && /*#__PURE__*/React__default.createElement(FileMessageItemBody, {\n    className: \"sendbird-message-content__middle__message-item-body\",\n    message: message,\n    isByMe: isByMe,\n    mouseHover: mouseHover,\n    isReactionEnabled: isReactionEnabledInChannel\n  }), isVoiceMessage(message) && /*#__PURE__*/React__default.createElement(VoiceMessageItemBody, {\n    className: \"sendbird-message-content__middle__message-item-body\",\n    message: message,\n    channelUrl: (_channel$url = channel === null || channel === void 0 ? void 0 : channel.url) !== null && _channel$url !== void 0 ? _channel$url : '',\n    isByMe: isByMe,\n    isReactionEnabled: isReactionEnabledInChannel\n  }), isThumbnailMessage(message) && /*#__PURE__*/React__default.createElement(ThumbnailMessageItemBody, {\n    className: \"sendbird-message-content__middle__message-item-body\",\n    message: message,\n    isByMe: isByMe,\n    mouseHover: mouseHover,\n    isReactionEnabled: isReactionEnabledInChannel,\n    showFileViewer: showFileViewer,\n    style: isMobile ? {\n      width: '100%'\n    } : {}\n  }), getUIKitMessageType(message) === messageTypes.UNKNOWN && /*#__PURE__*/React__default.createElement(UnknownMessageItemBody, {\n    className: \"sendbird-message-content__middle__message-item-body\",\n    message: message,\n    isByMe: isByMe,\n    mouseHover: mouseHover,\n    isReactionEnabled: isReactionEnabledInChannel\n  }), isReactionEnabledInChannel && (message === null || message === void 0 ? void 0 : (_message$reactions = message.reactions) === null || _message$reactions === void 0 ? void 0 : _message$reactions.length) > 0 && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName(['sendbird-message-content-reactions', !isByMe || isThumbnailMessage(message) || isOGMessage(message) ? '' : 'primary', mouseHover ? 'mouse-hover' : ''])\n  }, /*#__PURE__*/React__default.createElement(EmojiReactions, {\n    userId: userId,\n    message: message,\n    channel: channel,\n    isByMe: isByMe,\n    emojiContainer: emojiContainer,\n    memberNicknamesMap: nicknamesMap,\n    toggleReaction: toggleReaction\n  })), !isByMe && !chainBottom && /*#__PURE__*/React__default.createElement(Label, {\n    className: getClassName(['sendbird-message-content__middle__body-container__created-at', 'right', supposedHoverClassName]),\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_2\n  }, format((message === null || message === void 0 ? void 0 : message.createdAt) || 0, 'p', {\n    locale: dateLocale\n  }))), displayThreadReplies && /*#__PURE__*/React__default.createElement(ThreadReplies, {\n    className: \"sendbird-message-content__middle__thread-replies\",\n    threadInfo: message === null || message === void 0 ? void 0 : message.threadInfo,\n    onClick: () => onReplyInThread === null || onReplyInThread === void 0 ? void 0 : onReplyInThread({\n      message: message\n    })\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName(['sendbird-message-content__right', chainTopClassName, isReactionEnabledClassName, useReplyingClassName])\n  }, !isByMe && !isMobile && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName(['sendbird-message-content-menu', chainTopClassName, supposedHoverClassName, isByMeClassName])\n  }, isReactionEnabledInChannel && /*#__PURE__*/React__default.createElement(MessageItemReactionMenu, {\n    className: \"sendbird-message-content-menu__reaction-menu\",\n    message: message,\n    userId: userId,\n    spaceFromTrigger: {},\n    emojiContainer: emojiContainer,\n    toggleReaction: toggleReaction,\n    setSupposedHover: setSupposedHover\n  }), /*#__PURE__*/React__default.createElement(MessageItemMenu, {\n    className: \"sendbird-message-content-menu__normal-menu\",\n    channel: channel,\n    message: message,\n    isByMe: isByMe,\n    replyType: replyType,\n    disabled: disabled,\n    showRemove: showRemove,\n    resendMessage: resendMessage,\n    setQuoteMessage: setQuoteMessage,\n    setSupposedHover: setSupposedHover,\n    onReplyInThread: _ref3 => {\n      let {\n        message\n      } = _ref3;\n      if (threadReplySelectType === ThreadReplySelectType.THREAD) {\n        onReplyInThread({\n          message\n        });\n      } else if (threadReplySelectType === ThreadReplySelectType.PARENT) {\n        scrollToMessage(message.parentMessage.createdAt, message.parentMessageId);\n      }\n    }\n  }))), showMenu && ((message === null || message === void 0 ? void 0 : (_message$isUserMessag = message.isUserMessage) === null || _message$isUserMessag === void 0 ? void 0 : _message$isUserMessag.call(message)) || (message === null || message === void 0 ? void 0 : (_message$isFileMessag = message.isFileMessage) === null || _message$isFileMessag === void 0 ? void 0 : _message$isFileMessag.call(message))) && /*#__PURE__*/React__default.createElement(MobileMenu, {\n    parentRef: contentRef,\n    channel: channel,\n    hideMenu: () => {\n      setShowMenu(false);\n    },\n    message: message,\n    isReactionEnabled: isReactionEnabledInChannel,\n    isByMe: isByMe,\n    userId: userId,\n    replyType: replyType,\n    disabled: disabled,\n    showRemove: showRemove,\n    emojiContainer: emojiContainer,\n    resendMessage: resendMessage,\n    setQuoteMessage: setQuoteMessage,\n    toggleReaction: toggleReaction,\n    showEdit: showEdit,\n    onReplyInThread: _ref4 => {\n      let {\n        message\n      } = _ref4;\n      if (threadReplySelectType === ThreadReplySelectType.THREAD) {\n        onReplyInThread === null || onReplyInThread === void 0 ? void 0 : onReplyInThread({\n          message\n        });\n      } else if (threadReplySelectType === ThreadReplySelectType.PARENT) {\n        var _message$parentMessag4;\n        scrollToMessage === null || scrollToMessage === void 0 ? void 0 : scrollToMessage((message === null || message === void 0 ? void 0 : (_message$parentMessag4 = message.parentMessage) === null || _message$parentMessag4 === void 0 ? void 0 : _message$parentMessag4.createdAt) || 0, (message === null || message === void 0 ? void 0 : message.parentMessageId) || 0);\n      }\n    }\n  }));\n}\nexport { MessageContent as default };","map":{"version":3,"mappings":"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","names":["MessageContent","className","userId","channel","message","disabled","chainTop","chainBottom","isReactionEnabled","disableQuoteMessage","replyType","threadReplySelectType","nicknamesMap","emojiContainer","scrollToMessage","showEdit","showRemove","showFileViewer","resendMessage","toggleReaction","setQuoteMessage","onReplyInThread","onQuoteMessageClick","onMessageHeightChange","messageTypes","getUIKitMessageTypes","dateLocale","useLocalization","config","useSendbirdStateContext","disableUserProfile","renderUserProfile","useContext","UserProfileContext","avatarRef","useRef","contentRef","isMobile","useMediaQueryContext","showMenu","setShowMenu","useState","mouseHover","setMouseHover","supposedHover","setSupposedHover","isByMe","sender","_sender","sendingStatus","isByMeClassName","chainTopClassName","isReactionEnabledInChannel","isEphemeral","isReactionEnabledClassName","supposedHoverClassName","useReplying","parentMessageId","parentMessage","useReplyingClassName","displayThreadReplies","threadInfo","_message$threadInfo","replyCount","longPress","useLongPress","onLongPress","onClick","noop","delay","shouldPreventDefault","isAdminMessage","_message$isAdminMessa","messageType","React","ClientAdminMessage","getClassName","onMouseOver","onMouseLeave","ContextMenu","menuTrigger","toggleDropdown","Avatar","src","members","_channel$members","find","member","_message$sender","_channel$members$find","profileUrl","_message$sender2","ref","width","height","menuItems","closeDropdown","MenuItems","parentRef","parentContainRef","style","paddingTop","paddingBottom","user","close","UserProfile","onSuccess","MessageItemMenu","_ref2","ThreadReplySelectType","THREAD","PARENT","createdAt","MessageItemReactionMenu","spaceFromTrigger","Label","type","LabelTypography","CAPTION_2","color","LabelColors","ONBACKGROUND_2","_channel$members2","_message$sender3","_channel$members2$fin","nickname","getSenderName","QuoteMessage","isUnavailable","joinedAt","_message$parentMessag2","_message$parentMessag3","MessageStatus","isTextMessage","TextMessageItemBody","isMentionEnabled","isOGMessage","OGMessageItemBody","getUIKitMessageType","FILE","FileMessageItemBody","isVoiceMessage","VoiceMessageItemBody","channelUrl","url","isThumbnailMessage","ThumbnailMessageItemBody","UNKNOWN","UnknownMessageItemBody","reactions","_message$reactions","length","EmojiReactions","memberNicknamesMap","CAPTION_3","format","locale","ThreadReplies","_ref3","isUserMessage","_message$isUserMessag","isFileMessage","_message$isFileMessag","MobileMenu","hideMenu","_ref4","_message$parentMessag4"],"sources":["C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\ui\\MessageContent\\index.tsx"],"sourcesContent":["import React, {\n  ReactElement,\n  useContext,\n  useRef,\n  useState,\n} from 'react';\nimport format from 'date-fns/format';\nimport './index.scss';\n\nimport Avatar from '../Avatar';\nimport UserProfile from '../UserProfile';\nimport MessageStatus from '../MessageStatus';\nimport MessageItemMenu from '../MessageItemMenu';\nimport MessageItemReactionMenu from '../MessageItemReactionMenu';\nimport ContextMenu, { MenuItems } from '../ContextMenu';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport EmojiReactions from '../EmojiReactions';\n\nimport ClientAdminMessage from '../AdminMessage';\nimport TextMessageItemBody from '../TextMessageItemBody';\nimport FileMessageItemBody from '../FileMessageItemBody';\nimport ThumbnailMessageItemBody from '../ThumbnailMessageItemBody';\nimport OGMessageItemBody from '../OGMessageItemBody';\nimport UnknownMessageItemBody from '../UnknownMessageItemBody';\nimport QuoteMessage from '../QuoteMessage';\n\nimport {\n  getClassName,\n  getUIKitMessageTypes,\n  getUIKitMessageType,\n  isTextMessage,\n  isOGMessage,\n  isThumbnailMessage,\n  getSenderName,\n  isVoiceMessage,\n} from '../../utils';\nimport { UserProfileContext } from '../../lib/UserProfileContext';\nimport { ReplyType } from '../../index';\nimport { useLocalization } from '../../lib/LocalizationContext';\nimport useSendbirdStateContext from '../../hooks/useSendbirdStateContext';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { EmojiContainer } from '@sendbird/chat';\nimport { AdminMessage, FileMessage, Sender, UserMessage } from '@sendbird/chat/message';\nimport useLongPress from '../../hooks/useLongPress';\nimport MobileMenu from '../MobileMenu';\nimport { useMediaQueryContext } from '../../lib/MediaQueryContext';\nimport ThreadReplies from '../ThreadReplies';\nimport { ThreadReplySelectType } from '../../modules/Channel/context/const';\nimport VoiceMessageItemBody from '../VoiceMessageItemBody';\nimport { Nullable } from '../../types';\nimport { noop } from '../../utils/utils';\n\n// should initialize in UserProfileContext.jsx\nexport interface UserProfileContextInterface {\n  disableUserProfile: boolean;\n  isOpenChannel: boolean;\n  renderUserProfile?: (props: { user: Sender, close: () => void }) => React.ReactElement,\n}\n\ninterface Props {\n  className?: string | Array<string>;\n  userId: string;\n  channel: Nullable<GroupChannel>;\n  message: AdminMessage | UserMessage | FileMessage;\n  disabled?: boolean;\n  chainTop?: boolean;\n  chainBottom?: boolean;\n  isReactionEnabled?: boolean;\n  disableQuoteMessage?: boolean;\n  replyType?: ReplyType;\n  threadReplySelectType?: ThreadReplySelectType;\n  nicknamesMap?: Map<string, string>;\n  emojiContainer?: EmojiContainer;\n  scrollToMessage?: (createdAt: number, messageId: number) => void;\n  showEdit?: (bool: boolean) => void;\n  showRemove?: (bool: boolean) => void;\n  showFileViewer?: (bool: boolean) => void;\n  resendMessage?: (message: UserMessage | FileMessage) => Promise<UserMessage | FileMessage>;\n  toggleReaction?: (message: UserMessage | FileMessage, reactionKey: string, isReacted: boolean) => void;\n  setQuoteMessage?: (message: UserMessage | FileMessage) => void;\n  onReplyInThread?: (props: { message: UserMessage | FileMessage }) => void;\n  onQuoteMessageClick?: (props: { message: UserMessage | FileMessage }) => void;\n  onMessageHeightChange?: () => void;\n}\nexport default function MessageContent({\n  className,\n  userId,\n  channel,\n  message,\n  disabled = false,\n  chainTop = false,\n  chainBottom = false,\n  isReactionEnabled = false,\n  disableQuoteMessage = false,\n  replyType,\n  threadReplySelectType,\n  nicknamesMap,\n  emojiContainer,\n  scrollToMessage,\n  showEdit,\n  showRemove,\n  showFileViewer,\n  resendMessage,\n  toggleReaction,\n  setQuoteMessage,\n  onReplyInThread,\n  onQuoteMessageClick,\n  onMessageHeightChange,\n}: Props): ReactElement {\n  const messageTypes = getUIKitMessageTypes();\n  const { dateLocale } = useLocalization();\n  const { config } = useSendbirdStateContext?.() || {};\n  const { disableUserProfile, renderUserProfile }: UserProfileContextInterface = useContext(UserProfileContext);\n  const avatarRef = useRef(null);\n  const contentRef = useRef(null);\n  const { isMobile } = useMediaQueryContext();\n  const [showMenu, setShowMenu] = useState(false);\n  const [mouseHover, setMouseHover] = useState(false);\n  const [supposedHover, setSupposedHover] = useState(false);\n\n  const isByMe = (userId === (message as UserMessage | FileMessage)?.sender?.userId)\n    || ((message as UserMessage | FileMessage)?.sendingStatus === 'pending')\n    || ((message as UserMessage | FileMessage)?.sendingStatus === 'failed');\n  const isByMeClassName = isByMe ? 'outgoing' : 'incoming';\n  const chainTopClassName = chainTop ? 'chain-top' : '';\n  const isReactionEnabledInChannel = isReactionEnabled && !channel?.isEphemeral;\n  const isReactionEnabledClassName = isReactionEnabledInChannel ? 'use-reactions' : '';\n  const supposedHoverClassName = supposedHover ? 'sendbird-mouse-hover' : '';\n  const useReplying = !!((replyType === 'QUOTE_REPLY' || replyType === 'THREAD')\n    && message?.parentMessageId && message?.parentMessage\n    && !disableQuoteMessage\n  );\n  const useReplyingClassName = useReplying ? 'use-quote' : '';\n\n  // Thread replies\n  const displayThreadReplies = message?.threadInfo?.replyCount > 0 && replyType === 'THREAD';\n\n  // onMouseDown: (e: React.MouseEvent<T>) => void;\n  // onTouchStart: (e: React.TouchEvent<T>) => void;\n  // onMouseUp: (e: React.MouseEvent<T>) => void;\n  // onMouseLeave: (e: React.MouseEvent<T>) => void;\n  // onTouchEnd: (e: React.TouchEvent<T>) => void;\n  const longPress = useLongPress({\n    onLongPress: () => {\n      if (isMobile) {\n        setShowMenu(true);\n      }\n    },\n    onClick: noop,\n  }, {\n    delay: 300,\n    shouldPreventDefault: false,\n  });\n\n  if (message?.isAdminMessage?.() || message?.messageType === 'admin') {\n    return (<ClientAdminMessage message={message as AdminMessage} />);\n  }\n  return (\n    <div\n      className={getClassName([className, 'sendbird-message-content', isByMeClassName])}\n      onMouseOver={() => setMouseHover(true)}\n      onMouseLeave={() => setMouseHover(false)}\n    >\n      {/* left */}\n      <div className={getClassName(['sendbird-message-content__left', isReactionEnabledClassName, isByMeClassName, useReplyingClassName])}>\n        {(!isByMe && !chainBottom) && (\n          /** user profile */\n          <ContextMenu\n            menuTrigger={(toggleDropdown: () => void): ReactElement => (\n              <Avatar\n                className={`sendbird-message-content__left__avatar ${displayThreadReplies ? 'use-thread-replies' : ''}`}\n                // @ts-ignore\n                src={channel?.members?.find((member) => member?.userId === message?.sender?.userId)?.profileUrl || message?.sender?.profileUrl || ''}\n                // TODO: Divide getting profileUrl logic to utils\n                ref={avatarRef}\n                width=\"28px\"\n                height=\"28px\"\n                onClick={(): void => { if (!disableUserProfile) toggleDropdown(); }}\n              />\n            )}\n            menuItems={(closeDropdown: () => void): ReactElement => (\n              <MenuItems\n                /**\n                * parentRef: For catching location(x, y) of MenuItems\n                * parentContainRef: For toggling more options(menus & reactions)\n                */\n                parentRef={avatarRef}\n                parentContainRef={avatarRef}\n                closeDropdown={closeDropdown}\n                style={{ paddingTop: '0px', paddingBottom: '0px' }}\n              >\n                {renderUserProfile\n                  // @ts-ignore\n                  ? renderUserProfile({ user: message?.sender, close: closeDropdown })\n                  // @ts-ignore\n                  : (<UserProfile user={message.sender} onSuccess={closeDropdown} />)\n                }\n              </MenuItems>\n            )}\n          />\n        )}\n        {/* outgoing menu */}\n        {isByMe && !isMobile && (\n          <div className={getClassName(['sendbird-message-content-menu', isReactionEnabledClassName, supposedHoverClassName, isByMeClassName])}>\n            <MessageItemMenu\n              className=\"sendbird-message-content-menu__normal-menu\"\n              channel={channel}\n              message={message as UserMessage | FileMessage}\n              isByMe={isByMe}\n              replyType={replyType}\n              disabled={disabled}\n              showEdit={showEdit}\n              showRemove={showRemove}\n              resendMessage={resendMessage}\n              setQuoteMessage={setQuoteMessage}\n              setSupposedHover={setSupposedHover}\n              onReplyInThread={({ message }) => {\n                if (threadReplySelectType === ThreadReplySelectType.THREAD) {\n                  onReplyInThread({ message });\n                } else if (threadReplySelectType === ThreadReplySelectType.PARENT) {\n                  scrollToMessage(message.parentMessage.createdAt, message.parentMessageId);\n                }\n              }}\n            />\n            {isReactionEnabledInChannel && (\n              <MessageItemReactionMenu\n                className=\"sendbird-message-content-menu__reaction-menu\"\n                message={message as UserMessage | FileMessage}\n                userId={userId}\n                spaceFromTrigger={{}}\n                emojiContainer={emojiContainer}\n                toggleReaction={toggleReaction}\n                setSupposedHover={setSupposedHover}\n              />\n            )}\n          </div>\n        )}\n      </div>\n      {/* middle */}\n      <div\n        className=\"sendbird-message-content__middle\"\n        {...(isMobile ? { ...longPress } : {})}\n        ref={contentRef}\n      >\n        {(!isByMe && !chainTop && !useReplying) && (\n          <Label\n            className=\"sendbird-message-content__middle__sender-name\"\n            type={LabelTypography.CAPTION_2}\n            color={LabelColors.ONBACKGROUND_2}\n          >\n            {\n              // @ts-ignore\n              channel?.members?.find((member) => member?.userId === message?.sender?.userId)?.nickname\n              || getSenderName(message as UserMessage | FileMessage)\n              // TODO: Divide getting profileUrl logic to utils\n            }\n          </Label>\n        )}\n        {/* quote message */}\n        {(useReplying) ? (\n          <div className={getClassName(['sendbird-message-content__middle__quote-message', isByMe ? 'outgoing' : 'incoming', useReplyingClassName])}>\n            <QuoteMessage\n              className=\"sendbird-message-content__middle__quote-message__quote\"\n              message={message as UserMessage | FileMessage}\n              userId={userId}\n              isByMe={isByMe}\n              isUnavailable={(replyType === 'THREAD' && (channel?.joinedAt ?? 0 * 1000) > (message.parentMessage?.createdAt ?? 0))}\n              onClick={() => {\n                if (replyType === 'THREAD' && threadReplySelectType === ThreadReplySelectType.THREAD) {\n                  onQuoteMessageClick?.({ message: message as UserMessage | FileMessage });\n                }\n                if (\n                  (replyType === 'QUOTE_REPLY' || (replyType === 'THREAD' && threadReplySelectType === ThreadReplySelectType.PARENT))\n                  && message?.parentMessage?.createdAt && message?.parentMessageId\n                ) {\n                  scrollToMessage(message.parentMessage.createdAt, message.parentMessageId);\n                }\n              }}\n            />\n          </div>\n        ) : null}\n        {/* container: message item body + emoji reactions */}\n        <div className={getClassName(['sendbird-message-content__middle__body-container'])} >\n          {/* message status component */}\n          {(isByMe && !chainBottom) && (\n            <div className={getClassName(['sendbird-message-content__middle__body-container__created-at', 'left', supposedHoverClassName])}>\n              <div className=\"sendbird-message-content__middle__body-container__created-at__component-container\">\n                <MessageStatus\n                  message={message as UserMessage | FileMessage}\n                  channel={channel}\n                />\n              </div>\n            </div>\n          )}\n          {/* message item body components */}\n          {isTextMessage(message as UserMessage) && (\n            <TextMessageItemBody\n              className=\"sendbird-message-content__middle__message-item-body\"\n              message={message as UserMessage}\n              isByMe={isByMe}\n              mouseHover={mouseHover}\n              isMentionEnabled={config?.isMentionEnabled || false}\n              isReactionEnabled={isReactionEnabledInChannel}\n            />\n          )}\n          {(isOGMessage(message as UserMessage)) && (\n            <OGMessageItemBody\n              className=\"sendbird-message-content__middle__message-item-body\"\n              message={message as UserMessage}\n              isByMe={isByMe}\n              mouseHover={mouseHover}\n              isMentionEnabled={config?.isMentionEnabled || false}\n              isReactionEnabled={isReactionEnabledInChannel}\n              onMessageHeightChange={onMessageHeightChange}\n            />\n          )}\n          {(getUIKitMessageType((message as FileMessage)) === messageTypes.FILE) && (\n            <FileMessageItemBody\n              className=\"sendbird-message-content__middle__message-item-body\"\n              message={message as FileMessage}\n              isByMe={isByMe}\n              mouseHover={mouseHover}\n              isReactionEnabled={isReactionEnabledInChannel}\n            />\n          )}\n          {isVoiceMessage(message as FileMessage) && (\n            <VoiceMessageItemBody\n              className=\"sendbird-message-content__middle__message-item-body\"\n              message={message as FileMessage}\n              channelUrl={channel?.url ?? ''}\n              isByMe={isByMe}\n              isReactionEnabled={isReactionEnabledInChannel}\n            />\n          )}\n          {(isThumbnailMessage(message as FileMessage)) && (\n            <ThumbnailMessageItemBody\n              className=\"sendbird-message-content__middle__message-item-body\"\n              message={message as FileMessage}\n              isByMe={isByMe}\n              mouseHover={mouseHover}\n              isReactionEnabled={isReactionEnabledInChannel}\n              showFileViewer={showFileViewer}\n              style={isMobile ? { width: '100%' } : {}}\n            />\n          )}\n          {(getUIKitMessageType((message as FileMessage)) === messageTypes.UNKNOWN) && (\n            <UnknownMessageItemBody\n              className=\"sendbird-message-content__middle__message-item-body\"\n              message={message}\n              isByMe={isByMe}\n              mouseHover={mouseHover}\n              isReactionEnabled={isReactionEnabledInChannel}\n            />\n          )}\n          {/* reactions */}\n          {(isReactionEnabledInChannel && message?.reactions?.length > 0) && (\n            <div className={getClassName([\n              'sendbird-message-content-reactions',\n              (!isByMe || isThumbnailMessage(message as FileMessage) || isOGMessage(message as UserMessage)) ? '' : 'primary',\n              mouseHover ? 'mouse-hover' : '',\n            ])}>\n              <EmojiReactions\n                userId={userId}\n                message={message as UserMessage | FileMessage}\n                channel={channel}\n                isByMe={isByMe}\n                emojiContainer={emojiContainer}\n                memberNicknamesMap={nicknamesMap}\n                toggleReaction={toggleReaction}\n              />\n            </div>\n          )}\n          {(!isByMe && !chainBottom) && (\n            <Label\n              className={getClassName(['sendbird-message-content__middle__body-container__created-at', 'right', supposedHoverClassName])}\n              type={LabelTypography.CAPTION_3}\n              color={LabelColors.ONBACKGROUND_2}\n            >\n              {format(message?.createdAt || 0, 'p', {\n                locale: dateLocale,\n              })}\n            </Label>\n          )}\n        </div>\n        {/* thread replies */}\n        {displayThreadReplies && (\n          <ThreadReplies\n            className=\"sendbird-message-content__middle__thread-replies\"\n            threadInfo={message?.threadInfo}\n            onClick={() => onReplyInThread?.({ message: message as UserMessage | FileMessage })}\n          />\n        )}\n      </div>\n      {/* right */}\n      <div className={getClassName(['sendbird-message-content__right', chainTopClassName, isReactionEnabledClassName, useReplyingClassName])}>\n        {/* incoming menu */}\n        {!isByMe && !isMobile && (\n          <div className={getClassName(['sendbird-message-content-menu', chainTopClassName, supposedHoverClassName, isByMeClassName])}>\n            {isReactionEnabledInChannel && (\n              <MessageItemReactionMenu\n                className=\"sendbird-message-content-menu__reaction-menu\"\n                message={message as UserMessage | FileMessage}\n                userId={userId}\n                spaceFromTrigger={{}}\n                emojiContainer={emojiContainer}\n                toggleReaction={toggleReaction}\n                setSupposedHover={setSupposedHover}\n              />\n            )}\n            <MessageItemMenu\n              className=\"sendbird-message-content-menu__normal-menu\"\n              channel={channel}\n              message={message as UserMessage | FileMessage}\n              isByMe={isByMe}\n              replyType={replyType}\n              disabled={disabled}\n              showRemove={showRemove}\n              resendMessage={resendMessage}\n              setQuoteMessage={setQuoteMessage}\n              setSupposedHover={setSupposedHover}\n              onReplyInThread={({ message }) => {\n                if (threadReplySelectType === ThreadReplySelectType.THREAD) {\n                  onReplyInThread({ message });\n                } else if (threadReplySelectType === ThreadReplySelectType.PARENT) {\n                  scrollToMessage(message.parentMessage.createdAt, message.parentMessageId);\n                }\n              }}\n            />\n          </div>\n        )}\n      </div>\n      {\n        showMenu && (\n          message?.isUserMessage?.() || message?.isFileMessage?.()\n        ) && (\n          <MobileMenu\n            parentRef={contentRef}\n            channel={channel}\n            hideMenu={() => { setShowMenu(false); }}\n            message={message}\n            isReactionEnabled={isReactionEnabledInChannel}\n            isByMe={isByMe}\n            userId={userId}\n            replyType={replyType}\n            disabled={disabled}\n            showRemove={showRemove}\n            emojiContainer={emojiContainer}\n            resendMessage={resendMessage}\n            setQuoteMessage={setQuoteMessage}\n            toggleReaction={toggleReaction}\n            showEdit={showEdit}\n            onReplyInThread={({ message }) => {\n              if (threadReplySelectType === ThreadReplySelectType.THREAD) {\n                onReplyInThread?.({ message });\n              } else if (threadReplySelectType === ThreadReplySelectType.PARENT) {\n                scrollToMessage?.(message?.parentMessage?.createdAt || 0, message?.parentMessageId || 0);\n              }\n            }}\n          />\n        )\n      }\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}