{"ast":null,"code":"import _slicedToArray from \"C:/Users/\\uC774\\uACBD\\uBBFC/IdeaProjects/sendbird-uikit-whatsapp-sample/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _regeneratorRuntime from \"C:/Users/\\uC774\\uACBD\\uBBFC/IdeaProjects/sendbird-uikit-whatsapp-sample/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/\\uC774\\uACBD\\uBBFC/IdeaProjects/sendbird-uikit-whatsapp-sample/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _toConsumableArray from \"C:/Users/\\uC774\\uACBD\\uBBFC/IdeaProjects/sendbird-uikit-whatsapp-sample/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport React__default, { useEffect, useCallback, useReducer, useMemo } from 'react';\nimport { f as format } from './index-7cdd58b8.js';\nimport { getOutgoingMessageState, OutgoingMessageStates } from './utils/message/getOutgoingMessageState.js';\nimport { U as UserProfileProvider } from './UserProfileContext-9cfbab4d.js';\nimport useSendbirdStateContext from './useSendbirdStateContext.js';\nimport { _ as _objectSpread2 } from './_rollupPluginBabelHelpers-6bb0305c.js';\nimport { ChannelStateTypes, ThreadListStateTypes, ParentMessageStateTypes } from './Thread/context/types.js';\nimport { ChannelType } from '@sendbird/chat';\nimport { P as PUBSUB_TOPICS } from './topics-b2b77fb9.js';\nimport { GroupChannelHandler } from '@sendbird/chat/groupChannel';\nimport { u as uuidv4 } from './uuid-1adedf62.js';\nimport { SendingStatus, MessageType, MessageMetaArray } from '@sendbird/chat/message';\nimport { b as VOICE_MESSAGE_FILE_NAME, c as VOICE_MESSAGE_MIME_TYPE, M as META_ARRAY_VOICE_DURATION_KEY, d as META_ARRAY_MESSAGE_TYPE_KEY, e as META_ARRAY_MESSAGE_TYPE_VALUE__VOICE } from './consts-95d8566e.js';\nvar getNicknamesMapFromMembers = function getNicknamesMapFromMembers() {\n  var members = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var nicknamesMap = new Map();\n  for (var memberIndex = 0; memberIndex < members.length; memberIndex += 1) {\n    var _members$memberIndex = members[memberIndex],\n      userId = _members$memberIndex.userId,\n      nickname = _members$memberIndex.nickname;\n    nicknamesMap.set(userId, nickname);\n  }\n  return nicknamesMap;\n};\nvar getParentMessageFrom = function getParentMessageFrom(message) {\n  if (!message) {\n    return null;\n  }\n  if (isParentMessage(message)) {\n    return message;\n  }\n  if (isThreadMessage(message)) {\n    return (message === null || message === void 0 ? void 0 : message.parentMessage) || null;\n  }\n  return null;\n};\nvar isParentMessage = function isParentMessage(message) {\n  return (message === null || message === void 0 ? void 0 : message.parentMessage) === null && typeof (message === null || message === void 0 ? void 0 : message.parentMessageId) === 'number' && !(message !== null && message !== void 0 && message.parentMessageId);\n};\nvar isThreadMessage = function isThreadMessage(message) {\n  return (message === null || message === void 0 ? void 0 : message.parentMessage) !== null && typeof (message === null || message === void 0 ? void 0 : message.parentMessageId) === 'number' && (message === null || message === void 0 ? void 0 : message.parentMessageId) > 0 && (message === null || message === void 0 ? void 0 : message.threadInfo) === null;\n};\nvar isAboutSame = function isAboutSame(a, b, px) {\n  return Math.abs(a - b) <= px;\n};\nvar isEmpty = function isEmpty(val) {\n  return val === null || val === undefined;\n};\n\n// Some Ids return string and number inconsistently\n// only use to comapre IDs\nfunction compareIds(a, b) {\n  if (isEmpty(a) || isEmpty(b)) {\n    return false;\n  }\n  var aString = a.toString();\n  var bString = b.toString();\n  return aString === bString;\n}\nvar getMessageCreatedAt = function getMessageCreatedAt(message) {\n  return format(message.createdAt, 'p');\n};\nvar isReadMessage = function isReadMessage(channel, message) {\n  return getOutgoingMessageState(channel, message) === OutgoingMessageStates.READ;\n};\nvar isSameGroup = function isSameGroup(message, comparingMessage, currentChannel) {\n  var _message$sender, _comparingMessage$sen, _message$sender2, _comparingMessage$sen2;\n  if (!(message && comparingMessage && message.messageType && message.messageType !== 'admin' && comparingMessage.messageType && (comparingMessage === null || comparingMessage === void 0 ? void 0 : comparingMessage.messageType) !== 'admin' && message !== null && message !== void 0 && message.sender && comparingMessage !== null && comparingMessage !== void 0 && comparingMessage.sender && message !== null && message !== void 0 && message.createdAt && comparingMessage !== null && comparingMessage !== void 0 && comparingMessage.createdAt && message !== null && message !== void 0 && (_message$sender = message.sender) !== null && _message$sender !== void 0 && _message$sender.userId && comparingMessage !== null && comparingMessage !== void 0 && (_comparingMessage$sen = comparingMessage.sender) !== null && _comparingMessage$sen !== void 0 && _comparingMessage$sen.userId)) {\n    return false;\n  }\n  return (message === null || message === void 0 ? void 0 : message.sendingStatus) === (comparingMessage === null || comparingMessage === void 0 ? void 0 : comparingMessage.sendingStatus) && (message === null || message === void 0 ? void 0 : (_message$sender2 = message.sender) === null || _message$sender2 === void 0 ? void 0 : _message$sender2.userId) === (comparingMessage === null || comparingMessage === void 0 ? void 0 : (_comparingMessage$sen2 = comparingMessage.sender) === null || _comparingMessage$sen2 === void 0 ? void 0 : _comparingMessage$sen2.userId) && getMessageCreatedAt(message) === getMessageCreatedAt(comparingMessage) && isReadMessage(currentChannel, message) === isReadMessage(currentChannel, comparingMessage);\n};\nvar compareMessagesForGrouping = function compareMessagesForGrouping(prevMessage, currMessage, nextMessage, currentChannel, replyType) {\n  if (replyType === 'THREAD' && currMessage !== null && currMessage !== void 0 && currMessage.threadInfo) {\n    return [false, false];\n  }\n  var sendingStatus = (currMessage === null || currMessage === void 0 ? void 0 : currMessage.sendingStatus) || '';\n  var isAcceptable = sendingStatus !== 'pending' && sendingStatus !== 'failed';\n  return [isSameGroup(prevMessage, currMessage, currentChannel) && isAcceptable, isSameGroup(currMessage, nextMessage, currentChannel) && isAcceptable];\n};\nvar scrollIntoLast = function scrollIntoLast() {\n  var intialTry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var MAX_TRIES = 10;\n  var currentTry = intialTry;\n  if (currentTry > MAX_TRIES) {\n    return;\n  }\n  try {\n    var scrollDOM = document.querySelector('.sendbird-thread-ui--scroll');\n    // eslint-disable-next-line no-multi-assign\n    scrollDOM.scrollTop = scrollDOM.scrollHeight;\n  } catch (error) {\n    setTimeout(function () {\n      scrollIntoLast(currentTry + 1);\n    }, 500 * currentTry);\n  }\n};\nvar PREV_THREADS_FETCH_SIZE = 30;\nvar NEXT_THREADS_FETCH_SIZE = 30;\nvar ThreadContextActionTypes = /*#__PURE__*/function (ThreadContextActionTypes) {\n  ThreadContextActionTypes[\"INIT_USER_ID\"] = \"INIT_USER_ID\";\n  ThreadContextActionTypes[\"GET_CHANNEL_START\"] = \"GET_CHANNEL_START\";\n  ThreadContextActionTypes[\"GET_CHANNEL_SUCCESS\"] = \"GET_CHANNEL_SUCCESS\";\n  ThreadContextActionTypes[\"GET_CHANNEL_FAILURE\"] = \"GET_CHANNEL_FAILURE\";\n  ThreadContextActionTypes[\"SET_EMOJI_CONTAINER\"] = \"SET_EMOJI_CONTAINER\";\n  ThreadContextActionTypes[\"GET_PARENT_MESSAGE_START\"] = \"GET_PARENT_MESSAGE_START\";\n  ThreadContextActionTypes[\"GET_PARENT_MESSAGE_SUCCESS\"] = \"GET_PARENT_MESSAGE_SUCCESS\";\n  ThreadContextActionTypes[\"GET_PARENT_MESSAGE_FAILURE\"] = \"GET_PARENT_MESSAGE_FAILURE\";\n  ThreadContextActionTypes[\"INITIALIZE_THREAD_LIST_START\"] = \"INITIALIZE_THREAD_LIST_START\";\n  ThreadContextActionTypes[\"INITIALIZE_THREAD_LIST_SUCCESS\"] = \"INITIALIZE_THREAD_LIST_SUCCESS\";\n  ThreadContextActionTypes[\"INITIALIZE_THREAD_LIST_FAILURE\"] = \"INITIALIZE_THREAD_LIST_FAILURE\";\n  ThreadContextActionTypes[\"GET_PREV_MESSAGES_START\"] = \"GET_PREV_MESSAGES_START\";\n  ThreadContextActionTypes[\"GET_PREV_MESSAGES_SUCESS\"] = \"GET_PREV_MESSAGES_SUCESS\";\n  ThreadContextActionTypes[\"GET_PREV_MESSAGES_FAILURE\"] = \"GET_PREV_MESSAGES_FAILURE\";\n  ThreadContextActionTypes[\"GET_NEXT_MESSAGES_START\"] = \"GET_NEXT_MESSAGES_START\";\n  ThreadContextActionTypes[\"GET_NEXT_MESSAGES_SUCESS\"] = \"GET_NEXT_MESSAGES_SUCESS\";\n  ThreadContextActionTypes[\"GET_NEXT_MESSAGES_FAILURE\"] = \"GET_NEXT_MESSAGES_FAILURE\";\n  ThreadContextActionTypes[\"SEND_MESSAGE_START\"] = \"SEND_MESSAGE_START\";\n  ThreadContextActionTypes[\"SEND_MESSAGE_SUCESS\"] = \"SEND_MESSAGE_SUCESS\";\n  ThreadContextActionTypes[\"SEND_MESSAGE_FAILURE\"] = \"SEND_MESSAGE_FAILURE\";\n  ThreadContextActionTypes[\"RESEND_MESSAGE_START\"] = \"RESEND_MESSAGE_START\";\n  ThreadContextActionTypes[\"ON_MESSAGE_DELETED_BY_REQ_ID\"] = \"ON_MESSAGE_DELETED_BY_REQ_ID\";\n  ThreadContextActionTypes[\"ON_MESSAGE_RECEIVED\"] = \"ON_MESSAGE_RECEIVED\";\n  ThreadContextActionTypes[\"ON_MESSAGE_UPDATED\"] = \"ON_MESSAGE_UPDATED\";\n  ThreadContextActionTypes[\"ON_MESSAGE_DELETED\"] = \"ON_MESSAGE_DELETED\";\n  ThreadContextActionTypes[\"ON_REACTION_UPDATED\"] = \"ON_REACTION_UPDATED\";\n  ThreadContextActionTypes[\"ON_USER_MUTED\"] = \"ON_USER_MUTED\";\n  ThreadContextActionTypes[\"ON_USER_UNMUTED\"] = \"ON_USER_UNMUTED\";\n  ThreadContextActionTypes[\"ON_USER_BANNED\"] = \"ON_USER_BANNED\";\n  ThreadContextActionTypes[\"ON_USER_UNBANNED\"] = \"ON_USER_UNBANNED\";\n  ThreadContextActionTypes[\"ON_USER_LEFT\"] = \"ON_USER_LEFT\";\n  ThreadContextActionTypes[\"ON_CHANNEL_FROZEN\"] = \"ON_CHANNEL_FROZEN\";\n  ThreadContextActionTypes[\"ON_CHANNEL_UNFROZEN\"] = \"ON_CHANNEL_UNFROZEN\";\n  ThreadContextActionTypes[\"ON_OPERATOR_UPDATED\"] = \"ON_OPERATOR_UPDATED\";\n  return ThreadContextActionTypes;\n}({});\nfunction reducer(state, action) {\n  switch (action.type) {\n    // initialize\n    case ThreadContextActionTypes.INIT_USER_ID:\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          currentUserId: action.payload\n        });\n      }\n    case ThreadContextActionTypes.GET_CHANNEL_START:\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          channelState: ChannelStateTypes.LOADING,\n          currentChannel: null\n        });\n      }\n    case ThreadContextActionTypes.GET_CHANNEL_SUCCESS:\n      {\n        var _groupChannel$members, _groupChannel$members2;\n        var groupChannel = action.payload.groupChannel;\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          channelState: ChannelStateTypes.INITIALIZED,\n          currentChannel: groupChannel,\n          // only support in normal group channel\n          isMuted: (groupChannel === null || groupChannel === void 0 ? void 0 : (_groupChannel$members = groupChannel.members) === null || _groupChannel$members === void 0 ? void 0 : (_groupChannel$members2 = _groupChannel$members.find(function (member) {\n            return (member === null || member === void 0 ? void 0 : member.userId) === state.currentUserId;\n          })) === null || _groupChannel$members2 === void 0 ? void 0 : _groupChannel$members2.isMuted) || false,\n          isChannelFrozen: (groupChannel === null || groupChannel === void 0 ? void 0 : groupChannel.isFrozen) || false\n        });\n      }\n    case ThreadContextActionTypes.GET_CHANNEL_FAILURE:\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          channelState: ChannelStateTypes.INVALID,\n          currentChannel: null\n        });\n      }\n    case ThreadContextActionTypes.SET_EMOJI_CONTAINER:\n      {\n        var emojiContainer = action.payload.emojiContainer;\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          emojiContainer: emojiContainer\n        });\n      }\n    case ThreadContextActionTypes.GET_PARENT_MESSAGE_START:\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          parentMessageState: ParentMessageStateTypes.LOADING,\n          parentMessage: null\n        });\n      }\n    case ThreadContextActionTypes.GET_PARENT_MESSAGE_SUCCESS:\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          parentMessageState: ParentMessageStateTypes.INITIALIZED,\n          parentMessage: action.payload.parentMessage\n        });\n      }\n    case ThreadContextActionTypes.GET_PARENT_MESSAGE_FAILURE:\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          parentMessageState: ParentMessageStateTypes.INVALID,\n          parentMessage: null\n        });\n      }\n    // fetch threads\n    case ThreadContextActionTypes.INITIALIZE_THREAD_LIST_START:\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          threadListState: ThreadListStateTypes.LOADING,\n          allThreadMessages: []\n        });\n      }\n    case ThreadContextActionTypes.INITIALIZE_THREAD_LIST_SUCCESS:\n      {\n        var _action$payload2 = action.payload,\n          parentMessage = _action$payload2.parentMessage,\n          anchorMessage = _action$payload2.anchorMessage,\n          threadedMessages = _action$payload2.threadedMessages;\n        var anchorMessageCreatedAt = !(anchorMessage !== null && anchorMessage !== void 0 && anchorMessage.messageId) ? parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.createdAt : anchorMessage === null || anchorMessage === void 0 ? void 0 : anchorMessage.createdAt;\n        var anchorIndex = threadedMessages.findIndex(function (message) {\n          return (message === null || message === void 0 ? void 0 : message.createdAt) > anchorMessageCreatedAt;\n        });\n        var prevThreadMessages = anchorIndex > -1 ? threadedMessages.slice(0, anchorIndex) : threadedMessages;\n        var anchorThreadMessage = anchorMessage !== null && anchorMessage !== void 0 && anchorMessage.messageId ? [anchorMessage] : [];\n        var nextThreadMessages = anchorIndex > -1 ? threadedMessages.slice(anchorIndex) : [];\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          threadListState: ThreadListStateTypes.INITIALIZED,\n          hasMorePrev: anchorIndex === -1 || anchorIndex === PREV_THREADS_FETCH_SIZE,\n          hasMoreNext: threadedMessages.length - anchorIndex === NEXT_THREADS_FETCH_SIZE,\n          allThreadMessages: [prevThreadMessages, anchorThreadMessage, nextThreadMessages].flat()\n        });\n      }\n    case ThreadContextActionTypes.INITIALIZE_THREAD_LIST_FAILURE:\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          threadListState: ThreadListStateTypes.INVALID,\n          allThreadMessages: []\n        });\n      }\n    case ThreadContextActionTypes.GET_NEXT_MESSAGES_START:\n      {\n        return _objectSpread2({}, state);\n      }\n    case ThreadContextActionTypes.GET_NEXT_MESSAGES_SUCESS:\n      {\n        var _threadedMessages = action.payload.threadedMessages;\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          hasMoreNext: _threadedMessages.length === NEXT_THREADS_FETCH_SIZE,\n          allThreadMessages: [].concat(_toConsumableArray(state.allThreadMessages), _toConsumableArray(_threadedMessages))\n        });\n      }\n    case ThreadContextActionTypes.GET_NEXT_MESSAGES_FAILURE:\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          hasMoreNext: false\n        });\n      }\n    case ThreadContextActionTypes.GET_PREV_MESSAGES_START:\n      {\n        return _objectSpread2({}, state);\n      }\n    case ThreadContextActionTypes.GET_PREV_MESSAGES_SUCESS:\n      {\n        var _threadedMessages2 = action.payload.threadedMessages;\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          hasMorePrev: _threadedMessages2.length === PREV_THREADS_FETCH_SIZE,\n          allThreadMessages: [].concat(_toConsumableArray(_threadedMessages2), _toConsumableArray(state.allThreadMessages))\n        });\n      }\n    case ThreadContextActionTypes.GET_PREV_MESSAGES_FAILURE:\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          hasMorePrev: false\n        });\n      }\n    // event handlers - message status change\n    case ThreadContextActionTypes.ON_MESSAGE_RECEIVED:\n      {\n        var _state$currentChannel, _message$parentMessag, _state$parentMessage, _state$parentMessage2;\n        var _action$payload3 = action.payload,\n          channel = _action$payload3.channel,\n          message = _action$payload3.message;\n        if (((_state$currentChannel = state.currentChannel) === null || _state$currentChannel === void 0 ? void 0 : _state$currentChannel.url) !== (channel === null || channel === void 0 ? void 0 : channel.url) || state.hasMoreNext || (message === null || message === void 0 ? void 0 : (_message$parentMessag = message.parentMessage) === null || _message$parentMessag === void 0 ? void 0 : _message$parentMessag.messageId) !== (state === null || state === void 0 ? void 0 : (_state$parentMessage = state.parentMessage) === null || _state$parentMessage === void 0 ? void 0 : _state$parentMessage.messageId)) {\n          return state;\n        }\n        var isAlreadyReceived = state.allThreadMessages.findIndex(function (m) {\n          return m.messageId === message.messageId;\n        }) > -1;\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          parentMessage: ((_state$parentMessage2 = state.parentMessage) === null || _state$parentMessage2 === void 0 ? void 0 : _state$parentMessage2.messageId) === (message === null || message === void 0 ? void 0 : message.messageId) ? message : state.parentMessage,\n          allThreadMessages: isAlreadyReceived ? state.allThreadMessages.map(function (m) {\n            return m.messageId === message.messageId ? message : m;\n          }) : [].concat(_toConsumableArray(state.allThreadMessages.filter(function (m) {\n            return (m === null || m === void 0 ? void 0 : m.reqId) !== (message === null || message === void 0 ? void 0 : message.reqId);\n          })), [message])\n        });\n      }\n    case ThreadContextActionTypes.ON_MESSAGE_UPDATED:\n      {\n        var _state$currentChannel2, _state$parentMessage3, _state$allThreadMessa;\n        var _action$payload4 = action.payload,\n          _channel = _action$payload4.channel,\n          _message = _action$payload4.message;\n        if (((_state$currentChannel2 = state.currentChannel) === null || _state$currentChannel2 === void 0 ? void 0 : _state$currentChannel2.url) !== (_channel === null || _channel === void 0 ? void 0 : _channel.url)) {\n          return state;\n        }\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          parentMessage: ((_state$parentMessage3 = state.parentMessage) === null || _state$parentMessage3 === void 0 ? void 0 : _state$parentMessage3.messageId) === (_message === null || _message === void 0 ? void 0 : _message.messageId) ? _message : state.parentMessage,\n          allThreadMessages: (_state$allThreadMessa = state.allThreadMessages) === null || _state$allThreadMessa === void 0 ? void 0 : _state$allThreadMessa.map(function (msg) {\n            return (msg === null || msg === void 0 ? void 0 : msg.messageId) === (_message === null || _message === void 0 ? void 0 : _message.messageId) ? _message : msg;\n          })\n        });\n      }\n    case ThreadContextActionTypes.ON_MESSAGE_DELETED:\n      {\n        var _state$currentChannel3, _state$parentMessage4, _state$allThreadMessa2;\n        var _action$payload5 = action.payload,\n          _channel2 = _action$payload5.channel,\n          messageId = _action$payload5.messageId;\n        if (((_state$currentChannel3 = state.currentChannel) === null || _state$currentChannel3 === void 0 ? void 0 : _state$currentChannel3.url) !== (_channel2 === null || _channel2 === void 0 ? void 0 : _channel2.url)) {\n          return state;\n        }\n        if ((state === null || state === void 0 ? void 0 : (_state$parentMessage4 = state.parentMessage) === null || _state$parentMessage4 === void 0 ? void 0 : _state$parentMessage4.messageId) === messageId) {\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            parentMessage: null,\n            parentMessageState: ParentMessageStateTypes.NIL,\n            allThreadMessages: []\n          });\n        }\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allThreadMessages: (_state$allThreadMessa2 = state.allThreadMessages) === null || _state$allThreadMessa2 === void 0 ? void 0 : _state$allThreadMessa2.filter(function (msg) {\n            return (msg === null || msg === void 0 ? void 0 : msg.messageId) !== messageId;\n          })\n        });\n      }\n    case ThreadContextActionTypes.ON_MESSAGE_DELETED_BY_REQ_ID:\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allThreadMessages: state.allThreadMessages.filter(function (m) {\n            return !compareIds(m.reqId, action.payload);\n          })\n        });\n      }\n    case ThreadContextActionTypes.ON_REACTION_UPDATED:\n      {\n        var _action$payload, _state$parentMessage5;\n        var reactionEvent = (_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.reactionEvent;\n        if ((state === null || state === void 0 ? void 0 : (_state$parentMessage5 = state.parentMessage) === null || _state$parentMessage5 === void 0 ? void 0 : _state$parentMessage5.messageId) === (reactionEvent === null || reactionEvent === void 0 ? void 0 : reactionEvent.messageId)) {\n          var _state$parentMessage6, _state$parentMessage7;\n          (_state$parentMessage6 = state.parentMessage) === null || _state$parentMessage6 === void 0 ? void 0 : (_state$parentMessage7 = _state$parentMessage6.applyReactionEvent) === null || _state$parentMessage7 === void 0 ? void 0 : _state$parentMessage7.call(_state$parentMessage6, reactionEvent);\n        }\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allThreadMessages: state.allThreadMessages.map(function (m) {\n            if ((reactionEvent === null || reactionEvent === void 0 ? void 0 : reactionEvent.messageId) === (m === null || m === void 0 ? void 0 : m.messageId)) {\n              var _m$applyReactionEvent;\n              m === null || m === void 0 ? void 0 : (_m$applyReactionEvent = m.applyReactionEvent) === null || _m$applyReactionEvent === void 0 ? void 0 : _m$applyReactionEvent.call(m, reactionEvent);\n              return m;\n            }\n            return m;\n          })\n        });\n      }\n    // event handlers - user status change\n    case ThreadContextActionTypes.ON_USER_MUTED:\n      {\n        var _state$currentChannel4;\n        var _action$payload6 = action.payload,\n          _channel3 = _action$payload6.channel,\n          user = _action$payload6.user;\n        if (((_state$currentChannel4 = state.currentChannel) === null || _state$currentChannel4 === void 0 ? void 0 : _state$currentChannel4.url) !== (_channel3 === null || _channel3 === void 0 ? void 0 : _channel3.url) || state.currentUserId !== (user === null || user === void 0 ? void 0 : user.userId)) {\n          return state;\n        }\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          isMuted: true\n        });\n      }\n    case ThreadContextActionTypes.ON_USER_UNMUTED:\n      {\n        var _state$currentChannel5;\n        var _action$payload7 = action.payload,\n          _channel4 = _action$payload7.channel,\n          _user = _action$payload7.user;\n        if (((_state$currentChannel5 = state.currentChannel) === null || _state$currentChannel5 === void 0 ? void 0 : _state$currentChannel5.url) !== (_channel4 === null || _channel4 === void 0 ? void 0 : _channel4.url) || state.currentUserId !== (_user === null || _user === void 0 ? void 0 : _user.userId)) {\n          return state;\n        }\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          isMuted: false\n        });\n      }\n    case ThreadContextActionTypes.ON_USER_BANNED:\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          channelState: ChannelStateTypes.NIL,\n          threadListState: ThreadListStateTypes.NIL,\n          parentMessageState: ParentMessageStateTypes.NIL,\n          currentChannel: null,\n          parentMessage: null,\n          allThreadMessages: [],\n          hasMorePrev: false,\n          hasMoreNext: false\n        });\n      }\n    case ThreadContextActionTypes.ON_USER_UNBANNED:\n      {\n        return _objectSpread2({}, state);\n      }\n    case ThreadContextActionTypes.ON_USER_LEFT:\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          channelState: ChannelStateTypes.NIL,\n          threadListState: ThreadListStateTypes.NIL,\n          parentMessageState: ParentMessageStateTypes.NIL,\n          currentChannel: null,\n          parentMessage: null,\n          allThreadMessages: [],\n          hasMorePrev: false,\n          hasMoreNext: false\n        });\n      }\n    // event handler - channel status change\n    case ThreadContextActionTypes.ON_CHANNEL_FROZEN:\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          isChannelFrozen: true\n        });\n      }\n    case ThreadContextActionTypes.ON_CHANNEL_UNFROZEN:\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          isChannelFrozen: false\n        });\n      }\n    case ThreadContextActionTypes.ON_OPERATOR_UPDATED:\n      {\n        var _state$currentChannel6;\n        var _channel5 = action.payload.channel;\n        if ((_channel5 === null || _channel5 === void 0 ? void 0 : _channel5.url) === ((_state$currentChannel6 = state.currentChannel) === null || _state$currentChannel6 === void 0 ? void 0 : _state$currentChannel6.url)) {\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            currentChannel: _channel5\n          });\n        }\n        return state;\n      }\n    // message\n    case ThreadContextActionTypes.SEND_MESSAGE_START:\n      {\n        var _message2 = action.payload.message;\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allThreadMessages: [].concat(_toConsumableArray(state.allThreadMessages), [_message2])\n        });\n      }\n    case ThreadContextActionTypes.SEND_MESSAGE_SUCESS:\n      {\n        var _message3 = action.payload.message;\n        var filteredThreadMessages = state.allThreadMessages.filter(function (m) {\n          return !compareIds(m === null || m === void 0 ? void 0 : m.reqId, _message3 === null || _message3 === void 0 ? void 0 : _message3.reqId);\n        });\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allThreadMessages: [].concat(_toConsumableArray(filteredThreadMessages), [_message3])\n        });\n      }\n    case ThreadContextActionTypes.SEND_MESSAGE_FAILURE:\n      {\n        var _message4 = action.payload.message;\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allThreadMessages: state.allThreadMessages.map(function (m) {\n            return compareIds(m === null || m === void 0 ? void 0 : m.reqId, _message4 === null || _message4 === void 0 ? void 0 : _message4.reqId) ? _message4 : m;\n          })\n        });\n      }\n    case ThreadContextActionTypes.RESEND_MESSAGE_START:\n      {\n        return _objectSpread2({}, state);\n      }\n    default:\n      {\n        return state;\n      }\n  }\n}\nvar initialState = {\n  currentChannel: null,\n  allThreadMessages: [],\n  parentMessage: null,\n  channelState: ChannelStateTypes.NIL,\n  parentMessageState: ParentMessageStateTypes.NIL,\n  threadListState: ThreadListStateTypes.NIL,\n  hasMorePrev: false,\n  hasMoreNext: false,\n  emojiContainer: {},\n  isMuted: false,\n  isChannelFrozen: false,\n  currentUserId: ''\n};\nfunction useGetChannel(_ref, _ref2) {\n  var channelUrl = _ref.channelUrl,\n    sdkInit = _ref.sdkInit,\n    message = _ref.message;\n  var sdk = _ref2.sdk,\n    logger = _ref2.logger,\n    threadDispatcher = _ref2.threadDispatcher;\n  useEffect(function () {\n    // validation check\n    if (sdkInit && channelUrl && sdk !== null && sdk !== void 0 && sdk.groupChannel) {\n      var _sdk$groupChannel$get, _sdk$groupChannel;\n      threadDispatcher({\n        type: ThreadContextActionTypes.GET_CHANNEL_START,\n        payload: null\n      });\n      (_sdk$groupChannel$get = (_sdk$groupChannel = sdk.groupChannel).getChannel) === null || _sdk$groupChannel$get === void 0 ? void 0 : _sdk$groupChannel$get.call(_sdk$groupChannel, channelUrl).then(function (groupChannel) {\n        logger.info('Thread | useInitialize: Get channel succeeded', groupChannel);\n        threadDispatcher({\n          type: ThreadContextActionTypes.GET_CHANNEL_SUCCESS,\n          payload: {\n            groupChannel: groupChannel\n          }\n        });\n      }).catch(function (error) {\n        logger.info('Thread | useInitialize: Get channel failed', error);\n        threadDispatcher({\n          type: ThreadContextActionTypes.GET_CHANNEL_FAILURE,\n          payload: error\n        });\n      });\n    }\n  }, [message, sdkInit]);\n  /**\n   * We don't use channelUrl here,\n   * because Thread must operate independently of the channel.\n   */\n}\n\nfunction useGetAllEmoji(_ref, _ref2) {\n  var sdk = _ref.sdk;\n  var logger = _ref2.logger,\n    threadDispatcher = _ref2.threadDispatcher;\n  useEffect(function () {\n    if (sdk !== null && sdk !== void 0 && sdk.getAllEmoji) {\n      // validation check\n      sdk === null || sdk === void 0 ? void 0 : sdk.getAllEmoji().then(function (emojiContainer) {\n        logger.info('Thread | useGetAllEmoji: Getting emojis succeeded.', emojiContainer);\n        threadDispatcher({\n          type: ThreadContextActionTypes.SET_EMOJI_CONTAINER,\n          payload: {\n            emojiContainer: emojiContainer\n          }\n        });\n      }).catch(function (error) {\n        logger.info('Thread | useGetAllEmoji: Getting emojis failed.', error);\n      });\n    }\n  }, [sdk]);\n}\nfunction useGetThreadList(_ref, _ref2) {\n  var sdkInit = _ref.sdkInit,\n    parentMessage = _ref.parentMessage,\n    anchorMessage = _ref.anchorMessage,\n    isReactionEnabled = _ref.isReactionEnabled;\n  var logger = _ref2.logger,\n    threadDispatcher = _ref2.threadDispatcher;\n  useEffect(function () {\n    // validation check\n    if (sdkInit && parentMessage !== null && parentMessage !== void 0 && parentMessage.getThreadedMessagesByTimestamp) {\n      var _parentMessage$getThr;\n      threadDispatcher({\n        type: ThreadContextActionTypes.INITIALIZE_THREAD_LIST_START,\n        payload: null\n      });\n      var timeStamp = (anchorMessage === null || anchorMessage === void 0 ? void 0 : anchorMessage.createdAt) || 0;\n      var params = {\n        prevResultSize: PREV_THREADS_FETCH_SIZE,\n        nextResultSize: NEXT_THREADS_FETCH_SIZE,\n        includeReactions: isReactionEnabled,\n        includeMetaArray: true\n      };\n      logger.info('Thread | useGetThreadList: Initialize thread list start.', {\n        timeStamp: timeStamp,\n        params: params\n      });\n      (_parentMessage$getThr = parentMessage.getThreadedMessagesByTimestamp) === null || _parentMessage$getThr === void 0 ? void 0 : _parentMessage$getThr.call(parentMessage, timeStamp, params).then(function (_ref3) {\n        var parentMessage = _ref3.parentMessage,\n          threadedMessages = _ref3.threadedMessages;\n        logger.info('Thread | useGetThreadList: Initialize thread list succeeded.', {\n          parentMessage: parentMessage,\n          threadedMessages: threadedMessages\n        });\n        threadDispatcher({\n          type: ThreadContextActionTypes.INITIALIZE_THREAD_LIST_SUCCESS,\n          payload: {\n            parentMessage: parentMessage,\n            anchorMessage: anchorMessage,\n            threadedMessages: threadedMessages\n          }\n        });\n      }).catch(function (error) {\n        logger.info('Therad | useGetThreadList: Initialize thread list failed.', error);\n        threadDispatcher({\n          type: ThreadContextActionTypes.INITIALIZE_THREAD_LIST_FAILURE,\n          payload: error\n        });\n      });\n    }\n  }, [sdkInit, parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.messageId, anchorMessage]);\n}\nfunction useGetParentMessage(_ref, _ref2) {\n  var channelUrl = _ref.channelUrl,\n    sdkInit = _ref.sdkInit,\n    parentMessage = _ref.parentMessage;\n  var sdk = _ref2.sdk,\n    logger = _ref2.logger,\n    threadDispatcher = _ref2.threadDispatcher;\n  useEffect(function () {\n    var _sdk$message;\n    // validation check\n    if (sdkInit && sdk !== null && sdk !== void 0 && (_sdk$message = sdk.message) !== null && _sdk$message !== void 0 && _sdk$message.getMessage) {\n      threadDispatcher({\n        type: ThreadContextActionTypes.GET_PARENT_MESSAGE_START,\n        payload: null\n      });\n      var params = {\n        channelUrl: channelUrl,\n        channelType: ChannelType.GROUP,\n        messageId: parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.messageId,\n        includeMetaArray: true,\n        includeReactions: true,\n        includeThreadInfo: true,\n        includeParentMessageInfo: true\n      };\n      logger.info('Thread | useGetParentMessage: Get parent message start.', params);\n      var fetchParentMessage = /*#__PURE__*/function () {\n        var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n          var _sdk$message$getMessa, _sdk$message2, data;\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return (_sdk$message$getMessa = (_sdk$message2 = sdk.message).getMessage) === null || _sdk$message$getMessa === void 0 ? void 0 : _sdk$message$getMessa.call(_sdk$message2, params);\n                case 2:\n                  data = _context.sent;\n                  return _context.abrupt(\"return\", data);\n                case 4:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n        return function fetchParentMessage() {\n          return _ref4.apply(this, arguments);\n        };\n      }();\n      fetchParentMessage().then(function (parentMsg) {\n        logger.info('Thread | useGetParentMessage: Get parent message succeeded.', parentMessage);\n        parentMsg.ogMetaData = (parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.ogMetaData) || null; // ogMetaData is not included for now\n        threadDispatcher({\n          type: ThreadContextActionTypes.GET_PARENT_MESSAGE_SUCCESS,\n          payload: {\n            parentMessage: parentMsg\n          }\n        });\n      }).catch(function (error) {\n        logger.info('Thread | useGetParentMessage: Get parent message failed.', error);\n        threadDispatcher({\n          type: ThreadContextActionTypes.GET_PARENT_MESSAGE_FAILURE,\n          payload: error\n        });\n      });\n    }\n  }, [sdkInit, parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.messageId]);\n  /**\n   * We don't use channelUrl here,\n   * because Thread must operate independently of the channel.\n   */\n}\n\nfunction useHandlePubsubEvents(_ref, _ref2) {\n  var sdkInit = _ref.sdkInit,\n    currentChannel = _ref.currentChannel,\n    parentMessage = _ref.parentMessage;\n  var pubSub = _ref2.pubSub,\n    threadDispatcher = _ref2.threadDispatcher;\n  useEffect(function () {\n    var pubSubHandler = function pubSubHandler() {\n      var subscriber = new Map();\n      if (!pubSub || !pubSub.subscribe) {\n        return subscriber;\n      }\n      subscriber.set(PUBSUB_TOPICS.SEND_USER_MESSAGE, pubSub.subscribe(PUBSUB_TOPICS.SEND_USER_MESSAGE, function (props) {\n        var channel = props.channel,\n          message = props.message;\n        if ((currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) === (channel === null || channel === void 0 ? void 0 : channel.url) && (message === null || message === void 0 ? void 0 : message.parentMessageId) === (parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.messageId)) {\n          threadDispatcher({\n            type: ThreadContextActionTypes.SEND_MESSAGE_SUCESS,\n            payload: {\n              message: message\n            }\n          });\n        }\n        scrollIntoLast === null || scrollIntoLast === void 0 ? void 0 : scrollIntoLast();\n      }));\n      subscriber.set(PUBSUB_TOPICS.SEND_FILE_MESSAGE, pubSub.subscribe(PUBSUB_TOPICS.SEND_FILE_MESSAGE, function (props) {\n        var channel = props.channel,\n          message = props.message;\n        if ((currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) === (channel === null || channel === void 0 ? void 0 : channel.url)) {\n          threadDispatcher({\n            type: ThreadContextActionTypes.SEND_MESSAGE_SUCESS,\n            payload: {\n              message: message\n            }\n          });\n        }\n        scrollIntoLast === null || scrollIntoLast === void 0 ? void 0 : scrollIntoLast();\n      }));\n      subscriber.set(PUBSUB_TOPICS.UPDATE_USER_MESSAGE, pubSub.subscribe(PUBSUB_TOPICS.UPDATE_USER_MESSAGE, function (msg) {\n        var channel = msg.channel,\n          message = msg.message;\n        if ((currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) === (channel === null || channel === void 0 ? void 0 : channel.url)) {\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_MESSAGE_UPDATED,\n            payload: {\n              channel: channel,\n              message: message\n            }\n          });\n        }\n      }));\n      subscriber.set(PUBSUB_TOPICS.DELETE_MESSAGE, pubSub.subscribe(PUBSUB_TOPICS.DELETE_MESSAGE, function (msg) {\n        var channel = msg.channel,\n          messageId = msg.messageId;\n        if ((currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) === (channel === null || channel === void 0 ? void 0 : channel.url)) {\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_MESSAGE_DELETED,\n            payload: {\n              messageId: messageId\n            }\n          });\n        }\n      }));\n    };\n    var subscriber = pubSubHandler();\n    return function () {\n      subscriber === null || subscriber === void 0 ? void 0 : subscriber.forEach(function (s) {\n        try {\n          s === null || s === void 0 ? void 0 : s.remove();\n        } catch (_unused) {\n          //\n        }\n      });\n    };\n  }, [sdkInit, currentChannel]);\n}\nfunction useHandleChannelEvents(_ref, _ref2) {\n  var sdk = _ref.sdk,\n    currentChannel = _ref.currentChannel;\n  var logger = _ref2.logger,\n    threadDispatcher = _ref2.threadDispatcher;\n  useEffect(function () {\n    var _sdk$groupChannel;\n    var handlerId = uuidv4();\n    // validation check\n    if (sdk !== null && sdk !== void 0 && (_sdk$groupChannel = sdk.groupChannel) !== null && _sdk$groupChannel !== void 0 && _sdk$groupChannel.addGroupChannelHandler && currentChannel) {\n      var _sdk$groupChannel$add, _sdk$groupChannel2;\n      var channelHandlerParams = {\n        // message status change\n        onMessageReceived: function onMessageReceived(channel, message) {\n          logger.info('Thread | useHandleChannelEvents: onMessageReceived', {\n            channel: channel,\n            message: message\n          });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_MESSAGE_RECEIVED,\n            payload: {\n              channel: channel,\n              message: message\n            }\n          });\n        },\n        onMessageUpdated: function onMessageUpdated(channel, message) {\n          logger.info('Thread | useHandleChannelEvents: onMessageUpdated', {\n            channel: channel,\n            message: message\n          });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_MESSAGE_UPDATED,\n            payload: {\n              channel: channel,\n              message: message\n            }\n          });\n        },\n        onMessageDeleted: function onMessageDeleted(channel, messageId) {\n          logger.info('Thread | useHandleChannelEvents: onMessageDeleted', {\n            channel: channel,\n            messageId: messageId\n          });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_MESSAGE_DELETED,\n            payload: {\n              channel: channel,\n              messageId: messageId\n            }\n          });\n        },\n        onReactionUpdated: function onReactionUpdated(channel, reactionEvent) {\n          logger.info('Thread | useHandleChannelEvents: onReactionUpdated', {\n            channel: channel,\n            reactionEvent: reactionEvent\n          });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_REACTION_UPDATED,\n            payload: {\n              channel: channel,\n              reactionEvent: reactionEvent\n            }\n          });\n        },\n        // user status change\n        onUserMuted: function onUserMuted(channel, user) {\n          logger.info('Thread | useHandleChannelEvents: onUserMuted', {\n            channel: channel,\n            user: user\n          });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_USER_MUTED,\n            payload: {\n              channel: channel,\n              user: user\n            }\n          });\n        },\n        onUserUnmuted: function onUserUnmuted(channel, user) {\n          logger.info('Thread | useHandleChannelEvents: onUserUnmuted', {\n            channel: channel,\n            user: user\n          });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_USER_UNMUTED,\n            payload: {\n              channel: channel,\n              user: user\n            }\n          });\n        },\n        onUserBanned: function onUserBanned(channel, user) {\n          logger.info('Thread | useHandleChannelEvents: onUserBanned', {\n            channel: channel,\n            user: user\n          });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_USER_BANNED,\n            payload: {\n              channel: channel,\n              user: user\n            }\n          });\n        },\n        onUserUnbanned: function onUserUnbanned(channel, user) {\n          logger.info('Thread | useHandleChannelEvents: onUserUnbanned', {\n            channel: channel,\n            user: user\n          });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_USER_UNBANNED,\n            payload: {\n              channel: channel,\n              user: user\n            }\n          });\n        },\n        onUserLeft: function onUserLeft(channel, user) {\n          logger.info('Thread | useHandleChannelEvents: onUserLeft', {\n            channel: channel,\n            user: user\n          });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_USER_LEFT,\n            payload: {\n              channel: channel,\n              user: user\n            }\n          });\n        },\n        // channel status change\n        onChannelFrozen: function onChannelFrozen(channel) {\n          logger.info('Thread | useHandleChannelEvents: onChannelFrozen', {\n            channel: channel\n          });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_CHANNEL_FROZEN,\n            payload: {\n              channel: channel\n            }\n          });\n        },\n        onChannelUnfrozen: function onChannelUnfrozen(channel) {\n          logger.info('Thread | useHandleChannelEvents: onChannelUnfrozen', {\n            channel: channel\n          });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_CHANNEL_UNFROZEN,\n            payload: {\n              channel: channel\n            }\n          });\n        },\n        onOperatorUpdated: function onOperatorUpdated(channel, users) {\n          logger.info('Thread | useHandleChannelEvents: onOperatorUpdated', {\n            channel: channel,\n            users: users\n          });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_OPERATOR_UPDATED,\n            payload: {\n              channel: channel,\n              users: users\n            }\n          });\n        }\n      };\n      var channelHandler = new GroupChannelHandler(channelHandlerParams);\n      (_sdk$groupChannel$add = (_sdk$groupChannel2 = sdk.groupChannel).addGroupChannelHandler) === null || _sdk$groupChannel$add === void 0 ? void 0 : _sdk$groupChannel$add.call(_sdk$groupChannel2, handlerId, channelHandler);\n      logger.info('Thread | useHandleChannelEvents: Added channelHandler in Thread', {\n        handlerId: handlerId,\n        channelHandler: channelHandler\n      });\n    }\n    return function () {\n      var _sdk$groupChannel3;\n      // validation check\n      if (handlerId && sdk !== null && sdk !== void 0 && (_sdk$groupChannel3 = sdk.groupChannel) !== null && _sdk$groupChannel3 !== void 0 && _sdk$groupChannel3.removeGroupChannelHandler) {\n        var _sdk$groupChannel$rem, _sdk$groupChannel4;\n        (_sdk$groupChannel$rem = (_sdk$groupChannel4 = sdk.groupChannel).removeGroupChannelHandler) === null || _sdk$groupChannel$rem === void 0 ? void 0 : _sdk$groupChannel$rem.call(_sdk$groupChannel4, handlerId);\n        logger.info('Thread | useHandleChannelEvents: Removed channelHandler in Thread.', handlerId);\n      }\n    };\n  }, [sdk === null || sdk === void 0 ? void 0 : sdk.groupChannel, currentChannel]);\n}\nfunction useSendFileMessageCallback(_ref, _ref2) {\n  var currentChannel = _ref.currentChannel;\n  var logger = _ref2.logger,\n    pubSub = _ref2.pubSub,\n    threadDispatcher = _ref2.threadDispatcher;\n  var sendMessage = useCallback(function (file, quoteMessage) {\n    var createParamsDefault = function createParamsDefault() {\n      var params = {};\n      params.file = file;\n      if (quoteMessage) {\n        params.isReplyToChannel = true;\n        params.parentMessageId = quoteMessage.messageId;\n      }\n      return params;\n    };\n    var params = createParamsDefault();\n    logger.info('Thread | useSendFileMessageCallback: Sending file message start.', params);\n    currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.sendFileMessage(params).onPending(function (pendingMessage) {\n      threadDispatcher({\n        type: ThreadContextActionTypes.SEND_MESSAGE_START,\n        payload: {\n          /* pubSub is used instead of messagesDispatcher\n          to avoid redundantly calling `messageActionTypes.SEND_MESSAGEGE_START` */\n          message: _objectSpread2(_objectSpread2({}, pendingMessage), {}, {\n            url: URL.createObjectURL(file),\n            // pending thumbnail message seems to be failed\n            requestState: 'pending'\n          })\n        }\n      });\n      setTimeout(function () {\n        return scrollIntoLast();\n      }, 1000);\n    }).onFailed(function (error, message) {\n      message.localUrl = URL.createObjectURL(file);\n      message.file = file;\n      logger.info('Thread | useSendFileMessageCallback: Sending file message failed.', {\n        message: message,\n        error: error\n      });\n      threadDispatcher({\n        type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,\n        payload: {\n          message: message,\n          error: error\n        }\n      });\n    }).onSucceeded(function (message) {\n      logger.info('Thread | useSendFileMessageCallback: Sending file message succeeded.', message);\n      pubSub.publish(PUBSUB_TOPICS.SEND_FILE_MESSAGE, {\n        channel: currentChannel,\n        message: message\n      });\n    });\n  }, [currentChannel]);\n  return sendMessage;\n}\nfunction useUpdateMessageCallback(_ref, _ref2) {\n  var currentChannel = _ref.currentChannel,\n    isMentionEnabled = _ref.isMentionEnabled;\n  var logger = _ref2.logger,\n    pubSub = _ref2.pubSub,\n    threadDispatcher = _ref2.threadDispatcher;\n  return useCallback(function (props) {\n    var _currentChannel$updat;\n    var messageId = props.messageId,\n      message = props.message,\n      mentionedUsers = props.mentionedUsers,\n      mentionTemplate = props.mentionTemplate;\n    var createParamsDefault = function createParamsDefault() {\n      var params = {};\n      params.message = message;\n      if (isMentionEnabled && (mentionedUsers === null || mentionedUsers === void 0 ? void 0 : mentionedUsers.length) > 0) {\n        params.mentionedUsers = mentionedUsers;\n      }\n      if (isMentionEnabled && mentionTemplate) {\n        params.mentionedMessageTemplate = mentionTemplate;\n      } else {\n        params.mentionedMessageTemplate = message;\n      }\n      return params;\n    };\n    var params = createParamsDefault();\n    logger.info('Thread | useUpdateMessageCallback: Message update start.', params);\n    currentChannel === null || currentChannel === void 0 ? void 0 : (_currentChannel$updat = currentChannel.updateUserMessage) === null || _currentChannel$updat === void 0 ? void 0 : _currentChannel$updat.call(currentChannel, messageId, params).then(function (message) {\n      logger.info('Thread | useUpdateMessageCallback: Message update succeeded.', message);\n      threadDispatcher({\n        type: ThreadContextActionTypes.ON_MESSAGE_UPDATED,\n        payload: {\n          channel: currentChannel,\n          message: message\n        }\n      });\n      pubSub.publish(PUBSUB_TOPICS.UPDATE_USER_MESSAGE, {\n        fromSelector: true,\n        channel: currentChannel,\n        message: message\n      });\n    });\n  }, [currentChannel, isMentionEnabled]);\n}\nfunction useDeleteMessageCallback(_ref, _ref2) {\n  var currentChannel = _ref.currentChannel,\n    threadDispatcher = _ref.threadDispatcher;\n  var logger = _ref2.logger;\n  return useCallback(function (message) {\n    logger.info('Thread | useDeleteMessageCallback: Deleting message.', message);\n    var sendingStatus = message.sendingStatus;\n    return new Promise(function (resolve, reject) {\n      var _currentChannel$delet;\n      logger.info('Thread | useDeleteMessageCallback: Deleting message requestState:', sendingStatus);\n      // Message is only on local\n      if (sendingStatus === 'failed' || sendingStatus === 'pending') {\n        logger.info('Thread | useDeleteMessageCallback: Deleted message from local:', message);\n        threadDispatcher({\n          type: ThreadContextActionTypes.ON_MESSAGE_DELETED_BY_REQ_ID,\n          payload: message.reqId\n        });\n        resolve(message);\n      }\n      logger.info('Thread | useDeleteMessageCallback: Deleting message from remote:', sendingStatus);\n      currentChannel === null || currentChannel === void 0 ? void 0 : (_currentChannel$delet = currentChannel.deleteMessage) === null || _currentChannel$delet === void 0 ? void 0 : _currentChannel$delet.call(currentChannel, message).then(function () {\n        logger.info('Thread | useDeleteMessageCallback: Deleting message success!', message);\n        threadDispatcher({\n          type: ThreadContextActionTypes.ON_MESSAGE_DELETED,\n          payload: {\n            message: message,\n            channel: currentChannel\n          }\n        });\n        resolve(message);\n      }).catch(function (err) {\n        logger.warning('Thread | useDeleteMessageCallback: Deleting message failed!', err);\n        reject(err);\n      });\n    });\n  }, [currentChannel]);\n}\nfunction useGetPrevThreadsCallback(_ref, _ref2) {\n  var hasMorePrev = _ref.hasMorePrev,\n    parentMessage = _ref.parentMessage,\n    threadListState = _ref.threadListState,\n    oldestMessageTimeStamp = _ref.oldestMessageTimeStamp,\n    isReactionEnabled = _ref.isReactionEnabled;\n  var logger = _ref2.logger,\n    threadDispatcher = _ref2.threadDispatcher;\n  return useCallback(function (callback) {\n    // validation check\n    if (threadListState === ThreadListStateTypes.INITIALIZED && parentMessage !== null && parentMessage !== void 0 && parentMessage.getThreadedMessagesByTimestamp && oldestMessageTimeStamp !== 0) {\n      var _parentMessage$getThr;\n      threadDispatcher({\n        type: ThreadContextActionTypes.GET_PREV_MESSAGES_START,\n        payload: null\n      });\n      (_parentMessage$getThr = parentMessage.getThreadedMessagesByTimestamp) === null || _parentMessage$getThr === void 0 ? void 0 : _parentMessage$getThr.call(parentMessage, oldestMessageTimeStamp, {\n        prevResultSize: PREV_THREADS_FETCH_SIZE,\n        nextResultSize: 0,\n        includeReactions: isReactionEnabled,\n        includeMetaArray: true\n      }).then(function (_ref3) {\n        var parentMessage = _ref3.parentMessage,\n          threadedMessages = _ref3.threadedMessages;\n        logger.info('Thread | useGetPrevThreadsCallback: Fetch prev threads succeeded.', {\n          parentMessage: parentMessage,\n          threadedMessages: threadedMessages\n        });\n        threadDispatcher({\n          type: ThreadContextActionTypes.GET_PREV_MESSAGES_SUCESS,\n          payload: {\n            parentMessage: parentMessage,\n            threadedMessages: threadedMessages\n          }\n        });\n        callback(threadedMessages);\n      }).catch(function (error) {\n        logger.info('Thread | useGetPrevThreadsCallback: Fetch prev threads failed.', error);\n        threadDispatcher({\n          type: ThreadContextActionTypes.GET_PREV_MESSAGES_FAILURE,\n          payload: error\n        });\n      });\n    }\n  }, [hasMorePrev, parentMessage, threadListState, oldestMessageTimeStamp]);\n}\nfunction useGetNextThreadsCallback(_ref, _ref2) {\n  var hasMoreNext = _ref.hasMoreNext,\n    parentMessage = _ref.parentMessage,\n    threadListState = _ref.threadListState,\n    latestMessageTimeStamp = _ref.latestMessageTimeStamp,\n    isReactionEnabled = _ref.isReactionEnabled;\n  var logger = _ref2.logger,\n    threadDispatcher = _ref2.threadDispatcher;\n  return useCallback(function (callback) {\n    // validation check\n    if (threadListState === ThreadListStateTypes.INITIALIZED && parentMessage !== null && parentMessage !== void 0 && parentMessage.getThreadedMessagesByTimestamp && latestMessageTimeStamp !== 0) {\n      var _parentMessage$getThr;\n      threadDispatcher({\n        type: ThreadContextActionTypes.GET_NEXT_MESSAGES_START,\n        payload: null\n      });\n      (_parentMessage$getThr = parentMessage.getThreadedMessagesByTimestamp) === null || _parentMessage$getThr === void 0 ? void 0 : _parentMessage$getThr.call(parentMessage, latestMessageTimeStamp, {\n        prevResultSize: 0,\n        nextResultSize: NEXT_THREADS_FETCH_SIZE,\n        includeReactions: isReactionEnabled,\n        includeMetaArray: true\n      }).then(function (_ref3) {\n        var parentMessage = _ref3.parentMessage,\n          threadedMessages = _ref3.threadedMessages;\n        logger.info('Thread | useGetNextThreadsCallback: Fetch next threads succeeded.', {\n          parentMessage: parentMessage,\n          threadedMessages: threadedMessages\n        });\n        threadDispatcher({\n          type: ThreadContextActionTypes.GET_NEXT_MESSAGES_SUCESS,\n          payload: {\n            parentMessage: parentMessage,\n            threadedMessages: threadedMessages\n          }\n        });\n        callback(threadedMessages);\n      }).catch(function (error) {\n        logger.info('Thread | useGetNextThreadsCallback: Fetch next threads failed.', error);\n        threadDispatcher({\n          type: ThreadContextActionTypes.GET_NEXT_MESSAGES_FAILURE,\n          payload: error\n        });\n      });\n    }\n  }, [hasMoreNext, parentMessage, threadListState, latestMessageTimeStamp]);\n}\nfunction useToggleReactionCallback(_ref, _ref2) {\n  var currentChannel = _ref.currentChannel;\n  var logger = _ref2.logger;\n  return useCallback(function (message, key, isReacted) {\n    var _currentChannel$addRe;\n    if (isReacted) {\n      var _currentChannel$delet;\n      currentChannel === null || currentChannel === void 0 ? void 0 : (_currentChannel$delet = currentChannel.deleteReaction) === null || _currentChannel$delet === void 0 ? void 0 : _currentChannel$delet.call(currentChannel, message, key).then(function (res) {\n        logger.info('Thread | useToggleReactionsCallback: Delete reaction succeeded.', res);\n      }).catch(function (err) {\n        logger.warning('Thread | useToggleReactionsCallback: Delete reaction failed.', err);\n      });\n      return;\n    }\n    currentChannel === null || currentChannel === void 0 ? void 0 : (_currentChannel$addRe = currentChannel.addReaction) === null || _currentChannel$addRe === void 0 ? void 0 : _currentChannel$addRe.call(currentChannel, message, key).then(function (res) {\n      logger.info('Thread | useToggleReactionsCallback: Add reaction succeeded.', res);\n    }).catch(function (err) {\n      logger.warning('Thread | useToggleReactionsCallback: Add reaction failed.', err);\n    });\n  }, [currentChannel]);\n}\nfunction useSendUserMessageCallback(_ref, _ref2) {\n  var isMentionEnabled = _ref.isMentionEnabled,\n    currentChannel = _ref.currentChannel;\n  var logger = _ref2.logger,\n    pubSub = _ref2.pubSub,\n    threadDispatcher = _ref2.threadDispatcher;\n  var sendMessage = useCallback(function (props) {\n    var message = props.message,\n      _props$quoteMessage = props.quoteMessage,\n      quoteMessage = _props$quoteMessage === void 0 ? null : _props$quoteMessage,\n      mentionTemplate = props.mentionTemplate,\n      mentionedUsers = props.mentionedUsers;\n    var createDefaultParams = function createDefaultParams() {\n      var params = {};\n      params.message = message;\n      if (isMentionEnabled && (mentionedUsers === null || mentionedUsers === void 0 ? void 0 : mentionedUsers.length) > 0) {\n        params.mentionedUsers = mentionedUsers;\n      }\n      if (isMentionEnabled && mentionTemplate && (mentionedUsers === null || mentionedUsers === void 0 ? void 0 : mentionedUsers.length) > 0) {\n        params.mentionedMessageTemplate = mentionTemplate;\n      }\n      if (quoteMessage) {\n        params.isReplyToChannel = true;\n        params.parentMessageId = quoteMessage.messageId;\n      }\n      return params;\n    };\n    var params = createDefaultParams();\n    logger.info('Thread | useSendUserMessageCallback: Sending user message start.', params);\n    if (currentChannel !== null && currentChannel !== void 0 && currentChannel.sendUserMessage) {\n      currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.sendUserMessage(params).onPending(function (pendingMessage) {\n        threadDispatcher({\n          type: ThreadContextActionTypes.SEND_MESSAGE_START,\n          payload: {\n            message: pendingMessage\n          }\n        });\n      }).onFailed(function (error, message) {\n        logger.info('Thread | useSendUserMessageCallback: Sending user message failed.', {\n          message: message,\n          error: error\n        });\n        threadDispatcher({\n          type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,\n          payload: {\n            error: error,\n            message: message\n          }\n        });\n      }).onSucceeded(function (message) {\n        logger.info('Thread | useSendUserMessageCallback: Sending user message succeeded.', message);\n        threadDispatcher({\n          type: ThreadContextActionTypes.SEND_MESSAGE_SUCESS,\n          payload: {\n            message: message\n          }\n        });\n        // because Thread doesn't subscribe SEND_USER_MESSAGE\n        pubSub.publish(PUBSUB_TOPICS.SEND_USER_MESSAGE, {\n          channel: currentChannel,\n          message: message\n        });\n      });\n    }\n  }, [isMentionEnabled, currentChannel]);\n  return sendMessage;\n}\nfunction useResendMessageCallback(_ref, _ref2) {\n  var currentChannel = _ref.currentChannel;\n  var logger = _ref2.logger,\n    pubSub = _ref2.pubSub,\n    threadDispatcher = _ref2.threadDispatcher;\n  return useCallback(function (failedMessage) {\n    if (failedMessage !== null && failedMessage !== void 0 && failedMessage.isResendable) {\n      var _failedMessage$isUser, _failedMessage$isFile;\n      failedMessage.sendingStatus = SendingStatus.PENDING;\n      logger.info('Thread | useResendMessageCallback: Resending failedMessage start.', failedMessage);\n      threadDispatcher({\n        type: ThreadContextActionTypes.RESEND_MESSAGE_START,\n        payload: failedMessage\n      });\n      if (failedMessage !== null && failedMessage !== void 0 && (_failedMessage$isUser = failedMessage.isUserMessage) !== null && _failedMessage$isUser !== void 0 && _failedMessage$isUser.call(failedMessage) || (failedMessage === null || failedMessage === void 0 ? void 0 : failedMessage.messageType) === MessageType.USER) {\n        currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.resendUserMessage(failedMessage).then(function (message) {\n          logger.info('Thread | useResendMessageCallback: Resending failedMessage succeeded.', message);\n          threadDispatcher({\n            type: ThreadContextActionTypes.SEND_MESSAGE_SUCESS,\n            payload: {\n              message: message\n            }\n          });\n          pubSub.publish(PUBSUB_TOPICS.SEND_USER_MESSAGE, {\n            channel: currentChannel,\n            message: message\n          });\n        }).catch(function (error) {\n          logger.warning('Thread | useResendMessageCallback: Resending failedMessage failed.', error);\n          failedMessage.sendingStatus = SendingStatus.FAILED;\n          threadDispatcher({\n            type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,\n            payload: {\n              message: failedMessage\n            }\n          });\n        });\n      } else if (failedMessage !== null && failedMessage !== void 0 && (_failedMessage$isFile = failedMessage.isFileMessage) !== null && _failedMessage$isFile !== void 0 && _failedMessage$isFile.call(failedMessage) || (failedMessage === null || failedMessage === void 0 ? void 0 : failedMessage.messageType) === MessageType.FILE) {\n        var _currentChannel$resen;\n        currentChannel === null || currentChannel === void 0 ? void 0 : (_currentChannel$resen = currentChannel.resendFileMessage) === null || _currentChannel$resen === void 0 ? void 0 : _currentChannel$resen.call(currentChannel, failedMessage).then(function (message) {\n          logger.info('Thread | useResendMessageCallback: Resending failedMessage succeeded.', message);\n          threadDispatcher({\n            type: ThreadContextActionTypes.SEND_MESSAGE_SUCESS,\n            payload: {\n              message: message\n            }\n          });\n        }).catch(function (error) {\n          logger.warning('Thread | useResendMessageCallback: Resending failedMessage failed.', error);\n          failedMessage.sendingStatus = SendingStatus.FAILED;\n          threadDispatcher({\n            type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,\n            payload: {\n              message: failedMessage\n            }\n          });\n          pubSub.publish(PUBSUB_TOPICS.SEND_FILE_MESSAGE, {\n            channel: currentChannel,\n            message: failedMessage\n          });\n        });\n      } else {\n        logger.warning('Thread | useResendMessageCallback: Message is not resendable.', failedMessage);\n        failedMessage.sendingStatus = SendingStatus.FAILED;\n        threadDispatcher({\n          type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,\n          payload: {\n            message: failedMessage\n          }\n        });\n      }\n    }\n  }, [currentChannel]);\n}\nvar useSendVoiceMessageCallback = function useSendVoiceMessageCallback(_ref, _ref2) {\n  var currentChannel = _ref.currentChannel,\n    onBeforeSendVoiceMessage = _ref.onBeforeSendVoiceMessage;\n  var logger = _ref2.logger,\n    pubSub = _ref2.pubSub,\n    threadDispatcher = _ref2.threadDispatcher;\n  var sendMessage = useCallback(function (file, duration, quoteMessage) {\n    var messageParams = onBeforeSendVoiceMessage && typeof onBeforeSendVoiceMessage === 'function' ? onBeforeSendVoiceMessage(file, quoteMessage) : {\n      file: file,\n      fileName: VOICE_MESSAGE_FILE_NAME,\n      mimeType: VOICE_MESSAGE_MIME_TYPE,\n      metaArrays: [new MessageMetaArray({\n        key: META_ARRAY_VOICE_DURATION_KEY,\n        value: [\"\".concat(duration)]\n      }), new MessageMetaArray({\n        key: META_ARRAY_MESSAGE_TYPE_KEY,\n        value: [META_ARRAY_MESSAGE_TYPE_VALUE__VOICE]\n      })]\n    };\n    if (quoteMessage) {\n      messageParams.isReplyToChannel = true;\n      messageParams.parentMessageId = quoteMessage.messageId;\n    }\n    logger.info('Thread | useSendVoiceMessageCallback:  Start sending voice message', messageParams);\n    currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.sendFileMessage(messageParams).onPending(function (pendingMessage) {\n      threadDispatcher({\n        type: ThreadContextActionTypes.SEND_MESSAGE_START,\n        payload: {\n          /* pubSub is used instead of messagesDispatcher\n          to avoid redundantly calling `messageActionTypes.SEND_MESSAGEGE_START` */\n          message: _objectSpread2(_objectSpread2({}, pendingMessage), {}, {\n            url: URL.createObjectURL(file),\n            // pending thumbnail message seems to be failed\n            requestState: 'pending'\n          })\n        }\n      });\n      setTimeout(function () {\n        return scrollIntoLast();\n      }, 1000);\n    }).onFailed(function (error, message) {\n      message.localUrl = URL.createObjectURL(file);\n      message.file = file;\n      logger.info('Thread | useSendVoiceMessageCallback: Sending voice message failed.', {\n        message: message,\n        error: error\n      });\n      threadDispatcher({\n        type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,\n        payload: {\n          message: message,\n          error: error\n        }\n      });\n    }).onSucceeded(function (message) {\n      logger.info('Thread | useSendVoiceMessageCallback: Sending voice message succeeded.', message);\n      pubSub.publish(PUBSUB_TOPICS.SEND_FILE_MESSAGE, {\n        channel: currentChannel,\n        message: message\n      });\n    });\n  }, [currentChannel, onBeforeSendVoiceMessage]);\n  return sendMessage;\n};\nvar ThreadContext = /*#__PURE__*/React__default.createContext(null);\nvar ThreadProvider = function ThreadProvider(props) {\n  var _allThreadMessages$, _allThreadMessages;\n  var children = props.children,\n    channelUrl = props.channelUrl,\n    onHeaderActionClick = props.onHeaderActionClick,\n    onMoveToParentMessage = props.onMoveToParentMessage,\n    onBeforeSendVoiceMessage = props.onBeforeSendVoiceMessage,\n    disableUserProfile = props.disableUserProfile,\n    renderUserProfile = props.renderUserProfile,\n    onUserProfileMessage = props.onUserProfileMessage;\n  var propsMessage = props === null || props === void 0 ? void 0 : props.message;\n  var propsParentMessage = getParentMessageFrom(propsMessage);\n  // Context from SendbirdProvider\n  var globalStore = useSendbirdStateContext();\n  var stores = globalStore.stores,\n    config = globalStore.config;\n  // // stores\n  var sdkStore = stores.sdkStore,\n    userStore = stores.userStore;\n  var sdk = sdkStore.sdk;\n  var user = userStore.user;\n  var sdkInit = sdkStore === null || sdkStore === void 0 ? void 0 : sdkStore.initialized;\n  // // config\n  var logger = config.logger,\n    pubSub = config.pubSub,\n    replyType = config.replyType,\n    isMentionEnabled = config.isMentionEnabled,\n    isReactionEnabled = config.isReactionEnabled;\n\n  // dux of Thread\n  var _useReducer = useReducer(reducer, initialState),\n    _useReducer2 = _slicedToArray(_useReducer, 2),\n    threadStore = _useReducer2[0],\n    threadDispatcher = _useReducer2[1];\n  var currentChannel = threadStore.currentChannel,\n    allThreadMessages = threadStore.allThreadMessages,\n    parentMessage = threadStore.parentMessage,\n    channelState = threadStore.channelState,\n    threadListState = threadStore.threadListState,\n    parentMessageState = threadStore.parentMessageState,\n    hasMorePrev = threadStore.hasMorePrev,\n    hasMoreNext = threadStore.hasMoreNext,\n    emojiContainer = threadStore.emojiContainer,\n    isMuted = threadStore.isMuted,\n    isChannelFrozen = threadStore.isChannelFrozen,\n    currentUserId = threadStore.currentUserId;\n\n  // Initialization\n  useEffect(function () {\n    threadDispatcher({\n      type: ThreadContextActionTypes.INIT_USER_ID,\n      payload: user === null || user === void 0 ? void 0 : user.userId\n    });\n  }, [user]);\n  useGetChannel({\n    channelUrl: channelUrl,\n    sdkInit: sdkInit,\n    message: propsMessage\n  }, {\n    sdk: sdk,\n    logger: logger,\n    threadDispatcher: threadDispatcher\n  });\n  useGetParentMessage({\n    channelUrl: channelUrl,\n    sdkInit: sdkInit,\n    parentMessage: propsParentMessage\n  }, {\n    sdk: sdk,\n    logger: logger,\n    threadDispatcher: threadDispatcher\n  });\n  useGetThreadList({\n    sdkInit: sdkInit,\n    parentMessage: parentMessage,\n    isReactionEnabled: isReactionEnabled,\n    anchorMessage: (propsMessage === null || propsMessage === void 0 ? void 0 : propsMessage.messageId) !== (propsParentMessage === null || propsParentMessage === void 0 ? void 0 : propsParentMessage.messageId) ? propsMessage : null\n    // anchorMessage should be null when parentMessage doesn't exist\n  }, {\n    logger: logger,\n    threadDispatcher: threadDispatcher\n  });\n  useGetAllEmoji({\n    sdk: sdk\n  }, {\n    logger: logger,\n    threadDispatcher: threadDispatcher\n  });\n  // Handle channel events\n  useHandleChannelEvents({\n    sdk: sdk,\n    currentChannel: currentChannel\n  }, {\n    logger: logger,\n    threadDispatcher: threadDispatcher\n  });\n  useHandlePubsubEvents({\n    sdkInit: sdkInit,\n    currentChannel: currentChannel,\n    parentMessage: parentMessage\n  }, {\n    logger: logger,\n    pubSub: pubSub,\n    threadDispatcher: threadDispatcher\n  });\n\n  // callbacks\n  var fetchPrevThreads = useGetPrevThreadsCallback({\n    hasMorePrev: hasMorePrev,\n    parentMessage: parentMessage,\n    threadListState: threadListState,\n    isReactionEnabled: isReactionEnabled,\n    oldestMessageTimeStamp: ((_allThreadMessages$ = allThreadMessages[0]) === null || _allThreadMessages$ === void 0 ? void 0 : _allThreadMessages$.createdAt) || 0\n  }, {\n    logger: logger,\n    threadDispatcher: threadDispatcher\n  });\n  var fetchNextThreads = useGetNextThreadsCallback({\n    hasMoreNext: hasMoreNext,\n    parentMessage: parentMessage,\n    threadListState: threadListState,\n    isReactionEnabled: isReactionEnabled,\n    latestMessageTimeStamp: ((_allThreadMessages = allThreadMessages[allThreadMessages.length - 1]) === null || _allThreadMessages === void 0 ? void 0 : _allThreadMessages.createdAt) || 0\n  }, {\n    logger: logger,\n    threadDispatcher: threadDispatcher\n  });\n  var toggleReaction = useToggleReactionCallback({\n    currentChannel: currentChannel\n  }, {\n    logger: logger\n  });\n  var sendMessage = useSendUserMessageCallback({\n    isMentionEnabled: isMentionEnabled,\n    currentChannel: currentChannel\n  }, {\n    logger: logger,\n    pubSub: pubSub,\n    threadDispatcher: threadDispatcher\n  });\n  var sendFileMessage = useSendFileMessageCallback({\n    currentChannel: currentChannel\n  }, {\n    logger: logger,\n    pubSub: pubSub,\n    threadDispatcher: threadDispatcher\n  });\n  var sendVoiceMessage = useSendVoiceMessageCallback({\n    currentChannel: currentChannel,\n    onBeforeSendVoiceMessage: onBeforeSendVoiceMessage\n  }, {\n    logger: logger,\n    pubSub: pubSub,\n    threadDispatcher: threadDispatcher\n  });\n  var resendMessage = useResendMessageCallback({\n    currentChannel: currentChannel\n  }, {\n    logger: logger,\n    pubSub: pubSub,\n    threadDispatcher: threadDispatcher\n  });\n  var updateMessage = useUpdateMessageCallback({\n    currentChannel: currentChannel,\n    isMentionEnabled: isMentionEnabled\n  }, {\n    logger: logger,\n    pubSub: pubSub,\n    threadDispatcher: threadDispatcher\n  });\n  var deleteMessage = useDeleteMessageCallback({\n    currentChannel: currentChannel,\n    threadDispatcher: threadDispatcher\n  }, {\n    logger: logger\n  });\n\n  // memo\n  var nicknamesMap = useMemo(function () {\n    return replyType && currentChannel ? getNicknamesMapFromMembers(currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.members) : new Map();\n  }, [currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.members]);\n  return /*#__PURE__*/React__default.createElement(ThreadContext.Provider, {\n    value: {\n      // ThreadProviderProps\n      channelUrl: channelUrl,\n      message: propsMessage,\n      onHeaderActionClick: onHeaderActionClick,\n      onMoveToParentMessage: onMoveToParentMessage,\n      // ThreadContextInitialState\n      currentChannel: currentChannel,\n      allThreadMessages: allThreadMessages,\n      parentMessage: parentMessage,\n      channelState: channelState,\n      threadListState: threadListState,\n      parentMessageState: parentMessageState,\n      hasMorePrev: hasMorePrev,\n      hasMoreNext: hasMoreNext,\n      emojiContainer: emojiContainer,\n      // hooks\n      fetchPrevThreads: fetchPrevThreads,\n      fetchNextThreads: fetchNextThreads,\n      toggleReaction: toggleReaction,\n      sendMessage: sendMessage,\n      sendFileMessage: sendFileMessage,\n      sendVoiceMessage: sendVoiceMessage,\n      resendMessage: resendMessage,\n      updateMessage: updateMessage,\n      deleteMessage: deleteMessage,\n      // context\n      nicknamesMap: nicknamesMap,\n      isMuted: isMuted,\n      isChannelFrozen: isChannelFrozen,\n      currentUserId: currentUserId\n    }\n  }, /*#__PURE__*/React__default.createElement(UserProfileProvider, {\n    disableUserProfile: disableUserProfile,\n    renderUserProfile: renderUserProfile,\n    onUserProfileMessage: onUserProfileMessage\n  }, children));\n};\nvar useThreadContext = function useThreadContext() {\n  return React__default.useContext(ThreadContext);\n};\nexport { ThreadProvider as T, compareMessagesForGrouping as c, isAboutSame as i, useThreadContext as u };","map":{"version":3,"mappings":"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","names":["getNicknamesMapFromMembers","members","nicknamesMap","Map","memberIndex","length","userId","nickname","set","getParentMessageFrom","message","isParentMessage","isThreadMessage","parentMessage","parentMessageId","threadInfo","isAboutSame","a","b","px","Math","abs","isEmpty","val","undefined","compareIds","aString","toString","bString","getMessageCreatedAt","format","createdAt","isReadMessage","channel","getOutgoingMessageState","OutgoingMessageStates","READ","isSameGroup","comparingMessage","currentChannel","messageType","sender","_message$sender","_comparingMessage$sen","sendingStatus","_message$sender2","_comparingMessage$sen2","compareMessagesForGrouping","prevMessage","currMessage","nextMessage","replyType","isAcceptable","scrollIntoLast","intialTry","MAX_TRIES","currentTry","scrollDOM","document","querySelector","scrollTop","scrollHeight","error","setTimeout","PREV_THREADS_FETCH_SIZE","NEXT_THREADS_FETCH_SIZE","ThreadContextActionTypes","reducer","state","action","type","actionTypes","INIT_USER_ID","currentUserId","payload","GET_CHANNEL_START","channelState","ChannelStateTypes","LOADING","GET_CHANNEL_SUCCESS","groupChannel","INITIALIZED","isMuted","_groupChannel$members","find","member","_groupChannel$members2","isChannelFrozen","isFrozen","GET_CHANNEL_FAILURE","INVALID","SET_EMOJI_CONTAINER","emojiContainer","GET_PARENT_MESSAGE_START","parentMessageState","ParentMessageStateTypes","GET_PARENT_MESSAGE_SUCCESS","GET_PARENT_MESSAGE_FAILURE","INITIALIZE_THREAD_LIST_START","threadListState","ThreadListStateTypes","allThreadMessages","INITIALIZE_THREAD_LIST_SUCCESS","anchorMessage","threadedMessages","anchorMessageCreatedAt","messageId","anchorIndex","findIndex","prevThreadMessages","slice","anchorThreadMessage","nextThreadMessages","hasMorePrev","hasMoreNext","flat","INITIALIZE_THREAD_LIST_FAILURE","GET_NEXT_MESSAGES_START","GET_NEXT_MESSAGES_SUCESS","GET_NEXT_MESSAGES_FAILURE","GET_PREV_MESSAGES_START","GET_PREV_MESSAGES_SUCESS","GET_PREV_MESSAGES_FAILURE","ON_MESSAGE_RECEIVED","_state$currentChannel","url","_message$parentMessag","_state$parentMessage","isAlreadyReceived","m","_state$parentMessage2","map","filter","reqId","ON_MESSAGE_UPDATED","_state$currentChannel2","_state$parentMessage3","_state$allThreadMessa","msg","ON_MESSAGE_DELETED","_state$currentChannel3","_state$parentMessage4","NIL","_state$allThreadMessa2","ON_MESSAGE_DELETED_BY_REQ_ID","ON_REACTION_UPDATED","reactionEvent","_action$payload","_state$parentMessage5","_state$parentMessage6","applyReactionEvent","_state$parentMessage7","_m$applyReactionEvent","ON_USER_MUTED","user","_state$currentChannel4","ON_USER_UNMUTED","_state$currentChannel5","ON_USER_BANNED","ON_USER_UNBANNED","ON_USER_LEFT","ON_CHANNEL_FROZEN","ON_CHANNEL_UNFROZEN","ON_OPERATOR_UPDATED","_state$currentChannel6","SEND_MESSAGE_START","SEND_MESSAGE_SUCESS","filteredThreadMessages","SEND_MESSAGE_FAILURE","RESEND_MESSAGE_START","initialState","useGetChannel","channelUrl","_ref","sdkInit","sdk","_ref2","logger","threadDispatcher","useEffect","getChannel","_sdk$groupChannel$get","then","info","catch","useGetAllEmoji","getAllEmoji","useGetThreadList","isReactionEnabled","getThreadedMessagesByTimestamp","timeStamp","params","prevResultSize","nextResultSize","includeReactions","includeMetaArray","_parentMessage$getThr","_ref3","useGetParentMessage","_sdk$message","getMessage","channelType","ChannelType","GROUP","includeThreadInfo","includeParentMessageInfo","fetchParentMessage","_sdk$message$getMessa","data","parentMsg","ogMetaData","useHandlePubsubEvents","pubSub","pubSubHandler","subscriber","subscribe","topics","SEND_USER_MESSAGE","props","SEND_FILE_MESSAGE","UPDATE_USER_MESSAGE","DELETE_MESSAGE","forEach","s","remove","useHandleChannelEvents","handlerId","uuidv4","_sdk$groupChannel","addGroupChannelHandler","channelHandlerParams","onMessageReceived","onMessageUpdated","onMessageDeleted","onReactionUpdated","onUserMuted","onUserUnmuted","onUserBanned","onUserUnbanned","onUserLeft","onChannelFrozen","onChannelUnfrozen","onOperatorUpdated","users","channelHandler","GroupChannelHandler","_sdk$groupChannel$add","_sdk$groupChannel3","removeGroupChannelHandler","_sdk$groupChannel$rem","useSendFileMessageCallback","sendMessage","useCallback","file","quoteMessage","createParamsDefault","isReplyToChannel","sendFileMessage","onPending","pendingMessage","URL","createObjectURL","requestState","onFailed","localUrl","onSucceeded","publish","useUpdateMessageCallback","isMentionEnabled","mentionedUsers","mentionTemplate","mentionedMessageTemplate","updateUserMessage","_currentChannel$updat","fromSelector","useDeleteMessageCallback","Promise","resolve","reject","deleteMessage","_currentChannel$delet","err","warning","useGetPrevThreadsCallback","oldestMessageTimeStamp","callback","useGetNextThreadsCallback","latestMessageTimeStamp","useToggleReactionCallback","key","isReacted","deleteReaction","res","addReaction","_currentChannel$addRe","useSendUserMessageCallback","createDefaultParams","sendUserMessage","useResendMessageCallback","failedMessage","isResendable","SendingStatus","PENDING","isUserMessage","_failedMessage$isUser","MessageType","USER","resendUserMessage","FAILED","isFileMessage","_failedMessage$isFile","FILE","resendFileMessage","_currentChannel$resen","useSendVoiceMessageCallback","onBeforeSendVoiceMessage","duration","messageParams","fileName","VOICE_MESSAGE_FILE_NAME","mimeType","VOICE_MESSAGE_MIME_TYPE","metaArrays","MessageMetaArray","META_ARRAY_VOICE_DURATION_KEY","value","META_ARRAY_MESSAGE_TYPE_KEY","META_ARRAY_MESSAGE_TYPE_VALUE__VOICE","ThreadContext","React","createContext","ThreadProvider","children","onHeaderActionClick","onMoveToParentMessage","disableUserProfile","renderUserProfile","onUserProfileMessage","propsMessage","propsParentMessage","globalStore","useSendbirdStateContext","stores","config","sdkStore","userStore","initialized","useReducer","threadReducer","threadInitialState","threadStore","fetchPrevThreads","_allThreadMessages$","fetchNextThreads","_allThreadMessages","toggleReaction","sendVoiceMessage","resendMessage","updateMessage","useMemo","Provider","UserProfileProvider","useThreadContext","useContext"],"sources":["C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Thread\\context\\utils.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Thread\\consts.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Thread\\context\\dux\\actionTypes.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Thread\\context\\dux\\reducer.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Thread\\context\\dux\\initialState.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Thread\\context\\hooks\\useGetChannel.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Thread\\context\\hooks\\useGetAllEmoji.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Thread\\context\\hooks\\useGetThreadList.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Thread\\context\\hooks\\useGetParentMessage.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Thread\\context\\hooks\\useHandlePubsubEvents.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Thread\\context\\hooks\\useHandleChannelEvents.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Thread\\context\\hooks\\useSendFileMessage.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Thread\\context\\hooks\\useUpdateMessageCallback.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Thread\\context\\hooks\\useDeleteMessageCallback.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Thread\\context\\hooks\\useGetPrevThreadsCallback.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Thread\\context\\hooks\\useGetNextThreadsCallback.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Thread\\context\\hooks\\useToggleReactionsCallback.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Thread\\context\\hooks\\useSendUserMessageCallback.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Thread\\context\\hooks\\useResendMessageCallback.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Thread\\context\\hooks\\useSendVoiceMessageCallback.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Thread\\context\\ThreadProvider.tsx"],"sourcesContent":["import format from 'date-fns/format';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { BaseMessage, FileMessage, UserMessage } from '@sendbird/chat/message';\nimport { getOutgoingMessageState, OutgoingMessageStates } from '../../../utils/exports/getOutgoingMessageState';\n\nexport const getNicknamesMapFromMembers = (members = []): Map<string, string> => {\n  const nicknamesMap = new Map();\n  for (let memberIndex = 0; memberIndex < members.length; memberIndex += 1) {\n    const { userId, nickname } = members[memberIndex];\n    nicknamesMap.set(userId, nickname);\n  }\n  return nicknamesMap;\n};\n\nexport const getParentMessageFrom = (message: UserMessage | FileMessage | null): UserMessage | FileMessage | BaseMessage | null => {\n  if (!message) {\n    return null;\n  }\n  if (isParentMessage(message)) {\n    return message;\n  }\n  if (isThreadMessage(message)) {\n    return message?.parentMessage || null;\n  }\n  return null;\n};\n\nexport const isParentMessage = (message: UserMessage | FileMessage): boolean => {\n  return (\n    message?.parentMessage === null\n    && typeof message?.parentMessageId === 'number'\n    && !message?.parentMessageId\n  );\n};\n\nexport const isThreadMessage = (message: UserMessage | FileMessage): boolean => {\n  return (\n    message?.parentMessage !== null\n    && typeof message?.parentMessageId === 'number'\n    && message?.parentMessageId > 0\n    && message?.threadInfo === null\n  );\n};\n\nexport const isAboutSame = (a: number, b: number, px: number): boolean => (Math.abs(a - b) <= px);\n\nexport const isEmpty = (val: unknown): boolean => (val === null || val === undefined);\n\n// Some Ids return string and number inconsistently\n// only use to comapre IDs\nexport function compareIds(a: number | string, b: number | string): boolean {\n  if (isEmpty(a) || isEmpty(b)) {\n    return false;\n  }\n  const aString = a.toString();\n  const bString = b.toString();\n  return aString === bString;\n}\n\nexport const getMessageCreatedAt = (message: UserMessage | FileMessage): string => format(message.createdAt, 'p');\nexport const isReadMessage = (channel: GroupChannel, message: UserMessage | FileMessage): boolean => (\n  getOutgoingMessageState(channel, message) === OutgoingMessageStates.READ\n);\nexport const isSameGroup = (\n  message: UserMessage | FileMessage,\n  comparingMessage: UserMessage | FileMessage,\n  currentChannel: GroupChannel,\n): boolean => {\n  if (!(message\n    && comparingMessage\n    && message.messageType\n    && message.messageType !== 'admin'\n    && comparingMessage.messageType\n    && comparingMessage?.messageType !== 'admin'\n    && message?.sender\n    && comparingMessage?.sender\n    && message?.createdAt\n    && comparingMessage?.createdAt\n    && message?.sender?.userId\n    && comparingMessage?.sender?.userId\n  )) {\n    return false;\n  }\n  return (\n    message?.sendingStatus === comparingMessage?.sendingStatus\n    && message?.sender?.userId === comparingMessage?.sender?.userId\n    && getMessageCreatedAt(message) === getMessageCreatedAt(comparingMessage)\n    && isReadMessage(currentChannel, message) === isReadMessage(currentChannel, comparingMessage)\n  );\n};\n\nexport const compareMessagesForGrouping = (\n  prevMessage: UserMessage | FileMessage,\n  currMessage: UserMessage | FileMessage,\n  nextMessage: UserMessage | FileMessage,\n  currentChannel: GroupChannel,\n  replyType: string,\n): [boolean, boolean] => {\n  if (replyType === 'THREAD' && currMessage?.threadInfo) {\n    return [false, false];\n  }\n  const sendingStatus = currMessage?.sendingStatus || '';\n  const isAcceptable = sendingStatus !== 'pending' && sendingStatus !== 'failed';\n  return [\n    isSameGroup(prevMessage, currMessage, currentChannel) && isAcceptable,\n    isSameGroup(currMessage, nextMessage, currentChannel) && isAcceptable,\n  ];\n};\n\nexport const scrollIntoLast = (intialTry = 0): void => {\n  const MAX_TRIES = 10;\n  const currentTry = intialTry;\n  if (currentTry > MAX_TRIES) {\n    return;\n  }\n  try {\n    const scrollDOM = document.querySelector('.sendbird-thread-ui--scroll');\n    // eslint-disable-next-line no-multi-assign\n    scrollDOM.scrollTop = scrollDOM.scrollHeight;\n  } catch (error) {\n    setTimeout(() => {\n      scrollIntoLast(currentTry + 1);\n    }, 500 * currentTry);\n  }\n};\n","export const PREV_THREADS_FETCH_SIZE = 30;\nexport const NEXT_THREADS_FETCH_SIZE = 30;\n","export enum ThreadContextActionTypes {\n  // initialize\n  INIT_USER_ID = 'INIT_USER_ID',\n  // channel\n  GET_CHANNEL_START = 'GET_CHANNEL_START',\n  GET_CHANNEL_SUCCESS = 'GET_CHANNEL_SUCCESS',\n  GET_CHANNEL_FAILURE = 'GET_CHANNEL_FAILURE',\n  // emojis\n  SET_EMOJI_CONTAINER = 'SET_EMOJI_CONTAINER',\n  // parent message\n  GET_PARENT_MESSAGE_START = 'GET_PARENT_MESSAGE_START',\n  GET_PARENT_MESSAGE_SUCCESS = 'GET_PARENT_MESSAGE_SUCCESS',\n  GET_PARENT_MESSAGE_FAILURE = 'GET_PARENT_MESSAGE_FAILURE',\n  // fetch threads\n  INITIALIZE_THREAD_LIST_START = 'INITIALIZE_THREAD_LIST_START',\n  INITIALIZE_THREAD_LIST_SUCCESS = 'INITIALIZE_THREAD_LIST_SUCCESS',\n  INITIALIZE_THREAD_LIST_FAILURE = 'INITIALIZE_THREAD_LIST_FAILURE',\n  GET_PREV_MESSAGES_START = 'GET_PREV_MESSAGES_START',\n  GET_PREV_MESSAGES_SUCESS = 'GET_PREV_MESSAGES_SUCESS',\n  GET_PREV_MESSAGES_FAILURE = 'GET_PREV_MESSAGES_FAILURE',\n  GET_NEXT_MESSAGES_START = 'GET_NEXT_MESSAGES_START',\n  GET_NEXT_MESSAGES_SUCESS = 'GET_NEXT_MESSAGES_SUCESS',\n  GET_NEXT_MESSAGES_FAILURE = 'GET_NEXT_MESSAGES_FAILURE',\n  // handle messages\n  SEND_MESSAGE_START = 'SEND_MESSAGE_START',\n  SEND_MESSAGE_SUCESS = 'SEND_MESSAGE_SUCESS',\n  SEND_MESSAGE_FAILURE = 'SEND_MESSAGE_FAILURE',\n  RESEND_MESSAGE_START = 'RESEND_MESSAGE_START',\n  ON_MESSAGE_DELETED_BY_REQ_ID = 'ON_MESSAGE_DELETED_BY_REQ_ID',\n  // event handlers - message status change\n  ON_MESSAGE_RECEIVED = 'ON_MESSAGE_RECEIVED',\n  ON_MESSAGE_UPDATED = 'ON_MESSAGE_UPDATED',\n  ON_MESSAGE_DELETED = 'ON_MESSAGE_DELETED',\n  ON_REACTION_UPDATED = 'ON_REACTION_UPDATED',\n  // event handlers - user status change\n  ON_USER_MUTED = 'ON_USER_MUTED',\n  ON_USER_UNMUTED = 'ON_USER_UNMUTED',\n  ON_USER_BANNED = 'ON_USER_BANNED',\n  ON_USER_UNBANNED = 'ON_USER_UNBANNED',\n  ON_USER_LEFT = 'ON_USER_LEFT',\n  // event handler - channel status change\n  ON_CHANNEL_FROZEN = 'ON_CHANNEL_FROZEN',\n  ON_CHANNEL_UNFROZEN = 'ON_CHANNEL_UNFROZEN',\n  ON_OPERATOR_UPDATED = 'ON_OPERATOR_UPDATED',\n}\n","import { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { FileMessage, ReactionEvent, UserMessage } from '@sendbird/chat/message';\nimport { NEXT_THREADS_FETCH_SIZE, PREV_THREADS_FETCH_SIZE } from '../../consts';\nimport { ChannelStateTypes, ParentMessageStateTypes, ThreadListStateTypes } from '../../types';\nimport { compareIds } from '../utils';\nimport { ThreadContextActionTypes as actionTypes } from './actionTypes';\nimport { ThreadContextInitialState } from './initialState';\n\ninterface ActionInterface {\n  type: actionTypes;\n  payload?: any;\n}\n\nexport default function reducer(\n  state: ThreadContextInitialState,\n  action: ActionInterface,\n): ThreadContextInitialState {\n  switch (action.type) {\n    // initialize\n    case actionTypes.INIT_USER_ID: {\n      return {\n        ...state,\n        currentUserId: action.payload,\n      };\n    }\n    case actionTypes.GET_CHANNEL_START: {\n      return {\n        ...state,\n        channelState: ChannelStateTypes.LOADING,\n        currentChannel: null,\n      };\n    }\n    case actionTypes.GET_CHANNEL_SUCCESS: {\n      const groupChannel = action.payload.groupChannel as GroupChannel;\n      return {\n        ...state,\n        channelState: ChannelStateTypes.INITIALIZED,\n        currentChannel: groupChannel,\n        // only support in normal group channel\n        isMuted: groupChannel?.members?.find((member) => member?.userId === state.currentUserId)?.isMuted || false,\n        isChannelFrozen: groupChannel?.isFrozen || false,\n      };\n    }\n    case actionTypes.GET_CHANNEL_FAILURE: {\n      return {\n        ...state,\n        channelState: ChannelStateTypes.INVALID,\n        currentChannel: null,\n      };\n    }\n    case actionTypes.SET_EMOJI_CONTAINER: {\n      const { emojiContainer } = action.payload;\n      return {\n        ...state,\n        emojiContainer: emojiContainer,\n      };\n    }\n    case actionTypes.GET_PARENT_MESSAGE_START: {\n      return {\n        ...state,\n        parentMessageState: ParentMessageStateTypes.LOADING,\n        parentMessage: null,\n      };\n    }\n    case actionTypes.GET_PARENT_MESSAGE_SUCCESS: {\n      return {\n        ...state,\n        parentMessageState: ParentMessageStateTypes.INITIALIZED,\n        parentMessage: action.payload.parentMessage,\n      };\n    }\n    case actionTypes.GET_PARENT_MESSAGE_FAILURE: {\n      return {\n        ...state,\n        parentMessageState: ParentMessageStateTypes.INVALID,\n        parentMessage: null,\n      };\n    }\n    // fetch threads\n    case actionTypes.INITIALIZE_THREAD_LIST_START: {\n      return {\n        ...state,\n        threadListState: ThreadListStateTypes.LOADING,\n        allThreadMessages: [],\n      };\n    }\n    case actionTypes.INITIALIZE_THREAD_LIST_SUCCESS: {\n      const { parentMessage, anchorMessage, threadedMessages } = action.payload;\n      const anchorMessageCreatedAt = (!anchorMessage?.messageId) ? parentMessage?.createdAt : anchorMessage?.createdAt;\n      const anchorIndex = threadedMessages.findIndex((message) => message?.createdAt > anchorMessageCreatedAt);\n      const prevThreadMessages = anchorIndex > -1 ? threadedMessages.slice(0, anchorIndex) : threadedMessages;\n      const anchorThreadMessage = anchorMessage?.messageId ? [anchorMessage] : [];\n      const nextThreadMessages = anchorIndex > -1 ? threadedMessages.slice(anchorIndex) : [];\n      return {\n        ...state,\n        threadListState: ThreadListStateTypes.INITIALIZED,\n        hasMorePrev: anchorIndex === -1 || anchorIndex === PREV_THREADS_FETCH_SIZE,\n        hasMoreNext: threadedMessages.length - anchorIndex === NEXT_THREADS_FETCH_SIZE,\n        allThreadMessages: [prevThreadMessages, anchorThreadMessage, nextThreadMessages].flat(),\n      };\n    }\n    case actionTypes.INITIALIZE_THREAD_LIST_FAILURE: {\n      return {\n        ...state,\n        threadListState: ThreadListStateTypes.INVALID,\n        allThreadMessages: [],\n      };\n    }\n    case actionTypes.GET_NEXT_MESSAGES_START: {\n      return {\n        ...state,\n      };\n    }\n    case actionTypes.GET_NEXT_MESSAGES_SUCESS: {\n      const { threadedMessages } = action.payload;\n      return {\n        ...state,\n        hasMoreNext: threadedMessages.length === NEXT_THREADS_FETCH_SIZE,\n        allThreadMessages: [...state.allThreadMessages, ...threadedMessages],\n      };\n    }\n    case actionTypes.GET_NEXT_MESSAGES_FAILURE: {\n      return {\n        ...state,\n        hasMoreNext: false,\n      };\n    }\n    case actionTypes.GET_PREV_MESSAGES_START: {\n      return {\n        ...state,\n      };\n    }\n    case actionTypes.GET_PREV_MESSAGES_SUCESS: {\n      const { threadedMessages } = action.payload;\n      return {\n        ...state,\n        hasMorePrev: threadedMessages.length === PREV_THREADS_FETCH_SIZE,\n        allThreadMessages: [...threadedMessages, ...state.allThreadMessages],\n      };\n    }\n    case actionTypes.GET_PREV_MESSAGES_FAILURE: {\n      return {\n        ...state,\n        hasMorePrev: false,\n      };\n    }\n    // event handlers - message status change\n    case actionTypes.ON_MESSAGE_RECEIVED: {\n      const { channel, message }: { channel: GroupChannel, message: UserMessage | FileMessage } = action.payload;\n\n      if (\n        state.currentChannel?.url !== channel?.url\n        || state.hasMoreNext\n        || message?.parentMessage?.messageId !== state?.parentMessage?.messageId\n      ) {\n        return state;\n      }\n      const isAlreadyReceived = state.allThreadMessages.findIndex((m) => (\n        m.messageId === message.messageId\n      )) > -1;\n      return {\n        ...state,\n        parentMessage: state.parentMessage?.messageId === message?.messageId ? message : state.parentMessage,\n        allThreadMessages: isAlreadyReceived\n          ? state.allThreadMessages.map((m) => (\n            m.messageId === message.messageId ? message : m\n          ))\n          : [\n            ...state.allThreadMessages.filter((m) => (m as UserMessage | FileMessage)?.reqId !== message?.reqId),\n            message,\n          ],\n      };\n    }\n    case actionTypes.ON_MESSAGE_UPDATED: {\n      const { channel, message } = action.payload;\n      if (state.currentChannel?.url !== channel?.url) {\n        return state;\n      }\n      return {\n        ...state,\n        parentMessage: state.parentMessage?.messageId === message?.messageId\n          ? message\n          : state.parentMessage,\n        allThreadMessages: state.allThreadMessages?.map((msg) => (\n          (msg?.messageId === message?.messageId) ? message : msg\n        )),\n      };\n    }\n    case actionTypes.ON_MESSAGE_DELETED: {\n      const { channel, messageId } = action.payload;\n      if (state.currentChannel?.url !== channel?.url) {\n        return state;\n      }\n      if (state?.parentMessage?.messageId === messageId) {\n        return {\n          ...state,\n          parentMessage: null,\n          parentMessageState: ParentMessageStateTypes.NIL,\n          allThreadMessages: [],\n        };\n      }\n      return {\n        ...state,\n        allThreadMessages: state.allThreadMessages?.filter((msg) => (\n          msg?.messageId !== messageId\n        )),\n      };\n    }\n    case actionTypes.ON_MESSAGE_DELETED_BY_REQ_ID: {\n      return {\n        ...state,\n        allThreadMessages: state.allThreadMessages.filter((m) => (\n          !compareIds((m as UserMessage | FileMessage).reqId, action.payload)\n        )),\n      };\n    }\n    case actionTypes.ON_REACTION_UPDATED: {\n      const reactionEvent = action.payload?.reactionEvent as ReactionEvent;\n      if (state?.parentMessage?.messageId === reactionEvent?.messageId) {\n        state.parentMessage?.applyReactionEvent?.(reactionEvent);\n      }\n      return {\n        ...state,\n        allThreadMessages: state.allThreadMessages.map((m) => {\n          if (reactionEvent?.messageId === m?.messageId) {\n            m?.applyReactionEvent?.(reactionEvent);\n            return m;\n          }\n          return m;\n        }),\n      };\n    }\n    // event handlers - user status change\n    case actionTypes.ON_USER_MUTED: {\n      const { channel, user } = action.payload;\n      if (state.currentChannel?.url !== channel?.url || state.currentUserId !== user?.userId) {\n        return state;\n      }\n      return {\n        ...state,\n        isMuted: true,\n      };\n    }\n    case actionTypes.ON_USER_UNMUTED: {\n      const { channel, user } = action.payload;\n      if (state.currentChannel?.url !== channel?.url || state.currentUserId !== user?.userId) {\n        return state;\n      }\n      return {\n        ...state,\n        isMuted: false,\n      };\n    }\n    case actionTypes.ON_USER_BANNED: {\n      return {\n        ...state,\n        channelState: ChannelStateTypes.NIL,\n        threadListState: ThreadListStateTypes.NIL,\n        parentMessageState: ParentMessageStateTypes.NIL,\n        currentChannel: null,\n        parentMessage: null,\n        allThreadMessages: [],\n        hasMorePrev: false,\n        hasMoreNext: false,\n      };\n    }\n    case actionTypes.ON_USER_UNBANNED: {\n      return {\n        ...state,\n      };\n    }\n    case actionTypes.ON_USER_LEFT: {\n      return {\n        ...state,\n        channelState: ChannelStateTypes.NIL,\n        threadListState: ThreadListStateTypes.NIL,\n        parentMessageState: ParentMessageStateTypes.NIL,\n        currentChannel: null,\n        parentMessage: null,\n        allThreadMessages: [],\n        hasMorePrev: false,\n        hasMoreNext: false,\n      };\n    }\n    // event handler - channel status change\n    case actionTypes.ON_CHANNEL_FROZEN: {\n      return {\n        ...state,\n        isChannelFrozen: true,\n      };\n    }\n    case actionTypes.ON_CHANNEL_UNFROZEN: {\n      return {\n        ...state,\n        isChannelFrozen: false,\n      };\n    }\n    case actionTypes.ON_OPERATOR_UPDATED: {\n      const { channel } = action.payload;\n      if (channel?.url === state.currentChannel?.url) {\n        return {\n          ...state,\n          currentChannel: channel,\n        };\n      }\n      return state;\n    }\n    // message\n    case actionTypes.SEND_MESSAGE_START: {\n      const { message } = action.payload;\n      return {\n        ...state,\n        allThreadMessages: [\n          ...state.allThreadMessages,\n          message,\n        ],\n      };\n    }\n    case actionTypes.SEND_MESSAGE_SUCESS: {\n      const { message } = action.payload;\n      const filteredThreadMessages = state.allThreadMessages.filter((m) => (\n        !compareIds((m as UserMessage)?.reqId, message?.reqId)\n      ));\n      return {\n        ...state,\n        allThreadMessages: [\n          ...filteredThreadMessages,\n          message,\n        ],\n      };\n    }\n    case actionTypes.SEND_MESSAGE_FAILURE: {\n      const { message } = action.payload;\n      return {\n        ...state,\n        allThreadMessages: state.allThreadMessages.map((m) => (\n          compareIds((m as UserMessage)?.reqId, message?.reqId)\n            ? message\n            : m\n        )),\n      };\n    }\n    case actionTypes.RESEND_MESSAGE_START: {\n      return {\n        ...state,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import { EmojiContainer } from '@sendbird/chat';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { BaseMessage, FileMessage, UserMessage } from '@sendbird/chat/message';\nimport {\n  ChannelStateTypes,\n  ParentMessageStateTypes,\n  ThreadListStateTypes,\n} from '../../types';\n\nexport interface ThreadContextInitialState {\n  currentChannel: GroupChannel;\n  allThreadMessages: Array<BaseMessage>;\n  parentMessage: UserMessage | FileMessage;\n  channelState: ChannelStateTypes;\n  parentMessageState: ParentMessageStateTypes;\n  threadListState: ThreadListStateTypes;\n  hasMorePrev: boolean;\n  hasMoreNext: boolean;\n  emojiContainer: EmojiContainer;\n  isMuted: boolean;\n  isChannelFrozen: boolean;\n  currentUserId: string;\n}\n\nconst initialState: ThreadContextInitialState = {\n  currentChannel: null,\n  allThreadMessages: [],\n  parentMessage: null,\n  channelState: ChannelStateTypes.NIL,\n  parentMessageState: ParentMessageStateTypes.NIL,\n  threadListState: ThreadListStateTypes.NIL,\n  hasMorePrev: false,\n  hasMoreNext: false,\n  emojiContainer: {} as EmojiContainer,\n  isMuted: false,\n  isChannelFrozen: false,\n  currentUserId: '',\n};\n\nexport default initialState;\n","import { useEffect } from 'react';\nimport { SendbirdGroupChat } from '@sendbird/chat/groupChannel';\n\nimport { Logger } from '../../../../lib/SendbirdState';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\nimport { FileMessage, UserMessage } from '@sendbird/chat/message';\n\ninterface DynamicProps {\n  channelUrl: string;\n  sdkInit: boolean;\n  message: UserMessage | FileMessage;\n}\n\ninterface StaticProps {\n  sdk: SendbirdGroupChat;\n  logger: Logger;\n  threadDispatcher: (props: { type: string, payload?: any }) => void;\n}\n\nexport default function useGetChannel({\n  channelUrl,\n  sdkInit,\n  message,\n}: DynamicProps, {\n  sdk,\n  logger,\n  threadDispatcher,\n}: StaticProps): void {\n  useEffect(() => {\n    // validation check\n    if (sdkInit && channelUrl && sdk?.groupChannel) {\n      threadDispatcher({\n        type: ThreadContextActionTypes.GET_CHANNEL_START,\n        payload: null,\n      });\n      sdk.groupChannel.getChannel?.(channelUrl)\n        .then((groupChannel) => {\n          logger.info('Thread | useInitialize: Get channel succeeded', groupChannel);\n          threadDispatcher({\n            type: ThreadContextActionTypes.GET_CHANNEL_SUCCESS,\n            payload: { groupChannel },\n          });\n        })\n        .catch((error) => {\n          logger.info('Thread | useInitialize: Get channel failed', error);\n          threadDispatcher({\n            type: ThreadContextActionTypes.GET_CHANNEL_FAILURE,\n            payload: error,\n          });\n        });\n    }\n  }, [message, sdkInit]);\n  /**\n   * We don't use channelUrl here,\n   * because Thread must operate independently of the channel.\n   */\n}\n","import { useEffect } from 'react';\nimport { SendbirdGroupChat } from '@sendbird/chat/groupChannel';\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\n\ninterface DanamicPrpos {\n  sdk: SendbirdGroupChat;\n}\ninterface StaticProps {\n  logger: Logger;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\nexport default function useGetAllEmoji({\n  sdk,\n}: DanamicPrpos, {\n  logger,\n  threadDispatcher,\n}: StaticProps): void {\n  useEffect(() => {\n    if (sdk?.getAllEmoji) { // validation check\n      sdk?.getAllEmoji()\n        .then((emojiContainer) => {\n          logger.info('Thread | useGetAllEmoji: Getting emojis succeeded.', emojiContainer);\n          threadDispatcher({\n            type: ThreadContextActionTypes.SET_EMOJI_CONTAINER,\n            payload: { emojiContainer },\n          });\n        })\n        .catch((error) => {\n          logger.info('Thread | useGetAllEmoji: Getting emojis failed.', error);\n        });\n    }\n  }, [sdk]);\n}\n","import { useEffect } from 'react';\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { FileMessage, ThreadedMessageListParams, UserMessage } from '@sendbird/chat/message';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\nimport { NEXT_THREADS_FETCH_SIZE, PREV_THREADS_FETCH_SIZE } from '../../consts';\n\ninterface DynamicProps {\n  sdkInit: boolean;\n  parentMessage: UserMessage | FileMessage;\n  anchorMessage?: UserMessage | FileMessage;\n  isReactionEnabled?: boolean;\n}\n\ninterface StaticProps {\n  logger: Logger;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\nexport default function useGetThreadList({\n  sdkInit,\n  parentMessage,\n  anchorMessage,\n  isReactionEnabled,\n}: DynamicProps, {\n  logger,\n  threadDispatcher,\n}: StaticProps): void {\n  useEffect(() => {\n    // validation check\n    if (sdkInit && parentMessage?.getThreadedMessagesByTimestamp) {\n      threadDispatcher({\n        type: ThreadContextActionTypes.INITIALIZE_THREAD_LIST_START,\n        payload: null,\n      });\n      const timeStamp = anchorMessage?.createdAt || 0;\n      const params = {\n        prevResultSize: PREV_THREADS_FETCH_SIZE,\n        nextResultSize: NEXT_THREADS_FETCH_SIZE,\n        includeReactions: isReactionEnabled,\n        includeMetaArray: true,\n      } as ThreadedMessageListParams;\n      logger.info('Thread | useGetThreadList: Initialize thread list start.', { timeStamp, params });\n      parentMessage.getThreadedMessagesByTimestamp?.(timeStamp, params)\n        .then(({ parentMessage, threadedMessages }) => {\n          logger.info('Thread | useGetThreadList: Initialize thread list succeeded.', { parentMessage, threadedMessages });\n          threadDispatcher({\n            type: ThreadContextActionTypes.INITIALIZE_THREAD_LIST_SUCCESS,\n            payload: {\n              parentMessage,\n              anchorMessage,\n              threadedMessages,\n            },\n          });\n        })\n        .catch((error) => {\n          logger.info('Therad | useGetThreadList: Initialize thread list failed.', error);\n          threadDispatcher({\n            type: ThreadContextActionTypes.INITIALIZE_THREAD_LIST_FAILURE,\n            payload: error,\n          });\n        });\n    }\n  }, [sdkInit, parentMessage?.messageId, anchorMessage]);\n}\n","import { useEffect } from 'react';\nimport { SendbirdGroupChat } from '@sendbird/chat/groupChannel';\n\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { BaseMessage, MessageRetrievalParams } from '@sendbird/chat/message';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\nimport { ChannelType } from '@sendbird/chat';\n\ninterface DynamicProps {\n  channelUrl: string;\n  sdkInit: boolean;\n  parentMessage?: BaseMessage;\n}\n\ninterface StaticProps {\n  sdk: SendbirdGroupChat;\n  logger: Logger;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\nexport default function useGetParentMessage({\n  channelUrl,\n  sdkInit,\n  parentMessage,\n}: DynamicProps, {\n  sdk,\n  logger,\n  threadDispatcher,\n}: StaticProps): void {\n  useEffect(() => {\n    // validation check\n    if (sdkInit && sdk?.message?.getMessage) {\n      threadDispatcher({\n        type: ThreadContextActionTypes.GET_PARENT_MESSAGE_START,\n        payload: null,\n      });\n      const params: MessageRetrievalParams = {\n        channelUrl,\n        channelType: ChannelType.GROUP,\n        messageId: parentMessage?.messageId,\n        includeMetaArray: true,\n        includeReactions: true,\n        includeThreadInfo: true,\n        includeParentMessageInfo: true,\n      };\n      logger.info('Thread | useGetParentMessage: Get parent message start.', params);\n      const fetchParentMessage = async () => {\n        const data = await sdk.message.getMessage?.(params);\n        return data;\n      };\n      fetchParentMessage()\n        .then((parentMsg) => {\n          logger.info('Thread | useGetParentMessage: Get parent message succeeded.', parentMessage);\n          parentMsg.ogMetaData = parentMessage?.ogMetaData || null;// ogMetaData is not included for now\n          threadDispatcher({\n            type: ThreadContextActionTypes.GET_PARENT_MESSAGE_SUCCESS,\n            payload: { parentMessage: parentMsg },\n          });\n        })\n        .catch((error) => {\n          logger.info('Thread | useGetParentMessage: Get parent message failed.', error);\n          threadDispatcher({\n            type: ThreadContextActionTypes.GET_PARENT_MESSAGE_FAILURE,\n            payload: error,\n          });\n        });\n    }\n  }, [sdkInit, parentMessage?.messageId]);\n  /**\n   * We don't use channelUrl here,\n   * because Thread must operate independently of the channel.\n   */\n}\n","import { useEffect } from 'react';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { FileMessage, UserMessage } from '@sendbird/chat/message';\n\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport topics from '../../../../lib/pubSub/topics';\nimport { scrollIntoLast } from '../utils';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\n\ninterface DynamicProps {\n  sdkInit: boolean;\n  currentChannel: GroupChannel;\n  parentMessage: UserMessage | FileMessage\n}\ninterface StaticProps {\n  logger: Logger;\n  pubSub: any;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\nexport default function useHandlePubsubEvents({\n  sdkInit,\n  currentChannel,\n  parentMessage,\n}: DynamicProps, {\n  pubSub,\n  threadDispatcher,\n}: StaticProps): void {\n  useEffect(() => {\n    const pubSubHandler = (): Map<any, any> => {\n      const subscriber = new Map();\n      if (!pubSub || !pubSub.subscribe) {\n        return subscriber;\n      }\n      subscriber.set(topics.SEND_USER_MESSAGE, pubSub.subscribe(topics.SEND_USER_MESSAGE, (props) => {\n        const { channel, message } = props;\n        if (currentChannel?.url === channel?.url\n          && message?.parentMessageId === parentMessage?.messageId\n        ) {\n          threadDispatcher({\n            type: ThreadContextActionTypes.SEND_MESSAGE_SUCESS,\n            payload: { message },\n          });\n        }\n        scrollIntoLast?.();\n      }));\n      subscriber.set(topics.SEND_FILE_MESSAGE, pubSub.subscribe(topics.SEND_FILE_MESSAGE, (props) => {\n        const { channel, message } = props;\n        if (currentChannel?.url === channel?.url) {\n          threadDispatcher({\n            type: ThreadContextActionTypes.SEND_MESSAGE_SUCESS,\n            payload: { message },\n          });\n        }\n        scrollIntoLast?.();\n      }));\n      subscriber.set(topics.UPDATE_USER_MESSAGE, pubSub.subscribe(topics.UPDATE_USER_MESSAGE, (msg) => {\n        const { channel, message } = msg;\n        if (currentChannel?.url === channel?.url) {\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_MESSAGE_UPDATED,\n            payload: { channel, message },\n          });\n        }\n      }));\n      subscriber.set(topics.DELETE_MESSAGE, pubSub.subscribe(topics.DELETE_MESSAGE, (msg) => {\n        const { channel, messageId } = msg;\n        if (currentChannel?.url === channel?.url) {\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_MESSAGE_DELETED,\n            payload: { messageId },\n          });\n        }\n      }));\n    };\n    const subscriber = pubSubHandler();\n    return () => {\n      subscriber?.forEach((s) => {\n        try {\n          s?.remove();\n        } catch {\n          //\n        }\n      });\n    };\n  }, [sdkInit, currentChannel]);\n}\n","import { GroupChannel, GroupChannelHandler, SendbirdGroupChat } from '@sendbird/chat/groupChannel';\nimport { useEffect } from 'react';\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport uuidv4 from '../../../../utils/uuid';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\n\ninterface DynamicProps {\n  sdk: SendbirdGroupChat;\n  currentChannel: GroupChannel;\n}\ninterface StaticProps {\n  logger: Logger;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\nexport default function useHandleChannelEvents({\n  sdk,\n  currentChannel,\n}: DynamicProps, {\n  logger,\n  threadDispatcher,\n}: StaticProps): void {\n  useEffect(() => {\n    const handlerId = uuidv4();\n    // validation check\n    if (sdk?.groupChannel?.addGroupChannelHandler\n      && currentChannel\n    ) {\n      const channelHandlerParams: GroupChannelHandler = {\n        // message status change\n        onMessageReceived(channel, message) {\n          logger.info('Thread | useHandleChannelEvents: onMessageReceived', { channel, message });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_MESSAGE_RECEIVED,\n            payload: { channel, message },\n          });\n        },\n        onMessageUpdated(channel, message) {\n          logger.info('Thread | useHandleChannelEvents: onMessageUpdated', { channel, message });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_MESSAGE_UPDATED,\n            payload: { channel, message },\n          });\n        },\n        onMessageDeleted(channel, messageId) {\n          logger.info('Thread | useHandleChannelEvents: onMessageDeleted', { channel, messageId });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_MESSAGE_DELETED,\n            payload: { channel, messageId },\n          });\n        },\n        onReactionUpdated(channel, reactionEvent) {\n          logger.info('Thread | useHandleChannelEvents: onReactionUpdated', { channel, reactionEvent });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_REACTION_UPDATED,\n            payload: { channel, reactionEvent },\n          });\n        },\n        // user status change\n        onUserMuted(channel, user) {\n          logger.info('Thread | useHandleChannelEvents: onUserMuted', { channel, user });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_USER_MUTED,\n            payload: { channel, user },\n          });\n        },\n        onUserUnmuted(channel, user) {\n          logger.info('Thread | useHandleChannelEvents: onUserUnmuted', { channel, user });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_USER_UNMUTED,\n            payload: { channel, user },\n          });\n        },\n        onUserBanned(channel, user) {\n          logger.info('Thread | useHandleChannelEvents: onUserBanned', { channel, user });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_USER_BANNED,\n            payload: { channel, user },\n          });\n        },\n        onUserUnbanned(channel, user) {\n          logger.info('Thread | useHandleChannelEvents: onUserUnbanned', { channel, user });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_USER_UNBANNED,\n            payload: { channel, user },\n          });\n        },\n        onUserLeft(channel, user) {\n          logger.info('Thread | useHandleChannelEvents: onUserLeft', { channel, user });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_USER_LEFT,\n            payload: { channel, user },\n          });\n        },\n        // channel status change\n        onChannelFrozen(channel) {\n          logger.info('Thread | useHandleChannelEvents: onChannelFrozen', { channel });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_CHANNEL_FROZEN,\n            payload: { channel },\n          });\n        },\n        onChannelUnfrozen(channel) {\n          logger.info('Thread | useHandleChannelEvents: onChannelUnfrozen', { channel });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_CHANNEL_UNFROZEN,\n            payload: { channel },\n          });\n        },\n        onOperatorUpdated(channel, users) {\n          logger.info('Thread | useHandleChannelEvents: onOperatorUpdated', { channel, users });\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_OPERATOR_UPDATED,\n            payload: { channel, users },\n          });\n        },\n      };\n      const channelHandler = new GroupChannelHandler(channelHandlerParams);\n      sdk.groupChannel.addGroupChannelHandler?.(handlerId, channelHandler);\n      logger.info('Thread | useHandleChannelEvents: Added channelHandler in Thread', { handlerId, channelHandler });\n    }\n    return () => {\n      // validation check\n      if (handlerId && sdk?.groupChannel?.removeGroupChannelHandler) {\n        sdk.groupChannel.removeGroupChannelHandler?.(handlerId);\n        logger.info('Thread | useHandleChannelEvents: Removed channelHandler in Thread.', handlerId);\n      }\n    };\n  }, [\n    sdk?.groupChannel,\n    currentChannel,\n  ]);\n}\n","import { useCallback } from 'react';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { FileMessage, FileMessageCreateParams } from '@sendbird/chat/message';\n\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\nimport topics from '../../../../lib/pubSub/topics';\nimport { scrollIntoLast } from '../utils';\n\ninterface DynamicProps {\n  currentChannel: GroupChannel;\n}\ninterface StaticProps {\n  logger: Logger;\n  pubSub: any;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\ninterface LocalFileMessage extends FileMessage {\n  localUrl: string;\n  file: File;\n}\n\nexport default function useSendFileMessageCallback({\n  currentChannel,\n}: DynamicProps, {\n  logger,\n  pubSub,\n  threadDispatcher,\n}: StaticProps): (file, quoteMessage) => void {\n  const sendMessage = useCallback((file, quoteMessage) => {\n    const createParamsDefault = () => {\n      const params = {} as FileMessageCreateParams;\n      params.file = file;\n      if (quoteMessage) {\n        params.isReplyToChannel = true;\n        params.parentMessageId = quoteMessage.messageId;\n      }\n      return params;\n    };\n    const params = createParamsDefault();\n    logger.info('Thread | useSendFileMessageCallback: Sending file message start.', params);\n\n    currentChannel?.sendFileMessage(params)\n      .onPending((pendingMessage) => {\n        threadDispatcher({\n          type: ThreadContextActionTypes.SEND_MESSAGE_START,\n          payload: {\n            /* pubSub is used instead of messagesDispatcher\n            to avoid redundantly calling `messageActionTypes.SEND_MESSAGEGE_START` */\n            message: {\n              ...pendingMessage,\n              url: URL.createObjectURL(file),\n              // pending thumbnail message seems to be failed\n              requestState: 'pending',\n            },\n          },\n        });\n        setTimeout(() => scrollIntoLast(), 1000);\n      })\n      .onFailed((error, message) => {\n        (message as LocalFileMessage).localUrl = URL.createObjectURL(file);\n        (message as LocalFileMessage).file = file;\n        logger.info('Thread | useSendFileMessageCallback: Sending file message failed.', { message, error });\n        threadDispatcher({\n          type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,\n          payload: { message, error },\n        });\n      })\n      .onSucceeded((message) => {\n        logger.info('Thread | useSendFileMessageCallback: Sending file message succeeded.', message);\n        pubSub.publish(topics.SEND_FILE_MESSAGE, {\n          channel: currentChannel,\n          message: message,\n        });\n      });\n  }, [currentChannel]);\n  return sendMessage;\n}\n","import { useCallback } from 'react';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { UserMessage, UserMessageUpdateParams } from '@sendbird/chat/message';\n\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\n\nimport topics from '../../../../lib/pubSub/topics';\n\ninterface DynamicProps {\n  currentChannel: GroupChannel;\n  isMentionEnabled?: boolean;\n}\ninterface StaticProps {\n  logger: Logger;\n  pubSub: any;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\nexport default function useUpdateMessageCallback({\n  currentChannel,\n  isMentionEnabled,\n}: DynamicProps, {\n  logger,\n  pubSub,\n  threadDispatcher,\n}: StaticProps): (props) => void {\n  return useCallback((props) => {\n    const {\n      messageId,\n      message,\n      mentionedUsers,\n      mentionTemplate,\n    } = props;\n    const createParamsDefault = () => {\n      const params = {} as UserMessageUpdateParams;\n      params.message = message;\n      if (isMentionEnabled && mentionedUsers?.length > 0) {\n        params.mentionedUsers = mentionedUsers;\n      }\n      if (isMentionEnabled && mentionTemplate) {\n        params.mentionedMessageTemplate = mentionTemplate;\n      } else {\n        params.mentionedMessageTemplate = message;\n      }\n      return params;\n    };\n\n    const params = createParamsDefault();\n    logger.info('Thread | useUpdateMessageCallback: Message update start.', params);\n\n    currentChannel?.updateUserMessage?.(messageId, params)\n      .then((message: UserMessage) => {\n        logger.info('Thread | useUpdateMessageCallback: Message update succeeded.', message);\n        threadDispatcher({\n          type: ThreadContextActionTypes.ON_MESSAGE_UPDATED,\n          payload: {\n            channel: currentChannel,\n            message: message,\n          },\n        });\n        pubSub.publish(\n          topics.UPDATE_USER_MESSAGE,\n          {\n            fromSelector: true,\n            channel: currentChannel,\n            message: message,\n          },\n        );\n      });\n  }, [currentChannel, isMentionEnabled]);\n}\n","import { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { FileMessage, UserMessage } from '@sendbird/chat/message';\nimport { useCallback } from 'react';\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\n\ninterface DynamicProps {\n  currentChannel: GroupChannel;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\ninterface StaticProps {\n  logger: Logger;\n}\n\nexport default function useDeleteMessageCallback({\n  currentChannel,\n  threadDispatcher,\n}: DynamicProps, {\n  logger,\n}: StaticProps): (message: UserMessage | FileMessage) => Promise<UserMessage | FileMessage> {\n  return useCallback((message: UserMessage | FileMessage): Promise<UserMessage | FileMessage> => {\n    logger.info('Thread | useDeleteMessageCallback: Deleting message.', message);\n    const { sendingStatus } = message;\n    return new Promise((resolve, reject) => {\n      logger.info('Thread | useDeleteMessageCallback: Deleting message requestState:', sendingStatus);\n      // Message is only on local\n      if (sendingStatus === 'failed' || sendingStatus === 'pending') {\n        logger.info('Thread | useDeleteMessageCallback: Deleted message from local:', message);\n        threadDispatcher({\n          type: ThreadContextActionTypes.ON_MESSAGE_DELETED_BY_REQ_ID,\n          payload: message.reqId,\n        });\n        resolve(message);\n      }\n\n      logger.info('Thread | useDeleteMessageCallback: Deleting message from remote:', sendingStatus);\n      currentChannel?.deleteMessage?.(message)\n        .then(() => {\n          logger.info('Thread | useDeleteMessageCallback: Deleting message success!', message);\n          threadDispatcher({\n            type: ThreadContextActionTypes.ON_MESSAGE_DELETED,\n            payload: { message, channel: currentChannel },\n          });\n          resolve(message);\n        })\n        .catch((err) => {\n          logger.warning('Thread | useDeleteMessageCallback: Deleting message failed!', err);\n          reject(err);\n        });\n    });\n  }, [currentChannel]);\n}\n","import { useCallback } from 'react';\nimport { BaseMessage, FileMessage, ThreadedMessageListParams, UserMessage } from '@sendbird/chat/message';\n\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { PREV_THREADS_FETCH_SIZE } from '../../consts';\nimport { ThreadListStateTypes } from '../../types';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\n\ninterface DynamicProps {\n  hasMorePrev: boolean;\n  parentMessage: UserMessage | FileMessage;\n  threadListState: ThreadListStateTypes;\n  oldestMessageTimeStamp: number;\n  isReactionEnabled?: boolean;\n}\ninterface StaticProps {\n  logger: Logger;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\nexport default function useGetPrevThreadsCallback({\n  hasMorePrev,\n  parentMessage,\n  threadListState,\n  oldestMessageTimeStamp,\n  isReactionEnabled,\n}: DynamicProps, {\n  logger,\n  threadDispatcher,\n}: StaticProps): (callback?: (messages?: Array<BaseMessage>) => void) => void {\n  return useCallback((callback) => {\n    // validation check\n    if (threadListState === ThreadListStateTypes.INITIALIZED\n      && parentMessage?.getThreadedMessagesByTimestamp\n      && oldestMessageTimeStamp !== 0\n    ) {\n      threadDispatcher({\n        type: ThreadContextActionTypes.GET_PREV_MESSAGES_START,\n        payload: null,\n      });\n      parentMessage.getThreadedMessagesByTimestamp?.(\n        oldestMessageTimeStamp,\n        {\n          prevResultSize: PREV_THREADS_FETCH_SIZE,\n          nextResultSize: 0,\n          includeReactions: isReactionEnabled,\n          includeMetaArray: true,\n        } as ThreadedMessageListParams,\n      )\n        .then(({ parentMessage, threadedMessages }) => {\n          logger.info('Thread | useGetPrevThreadsCallback: Fetch prev threads succeeded.', { parentMessage, threadedMessages });\n          threadDispatcher({\n            type: ThreadContextActionTypes.GET_PREV_MESSAGES_SUCESS,\n            payload: { parentMessage, threadedMessages },\n          });\n          callback(threadedMessages);\n        })\n        .catch((error) => {\n          logger.info('Thread | useGetPrevThreadsCallback: Fetch prev threads failed.', error);\n          threadDispatcher({\n            type: ThreadContextActionTypes.GET_PREV_MESSAGES_FAILURE,\n            payload: error,\n          });\n        });\n    }\n  }, [\n    hasMorePrev,\n    parentMessage,\n    threadListState,\n    oldestMessageTimeStamp,\n  ]);\n}\n","import { BaseMessage, FileMessage, ThreadedMessageListParams, UserMessage } from '@sendbird/chat/message';\nimport { useCallback } from 'react';\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { NEXT_THREADS_FETCH_SIZE } from '../../consts';\nimport { ThreadListStateTypes } from '../../types';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\n\ninterface DynamicProps {\n  hasMoreNext: boolean;\n  parentMessage: UserMessage | FileMessage;\n  threadListState: ThreadListStateTypes;\n  latestMessageTimeStamp: number;\n  isReactionEnabled?: boolean;\n}\ninterface StaticProps {\n  logger: Logger;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\nexport default function useGetNextThreadsCallback({\n  hasMoreNext,\n  parentMessage,\n  threadListState,\n  latestMessageTimeStamp,\n  isReactionEnabled,\n}: DynamicProps, {\n  logger,\n  threadDispatcher,\n}: StaticProps): (callback: (messages?: Array<BaseMessage>) => void) => void {\n  return useCallback((callback) => {\n    // validation check\n    if (threadListState === ThreadListStateTypes.INITIALIZED\n      && parentMessage?.getThreadedMessagesByTimestamp\n      && latestMessageTimeStamp !== 0\n    ) {\n      threadDispatcher({\n        type: ThreadContextActionTypes.GET_NEXT_MESSAGES_START,\n        payload: null,\n      });\n      parentMessage.getThreadedMessagesByTimestamp?.(\n        latestMessageTimeStamp,\n        {\n          prevResultSize: 0,\n          nextResultSize: NEXT_THREADS_FETCH_SIZE,\n          includeReactions: isReactionEnabled,\n          includeMetaArray: true,\n        } as ThreadedMessageListParams,\n      )\n        .then(({ parentMessage, threadedMessages }) => {\n          logger.info('Thread | useGetNextThreadsCallback: Fetch next threads succeeded.', { parentMessage, threadedMessages });\n          threadDispatcher({\n            type: ThreadContextActionTypes.GET_NEXT_MESSAGES_SUCESS,\n            payload: { parentMessage, threadedMessages },\n          });\n          callback(threadedMessages);\n        })\n        .catch((error) => {\n          logger.info('Thread | useGetNextThreadsCallback: Fetch next threads failed.', error);\n          threadDispatcher({\n            type: ThreadContextActionTypes.GET_NEXT_MESSAGES_FAILURE,\n            payload: error,\n          });\n        });\n    }\n  }, [\n    hasMoreNext,\n    parentMessage,\n    threadListState,\n    latestMessageTimeStamp,\n  ]);\n}\n","import { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { useCallback } from 'react';\nimport { Logger } from '../../../../lib/SendbirdState';\n\ninterface DynamicProps {\n  currentChannel: GroupChannel;\n}\ninterface StaticProps {\n  logger: Logger;\n}\n\nexport default function useToggleReactionCallback({\n  currentChannel,\n}: DynamicProps, {\n  logger,\n}: StaticProps): (message, key, isReacted) => void {\n  return useCallback((message, key, isReacted) => {\n    if (isReacted) {\n      currentChannel?.deleteReaction?.(message, key)\n        .then((res) => {\n          logger.info('Thread | useToggleReactionsCallback: Delete reaction succeeded.', res);\n        })\n        .catch((err) => {\n          logger.warning('Thread | useToggleReactionsCallback: Delete reaction failed.', err);\n        });\n      return;\n    }\n    currentChannel?.addReaction?.(message, key)\n      .then((res) => {\n        logger.info('Thread | useToggleReactionsCallback: Add reaction succeeded.', res);\n      })\n      .catch((err) => {\n        logger.warning('Thread | useToggleReactionsCallback: Add reaction failed.', err);\n      });\n  }, [currentChannel]);\n}\n","import { useCallback } from 'react';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { UserMessageCreateParams } from '@sendbird/chat/message';\n\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\nimport topics from '../../../../lib/pubSub/topics';\n\ninterface DynamicProps {\n  isMentionEnabled: boolean;\n  currentChannel: GroupChannel;\n}\ninterface StaticProps {\n  logger: Logger;\n  pubSub: any;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\nexport default function useSendUserMessageCallback({\n  isMentionEnabled,\n  currentChannel,\n}: DynamicProps, {\n  logger,\n  pubSub,\n  threadDispatcher,\n}: StaticProps): (props) => void {\n  const sendMessage = useCallback((props) => {\n    const {\n      message,\n      quoteMessage = null,\n      mentionTemplate,\n      mentionedUsers,\n    } = props;\n    const createDefaultParams = () => {\n      const params = {} as UserMessageCreateParams;\n      params.message = message;\n      if (isMentionEnabled && mentionedUsers?.length > 0) {\n        params.mentionedUsers = mentionedUsers;\n      }\n      if (isMentionEnabled && mentionTemplate && mentionedUsers?.length > 0) {\n        params.mentionedMessageTemplate = mentionTemplate;\n      }\n      if (quoteMessage) {\n        params.isReplyToChannel = true;\n        params.parentMessageId = quoteMessage.messageId;\n      }\n      return params;\n    };\n\n    const params = createDefaultParams();\n    logger.info('Thread | useSendUserMessageCallback: Sending user message start.', params);\n\n    if (currentChannel?.sendUserMessage) {\n      currentChannel?.sendUserMessage(params)\n        .onPending((pendingMessage) => {\n          threadDispatcher({\n            type: ThreadContextActionTypes.SEND_MESSAGE_START,\n            payload: { message: pendingMessage },\n          });\n        })\n        .onFailed((error, message) => {\n          logger.info('Thread | useSendUserMessageCallback: Sending user message failed.', { message, error });\n          threadDispatcher({\n            type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,\n            payload: { error, message },\n          });\n        })\n        .onSucceeded((message) => {\n          logger.info('Thread | useSendUserMessageCallback: Sending user message succeeded.', message);\n          threadDispatcher({\n            type: ThreadContextActionTypes.SEND_MESSAGE_SUCESS,\n            payload: { message },\n          });\n          // because Thread doesn't subscribe SEND_USER_MESSAGE\n          pubSub.publish(topics.SEND_USER_MESSAGE, {\n            channel: currentChannel,\n            message: message,\n          });\n        });\n    }\n  }, [isMentionEnabled, currentChannel]);\n  return sendMessage;\n}\n","import { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { FileMessage, MessageType, SendingStatus, UserMessage } from '@sendbird/chat/message';\nimport { useCallback } from 'react';\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\nimport topics from '../../../../lib/pubSub/topics';\n\ninterface DynamicProps {\n  currentChannel: GroupChannel;\n}\ninterface StaticProps {\n  logger: Logger;\n  pubSub: any;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\n\nexport default function useResendMessageCallback({\n  currentChannel,\n}: DynamicProps, {\n  logger,\n  pubSub,\n  threadDispatcher,\n}: StaticProps): (failedMessage: UserMessage | FileMessage) => void {\n  return useCallback((failedMessage: UserMessage | FileMessage) => {\n    if ((failedMessage as UserMessage | FileMessage)?.isResendable) {\n      failedMessage.sendingStatus = SendingStatus.PENDING;\n      logger.info('Thread | useResendMessageCallback: Resending failedMessage start.', failedMessage);\n      threadDispatcher({\n        type: ThreadContextActionTypes.RESEND_MESSAGE_START,\n        payload: failedMessage,\n      });\n\n      if (failedMessage?.isUserMessage?.() || failedMessage?.messageType === MessageType.USER) {\n        currentChannel?.resendUserMessage(failedMessage as UserMessage)\n          .then((message) => {\n            logger.info('Thread | useResendMessageCallback: Resending failedMessage succeeded.', message);\n            threadDispatcher({\n              type: ThreadContextActionTypes.SEND_MESSAGE_SUCESS,\n              payload: { message },\n            });\n            pubSub.publish(topics.SEND_USER_MESSAGE, {\n              channel: currentChannel,\n              message: message,\n            });\n          })\n          .catch((error) => {\n            logger.warning('Thread | useResendMessageCallback: Resending failedMessage failed.', error);\n            failedMessage.sendingStatus = SendingStatus.FAILED;\n            threadDispatcher({\n              type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,\n              payload: { message: failedMessage },\n            });\n          });\n      } else if (failedMessage?.isFileMessage?.() || failedMessage?.messageType === MessageType.FILE) {\n        currentChannel?.resendFileMessage?.(failedMessage as FileMessage)\n          .then((message) => {\n            logger.info('Thread | useResendMessageCallback: Resending failedMessage succeeded.', message);\n            threadDispatcher({\n              type: ThreadContextActionTypes.SEND_MESSAGE_SUCESS,\n              payload: { message },\n            });\n          })\n          .catch((error) => {\n            logger.warning('Thread | useResendMessageCallback: Resending failedMessage failed.', error);\n            failedMessage.sendingStatus = SendingStatus.FAILED;\n            threadDispatcher({\n              type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,\n              payload: { message: failedMessage },\n            });\n            pubSub.publish(topics.SEND_FILE_MESSAGE, {\n              channel: currentChannel,\n              message: failedMessage,\n            });\n          });\n      } else {\n        logger.warning('Thread | useResendMessageCallback: Message is not resendable.', failedMessage);\n        failedMessage.sendingStatus = SendingStatus.FAILED;\n        threadDispatcher({\n          type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,\n          payload: { message: failedMessage },\n        });\n      }\n    }\n  }, [currentChannel]);\n}\n","import { useCallback } from 'react';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { FileMessage, FileMessageCreateParams, MessageMetaArray, UserMessage } from '@sendbird/chat/message';\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport { ThreadContextActionTypes } from '../dux/actionTypes';\nimport topics from '../../../../lib/pubSub/topics';\nimport { scrollIntoLast } from '../utils';\nimport {\n  META_ARRAY_MESSAGE_TYPE_KEY,\n  META_ARRAY_MESSAGE_TYPE_VALUE__VOICE,\n  META_ARRAY_VOICE_DURATION_KEY,\n  VOICE_MESSAGE_FILE_NAME,\n  VOICE_MESSAGE_MIME_TYPE,\n} from '../../../../utils/consts';\n\ninterface DynamicParams {\n  currentChannel: GroupChannel;\n  onBeforeSendVoiceMessage?: (file: File, quoteMessage?: UserMessage | FileMessage) => FileMessageCreateParams;\n}\ninterface StaticParams {\n  logger: Logger;\n  pubSub: any;\n  threadDispatcher: CustomUseReducerDispatcher;\n}\ntype FuncType = (file: File, duration: number, quoteMessage: UserMessage | FileMessage) => void;\ninterface LocalFileMessage extends FileMessage {\n  localUrl: string;\n  file: File;\n}\n\nexport const useSendVoiceMessageCallback = ({\n  currentChannel,\n  onBeforeSendVoiceMessage,\n}: DynamicParams,\n{\n  logger,\n  pubSub,\n  threadDispatcher,\n}: StaticParams): FuncType => {\n  const sendMessage = useCallback((file: File, duration: number, quoteMessage: UserMessage | FileMessage) => {\n    const messageParams: FileMessageCreateParams = (\n      onBeforeSendVoiceMessage\n      && typeof onBeforeSendVoiceMessage === 'function'\n    )\n      ? onBeforeSendVoiceMessage(file, quoteMessage)\n      : {\n        file,\n        fileName: VOICE_MESSAGE_FILE_NAME,\n        mimeType: VOICE_MESSAGE_MIME_TYPE,\n        metaArrays: [\n          new MessageMetaArray({\n            key: META_ARRAY_VOICE_DURATION_KEY,\n            value: [`${duration}`],\n          }),\n          new MessageMetaArray({\n            key: META_ARRAY_MESSAGE_TYPE_KEY,\n            value: [META_ARRAY_MESSAGE_TYPE_VALUE__VOICE],\n          }),\n        ],\n      };\n    if (quoteMessage) {\n      messageParams.isReplyToChannel = true;\n      messageParams.parentMessageId = quoteMessage.messageId;\n    }\n    logger.info('Thread | useSendVoiceMessageCallback:  Start sending voice message', messageParams);\n    currentChannel?.sendFileMessage(messageParams)\n      .onPending((pendingMessage) => {\n        threadDispatcher({\n          type: ThreadContextActionTypes.SEND_MESSAGE_START,\n          payload: {\n            /* pubSub is used instead of messagesDispatcher\n            to avoid redundantly calling `messageActionTypes.SEND_MESSAGEGE_START` */\n            message: {\n              ...pendingMessage,\n              url: URL.createObjectURL(file),\n              // pending thumbnail message seems to be failed\n              requestState: 'pending',\n            },\n          },\n        });\n        setTimeout(() => scrollIntoLast(), 1000);\n      })\n      .onFailed((error, message) => {\n        (message as LocalFileMessage).localUrl = URL.createObjectURL(file);\n        (message as LocalFileMessage).file = file;\n        logger.info('Thread | useSendVoiceMessageCallback: Sending voice message failed.', { message, error });\n        threadDispatcher({\n          type: ThreadContextActionTypes.SEND_MESSAGE_FAILURE,\n          payload: { message, error },\n        });\n      })\n      .onSucceeded((message) => {\n        logger.info('Thread | useSendVoiceMessageCallback: Sending voice message succeeded.', message);\n        pubSub.publish(topics.SEND_FILE_MESSAGE, {\n          channel: currentChannel,\n          message: message,\n        });\n      });\n  }, [\n    currentChannel,\n    onBeforeSendVoiceMessage,\n  ]);\n  return sendMessage;\n};\n\nexport default useSendVoiceMessageCallback;\n","import React, { useReducer, useMemo, useEffect, ReactElement } from 'react';\nimport { User } from '@sendbird/chat';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { BaseMessage, FileMessage, FileMessageCreateParams, UserMessage } from '@sendbird/chat/message';\n\nimport { getNicknamesMapFromMembers, getParentMessageFrom } from './utils';\nimport { UserProfileProvider } from '../../../lib/UserProfileContext';\nimport { CustomUseReducerDispatcher } from '../../../lib/SendbirdState';\nimport useSendbirdStateContext from '../../../hooks/useSendbirdStateContext';\n\nimport threadReducer from './dux/reducer';\nimport { ThreadContextActionTypes } from './dux/actionTypes';\nimport threadInitialState, { ThreadContextInitialState } from './dux/initialState';\n\nimport useGetChannel from './hooks/useGetChannel';\nimport useGetAllEmoji from './hooks/useGetAllEmoji';\nimport useGetThreadList from './hooks/useGetThreadList';\nimport useGetParentMessage from './hooks/useGetParentMessage';\nimport useHandlePubsubEvents from './hooks/useHandlePubsubEvents';\nimport useHandleChannelEvents from './hooks/useHandleChannelEvents';\nimport useSendFileMessageCallback from './hooks/useSendFileMessage';\nimport useUpdateMessageCallback from './hooks/useUpdateMessageCallback';\nimport useDeleteMessageCallback from './hooks/useDeleteMessageCallback';\nimport useGetPrevThreadsCallback from './hooks/useGetPrevThreadsCallback';\nimport useGetNextThreadsCallback from './hooks/useGetNextThreadsCallback';\nimport useToggleReactionCallback from './hooks/useToggleReactionsCallback';\nimport useSendUserMessageCallback from './hooks/useSendUserMessageCallback';\nimport useResendMessageCallback from './hooks/useResendMessageCallback';\nimport useSendVoiceMessageCallback from './hooks/useSendVoiceMessageCallback';\n\nexport type ThreadProviderProps = {\n  children?: React.ReactElement;\n  channelUrl: string;\n  message: UserMessage | FileMessage | null;\n  onHeaderActionClick?: () => void;\n  onMoveToParentMessage?: (props: { message: UserMessage | FileMessage, channel: GroupChannel }) => void;\n  onBeforeSendVoiceMessage?: (file: File, quotedMessage?: UserMessage | FileMessage) => FileMessageCreateParams;\n  // User Profile\n  disableUserProfile?: boolean;\n  renderUserProfile?: (props: { user: User, close: () => void }) => ReactElement;\n  onUserProfileMessage?: (channel: GroupChannel) => void;\n};\nexport interface ThreadProviderInterface extends ThreadProviderProps, ThreadContextInitialState {\n  // hooks for fetching threads\n  fetchPrevThreads: (callback?: (messages?: Array<BaseMessage>) => void) => void;\n  fetchNextThreads: (callback?: (messages?: Array<BaseMessage>) => void) => void;\n  toggleReaction: (message, key, isReacted) => void;\n  sendMessage: (props: {\n    message: UserMessage,\n    quoteMessage?: UserMessage | FileMessage,\n    mentionTemplate?: string,\n    mentionedUsers?: Array<User>,\n  }) => void;\n  sendFileMessage: (file: File, quoteMessage: UserMessage | FileMessage) => void;\n  sendVoiceMessage: (file: File, duration: number, quoteMessage?: UserMessage | FileMessage) => void;\n  resendMessage: (failedMessage: UserMessage | FileMessage) => void;\n  updateMessage: (props, callback?: () => void) => void;\n  deleteMessage: (message: UserMessage | FileMessage) => Promise<UserMessage | FileMessage>;\n  nicknamesMap: Map<string, string>;\n}\nconst ThreadContext = React.createContext<ThreadProviderInterface | null>(null);\n\nexport const ThreadProvider: React.FC<ThreadProviderProps> = (props: ThreadProviderProps) => {\n  const {\n    children,\n    channelUrl,\n    onHeaderActionClick,\n    onMoveToParentMessage,\n    onBeforeSendVoiceMessage,\n    // User Profile\n    disableUserProfile,\n    renderUserProfile,\n    onUserProfileMessage,\n  } = props;\n  const propsMessage = props?.message;\n  const propsParentMessage = getParentMessageFrom(propsMessage);\n  // Context from SendbirdProvider\n  const globalStore = useSendbirdStateContext();\n  const { stores, config } = globalStore;\n  // // stores\n  const { sdkStore, userStore } = stores;\n  const { sdk } = sdkStore;\n  const { user } = userStore;\n  const sdkInit = sdkStore?.initialized;\n  // // config\n  const {\n    logger,\n    pubSub,\n    replyType,\n    isMentionEnabled,\n    isReactionEnabled,\n  } = config;\n\n  // dux of Thread\n  const [threadStore, threadDispatcher] = useReducer(\n    threadReducer,\n    threadInitialState,\n  ) as [ThreadContextInitialState, CustomUseReducerDispatcher];\n  const {\n    currentChannel,\n    allThreadMessages,\n    parentMessage,\n    channelState,\n    threadListState,\n    parentMessageState,\n    hasMorePrev,\n    hasMoreNext,\n    emojiContainer,\n    isMuted,\n    isChannelFrozen,\n    currentUserId,\n  }: ThreadContextInitialState = threadStore;\n\n  // Initialization\n  useEffect(() => {\n    threadDispatcher({\n      type: ThreadContextActionTypes.INIT_USER_ID,\n      payload: user?.userId,\n    });\n  }, [user]);\n  useGetChannel({\n    channelUrl,\n    sdkInit,\n    message: propsMessage,\n  }, { sdk, logger, threadDispatcher });\n  useGetParentMessage({\n    channelUrl,\n    sdkInit,\n    parentMessage: propsParentMessage,\n  }, { sdk, logger, threadDispatcher });\n  useGetThreadList({\n    sdkInit,\n    parentMessage,\n    isReactionEnabled,\n    anchorMessage: propsMessage?.messageId !== propsParentMessage?.messageId ? propsMessage : null,\n    // anchorMessage should be null when parentMessage doesn't exist\n  }, { logger, threadDispatcher });\n  useGetAllEmoji({ sdk }, { logger, threadDispatcher });\n  // Handle channel events\n  useHandleChannelEvents({\n    sdk,\n    currentChannel,\n  }, { logger, threadDispatcher });\n  useHandlePubsubEvents({\n    sdkInit,\n    currentChannel,\n    parentMessage,\n  }, { logger, pubSub, threadDispatcher });\n\n  // callbacks\n  const fetchPrevThreads = useGetPrevThreadsCallback({\n    hasMorePrev,\n    parentMessage,\n    threadListState,\n    isReactionEnabled,\n    oldestMessageTimeStamp: allThreadMessages[0]?.createdAt || 0,\n  }, { logger, threadDispatcher });\n  const fetchNextThreads = useGetNextThreadsCallback({\n    hasMoreNext,\n    parentMessage,\n    threadListState,\n    isReactionEnabled,\n    latestMessageTimeStamp: allThreadMessages[allThreadMessages.length - 1]?.createdAt || 0,\n  }, { logger, threadDispatcher });\n  const toggleReaction = useToggleReactionCallback({ currentChannel }, { logger });\n  const sendMessage = useSendUserMessageCallback({\n    isMentionEnabled,\n    currentChannel,\n  }, { logger, pubSub, threadDispatcher });\n  const sendFileMessage = useSendFileMessageCallback({\n    currentChannel,\n  }, { logger, pubSub, threadDispatcher });\n  const sendVoiceMessage = useSendVoiceMessageCallback({\n    currentChannel, onBeforeSendVoiceMessage,\n  }, { logger, pubSub, threadDispatcher });\n  const resendMessage = useResendMessageCallback({\n    currentChannel,\n  }, { logger, pubSub, threadDispatcher });\n  const updateMessage = useUpdateMessageCallback({\n    currentChannel,\n    isMentionEnabled,\n  }, { logger, pubSub, threadDispatcher });\n  const deleteMessage = useDeleteMessageCallback({ currentChannel, threadDispatcher }, { logger });\n\n  // memo\n  const nicknamesMap: Map<string, string> = useMemo(() => (\n    (replyType && currentChannel)\n      ? getNicknamesMapFromMembers(currentChannel?.members)\n      : new Map()\n  ), [currentChannel?.members]);\n\n  return (\n    <ThreadContext.Provider\n      value={{\n        // ThreadProviderProps\n        channelUrl,\n        message: propsMessage,\n        onHeaderActionClick,\n        onMoveToParentMessage,\n        // ThreadContextInitialState\n        currentChannel,\n        allThreadMessages,\n        parentMessage,\n        channelState,\n        threadListState,\n        parentMessageState,\n        hasMorePrev,\n        hasMoreNext,\n        emojiContainer,\n        // hooks\n        fetchPrevThreads,\n        fetchNextThreads,\n        toggleReaction,\n        sendMessage,\n        sendFileMessage,\n        sendVoiceMessage,\n        resendMessage,\n        updateMessage,\n        deleteMessage,\n        // context\n        nicknamesMap,\n        isMuted,\n        isChannelFrozen,\n        currentUserId,\n      }}\n    >\n      {/* UserProfileProvider */}\n      <UserProfileProvider\n        disableUserProfile={disableUserProfile}\n        renderUserProfile={renderUserProfile}\n        onUserProfileMessage={onUserProfileMessage}\n      >\n        {children}\n      </UserProfileProvider>\n    </ThreadContext.Provider>\n  );\n};\n\nexport type UseThreadContextType = () => ThreadProviderInterface;\nexport const useThreadContext: UseThreadContextType = () => React.useContext(ThreadContext);\n"]},"metadata":{},"sourceType":"module"}