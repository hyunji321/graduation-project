{"ast":null,"code":"import _slicedToArray from \"C:/Users/\\uC774\\uACBD\\uBBFC/IdeaProjects/sendbird-uikit-whatsapp-sample/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport React__default, { useContext, useState, useEffect } from 'react';\nimport { GroupChannelHandler } from '@sendbird/chat/groupChannel';\nimport { a as LocalizationContext } from '../../LocalizationContext-076d6d2e.js';\nimport { u as uuidv4 } from '../../uuid-1adedf62.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../../index-63949de5.js';\nimport { u as useChannelContext } from '../../ChannelProvider-910bbc1f.js';\nimport useSendbirdStateContext from '../../useSendbirdStateContext.js';\nimport '../../stringSet-13bbd4a2.js';\nimport '../../index-99aabd9e.js';\nimport 'prop-types';\nimport '../../UserProfileContext-9cfbab4d.js';\nimport '../../index-7cdd58b8.js';\nimport '../../topics-b2b77fb9.js';\nimport '../../index-7eb65acf.js';\nimport '../../_rollupPluginBabelHelpers-6bb0305c.js';\nimport '../../utils/message/getOutgoingMessageState.js';\nimport '../../compareIds-defe2bb3.js';\nimport '../../const-b3f02313.js';\nimport '@sendbird/chat/message';\nimport '../../consts-95d8566e.js';\nimport '../../withSendbird.js';\nvar TypingIndicatorText = function TypingIndicatorText(_ref) {\n  var members = _ref.members;\n  var _useContext = useContext(LocalizationContext),\n    stringSet = _useContext.stringSet;\n  if (!members || members.length === 0) {\n    return '';\n  }\n  if (members && members.length === 1) {\n    return \"\".concat(members[0].nickname, \" \").concat(stringSet.TYPING_INDICATOR__IS_TYPING);\n  }\n  if (members && members.length === 2) {\n    return \"\".concat(members[0].nickname, \" \").concat(stringSet.TYPING_INDICATOR__AND, \" \").concat(members[1].nickname, \" \").concat(stringSet.TYPING_INDICATOR__ARE_TYPING);\n  }\n  return stringSet.TYPING_INDICATOR__MULTIPLE_TYPING;\n};\nvar TypingIndicator = function TypingIndicator() {\n  var _globalStore$stores, _globalStore$stores$s, _globalStore$config;\n  var _useChannelContext = useChannelContext(),\n    channelUrl = _useChannelContext.channelUrl;\n  var globalStore = useSendbirdStateContext();\n  var sb = globalStore === null || globalStore === void 0 ? void 0 : (_globalStore$stores = globalStore.stores) === null || _globalStore$stores === void 0 ? void 0 : (_globalStore$stores$s = _globalStore$stores.sdkStore) === null || _globalStore$stores$s === void 0 ? void 0 : _globalStore$stores$s.sdk;\n  var logger = globalStore === null || globalStore === void 0 ? void 0 : (_globalStore$config = globalStore.config) === null || _globalStore$config === void 0 ? void 0 : _globalStore$config.logger;\n  var _useState = useState(uuidv4()),\n    _useState2 = _slicedToArray(_useState, 2),\n    handlerId = _useState2[0],\n    setHandlerId = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    typingMembers = _useState4[0],\n    setTypingMembers = _useState4[1];\n  useEffect(function () {\n    var _sb$groupChannel;\n    if (sb !== null && sb !== void 0 && (_sb$groupChannel = sb.groupChannel) !== null && _sb$groupChannel !== void 0 && _sb$groupChannel.addGroupChannelHandler) {\n      sb.groupChannel.removeGroupChannelHandler(handlerId);\n      var newHandlerId = uuidv4();\n      var handler = new GroupChannelHandler({\n        onTypingStatusUpdated: function onTypingStatusUpdated(groupChannel) {\n          // there is a possible warning in here - setState called after unmount\n          logger.info('Channel > Typing Indicator: onTypingStatusUpdated', groupChannel);\n          if (groupChannel.url === channelUrl) {\n            var members = groupChannel.getTypingUsers();\n            setTypingMembers(members);\n          }\n        }\n      });\n      sb.groupChannel.addGroupChannelHandler(newHandlerId, handler);\n      setHandlerId(newHandlerId);\n    }\n    return function () {\n      var _sb$groupChannel2;\n      setTypingMembers([]);\n      if (sb !== null && sb !== void 0 && (_sb$groupChannel2 = sb.groupChannel) !== null && _sb$groupChannel2 !== void 0 && _sb$groupChannel2.removeGroupChannelHandler) {\n        sb.groupChannel.removeGroupChannelHandler(handlerId);\n      }\n    };\n  }, [channelUrl]);\n  return /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-conversation__footer__typing-indicator__text\",\n    type: LabelTypography.CAPTION_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, /*#__PURE__*/React__default.createElement(TypingIndicatorText, {\n    members: typingMembers\n  }));\n};\nexport { TypingIndicatorText, TypingIndicator as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;AAiBaA,uBAAuD,GAAGC,SAA1DD,mBAAuD,CAAGC,MAA2C;EAAA,IAAxCC,UAAmCD,KAAnCC;EACxE,kBAAsBC,UAAU,CAACC,mBAAmB,CAAC;IAA7CC;EACR,IAAI,CAACH,OAAO,IAAIA,OAAO,CAACI,MAAM,KAAK,CAAC,EAAE;IACpC,OAAO,EAAE;EACX;EAEA,IAAIJ,OAAO,IAAIA,OAAO,CAACI,MAAM,KAAK,CAAC,EAAE;IACnC,iBAAUJ,OAAO,CAAC,CAAC,CAAC,CAACK,QAAS,cAAGF,SAAS,CAACG,2BAA4B;EACzE;EAEA,IAAIN,OAAO,IAAIA,OAAO,CAACI,MAAM,KAAK,CAAC,EAAE;IACnC,iBAAUJ,OAAO,CAAC,CAAC,CAAC,CAACK,QAAS,cAAGF,SAAS,CAACI,qBAAsB,cAAGP,OAAO,CAAC,CAAC,CAAC,CAACK,QAAS,cAAGF,SAAS,CAACK,4BAA6B;EACpI;EAEA,OAAOL,SAAS,CAACM,iCAAiC;AACpD;AAEMC,mBAAyB,GAAGA,SAA5BA,eAAyB,GAAS;EAAA;EACtC,yBAAuBC,iBAAiB,EAAE;IAAlCC;EACR,IAAMC,WAAW,GAAGC,uBAAuB,EAAE;EAC7C,IAAMC,EAAE,GAAGF,WAAW,KAAXA,mBAAW,8CAAXA,WAAW,CAAEG,MAAM,iFAAnBC,oBAAqBC,QAAQ,0DAA7BC,sBAA+BC,GAAwB;EAClE,IAAMC,MAAM,GAAGR,WAAW,KAAXA,mBAAW,8CAAXA,WAAW,CAAES,MAAM,sCAAnBC,sCAAqBF,MAAM;EAC1C,gBAAkCG,QAAQ,CAACC,MAAM,EAAE,CAAC;IAAA;IAA7CC,SAAS;IAAEC,YAAY;EAC9B,iBAA0CH,QAAQ,CAAW,EAAE,CAAC;IAAA;IAAzDI,aAAa;IAAEC,gBAAgB;EAEtCC,SAAS,CAAC,YAAM;IAAA;IACd,IAAIf,EAAE,aAAFA,EAAE,mCAAFA,EAAE,CAAEgB,YAAY,6CAAhBC,iBAAkBC,sBAAsB,EAAE;MAC5ClB,EAAE,CAACgB,YAAY,CAACG,yBAAyB,CAACR,SAAS,CAAC;MACpD,IAAMS,YAAY,GAAGV,MAAM,EAAE;MAC7B,IAAMW,OAAO,GAAG,IAAIC,mBAAmB,CAAC;QACtCC,qBAAqB,EAAGP,2CAAY,EAAK;UACvC;UACAV,MAAM,CAACkB,IAAI,CAAC,mDAAmD,EAAER,YAAY,CAAC;UAC9E,IAAIA,YAAY,CAACS,GAAG,KAAK5B,UAAU,EAAE;YACnC,IAAMZ,OAAO,GAAG+B,YAAY,CAACU,cAAc,EAAE;YAC7CZ,gBAAgB,CAAC7B,OAAO,CAAC;UAC3B;QACF;MACF,CAAC,CAAC;MACFe,EAAE,CAACgB,YAAY,CAACE,sBAAsB,CAACE,YAAY,EAAEC,OAAO,CAAC;MAC7DT,YAAY,CAACQ,YAAY,CAAC;IAC5B;IAEA,OAAO,YAAM;MAAA;MACXN,gBAAgB,CAAC,EAAE,CAAC;MACpB,IAAId,EAAE,aAAFA,EAAE,oCAAFA,EAAE,CAAEgB,YAAY,8CAAhBW,kBAAkBR,yBAAyB,EAAE;QAC/CnB,EAAE,CAACgB,YAAY,CAACG,yBAAyB,CAACR,SAAS,CAAC;MACtD;KACD;EACH,CAAC,EAAE,CAACd,UAAU,CAAC,CAAC;EAEhB,oBACE+B,6BAACC,KAAK;IACJC,SAAS,EAAC,uDAAuD;IACjEC,IAAI,EAAEC,eAAe,CAACC,SAAU;IAChCC,KAAK,EAAEC,WAAW,CAACC;EAAe,gBAElCR,6BAAC7C,mBAAmB;IAACE,OAAO,EAAE4B;EAAc,EAAG,CACzC;AAEZ","names":["TypingIndicatorText","_ref","members","useContext","LocalizationContext","stringSet","length","nickname","TYPING_INDICATOR__IS_TYPING","TYPING_INDICATOR__AND","TYPING_INDICATOR__ARE_TYPING","TYPING_INDICATOR__MULTIPLE_TYPING","TypingIndicator","useChannelContext","channelUrl","globalStore","useSendbirdStateContext","sb","stores","_globalStore$stores","sdkStore","_globalStore$stores$s","sdk","logger","config","_globalStore$config","useState","uuidv4","handlerId","setHandlerId","typingMembers","setTypingMembers","useEffect","groupChannel","_sb$groupChannel","addGroupChannelHandler","removeGroupChannelHandler","newHandlerId","handler","GroupChannelHandler","onTypingStatusUpdated","info","url","getTypingUsers","_sb$groupChannel2","React","Label","className","type","LabelTypography","CAPTION_2","color","LabelColors","ONBACKGROUND_2"],"sources":["C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Channel\\components\\TypingIndicator.tsx"],"sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport {\n  GroupChannelHandler,\n  Member,\n  SendbirdGroupChat,\n} from '@sendbird/chat/groupChannel';\n\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\nimport { uuidv4 } from '../../../utils/uuid';\nimport Label, { LabelTypography, LabelColors } from '../../../ui/Label';\nimport { useChannelContext } from '../context/ChannelProvider';\nimport useSendbirdStateContext from '../../../hooks/useSendbirdStateContext';\n\nexport interface TypingIndicatorTextProps {\n  members: Member[];\n}\n\nexport const TypingIndicatorText: React.FC<TypingIndicatorTextProps> = ({ members }: TypingIndicatorTextProps) => {\n  const { stringSet } = useContext(LocalizationContext);\n  if (!members || members.length === 0) {\n    return '';\n  }\n\n  if (members && members.length === 1) {\n    return `${members[0].nickname} ${stringSet.TYPING_INDICATOR__IS_TYPING}`;\n  }\n\n  if (members && members.length === 2) {\n    return `${members[0].nickname} ${stringSet.TYPING_INDICATOR__AND} ${members[1].nickname} ${stringSet.TYPING_INDICATOR__ARE_TYPING}`;\n  }\n\n  return stringSet.TYPING_INDICATOR__MULTIPLE_TYPING;\n};\n\nconst TypingIndicator: React.FC = () => {\n  const { channelUrl } = useChannelContext();\n  const globalStore = useSendbirdStateContext();\n  const sb = globalStore?.stores?.sdkStore?.sdk as SendbirdGroupChat;\n  const logger = globalStore?.config?.logger;\n  const [handlerId, setHandlerId] = useState(uuidv4());\n  const [typingMembers, setTypingMembers] = useState<Member[]>([]);\n\n  useEffect(() => {\n    if (sb?.groupChannel?.addGroupChannelHandler) {\n      sb.groupChannel.removeGroupChannelHandler(handlerId);\n      const newHandlerId = uuidv4();\n      const handler = new GroupChannelHandler({\n        onTypingStatusUpdated: (groupChannel) => {\n          // there is a possible warning in here - setState called after unmount\n          logger.info('Channel > Typing Indicator: onTypingStatusUpdated', groupChannel);\n          if (groupChannel.url === channelUrl) {\n            const members = groupChannel.getTypingUsers();\n            setTypingMembers(members);\n          }\n        },\n      });\n      sb.groupChannel.addGroupChannelHandler(newHandlerId, handler);\n      setHandlerId(newHandlerId);\n    }\n\n    return () => {\n      setTypingMembers([]);\n      if (sb?.groupChannel?.removeGroupChannelHandler) {\n        sb.groupChannel.removeGroupChannelHandler(handlerId);\n      }\n    };\n  }, [channelUrl]);\n\n  return (\n    <Label\n      className=\"sendbird-conversation__footer__typing-indicator__text\"\n      type={LabelTypography.CAPTION_2}\n      color={LabelColors.ONBACKGROUND_2}\n    >\n      <TypingIndicatorText members={typingMembers} />\n    </Label>\n  );\n};\n\nexport default TypingIndicator;\n"]},"metadata":{},"sourceType":"module"}