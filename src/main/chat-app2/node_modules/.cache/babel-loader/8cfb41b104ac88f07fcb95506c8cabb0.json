{"ast":null,"code":"import React__default, { useContext } from 'react';\nimport { a as LocalizationContext } from '../LocalizationContext-076d6d2e.js';\nimport { a as UserProfileContext } from '../UserProfileContext-9cfbab4d.js';\nimport { getCreateGroupChannel } from '../sendbirdSelectors.js';\nimport Avatar from './Avatar.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../index-63949de5.js';\nimport Button, { ButtonTypes } from './Button.js';\nimport useSendbirdStateContext from '../useSendbirdStateContext.js';\nimport '../stringSet-13bbd4a2.js';\nimport '../index-99aabd9e.js';\nimport 'prop-types';\nimport '../_rollupPluginBabelHelpers-6bb0305c.js';\nimport '../topics-b2b77fb9.js';\nimport '../utils-4bbbca2c.js';\nimport './ImageRenderer.js';\nimport './Icon.js';\nimport '../uuid-1adedf62.js';\nimport '../withSendbird.js';\nfunction UserProfile(_ref) {\n  var _store$config, _store$config2;\n  let {\n    user,\n    currentUserId,\n    disableMessaging = false,\n    onSuccess\n  } = _ref;\n  const store = useSendbirdStateContext();\n  const createChannel = getCreateGroupChannel(store);\n  const logger = store === null || store === void 0 ? void 0 : (_store$config = store.config) === null || _store$config === void 0 ? void 0 : _store$config.logger;\n  const {\n    stringSet\n  } = useContext(LocalizationContext);\n  const currentUserId_ = currentUserId || (store === null || store === void 0 ? void 0 : (_store$config2 = store.config) === null || _store$config2 === void 0 ? void 0 : _store$config2.userId);\n  // @ts-ignore\n  const {\n    onUserProfileMessage\n  } = useContext(UserProfileContext);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird__user-profile\"\n  }, /*#__PURE__*/React__default.createElement(\"section\", {\n    className: \"sendbird__user-profile-avatar\"\n  }, /*#__PURE__*/React__default.createElement(Avatar, {\n    height: \"80px\",\n    width: \"80px\",\n    src: user === null || user === void 0 ? void 0 : user.profileUrl\n  })), /*#__PURE__*/React__default.createElement(\"section\", {\n    className: \"sendbird__user-profile-name\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.H_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, (user === null || user === void 0 ? void 0 : user.nickname) || stringSet.NO_NAME)), (user === null || user === void 0 ? void 0 : user.userId) !== currentUserId_ && !disableMessaging && /*#__PURE__*/React__default.createElement(\"section\", {\n    className: \"sendbird__user-profile-message\"\n  }, /*#__PURE__*/React__default.createElement(Button, {\n    type: ButtonTypes.SECONDARY,\n    onClick: () => {\n      // Create 1:1 channel\n      const params = {\n        isDistinct: false,\n        invitedUserIds: [user === null || user === void 0 ? void 0 : user.userId],\n        operatorUserIds: [currentUserId_]\n      };\n      onSuccess();\n      createChannel(params).then(groupChannel => {\n        logger.info('UserProfile, channel create', groupChannel);\n        if (typeof onUserProfileMessage === 'function') {\n          onUserProfileMessage === null || onUserProfileMessage === void 0 ? void 0 : onUserProfileMessage(groupChannel);\n        }\n      });\n    }\n  }, stringSet.USER_PROFILE__MESSAGE)), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird__user-profile-separator\"\n  }), /*#__PURE__*/React__default.createElement(\"section\", {\n    className: \"sendbird__user-profile-userId\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird__user-profile-userId--label\",\n    type: LabelTypography.CAPTION_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, stringSet.USER_PROFILE__USER_ID), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird__user-profile-userId--value\",\n    type: LabelTypography.BODY_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, user === null || user === void 0 ? void 0 : user.userId)));\n}\nexport { UserProfile as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AA0BA,SAASA,WAAWA,OAKI;EAAA;EAAA,IALH;IACnBC,IAAI;IACJC,aAAa;IACbC,gBAAgB,GAAG,KAAK;IACxBC;EACK,CAAC;EACN,MAAMC,KAAK,GAAGC,uBAAuB,EAAE;EACvC,MAAMC,aAAa,GAAGC,qBAAqB,CAACH,KAAK,CAAC;EAClD,MAAMI,MAAM,GAAGJ,KAAK,KAALA,aAAK,wCAALA,KAAK,CAAEK,MAAM,gCAAbC,gCAAeF,MAAM;EACpC,MAAM;IAAEG;EAAU,CAAC,GAAGC,UAAU,CAACC,mBAAmB,CAAC;EACrD,MAAMC,cAAc,GAAGb,aAAa,KAAIG,KAAK,aAALA,KAAK,yCAALA,KAAK,CAAEK,MAAM,iCAAbM,iCAAeC,MAAM;EAC7D;EACA,MAAM;IAAEC;EAAqB,CAAC,GAAGL,UAAU,CAACM,kBAAkB,CAAC;EAC/D,oBACEC;IAAKC,SAAS,EAAC;GACbD;IAASC,SAAS,EAAC;EAA+B,gBAChDD,6BAACE,MAAM;IACLC,MAAM,EAAC,MAAM;IACbC,KAAK,EAAC,MAAM;IACZC,GAAG,EAAExB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEyB;EAAW,EACtB,CACM,eACVN;IAASC,SAAS,EAAC;EAA6B,gBAC9CD,6BAACO,KAAK;IACJC,IAAI,EAAEC,eAAe,CAACC,GAAI;IAC1BC,KAAK,EAAEC,WAAW,CAACC;EAAe,GAEjC,KAAI,KAAJhC,YAAI,KAAJA,sBAAI,CAAEiC,QAAQ,KAAItB,SAAS,CAACuB,OAAO,CAC9B,CACA,EAEP,KAAI,KAAJlC,YAAI,KAAJA,sBAAI,CAAEgB,MAAM,MAAKF,cAAc,IAAK,CAACZ,gBAAgB,iBACpDiB;IAASC,SAAS,EAAC;EAAgC,gBACjDD,6BAACgB,MAAM;IACLR,IAAI,EAAES,WAAW,CAACC,SAAU;IAC5BC,OAAO,EAAEA,MAAM;MACb;MACA,MAAMC,MAAgC,GAAG;QACvCC,UAAU,EAAE,KAAK;QACjBC,cAAc,EAAE,CAACzC,IAAI,aAAJA,IAAI,KAAJA,sBAAI,CAAEgB,MAAM,CAAC;QAC9B0B,eAAe,EAAE,CAAC5B,cAAc;OACjC;MACDX,SAAS,EAAE;MACXG,aAAa,CAACiC,MAAM,CAAC,CAClBI,IAAI,CAAEC,YAAY,IAAK;QACtBpC,MAAM,CAACqC,IAAI,CAAC,6BAA6B,EAAED,YAAY,CAAC;QACxD,IAAI,OAAO3B,oBAAoB,KAAK,UAAU,EAAE;UAC9CA,oBAAoB,aAApBA,oBAAoB,uBAApBA,oBAAoB,CAAG2B,YAAY,CAAC;QACtC;MACF,CAAC,CAAC;IACN;GAECjC,WAAS,CAACmC,qBAAqB,CACzB,CAEZ,eAEH3B;IAAKC,SAAS,EAAC;GAAqC,gBACpDD;IAASC,SAAS,EAAC;EAA+B,gBAChDD,6BAACO,KAAK;IACJN,SAAS,EAAC,sCAAsC;IAChDO,IAAI,EAAEC,eAAe,CAACmB,SAAU;IAChCjB,KAAK,EAAEC,WAAW,CAACiB;GAElBrC,WAAS,CAACsC,qBAAqB,CAC1B,eACR9B,6BAACO,KAAK;IACJN,SAAS,EAAC,sCAAsC;IAChDO,IAAI,EAAEC,eAAe,CAACsB,MAAO;IAC7BpB,KAAK,EAAEC,WAAW,CAACC;GAElBhC,MAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEgB,MAAM,CACP,CACA,CACN;AAEV","names":["UserProfile","user","currentUserId","disableMessaging","onSuccess","store","useSendbirdStateContext","createChannel","getCreateGroupChannel","logger","config","_store$config","stringSet","useContext","LocalizationContext","currentUserId_","_store$config2","userId","onUserProfileMessage","UserProfileContext","React","className","Avatar","height","width","src","profileUrl","Label","type","LabelTypography","H_2","color","LabelColors","ONBACKGROUND_1","nickname","NO_NAME","Button","ButtonTypes","SECONDARY","onClick","params","isDistinct","invitedUserIds","operatorUserIds","then","groupChannel","info","USER_PROFILE__MESSAGE","CAPTION_2","ONBACKGROUND_2","USER_PROFILE__USER_ID","BODY_1"],"sources":["C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\ui\\UserProfile\\index.tsx"],"sourcesContent":["import './index.scss';\nimport React, { ReactElement, useContext } from 'react';\nimport type { GroupChannel, GroupChannelCreateParams } from '@sendbird/chat/groupChannel';\nimport type { User } from '@sendbird/chat';\n\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport { UserProfileContext } from '../../lib/UserProfileContext';\nimport { getCreateGroupChannel } from '../../lib/selectors';\nimport Avatar from '../Avatar/index';\nimport Label, { LabelColors, LabelTypography } from '../Label';\nimport Button, { ButtonTypes } from '../Button';\nimport useSendbirdStateContext from '../../hooks/useSendbirdStateContext';\n\ninterface Logger {\n  info?(message: string, channel: GroupChannel): void;\n}\n\ninterface Props {\n  user: User;\n  currentUserId?: string;\n  logger?: Logger;\n  disableMessaging?: boolean;\n  createChannel?(params: GroupChannelCreateParams): Promise<GroupChannel>;\n  onSuccess?: () => void;\n}\n\nfunction UserProfile({\n  user,\n  currentUserId,\n  disableMessaging = false,\n  onSuccess,\n}: Props): ReactElement {\n  const store = useSendbirdStateContext();\n  const createChannel = getCreateGroupChannel(store);\n  const logger = store?.config?.logger;\n  const { stringSet } = useContext(LocalizationContext);\n  const currentUserId_ = currentUserId || store?.config?.userId;\n  // @ts-ignore\n  const { onUserProfileMessage } = useContext(UserProfileContext);\n  return (\n    <div className=\"sendbird__user-profile\">\n      <section className=\"sendbird__user-profile-avatar\">\n        <Avatar\n          height=\"80px\"\n          width=\"80px\"\n          src={user?.profileUrl}\n        />\n      </section>\n      <section className=\"sendbird__user-profile-name\">\n        <Label\n          type={LabelTypography.H_2}\n          color={LabelColors.ONBACKGROUND_1}\n        >\n          {user?.nickname || stringSet.NO_NAME}\n        </Label>\n      </section>\n      {\n        (user?.userId !== currentUserId_) && !disableMessaging && (\n          <section className=\"sendbird__user-profile-message\">\n            <Button\n              type={ButtonTypes.SECONDARY}\n              onClick={() => {\n                // Create 1:1 channel\n                const params: GroupChannelCreateParams = {\n                  isDistinct: false,\n                  invitedUserIds: [user?.userId],\n                  operatorUserIds: [currentUserId_],\n                };\n                onSuccess();\n                createChannel(params)\n                  .then((groupChannel) => {\n                    logger.info('UserProfile, channel create', groupChannel);\n                    if (typeof onUserProfileMessage === 'function') {\n                      onUserProfileMessage?.(groupChannel);\n                    }\n                  });\n              }}\n            >\n              {stringSet.USER_PROFILE__MESSAGE}\n            </Button>\n          </section>\n        )\n      }\n      <div className=\"sendbird__user-profile-separator\" />\n      <section className=\"sendbird__user-profile-userId\">\n        <Label\n          className=\"sendbird__user-profile-userId--label\"\n          type={LabelTypography.CAPTION_2}\n          color={LabelColors.ONBACKGROUND_2}\n        >\n          {stringSet.USER_PROFILE__USER_ID}\n        </Label>\n        <Label\n          className=\"sendbird__user-profile-userId--value\"\n          type={LabelTypography.BODY_1}\n          color={LabelColors.ONBACKGROUND_1}\n        >\n          {user?.userId}\n        </Label>\n      </section>\n    </div>\n  );\n}\n\nexport default UserProfile;\n"]},"metadata":{},"sourceType":"module"}