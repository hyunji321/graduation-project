{"ast":null,"code":"import _slicedToArray from \"C:/Users/\\uC774\\uACBD\\uBBFC/IdeaProjects/sendbird-uikit-whatsapp-sample/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"C:/Users/\\uC774\\uACBD\\uBBFC/IdeaProjects/sendbird-uikit-whatsapp-sample/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { _ as _objectSpread2 } from './_rollupPluginBabelHelpers-6bb0305c.js';\nimport React__default, { useEffect, useReducer, useState, useMemo, useContext } from 'react';\nimport { GroupChannelHandler } from '@sendbird/chat/groupChannel';\nimport { P as PUBSUB_TOPICS } from './topics-b2b77fb9.js';\nimport { u as uuidv4 } from './uuid-1adedf62.js';\nimport { n as noop } from './utils-4bbbca2c.js';\nimport { U as UserProfileProvider } from './UserProfileContext-9cfbab4d.js';\nimport useSendbirdStateContext from './useSendbirdStateContext.js';\nimport { f as filterChannelListParams, g as getChannelsWithUpsertedChannel } from './index-7eb65acf.js';\nvar RESET_CHANNEL_LIST = 'RESET_CHANNEL_LIST';\nvar CREATE_CHANNEL = 'CREATE_CHANNEL';\nvar USER_INVITED = 'USER_INVITED';\nvar LEAVE_CHANNEL_SUCCESS = 'LEAVE_CHANNEL_SUCCESS';\nvar SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\nvar FETCH_CHANNELS_START = 'FETCH_CHANNELS_START';\nvar FETCH_CHANNELS_SUCCESS = 'FETCH_CHANNELS_SUCCESS';\nvar FETCH_CHANNELS_FAILURE = 'FETCH_CHANNELS_FAILURE';\nvar INIT_CHANNELS_START = 'INIT_CHANNELS_START';\nvar INIT_CHANNELS_SUCCESS = 'INIT_CHANNELS_SUCCESS';\nvar INIT_CHANNELS_FAILURE = 'INIT_CHANNELS_FAILURE';\nvar ON_USER_JOINED = 'ON_USER_JOINED';\nvar ON_CHANNEL_DELETED = 'ON_CHANNEL_DELETED';\nvar ON_LAST_MESSAGE_UPDATED = 'ON_LAST_MESSAGE_UPDATED';\nvar ON_USER_LEFT = 'ON_USER_LEFT';\nvar ON_CHANNEL_CHANGED = 'ON_CHANNEL_CHANGED';\nvar ON_CHANNEL_ARCHIVED = 'ON_CHANNEL_ARCHIVED';\nvar ON_CHANNEL_FROZEN = 'ON_CHANNEL_FROZEN';\nvar ON_CHANNEL_UNFROZEN = 'ON_CHANNEL_UNFROZEN';\nvar ON_READ_RECEIPT_UPDATED = 'ON_READ_RECEIPT_UPDATED';\nvar ON_DELIVERY_RECEIPT_UPDATED = 'ON_DELIVERY_RECEIPT_UPDATED';\nvar CHANNEL_REPLACED_TO_TOP = 'CHANNEL_REPLACED_TO_TOP';\nvar CHANNEL_LIST_PARAMS_UPDATED = 'CHANNEL_LIST_PARAMS_UPDATED';\nvar DELIVERY_RECIPT = 'delivery_receipt';\nvar createEventHandler = function createEventHandler(_ref) {\n  var sdk = _ref.sdk,\n    sdkChannelHandlerId = _ref.sdkChannelHandlerId,\n    channelListDispatcher = _ref.channelListDispatcher,\n    logger = _ref.logger;\n  var ChannelHandler = new GroupChannelHandler({\n    onChannelChanged: function onChannelChanged(channel) {\n      logger.info('ChannelList: onChannelChanged', channel);\n      channelListDispatcher({\n        type: ON_CHANNEL_CHANGED,\n        payload: channel\n      });\n    },\n    onChannelDeleted: function onChannelDeleted(channelUrl) {\n      logger.info('ChannelList: onChannelDeleted', channelUrl);\n      channelListDispatcher({\n        type: ON_CHANNEL_DELETED,\n        payload: channelUrl\n      });\n    },\n    onUserJoined: function onUserJoined(channel) {\n      logger.info('ChannelList: onUserJoined', channel);\n      if (channel !== null && channel !== void 0 && channel.lastMessage) {\n        channelListDispatcher({\n          type: ON_USER_JOINED,\n          payload: channel\n        });\n      }\n    },\n    onUserReceivedInvitation: function onUserReceivedInvitation(channel, inviter, invitees) {\n      logger.info('ChannelList: onUserReceivedInvitation', {\n        channel: channel,\n        inviter: inviter,\n        invitees: invitees\n      });\n      var currentUser = sdk.currentUser;\n      var isInvited = invitees.find(function (user) {\n        return (user === null || user === void 0 ? void 0 : user.userId) === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.userId);\n      });\n      // The newly created channel should be displayed only when there's a message\n      if (isInvited && channel !== null && channel !== void 0 && channel.lastMessage) {\n        channelListDispatcher({\n          type: USER_INVITED,\n          payload: channel\n        });\n      }\n    },\n    onUserBanned: function onUserBanned(channel, user) {\n      var currentUser = sdk.currentUser;\n      logger.info('Channel: onUserBanned', channel);\n      if (user.userId === currentUser.userId) {\n        channelListDispatcher({\n          type: ON_USER_LEFT,\n          payload: {\n            channel: channel,\n            isMe: true\n          }\n        });\n      } else {\n        channelListDispatcher({\n          type: ON_USER_LEFT,\n          payload: {\n            channel: channel,\n            isMe: false\n          }\n        });\n      }\n    },\n    onUserLeft: function onUserLeft(channel, leftUser) {\n      var currentUser = sdk.currentUser;\n      var isMe = currentUser.userId === leftUser.userId;\n      logger.info('ChannelList: onUserLeft', channel);\n      channelListDispatcher({\n        type: ON_USER_LEFT,\n        payload: {\n          channel: channel,\n          isMe: isMe\n        }\n      });\n    },\n    onReadStatus: function onReadStatus(channel) {\n      logger.info('ChannelList: onReadStatus', channel);\n      channelListDispatcher({\n        type: ON_READ_RECEIPT_UPDATED,\n        payload: channel\n      });\n    },\n    onDeliveryReceiptUpdated: function onDeliveryReceiptUpdated(channel) {\n      logger.info('ChannelList: onDeliveryReceiptUpdated', channel);\n      if (channel !== null && channel !== void 0 && channel.lastMessage) {\n        channelListDispatcher({\n          type: ON_DELIVERY_RECEIPT_UPDATED,\n          payload: channel\n        });\n      }\n    },\n    onMessageUpdated: function onMessageUpdated(channel, message) {\n      if (channel !== null && channel !== void 0 && channel.lastMessage.isEqual(message)) {\n        logger.info('ChannelList: onMessageUpdated', channel);\n        channelListDispatcher({\n          type: ON_LAST_MESSAGE_UPDATED,\n          payload: channel\n        });\n      }\n    },\n    onChannelHidden: function onChannelHidden(channel) {\n      logger.info('ChannelList: onChannelHidden', channel);\n      channelListDispatcher({\n        type: ON_CHANNEL_ARCHIVED,\n        payload: channel\n      });\n    },\n    onChannelFrozen: function onChannelFrozen(channel) {\n      logger.info('ChannelList: onChannelFrozen', channel);\n      channelListDispatcher({\n        type: ON_CHANNEL_FROZEN,\n        payload: channel\n      });\n    },\n    onChannelUnfrozen: function onChannelUnfrozen(channel) {\n      logger.info('ChannelList: onChannelUnfrozen', channel);\n      channelListDispatcher({\n        type: ON_CHANNEL_UNFROZEN,\n        payload: channel\n      });\n    }\n  });\n  logger.info('ChannelList: Added channelHandler');\n  sdk.groupChannel.addGroupChannelHandler(sdkChannelHandlerId, ChannelHandler);\n};\nvar createChannelListQuery = function createChannelListQuery(_ref2) {\n  var sdk = _ref2.sdk,\n    _ref2$userFilledChann = _ref2.userFilledChannelListQuery,\n    userFilledChannelListQuery = _ref2$userFilledChann === void 0 ? {} : _ref2$userFilledChann;\n  var param = {};\n  param.includeEmpty = false;\n  param.limit = 20; // The value of pagination limit could be set up to 100.\n  param.order = 'latest_last_message'; // 'chronological', 'latest_last_message', 'channel_name_alphabetical', and 'metadata_value_alphabetical'\n\n  if (userFilledChannelListQuery) {\n    Object.keys(userFilledChannelListQuery).forEach(function (key) {\n      param[key] = userFilledChannelListQuery[key];\n    });\n  }\n  var channelListQuery = sdk.groupChannel.createMyGroupChannelListQuery(param);\n  return channelListQuery;\n};\n\n/**\n * Setup event listener\n * create channel source query\n * addloading screen\n */\nfunction setupChannelList(_ref3) {\n  var sdk = _ref3.sdk,\n    sdkChannelHandlerId = _ref3.sdkChannelHandlerId,\n    channelListDispatcher = _ref3.channelListDispatcher,\n    setChannelSource = _ref3.setChannelSource,\n    onChannelSelect = _ref3.onChannelSelect,\n    userFilledChannelListQuery = _ref3.userFilledChannelListQuery,\n    logger = _ref3.logger,\n    sortChannelList = _ref3.sortChannelList,\n    disableAutoSelect = _ref3.disableAutoSelect,\n    markAsDeliveredScheduler = _ref3.markAsDeliveredScheduler,\n    disableMarkAsDelivered = _ref3.disableMarkAsDelivered;\n  if (sdk !== null && sdk !== void 0 && sdk.groupChannel) {\n    createEventHandler({\n      sdk: sdk,\n      channelListDispatcher: channelListDispatcher,\n      sdkChannelHandlerId: sdkChannelHandlerId,\n      logger: logger\n    });\n  } else {\n    logger.warning('ChannelList - createEventHandler: sdk or sdk.ChannelHandler does not exist', sdk);\n  }\n  logger.info('ChannelList - creating query', {\n    userFilledChannelListQuery: userFilledChannelListQuery\n  });\n  var channelListQuery = createChannelListQuery({\n    sdk: sdk,\n    userFilledChannelListQuery: userFilledChannelListQuery\n  });\n  logger.info('ChannelList - created query', channelListQuery);\n  setChannelSource(channelListQuery);\n  channelListDispatcher({\n    type: INIT_CHANNELS_START\n  });\n  if (userFilledChannelListQuery) {\n    logger.info('ChannelList - setting up channelListQuery', channelListQuery);\n    channelListDispatcher({\n      type: CHANNEL_LIST_PARAMS_UPDATED,\n      payload: {\n        channelListQuery: channelListQuery,\n        currentUserId: sdk && sdk.currentUser && sdk.currentUser.userId\n      }\n    });\n  }\n  logger.info('ChannelList - fetching channels');\n  if (channelListQuery.hasNext) {\n    channelListQuery.next().then(function (channelList) {\n      var _sdk$appInfo, _sdk$appInfo$premiumF;\n      logger.info('ChannelList - fetched channels', channelList);\n      // select first channel\n      logger.info('ChannelList - highlight channel', channelList[0]);\n      var sortedChannelList = channelList;\n      if (sortChannelList && typeof sortChannelList === 'function') {\n        sortedChannelList = sortChannelList(channelList);\n        logger.info('ChannelList - channel list sorted', sortedChannelList);\n      }\n      if (!disableAutoSelect) {\n        onChannelSelect(sortedChannelList[0]);\n      }\n      channelListDispatcher({\n        type: INIT_CHANNELS_SUCCESS,\n        payload: {\n          channelList: sortedChannelList,\n          disableAutoSelect: disableAutoSelect\n        }\n      });\n      var canSetMarkAsDelivered = sdk === null || sdk === void 0 ? void 0 : (_sdk$appInfo = sdk.appInfo) === null || _sdk$appInfo === void 0 ? void 0 : (_sdk$appInfo$premiumF = _sdk$appInfo.premiumFeatureList) === null || _sdk$appInfo$premiumF === void 0 ? void 0 : _sdk$appInfo$premiumF.find(function (feature) {\n        return feature === DELIVERY_RECIPT;\n      });\n      if (canSetMarkAsDelivered && !disableMarkAsDelivered) {\n        sortedChannelList.forEach(function (channel) {\n          markAsDeliveredScheduler.push(channel);\n        });\n      }\n    }).catch(function (err) {\n      if (err) {\n        logger.error('ChannelList - couldnt fetch channels', err);\n        channelListDispatcher({\n          type: INIT_CHANNELS_FAILURE\n        });\n      }\n    });\n  } else {\n    logger.info('ChannelList - there are no more channels');\n  }\n}\nvar pubSubHandleRemover = function pubSubHandleRemover(subscriber) {\n  subscriber.forEach(function (s) {\n    try {\n      s.remove();\n    } catch (_unused) {\n      //\n    }\n  });\n};\nvar pubSubHandler = function pubSubHandler(pubSub, channelListDispatcher) {\n  var subscriber = new Map();\n  if (!pubSub) return subscriber;\n  subscriber.set(PUBSUB_TOPICS.CREATE_CHANNEL, pubSub.subscribe(PUBSUB_TOPICS.CREATE_CHANNEL, function (msg) {\n    var channel = msg.channel;\n    channelListDispatcher({\n      type: 'CREATE_CHANNEL',\n      payload: channel\n    });\n  }));\n  subscriber.set(PUBSUB_TOPICS.UPDATE_USER_MESSAGE, pubSub.subscribe(PUBSUB_TOPICS.UPDATE_USER_MESSAGE, function (msg) {\n    var _updatedChannel$lastM;\n    var channel = msg.channel,\n      message = msg.message;\n    var updatedChannel = channel;\n    if ((updatedChannel === null || updatedChannel === void 0 ? void 0 : (_updatedChannel$lastM = updatedChannel.lastMessage) === null || _updatedChannel$lastM === void 0 ? void 0 : _updatedChannel$lastM.messageId) === message.messageId) {\n      updatedChannel.lastMessage = message;\n    }\n    if (channel) {\n      channelListDispatcher({\n        type: ON_LAST_MESSAGE_UPDATED,\n        payload: updatedChannel\n      });\n    }\n  }));\n  subscriber.set(PUBSUB_TOPICS.LEAVE_CHANNEL, pubSub.subscribe(PUBSUB_TOPICS.LEAVE_CHANNEL, function (msg) {\n    var channel = msg.channel;\n    channelListDispatcher({\n      type: LEAVE_CHANNEL_SUCCESS,\n      payload: channel === null || channel === void 0 ? void 0 : channel.url\n    });\n  }));\n  subscriber.set(PUBSUB_TOPICS.SEND_MESSAGE_START, pubSub.subscribe(PUBSUB_TOPICS.SEND_MESSAGE_START, function (msg) {\n    var channel = msg.channel;\n    channelListDispatcher({\n      type: CHANNEL_REPLACED_TO_TOP,\n      payload: channel\n    });\n  }));\n  return subscriber;\n};\nvar channelListInitialState = {\n  // we might not need this initialized state -> should remove\n  initialized: false,\n  loading: true,\n  allChannels: [],\n  currentChannel: null,\n  channelListQuery: null,\n  currentUserId: '',\n  disableAutoSelect: false\n};\nfunction reducer(state, action) {\n  switch (action.type) {\n    case INIT_CHANNELS_START:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        loading: true\n      });\n    case RESET_CHANNEL_LIST:\n      return channelListInitialState;\n    case INIT_CHANNELS_SUCCESS:\n      {\n        var _action$payload = action.payload,\n          channelList = _action$payload.channelList,\n          disableAutoSelect = _action$payload.disableAutoSelect;\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          initialized: true,\n          loading: false,\n          allChannels: channelList,\n          disableAutoSelect: disableAutoSelect,\n          currentChannel: !disableAutoSelect && channelList && channelList.length && channelList.length > 0 ? channelList[0] : null\n        });\n      }\n    case FETCH_CHANNELS_SUCCESS:\n      {\n        var currentChannels = state.allChannels.map(function (c) {\n          return c.url;\n        });\n        var filteredChannels = action.payload.filter(function (_ref) {\n          var url = _ref.url;\n          return !currentChannels.find(function (c) {\n            return c === url;\n          });\n        });\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: [].concat(_toConsumableArray(state.allChannels), _toConsumableArray(filteredChannels))\n        });\n      }\n    case USER_INVITED:\n      {\n        var channel = action.payload;\n        if (state.channelListQuery) {\n          if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel)\n            });\n          }\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            currentChannel: channel\n          });\n        }\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: [channel].concat(_toConsumableArray(state.allChannels.filter(function (ch) {\n            return ch.url !== (channel === null || channel === void 0 ? void 0 : channel.url);\n          })))\n        });\n      }\n    case CREATE_CHANNEL:\n      {\n        var _channel = action.payload;\n        if (state.channelListQuery) {\n          if (filterChannelListParams(state.channelListQuery, _channel, state.currentUserId)) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: getChannelsWithUpsertedChannel(state.allChannels, _channel)\n            });\n          }\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            currentChannel: _channel\n          });\n        }\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: [_channel].concat(_toConsumableArray(state.allChannels.filter(function (ch) {\n            return ch.url !== (_channel === null || _channel === void 0 ? void 0 : _channel.url);\n          }))),\n          currentChannel: _channel\n        });\n      }\n    case ON_CHANNEL_ARCHIVED:\n      {\n        var _state$currentChannel;\n        var _channel2 = action.payload;\n        if (state.channelListQuery) {\n          if (filterChannelListParams(state.channelListQuery, _channel2, state.currentUserId)) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: getChannelsWithUpsertedChannel(state.allChannels, _channel2)\n            });\n            // TODO: Check if we have to set current channel\n          }\n        }\n\n        var nextChannel = (_channel2 === null || _channel2 === void 0 ? void 0 : _channel2.url) === ((_state$currentChannel = state.currentChannel) === null || _state$currentChannel === void 0 ? void 0 : _state$currentChannel.url) ? state.allChannels[state.allChannels[0].url === (_channel2 === null || _channel2 === void 0 ? void 0 : _channel2.url) ? 1 : 0] : state.currentChannel;\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: state.allChannels.filter(function (_ref2) {\n            var url = _ref2.url;\n            return url !== (_channel2 === null || _channel2 === void 0 ? void 0 : _channel2.url);\n          }),\n          currentChannel: state.disableAutoSelect ? null : nextChannel\n        });\n      }\n    case LEAVE_CHANNEL_SUCCESS:\n    case ON_CHANNEL_DELETED:\n      {\n        var _state$currentChannel2;\n        var channelUrl = action.payload;\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          currentChannel: channelUrl === ((_state$currentChannel2 = state.currentChannel) === null || _state$currentChannel2 === void 0 ? void 0 : _state$currentChannel2.url) ? state.allChannels[0] : state.currentChannel,\n          allChannels: state.allChannels.filter(function (_ref3) {\n            var url = _ref3.url;\n            return url !== channelUrl;\n          })\n        });\n      }\n    case ON_USER_LEFT:\n      {\n        var _state$currentChannel5;\n        var _action$payload2 = action.payload,\n          _channel3 = _action$payload2.channel,\n          isMe = _action$payload2.isMe;\n        if (state.channelListQuery) {\n          var _state$currentChannel4;\n          if (filterChannelListParams(state.channelListQuery, _channel3, state.currentUserId)) {\n            var _state$currentChannel3;\n            var _filteredChannels2 = getChannelsWithUpsertedChannel(state.allChannels, _channel3);\n            var _nextChannel3 = isMe && (_channel3 === null || _channel3 === void 0 ? void 0 : _channel3.url) === ((_state$currentChannel3 = state.currentChannel) === null || _state$currentChannel3 === void 0 ? void 0 : _state$currentChannel3.url) ? _filteredChannels2[0] : state.currentChannel;\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              currentChannel: state.disableAutoSelect ? null : _nextChannel3,\n              allChannels: _filteredChannels2\n            });\n          }\n          var _nextChannel2 = (_channel3 === null || _channel3 === void 0 ? void 0 : _channel3.url) === ((_state$currentChannel4 = state.currentChannel) === null || _state$currentChannel4 === void 0 ? void 0 : _state$currentChannel4.url) ? state.allChannels[0] : state.currentChannel;\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            currentChannel: state.disableAutoSelect ? null : _nextChannel2,\n            allChannels: state.allChannels.filter(function (_ref4) {\n              var url = _ref4.url;\n              return url !== (_channel3 === null || _channel3 === void 0 ? void 0 : _channel3.url);\n            })\n          });\n        }\n        var _filteredChannels = state.allChannels.filter(function (c) {\n          return !(c.url === (_channel3 === null || _channel3 === void 0 ? void 0 : _channel3.url) && isMe);\n        });\n        var _nextChannel = isMe && (_channel3 === null || _channel3 === void 0 ? void 0 : _channel3.url) === ((_state$currentChannel5 = state.currentChannel) === null || _state$currentChannel5 === void 0 ? void 0 : _state$currentChannel5.url) ? _filteredChannels[0] : state.currentChannel;\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          currentChannel: state.disableAutoSelect ? null : _nextChannel,\n          allChannels: _filteredChannels\n        });\n      }\n    case ON_USER_JOINED:\n    case ON_CHANNEL_CHANGED:\n    case ON_READ_RECEIPT_UPDATED:\n    case ON_DELIVERY_RECEIPT_UPDATED:\n      {\n        var _state$allChannels = state.allChannels,\n          allChannels = _state$allChannels === void 0 ? [] : _state$allChannels;\n        var _channel4 = action.payload;\n        var unreadMessageCount = _channel4.unreadMessageCount;\n        if (!(_channel4 !== null && _channel4 !== void 0 && _channel4.lastMessage)) return state;\n        if (state.channelListQuery) {\n          var _state$currentChannel6;\n          if (filterChannelListParams(state.channelListQuery, _channel4, state.currentUserId)) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: getChannelsWithUpsertedChannel(allChannels, _channel4)\n            });\n          }\n          var _nextChannel4 = (_channel4 === null || _channel4 === void 0 ? void 0 : _channel4.url) === ((_state$currentChannel6 = state.currentChannel) === null || _state$currentChannel6 === void 0 ? void 0 : _state$currentChannel6.url) ? state.allChannels[state.allChannels[0].url === (_channel4 === null || _channel4 === void 0 ? void 0 : _channel4.url) ? 1 : 0]\n          // if coming channel is first of channel list, current channel will be the next one\n          : state.currentChannel;\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            currentChannel: state.disableAutoSelect ? null : _nextChannel4,\n            allChannels: state.allChannels.filter(function (_ref5) {\n              var url = _ref5.url;\n              return url !== (_channel4 === null || _channel4 === void 0 ? void 0 : _channel4.url);\n            })\n          });\n        }\n        // if its only an unread message count change, dont push to top\n        if (unreadMessageCount === 0) {\n          var currentChannel = allChannels.find(function (_ref6) {\n            var url = _ref6.url;\n            return url === (_channel4 === null || _channel4 === void 0 ? void 0 : _channel4.url);\n          });\n          var currentUnreadCount = currentChannel && currentChannel.unreadMessageCount;\n          if (currentUnreadCount === 0) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: state.allChannels.map(function (ch) {\n                return ch.url === (_channel4 === null || _channel4 === void 0 ? void 0 : _channel4.url) ? _channel4 : ch;\n              })\n            });\n          }\n        }\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: [_channel4].concat(_toConsumableArray(state.allChannels.filter(function (_ref7) {\n            var url = _ref7.url;\n            return url !== action.payload.url;\n          })))\n        });\n      }\n    case SET_CURRENT_CHANNEL:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        currentChannel: action.payload\n      });\n    case ON_LAST_MESSAGE_UPDATED:\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: state.allChannels.map(function (channel) {\n            return (channel === null || channel === void 0 ? void 0 : channel.url) === action.payload.url ? action.payload : channel;\n          })\n        });\n      }\n    case ON_CHANNEL_FROZEN:\n      {\n        var _channel5 = action.payload;\n        if (state.channelListQuery) {\n          var _state$currentChannel7;\n          if (filterChannelListParams(state.channelListQuery, _channel5, state.currentUserId)) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: getChannelsWithUpsertedChannel(state.allChannels, _channel5)\n            });\n          }\n          var _nextChannel5 = (_channel5 === null || _channel5 === void 0 ? void 0 : _channel5.url) === ((_state$currentChannel7 = state.currentChannel) === null || _state$currentChannel7 === void 0 ? void 0 : _state$currentChannel7.url) ? state.allChannels[state.allChannels[0].url === (_channel5 === null || _channel5 === void 0 ? void 0 : _channel5.url) ? 1 : 0]\n          // if coming channel is first of channel list, current channel will be the next one\n          : state.currentChannel;\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            allChannels: state.allChannels.filter(function (_ref8) {\n              var url = _ref8.url;\n              return url !== (_channel5 === null || _channel5 === void 0 ? void 0 : _channel5.url);\n            }),\n            currentChannel: state.disableAutoSelect ? null : _nextChannel5\n          });\n        }\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: state.allChannels.map(function (ch) {\n            if (ch.url === (_channel5 === null || _channel5 === void 0 ? void 0 : _channel5.url)) {\n              // eslint-disable-next-line no-param-reassign\n              ch.isFrozen = true;\n              return ch;\n            }\n            return ch;\n          })\n        });\n      }\n    case ON_CHANNEL_UNFROZEN:\n      {\n        var _channel6 = action.payload;\n        if (state.channelListQuery) {\n          var _state$currentChannel8;\n          if (filterChannelListParams(state.channelListQuery, _channel6, state.currentUserId)) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: getChannelsWithUpsertedChannel(state.allChannels, _channel6)\n            });\n          }\n          var _nextChannel6 = (_channel6 === null || _channel6 === void 0 ? void 0 : _channel6.url) === ((_state$currentChannel8 = state.currentChannel) === null || _state$currentChannel8 === void 0 ? void 0 : _state$currentChannel8.url) ? state.allChannels[state.allChannels[0].url === (_channel6 === null || _channel6 === void 0 ? void 0 : _channel6.url) ? 1 : 0]\n          // if coming channel is first of channel list, current channel will be the next one\n          : state.currentChannel;\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            allChannels: state.allChannels.filter(function (_ref9) {\n              var url = _ref9.url;\n              return url !== (_channel6 === null || _channel6 === void 0 ? void 0 : _channel6.url);\n            }),\n            currentChannel: state.disableAutoSelect ? null : _nextChannel6\n          });\n        }\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: state.allChannels.map(function (ch) {\n            if (ch.url === (_channel6 === null || _channel6 === void 0 ? void 0 : _channel6.url)) {\n              // eslint-disable-next-line no-param-reassign\n              ch.isFrozen = false;\n              return ch;\n            }\n            return ch;\n          })\n        });\n      }\n    case CHANNEL_REPLACED_TO_TOP:\n      {\n        if (state.channelListQuery) {\n          if (filterChannelListParams(state.channelListQuery, action.payload, state.currentUserId)) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: [action.payload].concat(_toConsumableArray(state.allChannels.filter(function (channel) {\n                return (channel === null || channel === void 0 ? void 0 : channel.url) !== action.payload.url;\n              })))\n            });\n          }\n          return state;\n        }\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: [action.payload].concat(_toConsumableArray(state.allChannels.filter(function (channel) {\n            return (channel === null || channel === void 0 ? void 0 : channel.url) !== action.payload.url;\n          })))\n        });\n      }\n    case CHANNEL_LIST_PARAMS_UPDATED:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        currentUserId: action.payload.currentUserId,\n        channelListQuery: action.payload.channelListQuery\n      });\n    default:\n      return state;\n  }\n}\nfunction useActiveChannelUrl(_ref, _ref2) {\n  var activeChannelUrl = _ref.activeChannelUrl,\n    channels = _ref.channels,\n    sdk = _ref.sdk;\n  var logger = _ref2.logger,\n    channelListDispatcher = _ref2.channelListDispatcher;\n  return useEffect(function () {\n    if (activeChannelUrl) {\n      logger.info('ChannelListProvider: looking for active channel', {\n        activeChannelUrl: activeChannelUrl\n      });\n      var activeChannel = channels === null || channels === void 0 ? void 0 : channels.find(function (channel) {\n        return channel.url === activeChannelUrl;\n      });\n      if (activeChannel) {\n        channelListDispatcher({\n          type: SET_CURRENT_CHANNEL,\n          payload: activeChannel\n        });\n      } else {\n        var _sdk$groupChannel;\n        logger.info('ChannelListProvider: searching backend for active channel', {\n          activeChannelUrl: activeChannelUrl\n        });\n        sdk === null || sdk === void 0 ? void 0 : (_sdk$groupChannel = sdk.groupChannel) === null || _sdk$groupChannel === void 0 ? void 0 : _sdk$groupChannel.getChannel(activeChannelUrl).then(function (channel) {\n          channelListDispatcher({\n            type: FETCH_CHANNELS_SUCCESS,\n            payload: [channel]\n          });\n          channelListDispatcher({\n            type: SET_CURRENT_CHANNEL,\n            payload: channel\n          });\n        }).catch(function () {\n          logger.warning('ChannelListProvider: Active channel not found');\n        });\n      }\n    }\n  }, [activeChannelUrl]);\n}\nvar ChannelListContext = /*#__PURE__*/React__default.createContext({\n  disableUserProfile: true,\n  allowProfileEdit: true,\n  onBeforeCreateChannel: null,\n  onThemeChange: null,\n  onProfileEditSuccess: null,\n  onChannelSelect: null,\n  queries: {},\n  className: null,\n  initialized: false,\n  loading: false,\n  allChannels: [],\n  currentChannel: null,\n  channelListQuery: {},\n  currentUserId: null,\n  channelListDispatcher: null,\n  channelSource: null,\n  typingChannels: []\n});\nvar ChannelListProvider = function ChannelListProvider(props) {\n  var _sdk$currentUser;\n  // destruct props\n  var children = props.children,\n    className = props.className,\n    disableUserProfile = props.disableUserProfile,\n    allowProfileEdit = props.allowProfileEdit,\n    queries = props.queries,\n    onProfileEditSuccess = props.onProfileEditSuccess,\n    onThemeChange = props.onThemeChange,\n    onBeforeCreateChannel = props.onBeforeCreateChannel,\n    sortChannelList = props.sortChannelList,\n    overrideInviteUser = props.overrideInviteUser,\n    activeChannelUrl = props.activeChannelUrl,\n    _props$isTypingIndica = props.isTypingIndicatorEnabled,\n    isTypingIndicatorEnabled = _props$isTypingIndica === void 0 ? null : _props$isTypingIndica,\n    _props$isMessageRecei = props.isMessageReceiptStatusEnabled,\n    isMessageReceiptStatusEnabled = _props$isMessageRecei === void 0 ? null : _props$isMessageRecei;\n  // disable autoselect, if activeChannelUrl is provided\n  // useActiveChannelUrl should be executed when activeChannelUrl is present\n  var disableAutoSelect = (props === null || props === void 0 ? void 0 : props.disableAutoSelect) || !!activeChannelUrl;\n  var onChannelSelect = (props === null || props === void 0 ? void 0 : props.onChannelSelect) || noop;\n  // fetch store from <SendbirdProvider />\n  var globalStore = useSendbirdStateContext();\n  var config = globalStore.config,\n    stores = globalStore.stores;\n  var sdkStore = stores.sdkStore;\n  var pubSub = config.pubSub,\n    logger = config.logger,\n    onUserProfileMessage = config.onUserProfileMessage;\n  var markAsDeliveredScheduler = config.markAsDeliveredScheduler,\n    _config$disableMarkAs = config.disableMarkAsDelivered,\n    disableMarkAsDelivered = _config$disableMarkAs === void 0 ? false : _config$disableMarkAs,\n    _config$isTypingIndic = config.isTypingIndicatorEnabledOnChannelList,\n    isTypingIndicatorEnabledOnChannelList = _config$isTypingIndic === void 0 ? false : _config$isTypingIndic,\n    _config$isMessageRece = config.isMessageReceiptStatusEnabledOnChannelList,\n    isMessageReceiptStatusEnabledOnChannelList = _config$isMessageRece === void 0 ? false : _config$isMessageRece;\n  var sdk = sdkStore === null || sdkStore === void 0 ? void 0 : sdkStore.sdk;\n\n  // derive some variables\n  // enable if it is true atleast once(both are flase by default)\n  var userDefinedDisableUserProfile = disableUserProfile || (config === null || config === void 0 ? void 0 : config.disableUserProfile);\n  var userDefinedRenderProfile = config === null || config === void 0 ? void 0 : config.renderUserProfile;\n  var enableEditProfile = allowProfileEdit || (config === null || config === void 0 ? void 0 : config.allowProfileEdit);\n  var userFilledChannelListQuery = queries === null || queries === void 0 ? void 0 : queries.channelListQuery;\n  var userFilledApplicationUserListQuery = queries === null || queries === void 0 ? void 0 : queries.applicationUserListQuery;\n  var sdkIntialized = sdkStore === null || sdkStore === void 0 ? void 0 : sdkStore.initialized;\n  var _useReducer = useReducer(reducer, channelListInitialState),\n    _useReducer2 = _slicedToArray(_useReducer, 2),\n    channelListStore = _useReducer2[0],\n    channelListDispatcher = _useReducer2[1];\n  var currentChannel = channelListStore.currentChannel;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    channelSource = _useState2[0],\n    setChannelSource = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    typingChannels = _useState4[0],\n    setTypingChannels = _useState4[1];\n  useEffect(function () {\n    var subscriber = pubSubHandler(pubSub, channelListDispatcher);\n    return function () {\n      pubSubHandleRemover(subscriber);\n    };\n  }, [sdkIntialized]);\n  useEffect(function () {\n    var sdkChannelHandlerId = uuidv4();\n    if (sdkIntialized) {\n      logger.info('ChannelList: Setup channelHandlers');\n      setupChannelList({\n        sdk: sdk,\n        sdkChannelHandlerId: sdkChannelHandlerId,\n        channelListDispatcher: channelListDispatcher,\n        setChannelSource: setChannelSource,\n        onChannelSelect: onChannelSelect,\n        userFilledChannelListQuery: userFilledChannelListQuery,\n        logger: logger,\n        sortChannelList: sortChannelList,\n        disableAutoSelect: disableAutoSelect,\n        markAsDeliveredScheduler: markAsDeliveredScheduler,\n        disableMarkAsDelivered: disableMarkAsDelivered\n      });\n    } else {\n      var _sdk$groupChannel;\n      logger.info('ChannelList: Removing channelHandlers');\n      // remove previous channelHandlers\n      if (sdk !== null && sdk !== void 0 && (_sdk$groupChannel = sdk.groupChannel) !== null && _sdk$groupChannel !== void 0 && _sdk$groupChannel.removeGroupChannelHandler) {\n        sdk.groupChannel.removeGroupChannelHandler(sdkChannelHandlerId);\n      }\n      // remove channelSource\n      setChannelSource(null);\n      // cleanup\n      channelListDispatcher({\n        type: RESET_CHANNEL_LIST,\n        payload: null\n      });\n    }\n    return function () {\n      var _sdk$groupChannel2;\n      logger.info('ChannelList: Removing channelHandlers');\n      if (sdk !== null && sdk !== void 0 && (_sdk$groupChannel2 = sdk.groupChannel) !== null && _sdk$groupChannel2 !== void 0 && _sdk$groupChannel2.removeGroupChannelHandler) {\n        var _sdk$groupChannel3;\n        sdk === null || sdk === void 0 ? void 0 : (_sdk$groupChannel3 = sdk.groupChannel) === null || _sdk$groupChannel3 === void 0 ? void 0 : _sdk$groupChannel3.removeGroupChannelHandler(sdkChannelHandlerId);\n      }\n    };\n  }, [sdkIntialized, userFilledChannelListQuery, sortChannelList]);\n  useEffect(function () {\n    var _sdk$groupChannel4;\n    var typingHandlerId = '';\n    if (sdk !== null && sdk !== void 0 && (_sdk$groupChannel4 = sdk.groupChannel) !== null && _sdk$groupChannel4 !== void 0 && _sdk$groupChannel4.addGroupChannelHandler) {\n      var _sdk$groupChannel5;\n      typingHandlerId = uuidv4();\n      var handler = new GroupChannelHandler({\n        onTypingStatusUpdated: function onTypingStatusUpdated(channel) {\n          var _channel$getTypingUse;\n          var typingMemberCount = channel === null || channel === void 0 ? void 0 : (_channel$getTypingUse = channel.getTypingUsers()) === null || _channel$getTypingUse === void 0 ? void 0 : _channel$getTypingUse.length;\n          var channelList = typingChannels.filter(function (ch) {\n            return ch.url !== channel.url;\n          });\n          if (typingMemberCount > 0) {\n            setTypingChannels([].concat(_toConsumableArray(channelList), [channel]));\n          } else {\n            setTypingChannels(channelList);\n          }\n        },\n        onUnreadMemberStatusUpdated: function onUnreadMemberStatusUpdated(channel) {\n          channelListDispatcher({\n            type: ON_LAST_MESSAGE_UPDATED,\n            payload: channel\n          });\n        },\n        onUndeliveredMemberStatusUpdated: function onUndeliveredMemberStatusUpdated(channel) {\n          channelListDispatcher({\n            type: ON_LAST_MESSAGE_UPDATED,\n            payload: channel\n          });\n        },\n        onMessageUpdated: function onMessageUpdated(channel) {\n          channelListDispatcher({\n            type: ON_LAST_MESSAGE_UPDATED,\n            payload: channel\n          });\n          sdk.groupChannel.getChannelWithoutCache(channel.url).then(function (ch) {\n            channelListDispatcher({\n              type: ON_LAST_MESSAGE_UPDATED,\n              payload: ch\n            });\n          });\n        },\n        onMentionReceived: function onMentionReceived(channel) {\n          channelListDispatcher({\n            type: ON_LAST_MESSAGE_UPDATED,\n            payload: channel\n          });\n          sdk.groupChannel.getChannelWithoutCache(channel.url).then(function (ch) {\n            channelListDispatcher({\n              type: ON_LAST_MESSAGE_UPDATED,\n              payload: ch\n            });\n          });\n        }\n      });\n      sdk === null || sdk === void 0 ? void 0 : (_sdk$groupChannel5 = sdk.groupChannel) === null || _sdk$groupChannel5 === void 0 ? void 0 : _sdk$groupChannel5.addGroupChannelHandler(typingHandlerId, handler);\n    }\n    return function () {\n      var _sdk$groupChannel6;\n      if (sdk !== null && sdk !== void 0 && (_sdk$groupChannel6 = sdk.groupChannel) !== null && _sdk$groupChannel6 !== void 0 && _sdk$groupChannel6.removeGroupChannelHandler && typingHandlerId !== '') {\n        sdk.groupChannel.removeGroupChannelHandler(typingHandlerId);\n      }\n    };\n  }, [sdk === null || sdk === void 0 ? void 0 : (_sdk$currentUser = sdk.currentUser) === null || _sdk$currentUser === void 0 ? void 0 : _sdk$currentUser.userId]);\n  var queries_ = useMemo(function () {\n    return {\n      applicationUserListQuery: userFilledApplicationUserListQuery,\n      channelListQuery: userFilledChannelListQuery\n    };\n  }, [userFilledApplicationUserListQuery, userFilledChannelListQuery]);\n  var allChannels = channelListStore.allChannels;\n  var sortedChannels = sortChannelList && typeof sortChannelList === 'function' ? sortChannelList(allChannels) : allChannels;\n  if (sortedChannels.length !== allChannels.length) {\n    var warning = \"ChannelList: You have removed/added extra channels on sortChannelList\\n      this could cause unexpected problems\";\n    // eslint-disable-next-line no-console\n    console.warn(warning, {\n      before: allChannels,\n      after: sortedChannels\n    });\n    logger.warning(warning, {\n      before: allChannels,\n      after: sortedChannels\n    });\n  }\n\n  // Set current channel (by on_channel_selected event)\n  useEffect(function () {\n    if (!sdk || !sdk.groupChannel || !currentChannel || !(currentChannel !== null && currentChannel !== void 0 && currentChannel.url)) {\n      return;\n    }\n    sdk.groupChannel.getChannel(currentChannel.url).then(function (groupChannel) {\n      if (groupChannel) {\n        onChannelSelect(groupChannel);\n      } else {\n        onChannelSelect(null);\n      }\n    });\n  }, [currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url]);\n\n  // Set active channel (by url)\n  useActiveChannelUrl({\n    activeChannelUrl: activeChannelUrl,\n    channels: sortedChannels,\n    sdk: sdk\n  }, {\n    logger: logger,\n    channelListDispatcher: channelListDispatcher\n  });\n  return /*#__PURE__*/React__default.createElement(ChannelListContext.Provider, {\n    value: _objectSpread2(_objectSpread2({\n      className: className,\n      disableUserProfile: disableUserProfile,\n      queries: queries_,\n      onProfileEditSuccess: onProfileEditSuccess,\n      onThemeChange: onThemeChange,\n      onBeforeCreateChannel: onBeforeCreateChannel,\n      overrideInviteUser: overrideInviteUser,\n      onChannelSelect: onChannelSelect,\n      sortChannelList: sortChannelList,\n      allowProfileEdit: enableEditProfile,\n      channelListDispatcher: channelListDispatcher,\n      channelSource: channelSource\n    }, channelListStore), {}, {\n      allChannels: sortedChannels,\n      typingChannels: typingChannels,\n      isTypingIndicatorEnabled: isTypingIndicatorEnabled !== null ? isTypingIndicatorEnabled : isTypingIndicatorEnabledOnChannelList,\n      isMessageReceiptStatusEnabled: isMessageReceiptStatusEnabled !== null ? isMessageReceiptStatusEnabled : isMessageReceiptStatusEnabledOnChannelList\n    })\n  }, /*#__PURE__*/React__default.createElement(UserProfileProvider, {\n    disableUserProfile: userDefinedDisableUserProfile,\n    renderUserProfile: userDefinedRenderProfile,\n    onUserProfileMessage: onUserProfileMessage\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-list \".concat(className)\n  }, children)));\n};\nfunction useChannelListContext() {\n  var context = useContext(ChannelListContext);\n  return context;\n}\nexport { ChannelListProvider as C, FETCH_CHANNELS_START as F, LEAVE_CHANNEL_SUCCESS as L, SET_CURRENT_CHANNEL as S, FETCH_CHANNELS_SUCCESS as a, FETCH_CHANNELS_FAILURE as b, useChannelListContext as u };","map":{"version":3,"mappings":";;;;;;;;;;;AAAO,IAAMA,kBAAkB,GAAG,oBAAoB;AAC/C,IAAMC,cAAc,GAAG,gBAAgB;AACvC,IAAMC,YAAY,GAAG,cAAc;AAGnC,IAAMC,qBAAqB,GAAG;AAE9B,IAAMC,mBAAmB,GAAG;AAE5B,IAAMC,oBAAoB,GAAG;AAC7B,IAAMC,sBAAsB,GAAG;AAC/B,IAAMC,sBAAsB,GAAG;AAE/B,IAAMC,mBAAmB,GAAG,qBAAqB;AACjD,IAAMC,qBAAqB,GAAG,uBAAuB;AACrD,IAAMC,qBAAqB,GAAG,uBAAuB;AAIrD,IAAMC,cAAc,GAAG,gBAAgB;AACvC,IAAMC,kBAAkB,GAAG,oBAAoB;AAC/C,IAAMC,uBAAuB,GAAG,yBAAyB;AACzD,IAAMC,YAAY,GAAG,cAAc;AACnC,IAAMC,kBAAkB,GAAG,oBAAoB;AAC/C,IAAMC,mBAAmB,GAAG,qBAAqB;AACjD,IAAMC,iBAAiB,GAAG,mBAAmB;AAC7C,IAAMC,mBAAmB,GAAG,qBAAqB;AAEjD,IAAMC,uBAAuB,GAAG,yBAAyB;AACzD,IAAMC,2BAA2B,GAAG,6BAA6B;AAEjE,IAAMC,uBAAuB,GAAG,yBAAyB;AACzD,IAAMC,2BAA2B,GAAG,6BAA6B;AC5BxE,IAAMC,eAAe,GAAG,kBAAkB;AAE1C,IAAMC,kBAAkB,GAAGC,SAArBD,kBAAkB,CAAGC,MAKrB;EAAA,IAJJC,GAAG,GAIJD,KAJCC,GAAG;IACHC,mBAAmB,GAGpBF,KAHCE,mBAAmB;IACnBC,qBAAqB,GAEtBH,KAFCG,qBAAqB;IACrBC,SACDJ,KADCI;EAEA,IAAMC,cAAc,GAAG,IAAIC,mBAAmB,CAAC;IAC7CC,gBAAgB,EAAGC,iCAAO,EAAK;MAC7BJ,MAAM,CAACK,IAAI,CAAC,+BAA+B,EAAED,OAAO,CAAC;MACrDL,qBAAqB,CAAC;QACpBO,IAAI,EAAEC,kBAAiC;QACvCC,OAAO,EAAEJ;MACX,CAAC,CAAC;KACH;IACDK,gBAAgB,EAAGC,oCAAU,EAAK;MAChCV,MAAM,CAACK,IAAI,CAAC,+BAA+B,EAAEK,UAAU,CAAC;MACxDX,qBAAqB,CAAC;QACpBO,IAAI,EAAEC,kBAAiC;QACvCC,OAAO,EAAEE;MACX,CAAC,CAAC;KACH;IACDC,YAAY,EAAGP,6BAAO,EAAK;MACzBJ,MAAM,CAACK,IAAI,CAAC,2BAA2B,EAAED,OAAO,CAAC;MACjD,IAAIA,OAAO,KAAPA,eAAO,eAAPA,OAAO,CAAEQ,WAAW,EAAE;QACxBb,qBAAqB,CAAC;UACpBO,IAAI,EAAEC,cAA6B;UACnCC,OAAO,EAAEJ;QACX,CAAC,CAAC;MACJ;KACD;IACDS,wBAAwB,EAAEA,kCAACT,OAAO,EAAEU,OAAO,EAAEC,QAAQ,EAAK;MACxDf,MAAM,CAACK,IAAI,CAAC,uCAAuC,EAAE;QAAED,OAAO,EAAPA,OAAO;QAAEU,OAAO,EAAPA,OAAO;QAAEC;MAAS,CAAC,CAAC;MACpF,IAAQC,cAAgBnB,GAAG,CAAnBmB;MACR,IAAMC,SAAS,GAAGF,QAAQ,CAACG,IAAI,CAAEC,cAAI;QAAA,OAAK,KAAI,KAAJA,YAAI,uBAAJA,IAAI,CAAEC,MAAM,OAAKJ,WAAW,aAAXA,WAAW,KAAXA,6BAAW,CAAEI,MAAM,CAAC;MAAA;MAC/E;MACA,IAAIH,SAAS,IAAIb,OAAO,aAAPA,OAAO,KAAPA,iBAAO,CAAEQ,WAAW,EAAE;QACrCb,qBAAqB,CAAC;UACpBO,IAAI,EAAEC,YAA2B;UACjCC,OAAO,EAAEJ;QACX,CAAC,CAAC;MACJ;KACD;IACDiB,YAAY,EAAEA,sBAACjB,OAAO,EAAEe,IAAI,EAAK;MAC/B,IAAQH,cAAgBnB,GAAG,CAAnBmB;MACRhB,MAAM,CAACK,IAAI,CAAC,uBAAuB,EAAED,OAAO,CAAC;MAC7C,IAAIe,IAAI,CAACC,MAAM,KAAKJ,WAAW,CAACI,MAAM,EAAE;QACtCrB,qBAAqB,CAAC;UACpBO,IAAI,EAAEC,YAA2B;UACjCC,OAAO,EAAE;YACPJ,OAAO,EAAPA,OAAO;YACPkB,IAAI,EAAE;UACR;QACF,CAAC,CAAC;MACJ,CAAC,MAAM;QACLvB,qBAAqB,CAAC;UACpBO,IAAI,EAAEC,YAA2B;UACjCC,OAAO,EAAE;YACPJ,OAAO,EAAPA,OAAO;YACPkB,IAAI,EAAE;UACR;QACF,CAAC,CAAC;MACJ;KACD;IACDC,UAAU,EAAEA,oBAACnB,OAAO,EAAEoB,QAAQ,EAAK;MACjC,IAAQR,cAAgBnB,GAAG,CAAnBmB;MACR,IAAMM,IAAI,GAAIN,WAAW,CAACI,MAAM,KAAKI,QAAQ,CAACJ,MAAO;MACrDpB,MAAM,CAACK,IAAI,CAAC,yBAAyB,EAAED,OAAO,CAAC;MAC/CL,qBAAqB,CAAC;QACpBO,IAAI,EAAEC,YAA2B;QACjCC,OAAO,EAAE;UACPJ,OAAO,EAAPA,OAAO;UACPkB;QACF;MACF,CAAC,CAAC;KACH;IAEDG,YAAY,EAAGrB,6BAAO,EAAK;MACzBJ,MAAM,CAACK,IAAI,CAAC,2BAA2B,EAAED,OAAO,CAAC;MACjDL,qBAAqB,CAAC;QACpBO,IAAI,EAAEC,uBAAsC;QAC5CC,OAAO,EAAEJ;MACX,CAAC,CAAC;KACH;IAEDsB,wBAAwB,EAAGtB,yCAAO,EAAK;MACrCJ,MAAM,CAACK,IAAI,CAAC,uCAAuC,EAAED,OAAO,CAAC;MAC7D,IAAIA,OAAO,KAAPA,eAAO,eAAPA,OAAO,CAAEQ,WAAW,EAAE;QACxBb,qBAAqB,CAAC;UACpBO,IAAI,EAAEC,2BAA0C;UAChDC,OAAO,EAAEJ;QACX,CAAC,CAAC;MACJ;KACD;IAEDuB,gBAAgB,EAAEA,0BAACvB,OAAO,EAAEwB,OAAO,EAAK;MACtC,IAAIxB,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEQ,WAAW,CAACiB,OAAO,CAACD,OAAO,CAAC,EAAE;QACzC5B,MAAM,CAACK,IAAI,CAAC,+BAA+B,EAAED,OAAO,CAAC;QACrDL,qBAAqB,CAAC;UACpBO,IAAI,EAAEC,uBAAsC;UAC5CC,OAAO,EAAEJ;QACX,CAAC,CAAC;MACJ;KACD;IAED0B,eAAe,EAAG1B,gCAAO,EAAK;MAC5BJ,MAAM,CAACK,IAAI,CAAC,8BAA8B,EAAED,OAAO,CAAC;MACpDL,qBAAqB,CAAC;QACpBO,IAAI,EAAEC,mBAAkC;QACxCC,OAAO,EAAEJ;MACX,CAAC,CAAC;KACH;IAED2B,eAAe,EAAG3B,gCAAO,EAAK;MAC5BJ,MAAM,CAACK,IAAI,CAAC,8BAA8B,EAAED,OAAO,CAAC;MACpDL,qBAAqB,CAAC;QACpBO,IAAI,EAAEC,iBAAgC;QACtCC,OAAO,EAAEJ;MACX,CAAC,CAAC;KACH;IAED4B,iBAAiB,EAAG5B,kCAAO,EAAK;MAC9BJ,MAAM,CAACK,IAAI,CAAC,gCAAgC,EAAED,OAAO,CAAC;MACtDL,qBAAqB,CAAC;QACpBO,IAAI,EAAEC,mBAAkC;QACxCC,OAAO,EAAEJ;MACX,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;EAEFJ,MAAM,CAACK,IAAI,CAAC,mCAAmC,CAAC;EAChDR,GAAG,CAACoC,YAAY,CAACC,sBAAsB,CAACpC,mBAAmB,EAAEG,cAAc,CAAC;AAC9E,CAAC;AAED,IAAMkC,sBAAsB,GAAGC,SAAzBD,sBAAsB,CAAGC,OAA8C;EAAA,IAA3CvC,GAAG,GAAmCuC,MAAtCvC,GAAG;IAAA,wBAAmCuC,MAAjCC,0BAA0B;IAA1BA,0BAA0B,sCAAG,EAAC;EACnE,IAAMC,KAAK,GAAG,EAAE;EAChBA,KAAK,CAACC,YAAY,GAAG,KAAK;EAC1BD,KAAK,CAACE,KAAK,GAAG,EAAE,CAAC;EACjBF,KAAK,CAACG,KAAK,GAAG,qBAAqB,CAAC;;EAEpC,IAAIJ,0BAA0B,EAAE;IAC9BK,MAAM,CAACC,IAAI,CAACN,0BAA0B,CAAC,CAACO,OAAO,CAAEC,aAAG,EAAK;MACvDP,KAAK,CAACO,GAAG,CAAC,GAAGR,0BAA0B,CAACQ,GAAG,CAAC;IAC9C,CAAC,CAAC;EACJ;EAEA,IAAMC,gBAAgB,GAAGjD,GAAG,CAACoC,YAAY,CAACc,6BAA6B,CAACT,KAAK,CAAC;EAE9E,OAAOQ,gBAAgB;AACzB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,SAASE,gBAAgBA,QAYtB;EAAA,IAXDnD,GAAG,GAWJoD,MAXCpD,GAAG;IACHC,mBAAmB,GAUpBmD,MAVCnD,mBAAmB;IACnBC,qBAAqB,GAStBkD,MATClD,qBAAqB;IACrBmD,gBAAgB,GAQjBD,MARCC,gBAAgB;IAChBC,eAAe,GAOhBF,MAPCE,eAAe;IACfd,0BAA0B,GAM3BY,MANCZ,0BAA0B;IAC1BrC,MAAM,GAKPiD,MALCjD,MAAM;IACNoD,eAAe,GAIhBH,MAJCG,eAAe;IACfC,iBAAiB,GAGlBJ,MAHCI,iBAAiB;IACjBC,wBAAwB,GAEzBL,MAFCK,wBAAwB;IACxBC,yBACDN,MADCM;EAEA,IAAI1D,GAAG,KAAHA,WAAG,eAAHA,GAAG,CAAEoC,YAAY,EAAE;IACrBtC,kBAAkB,CAAC;MACjBE,GAAG,EAAHA,GAAG;MACHE,qBAAqB,EAArBA,qBAAqB;MACrBD,mBAAmB,EAAnBA,mBAAmB;MACnBE;IACF,CAAC,CAAC;EACJ,CAAC,MAAM;IACLA,MAAM,CAACwD,OAAO,CAAC,4EAA4E,EAAE3D,GAAG,CAAC;EACnG;EAEAG,MAAM,CAACK,IAAI,CAAC,8BAA8B,EAAE;IAAEgC;EAA2B,CAAC,CAAC;EAC3E,IAAMS,gBAAgB,GAAGX,sBAAsB,CAAC;IAAEtC,GAAG,EAAHA,GAAG;IAAEwC;EAA2B,CAAC,CAAC;EACpFrC,MAAM,CAACK,IAAI,CAAC,6BAA6B,EAAEyC,gBAAgB,CAAC;EAC5DI,gBAAgB,CAACJ,gBAAgB,CAAC;EAElC/C,qBAAqB,CAAC;IACpBO,IAAI,EAAEC;EACR,CAAC,CAAC;EAEF,IAAI8B,0BAA0B,EAAE;IAC9BrC,MAAM,CAACK,IAAI,CAAC,2CAA2C,EAAEyC,gBAAgB,CAAC;IAC1E/C,qBAAqB,CAAC;MACpBO,IAAI,EAAEC,2BAA0C;MAChDC,OAAO,EAAE;QACPsC,gBAAgB,EAAhBA,gBAAgB;QAChBW,aAAa,EAAE5D,GAAG,IAAIA,GAAG,CAACmB,WAAW,IAAInB,GAAG,CAACmB,WAAW,CAACI;MAC3D;IACF,CAAC,CAAC;EACJ;EAEApB,MAAM,CAACK,IAAI,CAAC,iCAAiC,CAAC;EAC9C,IAAIyC,gBAAgB,CAACY,OAAO,EAAE;IAC5BZ,gBAAgB,CAACa,IAAI,EAAE,CAACC,IAAI,CAAEC,qBAAW,EAAK;MAAA;MAC5C7D,MAAM,CAACK,IAAI,CAAC,gCAAgC,EAAEwD,WAAW,CAAC;MAC1D;MACA7D,MAAM,CAACK,IAAI,CAAC,iCAAiC,EAAEwD,WAAW,CAAC,CAAC,CAAC,CAAC;MAC9D,IAAIC,iBAAiB,GAAGD,WAAW;MACnC,IAAIT,eAAe,IAAI,OAAOA,eAAe,KAAK,UAAU,EAAE;QAC5DU,iBAAiB,GAAGV,eAAe,CAACS,WAAW,CAAC;QAChD7D,MAAM,CAACK,IAAI,CAAC,mCAAmC,EAAEyD,iBAAiB,CAAC;MACrE;MACA,IAAI,CAACT,iBAAiB,EAAE;QACtBF,eAAe,CAACW,iBAAiB,CAAC,CAAC,CAAC,CAAC;MACvC;MACA/D,qBAAqB,CAAC;QACpBO,IAAI,EAAEC,qBAAoC;QAC1CC,OAAO,EAAE;UAAEqD,WAAW,EAAEC,iBAAiB;UAAET;QAAkB;MAC/D,CAAC,CAAC;MACF,IAAMU,qBAAqB,GAAGlE,GAAG,aAAHA,GAAG,uCAAHA,GAAG,CAAEmE,OAAO,0EAAZC,aAAcC,kBAAkB,0DAAhCC,sBAC1BjD,IAAI,CAAEkD,iBAAO;QAAA,OAAMA,OAAO,KAAK1E,eAAgB;MAAA,EAAC;MAEpD,IAAIqE,qBAAqB,IAAI,CAACR,sBAAsB,EAAE;QACpDO,iBAAiB,CAAClB,OAAO,CAAExC,iBAAO,EAAK;UACrCkD,wBAAwB,CAACe,IAAI,CAACjE,OAAO,CAAC;QACxC,CAAC,CAAC;MACJ;IACF,CAAC,CAAC,CAACkE,KAAK,CAAEC,aAAG,EAAK;MAChB,IAAIA,GAAG,EAAE;QACPvE,MAAM,CAACwE,KAAK,CAAC,sCAAsC,EAAED,GAAG,CAAC;QACzDxE,qBAAqB,CAAC;UACpBO,IAAI,EAAEC;QACR,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;EACJ,CAAC,MAAM;IACLP,MAAM,CAACK,IAAI,CAAC,0CAA0C,CAAC;EACzD;AACF;AAEO,IAAMoE,mBAAmB,GAAIC,SAAvBD,mBAAmB,CAAIC,UAAU,EAAK;EACjDA,UAAU,CAAC9B,OAAO,CAAE+B,WAAC,EAAK;IACxB,IAAI;MACFA,CAAC,CAACC,MAAM,EAAE;KACX,CAAC,gBAAM;MACN;IAAA;EAEJ,CAAC,CAAC;AACJ,CAAC;AAEM,IAAMC,aAAa,GAAGA,SAAhBA,aAAa,CAAIC,MAAM,EAAE/E,qBAAqB,EAAK;EAC9D,IAAM2E,UAAU,GAAG,IAAIK,GAAG,EAAE;EAC5B,IAAI,CAACD,MAAM,EAAE,OAAOJ,UAAU;EAC9BA,UAAU,CAACM,GAAG,CAACC,aAAM,CAAC7G,cAAc,EAAE0G,MAAM,CAACI,SAAS,CAACD,aAAM,CAAC7G,cAAc,EAAG+G,aAAG,EAAK;IACrF,IAAQ/E,UAAY+E,GAAG,CAAf/E;IACRL,qBAAqB,CAAC;MACpBO,IAAI,EAAE,gBAAgB;MACtBE,OAAO,EAAEJ;IACX,CAAC,CAAC;EACJ,CAAC,CAAC,CAAC;EAEHsE,UAAU,CAACM,GAAG,CAACC,aAAM,CAACG,mBAAmB,EAAEN,MAAM,CAACI,SAAS,CAACD,aAAM,CAACG,mBAAmB,EAAGD,aAAG,EAAK;IAAA;IAC/F,IAAQ/E,OAAO,GAAc+E,GAAG,CAAxB/E,OAAO;MAAEwB,UAAYuD,GAAG,CAAfvD;IACjB,IAAMyD,cAAc,GAAGjF,OAAO;IAC9B,IAAI,eAAc,KAAdiF,sBAAc,gDAAdA,cAAc,CAAEzE,WAAW,0DAA3B0E,sBAA6BC,SAAS,MAAK3D,OAAO,CAAC2D,SAAS,EAAE;MAChEF,cAAc,CAACzE,WAAW,GAAGgB,OAAO;IACtC;IACA,IAAIxB,OAAO,EAAE;MACXL,qBAAqB,CAAC;QACpBO,IAAI,EAAEC,uBAAsC;QAC5CC,OAAO,EAAE6E;MACX,CAAC,CAAC;IACJ;EACF,CAAC,CAAC,CAAC;EAEHX,UAAU,CAACM,GAAG,CAACC,aAAM,CAACO,aAAa,EAAEV,MAAM,CAACI,SAAS,CAACD,aAAM,CAACO,aAAa,EAAGL,aAAG,EAAK;IACnF,IAAQ/E,UAAY+E,GAAG,CAAf/E;IACRL,qBAAqB,CAAC;MACpBO,IAAI,EAAEC,qBAAoC;MAC1CC,OAAO,EAAEJ,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEqF;IACpB,CAAC,CAAC;EACJ,CAAC,CAAC,CAAC;EAEHf,UAAU,CAACM,GAAG,CAACC,aAAM,CAACS,kBAAkB,EAAEZ,MAAM,CAACI,SAAS,CAACD,aAAM,CAACS,kBAAkB,EAAGP,aAAG,EAAK;IAC7F,IAAQ/E,UAAY+E,GAAG,CAAf/E;IACRL,qBAAqB,CAAC;MACpBO,IAAI,EAAEC,uBAAsC;MAC5CC,OAAO,EAAEJ;IACX,CAAC,CAAC;EACJ,CAAC,CAAC,CAAC;EAEH,OAAOsE,UAAU;AACnB,CAAC;ACxSD,8BAAe;EACb;EACAiB,WAAW,EAAE,KAAK;EAClBC,OAAO,EAAE,IAAI;EACbC,WAAW,EAAE,EAAE;EACfC,cAAc,EAAE,IAAI;EACpBhD,gBAAgB,EAAE,IAAI;EACtBW,aAAa,EAAE,EAAE;EACjBJ,iBAAiB,EAAE;AACrB,CAAC;ACLc,SAAS0C,OAAOA,CAACC,KAAK,EAAEC,MAAM,EAAE;EAC7C,QAAQA,MAAM,CAAC3F,IAAI;IACjB,KAAK4F,mBAA2B;MAC9B,yCACKF,KAAK;QACRJ,OAAO,EAAE;MAAI;IAEjB,KAAKM,kBAA0B;MAC7B,OAAOC,uBAAY;IACrB,KAAKD,qBAA6B;MAAE;QAClC,sBAA2CD,MAAM,CAACzF,OAAO;UAAjDqD,WAAW,mBAAXA,WAAW;UAAER;QACrB,yCACK2C,KAAK;UACRL,WAAW,EAAE,IAAI;UACjBC,OAAO,EAAE,KAAK;UACdC,WAAW,EAAEhC,WAAW;UACxBR,iBAAiB,EAAjBA,iBAAiB;UACjByC,cAAc,EACZ,CAACzC,iBAAiB,IACfQ,WAAW,IACXA,WAAW,CAACuC,MAAM,IAClBvC,WAAW,CAACuC,MAAM,GAAG,CAAC,GAEvBvC,WAAW,CAAC,CAAC,CAAC,GACd;QAAI;MAEZ;IACA,KAAKqC,sBAA8B;MAAE;QACnC,IAAMG,eAAe,GAAGL,KAAK,CAACH,WAAW,CAACS,GAAG,CAAEC,WAAC;UAAA,OAAKA,CAAC,CAACd,GAAG;QAAA,EAAC;QAC3D,IAAMe,gBAAgB,GAAGP,MAAM,CAACzF,OAAO,CAACiG,MAAM,CAC5C7G;UAAA,IAAG6F,MAAK7F,KAAL6F;UAAK,OAAK,CAAEY,eAAe,CAACnF,IAAI,CAAEqF,WAAC;YAAA,OAAKA,CAAC,KAAKd,GAAG;UAAA,EAAE;SACvD;QACD,yCACKO,KAAK;UACRH,WAAW,+BACNG,KAAK,CAACH,WAAW,sBACjBW,gBAAgB;QACpB;MAEL;IACA,KAAKN,YAAoB;MAAE;QACzB,IAAM9F,OAAO,GAAG6F,MAAM,CAACzF,OAAO;QAC9B,IAAIwF,KAAK,CAAClD,gBAAgB,EAAE;UAC1B,IAAI4D,uBAAuB,CAACV,KAAK,CAAClD,gBAAgB,EAAE1C,OAAO,EAAE4F,KAAK,CAACvC,aAAa,CAAC,EAAE;YACjF,yCACKuC,KAAK;cACRH,WAAW,EAAEc,8BAA8B,CAACX,KAAK,CAACH,WAAW,EAAEzF,OAAO;YAAC;UAE3E;UACA,yCACK4F,KAAK;YACRF,cAAc,EAAE1F;UAAO;QAE3B;QACA,yCACK4F,KAAK;UACRH,WAAW,GAAGzF,OAAO,4BAAK4F,KAAK,CAACH,WAAW,CAACY,MAAM,CAAEG,YAAE;YAAA,OAAKA,EAAE,CAACnB,GAAG,MAAKrF,OAAO,aAAPA,OAAO,KAAPA,yBAAO,CAAEqF,GAAG,CAAC;UAAA;QAAC;MAExF;IACA,KAAKS,cAAsB;MAAE;QAC3B,IAAM9F,QAAO,GAAG6F,MAAM,CAACzF,OAAO;QAC9B,IAAIwF,KAAK,CAAClD,gBAAgB,EAAE;UAC1B,IAAI4D,uBAAuB,CAACV,KAAK,CAAClD,gBAAgB,EAAE1C,QAAO,EAAE4F,KAAK,CAACvC,aAAa,CAAC,EAAE;YACjF,yCACKuC,KAAK;cACRH,WAAW,EAAEc,8BAA8B,CAACX,KAAK,CAACH,WAAW,EAAEzF,QAAO;YAAC;UAE3E;UACA,yCACK4F,KAAK;YACRF,cAAc,EAAE1F;UAAO;QAE3B;QACA,yCACK4F,KAAK;UACRH,WAAW,GAAGzF,QAAO,4BAAK4F,KAAK,CAACH,WAAW,CAACY,MAAM,CAAEG,YAAE;YAAA,OAAKA,EAAE,CAACnB,GAAG,MAAKrF,QAAO,aAAPA,QAAO,uBAAPA,QAAO,CAAEqF,GAAG;UAAA,EAAC,EAAC;UACpFK,cAAc,EAAE1F;QAAO;MAE3B;IACA,KAAK8F,mBAA2B;MAAE;QAAA;QAChC,IAAM9F,SAAO,GAAG6F,MAAM,CAACzF,OAAO;QAC9B,IAAIwF,KAAK,CAAClD,gBAAgB,EAAE;UAC1B,IAAI4D,uBAAuB,CAACV,KAAK,CAAClD,gBAAgB,EAAE1C,SAAO,EAAE4F,KAAK,CAACvC,aAAa,CAAC,EAAE;YACjF,yCACKuC,KAAK;cACRH,WAAW,EAAEc,8BAA8B,CAACX,KAAK,CAACH,WAAW,EAAEzF,SAAO;YAAC;YAEzE;UACF;QACF;;QACA,IAAMyG,WAAW,GAAI,UAAO,aAAPzG,SAAO,uBAAPA,SAAO,CAAEqF,GAAG,gCAAKO,KAAK,CAACF,cAAc,0DAApBgB,sBAAsBrB,GAAG,IAC3DO,KAAK,CAACH,WAAW,CAACG,KAAK,CAACH,WAAW,CAAC,CAAC,CAAC,CAACJ,GAAG,MAAKrF,SAAO,KAAPA,iBAAO,uBAAPA,SAAO,CAAEqF,GAAG,IAAG,CAAC,GAAG,CAAC,CAAC,GACpEO,KAAK,CAACF,cAAc;QACxB,yCACKE,KAAK;UACRH,WAAW,EAAEG,KAAK,CAACH,WAAW,CAACY,MAAM,CAACrE;YAAA,IAAGqD,MAAKrD,MAALqD;YAAK,OAAKA,GAAG,MAAKrF,SAAO,aAAPA,SAAO,KAAPA,2BAAO,CAAEqF,GAAG;WAAC;UACxEK,cAAc,EAAEE,KAAK,CAAC3C,iBAAiB,GAAG,IAAI,GAAGwD;QAAW;MAEhE;IACA,KAAKX,qBAA6B;IAClC,KAAKA,kBAA0B;MAAE;QAAA;QAC/B,IAAMxF,UAAU,GAAGuF,MAAM,CAACzF,OAAO;QACjC,yCACKwF,KAAK;UACRF,cAAc,EAAGpF,UAAU,gCAAKsF,KAAK,CAACF,cAAc,yCAApBiB,yCAAsBtB,GAAG,IACrDO,KAAK,CAACH,WAAW,CAAC,CAAC,CAAC,GACpBG,KAAK,CAACF,cAAc;UACxBD,WAAW,EAAEG,KAAK,CAACH,WAAW,CAACY,MAAM,CAACxD;YAAA,IAAGwC,MAAKxC,MAALwC;YAAK,OAAKA,GAAG,KAAK/E,UAAU;UAAA;QAAC;MAE1E;IACA,KAAKwF,YAAoB;MAAE;QAAA;QACzB,uBAA0BD,MAAM,CAACzF,OAAO;UAAhCJ,SAAO,oBAAPA,OAAO;UAAEkB;QACjB,IAAI0E,KAAK,CAAClD,gBAAgB,EAAE;UAAA;UAC1B,IAAI4D,uBAAuB,CAACV,KAAK,CAAClD,gBAAgB,EAAE1C,SAAO,EAAE4F,KAAK,CAACvC,aAAa,CAAC,EAAE;YAAA;YACjF,IAAM+C,kBAAgB,GAAGG,8BAA8B,CAACX,KAAK,CAACH,WAAW,EAAEzF,SAAO,CAAC;YACnF,IAAMyG,aAAW,GAAIvF,IAAI,IAAK,UAAO,aAAPlB,SAAO,uBAAPA,SAAO,CAAEqF,GAAG,iCAAKO,KAAK,CAACF,cAAc,yCAApBkB,yCAAsBvB,GAAG,CAAC,GACrEe,kBAAgB,CAAC,CAAC,CAAC,GACnBR,KAAK,CAACF,cAAc;YACxB,yCACKE,KAAK;cACRF,cAAc,EAAEE,KAAK,CAAC3C,iBAAiB,GAAG,IAAI,GAAGwD,aAAW;cAC5DhB,WAAW,EAAEW;YAAgB;UAEjC;UACA,IAAMK,aAAW,GAAI,UAAO,aAAPzG,SAAO,uBAAPA,SAAO,CAAEqF,GAAG,iCAAKO,KAAK,CAACF,cAAc,yCAApBmB,yCAAsBxB,GAAG,IAC3DO,KAAK,CAACH,WAAW,CAAC,CAAC,CAAC,GACpBG,KAAK,CAACF,cAAc;UACxB,yCACKE,KAAK;YACRF,cAAc,EAAEE,KAAK,CAAC3C,iBAAiB,GAAG,IAAI,GAAGwD,aAAW;YAC5DhB,WAAW,EAAEG,KAAK,CAACH,WAAW,CAACY,MAAM,CAACS;cAAA,IAAGzB,MAAKyB,MAALzB;cAAK,OAAKA,GAAG,MAAKrF,SAAO,aAAPA,SAAO,KAAPA,2BAAO,CAAEqF,GAAG;YAAA;UAAC;QAE5E;QACA,IAAMe,iBAAgB,GAAGR,KAAK,CAACH,WAAW,CAACY,MAAM,CAAEF,WAAC;UAAA,OAAK,EAAEA,CAAC,CAACd,GAAG,MAAKrF,SAAO,aAAPA,SAAO,uBAAPA,SAAO,CAAEqF,GAAG,KAAInE,IAAI,CAAC;QAAA,EAAC;QAC3F,IAAMuF,YAAW,GAAIvF,IAAI,IAAK,UAAO,aAAPlB,SAAO,uBAAPA,SAAO,CAAEqF,GAAG,iCAAKO,KAAK,CAACF,cAAc,yCAApBqB,yCAAsB1B,GAAG,CAAC,GACrEe,iBAAgB,CAAC,CAAC,CAAC,GACnBR,KAAK,CAACF,cAAc;QACxB,yCACKE,KAAK;UACRF,cAAc,EAAEE,KAAK,CAAC3C,iBAAiB,GAAG,IAAI,GAAGwD,YAAW;UAC5DhB,WAAW,EAAEW;QAAgB;MAEjC;IACA,KAAKN,cAAsB;IAC3B,KAAKA,kBAA0B;IAC/B,KAAKA,uBAA+B;IACpC,KAAKA,2BAAmC;MAAE;QACxC,yBAA6BF,KAAK,CAA1BH,WAAW;UAAXA,WAAW,mCAAG;QACtB,IAAMzF,SAAO,GAAG6F,MAAM,CAACzF,OAAO;QAC9B,IAAQ4G,qBAAuBhH,SAAO,CAA9BgH;QACR,IAAI,EAAChH,SAAO,aAAPA,SAAO,eAAPA,SAAO,CAAEQ,WAAW,CAAE,SAAOoF,KAAK;QACvC,IAAIA,KAAK,CAAClD,gBAAgB,EAAE;UAAA;UAC1B,IAAI4D,uBAAuB,CAACV,KAAK,CAAClD,gBAAgB,EAAE1C,SAAO,EAAE4F,KAAK,CAACvC,aAAa,CAAC,EAAE;YACjF,yCACKuC,KAAK;cACRH,WAAW,EAAEc,8BAA8B,CAACd,WAAW,EAAEzF,SAAO;YAAC;UAErE;UACA,IAAMyG,aAAW,GAAI,UAAO,aAAPzG,SAAO,uBAAPA,SAAO,CAAEqF,GAAG,iCAAKO,KAAK,CAACF,cAAc,2DAApBuB,uBAAsB5B,GAAG,IAC3DO,KAAK,CAACH,WAAW,CAACG,KAAK,CAACH,WAAW,CAAC,CAAC,CAAC,CAACJ,GAAG,MAAKrF,SAAO,aAAPA,SAAO,KAAPA,2BAAO,CAAEqF,GAAG,IAAG,CAAC,GAAG,CAAC;UACrE;UAAA,EACEO,KAAK,CAACF,cAAc;UACxB,yCACKE,KAAK;YACRF,cAAc,EAAEE,KAAK,CAAC3C,iBAAiB,GAAG,IAAI,GAAGwD,aAAW;YAC5DhB,WAAW,EAAEG,KAAK,CAACH,WAAW,CAACY,MAAM,CAACa;cAAA,IAAG7B,MAAK6B,MAAL7B;cAAK,OAAKA,GAAG,MAAKrF,SAAO,aAAPA,SAAO,KAAPA,2BAAO,CAAEqF,GAAG;YAAA;UAAC;QAE5E;QACA;QACA,IAAI2B,kBAAkB,KAAK,CAAC,EAAE;UAC5B,IAAMtB,cAAc,GAAGD,WAAW,CAAC3E,IAAI,CAACqG;YAAA,IAAG9B,MAAK8B,MAAL9B;YAAK,OAAKA,GAAG,MAAKrF,SAAO,aAAPA,SAAO,KAAPA,2BAAO,CAAEqF,GAAG;WAAC;UAC1E,IAAM+B,kBAAkB,GAAG1B,cAAc,IAAIA,cAAc,CAACsB,kBAAkB;UAC9E,IAAII,kBAAkB,KAAK,CAAC,EAAE;YAC5B,yCACKxB,KAAK;cACRH,WAAW,EAAEG,KAAK,CAACH,WAAW,CAACS,GAAG,CAAEM,YAAE;gBAAA,OAAMA,EAAE,CAACnB,GAAG,MAAKrF,SAAO,KAAPA,iBAAO,KAAPA,2BAAO,CAAEqF,GAAG,IAAGrF,SAAO,GAAGwG,EAAG;cAAA;YAAC;UAExF;QACF;QACA,yCACKZ,KAAK;UACRH,WAAW,GACTzF,SAAO,4BACJ4F,KAAK,CAACH,WAAW,CAACY,MAAM,CAACgB;YAAA,IAAGhC,MAAKgC,MAALhC;YAAK,OAAKA,GAAG,KAAKQ,MAAM,CAACzF,OAAO,CAACiF,GAAG;WAAC;QACrE;MAEL;IACA,KAAKS,mBAA2B;MAC9B,yCACKF,KAAK;QACRF,cAAc,EAAEG,MAAM,CAACzF;MAAO;IAElC,KAAK0F,uBAA+B;MAAE;QACpC,yCACKF,KAAK;UACRH,WAAW,EAAEG,KAAK,CAACH,WAAW,CAACS,GAAG,CAAElG,iBAAO;YAAA,OACzC,QAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEqF,GAAG,MAAKQ,MAAM,CAACzF,OAAO,CAACiF,GAAG,GAAGQ,MAAM,CAACzF,OAAO,GAAGJ,OAAQ;UAAA;QAAC;MAEtE;IACA,KAAK8F,iBAAyB;MAAE;QAC9B,IAAM9F,SAAO,GAAG6F,MAAM,CAACzF,OAAO;QAC9B,IAAIwF,KAAK,CAAClD,gBAAgB,EAAE;UAAA;UAC1B,IAAI4D,uBAAuB,CAACV,KAAK,CAAClD,gBAAgB,EAAE1C,SAAO,EAAE4F,KAAK,CAACvC,aAAa,CAAC,EAAE;YACjF,yCACKuC,KAAK;cACRH,WAAW,EAAEc,8BAA8B,CAACX,KAAK,CAACH,WAAW,EAAEzF,SAAO;YAAC;UAE3E;UACA,IAAMyG,aAAW,GAAI,UAAO,aAAPzG,SAAO,uBAAPA,SAAO,CAAEqF,GAAG,iCAAKO,KAAK,CAACF,cAAc,2DAApB4B,uBAAsBjC,GAAG,IAC3DO,KAAK,CAACH,WAAW,CAACG,KAAK,CAACH,WAAW,CAAC,CAAC,CAAC,CAACJ,GAAG,MAAKrF,SAAO,aAAPA,SAAO,KAAPA,2BAAO,CAAEqF,GAAG,IAAG,CAAC,GAAG,CAAC;UACrE;UAAA,EACEO,KAAK,CAACF,cAAc;UACxB,yCACKE,KAAK;YACRH,WAAW,EAAEG,KAAK,CAACH,WAAW,CAACY,MAAM,CAACkB;cAAA,IAAGlC,MAAKkC,MAALlC;cAAK,OAAKA,GAAG,MAAKrF,SAAO,aAAPA,SAAO,KAAPA,2BAAO,CAAEqF,GAAG;aAAC;YACxEK,cAAc,EAAEE,KAAK,CAAC3C,iBAAiB,GAAG,IAAI,GAAGwD;UAAW;QAEhE;QACA,yCACKb,KAAK;UACRH,WAAW,EAAEG,KAAK,CAACH,WAAW,CAACS,GAAG,CAAEM,YAAE,EAAK;YACzC,IAAIA,EAAE,CAACnB,GAAG,MAAKrF,SAAO,KAAPA,iBAAO,KAAPA,2BAAO,CAAEqF,GAAG,CAAE;cAC3B;cACAmB,EAAE,CAACgB,QAAQ,GAAG,IAAI;cAClB,OAAOhB,EAAE;YACX;YACA,OAAOA,EAAE;WACV;QAAC;MAEN;IACA,KAAKV,mBAA2B;MAAE;QAChC,IAAM9F,SAAO,GAAG6F,MAAM,CAACzF,OAAO;QAC9B,IAAIwF,KAAK,CAAClD,gBAAgB,EAAE;UAAA;UAC1B,IAAI4D,uBAAuB,CAACV,KAAK,CAAClD,gBAAgB,EAAE1C,SAAO,EAAE4F,KAAK,CAACvC,aAAa,CAAC,EAAE;YACjF,yCACKuC,KAAK;cACRH,WAAW,EAAEc,8BAA8B,CAACX,KAAK,CAACH,WAAW,EAAEzF,SAAO;YAAC;UAE3E;UACA,IAAMyG,aAAW,GAAI,UAAO,aAAPzG,SAAO,uBAAPA,SAAO,CAAEqF,GAAG,iCAAKO,KAAK,CAACF,cAAc,2DAApB+B,uBAAsBpC,GAAG,IAC3DO,KAAK,CAACH,WAAW,CAACG,KAAK,CAACH,WAAW,CAAC,CAAC,CAAC,CAACJ,GAAG,MAAKrF,SAAO,aAAPA,SAAO,KAAPA,2BAAO,CAAEqF,GAAG,IAAG,CAAC,GAAG,CAAC;UACrE;UAAA,EACEO,KAAK,CAACF,cAAc;UACxB,yCACKE,KAAK;YACRH,WAAW,EAAEG,KAAK,CAACH,WAAW,CAACY,MAAM,CAACqB;cAAA,IAAGrC,MAAKqC,MAALrC;cAAK,OAAKA,GAAG,MAAKrF,SAAO,aAAPA,SAAO,KAAPA,2BAAO,CAAEqF,GAAG;aAAC;YACxEK,cAAc,EAAEE,KAAK,CAAC3C,iBAAiB,GAAG,IAAI,GAAGwD;UAAW;QAEhE;QACA,yCACKb,KAAK;UACRH,WAAW,EAAEG,KAAK,CAACH,WAAW,CAACS,GAAG,CAAEM,YAAE,EAAK;YACzC,IAAIA,EAAE,CAACnB,GAAG,MAAKrF,SAAO,KAAPA,iBAAO,KAAPA,2BAAO,CAAEqF,GAAG,CAAE;cAC3B;cACAmB,EAAE,CAACgB,QAAQ,GAAG,KAAK;cACnB,OAAOhB,EAAE;YACX;YACA,OAAOA,EAAE;WACV;QAAC;MAEN;IACA,KAAKV,uBAA+B;MAAE;QACpC,IAAIF,KAAK,CAAClD,gBAAgB,EAAE;UAC1B,IAAI4D,uBAAuB,CAACV,KAAK,CAAClD,gBAAgB,EAAEmD,MAAM,CAACzF,OAAO,EAAEwF,KAAK,CAACvC,aAAa,CAAC,EAAE;YACxF,yCACKuC,KAAK;cACRH,WAAW,GACTI,MAAM,CAACzF,OAAO,4BACXwF,KAAK,CAACH,WAAW,CAACY,MAAM,CAAErG,iBAAO;gBAAA,OAAK,QAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEqF,GAAG,MAAKQ,MAAM,CAACzF,OAAO,CAACiF,GAAG;cAAA,EAAC;YAC9E;UAEL;UACA,OAAOO,KAAK;QACd;QACA,yCACKA,KAAK;UACRH,WAAW,GACTI,MAAM,CAACzF,OAAO,4BACXwF,KAAK,CAACH,WAAW,CAACY,MAAM,CAAErG,iBAAO;YAAA,OAAK,QAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEqF,GAAG,MAAKQ,MAAM,CAACzF,OAAO,CAACiF,GAAG;UAAA,EAAC;QAC9E;MAEL;IACA,KAAKS,2BAAmC;MACtC,yCACKF,KAAK;QACRvC,aAAa,EAAEwC,MAAM,CAACzF,OAAO,CAACiD,aAAa;QAC3CX,gBAAgB,EAAEmD,MAAM,CAACzF,OAAO,CAACsC;MAAgB;IAErD;MACE,OAAOkD,KAAK;EAAA;AAElB;ACvRA,SAAS+B,mBAAmBA,cAON;EAAA,IANpBC,gBAAgB,GAGHpI,KAHboI,gBAAgB;IAChBC,QAAQ,GAEKrI,KAFbqI,QAAQ;IACRpI,MACaD,KADbC;EACa,IACbG,MAAM,GAEMoC,MAFZpC,MAAM;IACND,wBACYqC,MADZrC;EAEA,OAAOmI,SAAS,CAAC,YAAM;IACrB,IAAIF,gBAAgB,EAAE;MACpBhI,MAAM,CAACK,IAAI,CAAC,iDAAiD,EAAE;QAAE2H;MAAiB,CAAC,CAAC;MACpF,IAAMG,aAAa,GAAGF,QAAQ,KAARA,gBAAQ,uBAARA,QAAQ,CAAE/G,IAAI,CAACd,iBAAO;QAAA,OAAIA,OAAO,CAACqF,GAAG,KAAKuC,gBAAgB;MAAA,EAAC;MACjF,IAAIG,aAAa,EAAE;QACjBpI,qBAAqB,CAAC;UACpBO,IAAI,EAAE8H,mBAAsC;UAC5C5H,OAAO,EAAE2H;QACX,CAAC,CAAC;MACJ,CAAC,MAAM;QAAA;QACLnI,MAAM,CAACK,IAAI,CAAC,2DAA2D,EAAE;UAAE2H;QAAiB,CAAC,CAAC;QAC9FnI,GAAG,aAAHA,GAAG,4CAAHA,GAAG,CAAEoC,YAAY,sDAAjBoG,kBAAmBC,UAAU,CAACN,gBAAgB,CAAC,CAC5CpE,IAAI,CAAExD,iBAAO,EAAK;UACjBL,qBAAqB,CAAC;YACpBO,IAAI,EAAE8H,sBAAyC;YAC/C5H,OAAO,EAAE,CAACJ,OAAO;UACnB,CAAC,CAAC;UACFL,qBAAqB,CAAC;YACpBO,IAAI,EAAE8H,mBAAsC;YAC5C5H,OAAO,EAAEJ;UACX,CAAC,CAAC;QACJ,CAAC,CAAC,CACDkE,KAAK,CAAC,YAAM;UACXtE,MAAM,CAACwD,OAAO,CAAC,+CAA+C,CAAC;QACjE,CAAC,CAAC;MACN;IACF;EACF,CAAC,EAAE,CAACwE,gBAAgB,CAAC,CAAC;AACxB;ACkEA,IAAMO,kBAAkB,gBAAGC,cAAK,CAACC,aAAa,CAAsC;EAClFC,kBAAkB,EAAE,IAAI;EACxBC,gBAAgB,EAAE,IAAI;EACtBC,qBAAqB,EAAE,IAAI;EAC3BC,aAAa,EAAE,IAAI;EACnBC,oBAAoB,EAAE,IAAI;EAC1B3F,eAAe,EAAE,IAAI;EACrB4F,OAAO,EAAE,EAAE;EACXC,SAAS,EAAE,IAAI;EACfrD,WAAW,EAAE,KAAK;EAClBC,OAAO,EAAE,KAAK;EACdC,WAAW,EAAE,EAAE;EACfC,cAAc,EAAE,IAAI;EACpBhD,gBAAgB,EAAE,EAAE;EACpBW,aAAa,EAAE,IAAI;EACnB1D,qBAAqB,EAAE,IAAI;EAC3BkJ,aAAa,EAAE,IAAI;EACnBC,cAAc,EAAE;AAClB,CAAC,CAAC;AAEIC,uBAAuD,GAAIC,SAA3DD,mBAAuD,CAAIC,KAA+B,EAAK;EAAA;EACnG;EACA,IACEC,QAAQ,GAaND,KAAK,CAbPC,QAAQ;IACRL,SAAS,GAYPI,KAAK,CAZPJ,SAAS;IACTN,kBAAkB,GAWhBU,KAAK,CAXPV,kBAAkB;IAClBC,gBAAgB,GAUdS,KAAK,CAVPT,gBAAgB;IAChBI,OAAO,GASLK,KAAK,CATPL,OAAO;IACPD,oBAAoB,GAQlBM,KAAK,CARPN,oBAAoB;IACpBD,aAAa,GAOXO,KAAK,CAPPP,aAAa;IACbD,qBAAqB,GAMnBQ,KAAK,CANPR,qBAAqB;IACrBxF,eAAe,GAKbgG,KAAK,CALPhG,eAAe;IACfkG,kBAAkB,GAIhBF,KAAK,CAJPE,kBAAkB;IAClBtB,gBAAgB,GAGdoB,KAAK,CAHPpB,gBAAgB;IAAA,wBAGdoB,KAAK,CAFPG,wBAAwB;IAAxBA,wBAAwB,sCAAG,IAAI;IAAA,wBAE7BH,KAAK,CADPI,6BAA6B;IAA7BA,6BAA6B,sCAAG;EAElC;EACA;EACA,IAAMnG,iBAAiB,GAAG,MAAK,KAAL+F,aAAK,KAALA,uBAAK,CAAE/F,iBAAiB,KAAI,CAAC,CAAC2E,gBAAgB;EACxE,IAAM7E,eAAe,GAAG,MAAK,aAALiG,KAAK,uBAALA,KAAK,CAAEjG,eAAe,KAAIsG,IAAI;EACtD;EACA,IAAMC,WAAW,GAAGC,uBAAuB,EAAE;EAC7C,IAAQC,MAAM,GAAaF,WAAW,CAA9BE,MAAM;IAAEC,SAAWH,WAAW,CAAtBG;EAChB,IAAQC,WAAaD,MAAM,CAAnBC;EACR,IAAQhF,MAAM,GAAmC8E,MAAM,CAA/C9E,MAAM;IAAE9E,MAAM,GAA2B4J,MAAM,CAAvC5J,MAAM;IAAE+J,uBAAyBH,MAAM,CAA/BG;EACxB,IACEzG,wBAAwB,GAItBsG,MAAM,CAJRtG,wBAAwB;IAAA,wBAItBsG,MAAM,CAHRrG,sBAAsB;IAAtBA,sBAAsB,sCAAG,KAAK;IAAA,wBAG5BqG,MAAM,CAFRI,qCAAqC;IAArCA,qCAAqC,sCAAG,KAAK;IAAA,wBAE3CJ,MAAM,CADRK,0CAA0C;IAA1CA,0CAA0C,sCAAG;EAE/C,IAAMpK,GAAG,GAAGiK,QAAQ,aAARA,QAAQ,KAARA,0BAAQ,CAAEjK,GAAwB;;EAE9C;EACA;EACA,IAAMqK,6BAA6B,GAAGxB,kBAAkB,KAAIkB,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAElB,kBAAkB;EACtF,IAAMyB,wBAAwB,GAAGP,MAAM,aAANA,MAAM,KAANA,wBAAM,CAAEQ,iBAAiB;EAC1D,IAAMC,iBAAiB,GAAG1B,gBAAgB,KAAIiB,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEjB,gBAAgB;EAEtE,IAAMtG,0BAA0B,GAAG0G,OAAO,aAAPA,OAAO,KAAPA,yBAAO,CAAEjG,gBAAgB;EAC5D,IAAMwH,kCAAkC,GAAGvB,OAAO,aAAPA,OAAO,KAAPA,yBAAO,CAAEwB,wBAAwB;EAE5E,IAAMC,aAAa,GAAGV,QAAQ,aAARA,QAAQ,KAARA,0BAAQ,CAAEnE,WAAW;EAE3C,kBAAkD8E,UAAU,CAC1DC,OAAmB,EACnBC,uBAAuB,CACmC;IAAA;IAHrDC,gBAAgB;IAAE7K,qBAAqB;EAI9C,IAAQ+F,iBAAmB8E,gBAAgB,CAAnC9E;EAER,gBAA0C+E,QAAQ,CAAiC,IAAI,CAAC;IAAA;IAAjF5B,aAAa;IAAE/F,gBAAgB;EACtC,iBAA4C2H,QAAQ,CAAsB,EAAE,CAAC;IAAA;IAAtE3B,cAAc;IAAE4B,iBAAiB;EAExC5C,SAAS,CAAC,YAAM;IACd,IAAMxD,UAAU,GAAGG,aAAa,CAACC,MAAM,EAAE/E,qBAAqB,CAAC;IAC/D,OAAO,YAAM;MACX0E,mBAAmB,CAACC,UAAU,CAAC;KAChC;EACH,CAAC,EAAE,CAAC8F,aAAa,CAAC,CAAC;EAEnBtC,SAAS,CAAC,YAAM;IACd,IAAMpI,mBAAmB,GAAGiL,MAAM,EAAE;IACpC,IAAIP,aAAa,EAAE;MACjBxK,MAAM,CAACK,IAAI,CAAC,oCAAoC,CAAC;MACjD2C,gBAAgB,CAAC;QACfnD,GAAG,EAAHA,GAAG;QACHC,mBAAmB,EAAnBA,mBAAmB;QACnBC,qBAAqB,EAArBA,qBAAqB;QACrBmD,gBAAgB,EAAhBA,gBAAgB;QAChBC,eAAe,EAAfA,eAAe;QACfd,0BAA0B,EAA1BA,0BAA0B;QAC1BrC,MAAM,EAANA,MAAM;QACNoD,eAAe,EAAfA,eAAe;QACfC,iBAAiB,EAAjBA,iBAAiB;QACjBC,wBAAwB,EAAxBA,wBAAwB;QACxBC;MACF,CAAC,CAAC;IACJ,CAAC,MAAM;MAAA;MACLvD,MAAM,CAACK,IAAI,CAAC,uCAAuC,CAAC;MACpD;MACA,IAAIR,GAAG,aAAHA,GAAG,oCAAHA,GAAG,CAAEoC,YAAY,8CAAjBoG,kBAAmB2C,yBAAyB,EAAE;QAChDnL,GAAG,CAACoC,YAAY,CAAC+I,yBAAyB,CAAClL,mBAAmB,CAAC;MACjE;MACA;MACAoD,gBAAgB,CAAC,IAAI,CAAC;MACtB;MACAnD,qBAAqB,CAAC;QACpBO,IAAI,EAAE2K,kBAAqC;QAC3CzK,OAAO,EAAE;MACX,CAAC,CAAC;IACJ;IACA,OAAO,YAAM;MAAA;MACXR,MAAM,CAACK,IAAI,CAAC,uCAAuC,CAAC;MACpD,IAAIR,GAAG,aAAHA,GAAG,qCAAHA,GAAG,CAAEoC,YAAY,+CAAjBiJ,mBAAmBF,yBAAyB,EAAE;QAAA;QAChDnL,GAAG,aAAHA,GAAG,6CAAHA,GAAG,CAAEoC,YAAY,uDAAjBkJ,mBAAmBH,yBAAyB,CAAClL,mBAAmB,CAAC;MACnE;KACD;GACF,EAAE,CAAC0K,aAAa,EAAEnI,0BAA0B,EAAEe,eAAe,CAAC,CAAC;EAEhE8E,SAAS,CAAC,YAAM;IAAA;IACd,IAAIkD,eAAe,GAAG,EAAE;IACxB,IAAIvL,GAAG,aAAHA,GAAG,qCAAHA,GAAG,CAAEoC,YAAY,+CAAjBoJ,mBAAmBnJ,sBAAsB,EAAE;MAAA;MAC7CkJ,eAAe,GAAGL,MAAM,EAAE;MAC1B,IAAMO,OAAO,GAAG,IAAIpL,mBAAmB,CAAC;QACtCqL,qBAAqB,EAAGnL,sCAAO,EAAK;UAAA;UAClC,IAAMoL,iBAAiB,GAAGpL,OAAO,KAAPA,eAAO,gDAAPA,OAAO,CAAEqL,cAAc,EAAE,wCAAzBC,wCAA2BtF,MAAM;UAC3D,IAAMvC,WAAW,GAAGqF,cAAc,CAACzC,MAAM,CAACG,YAAE;YAAA,OAAIA,EAAE,CAACnB,GAAG,KAAKrF,OAAO,CAACqF,GAAG;UAAA,EAAC;UACvE,IAAI+F,iBAAiB,GAAG,CAAC,EAAE;YACzBV,iBAAiB,8BAAKjH,WAAW,IAAEzD,OAAO,GAAE;UAC9C,CAAC,MAAM;YACL0K,iBAAiB,CAACjH,WAAW,CAAC;UAChC;SACD;QACD8H,2BAA2BA,uCAACvL,OAAO,EAAE;UACnCL,qBAAqB,CAAC;YACpBO,IAAI,EAAE2K,uBAA0C;YAChDzK,OAAO,EAAEJ;UACX,CAAC,CAAC;SACH;QACDwL,gCAAgCA,4CAACxL,OAAO,EAAE;UACxCL,qBAAqB,CAAC;YACpBO,IAAI,EAAE2K,uBAA0C;YAChDzK,OAAO,EAAEJ;UACX,CAAC,CAAC;SACH;QACDuB,gBAAgBA,4BAACvB,OAAO,EAAE;UACxBL,qBAAqB,CAAC;YACpBO,IAAI,EAAE2K,uBAA0C;YAChDzK,OAAO,EAAEJ;UACX,CAAC,CAAC;UACFP,GAAG,CAACoC,YAAY,CAAC4J,sBAAsB,CAACzL,OAAO,CAACqF,GAAG,CAAC,CACjD7B,IAAI,CAAEgD,YAAE,EAAK;YACZ7G,qBAAqB,CAAC;cACpBO,IAAI,EAAE2K,uBAA0C;cAChDzK,OAAO,EAAEoG;YACX,CAAC,CAAC;UACJ,CAAC,CAAC;SACL;QACDkF,iBAAiBA,6BAAC1L,OAAO,EAAE;UACzBL,qBAAqB,CAAC;YACpBO,IAAI,EAAE2K,uBAA0C;YAChDzK,OAAO,EAAEJ;UACX,CAAC,CAAC;UACFP,GAAG,CAACoC,YAAY,CAAC4J,sBAAsB,CAACzL,OAAO,CAACqF,GAAG,CAAC,CACjD7B,IAAI,CAAEgD,YAAE,EAAK;YACZ7G,qBAAqB,CAAC;cACpBO,IAAI,EAAE2K,uBAA0C;cAChDzK,OAAO,EAAEoG;YACX,CAAC,CAAC;UACJ,CAAC,CAAC;QACN;MACF,CAAC,CAAC;MACF/G,GAAG,aAAHA,GAAG,6CAAHA,GAAG,CAAEoC,YAAY,uDAAjB8J,mBAAmB7J,sBAAsB,CAACkJ,eAAe,EAAEE,OAAO,CAAC;IACrE;IACA,OAAO,YAAM;MAAA;MACX,IAAIzL,GAAG,KAAHA,WAAG,qCAAHA,GAAG,CAAEoC,YAAY,+CAAjB+J,mBAAmBhB,yBAAyB,IAAII,eAAe,KAAK,EAAE,EAAE;QAC1EvL,GAAG,CAACoC,YAAY,CAAC+I,yBAAyB,CAACI,eAAe,CAAC;MAC7D;KACD;EACH,CAAC,EAAE,CAACvL,GAAG,aAAHA,GAAG,2CAAHA,GAAG,CAAEmB,WAAW,qDAAhBiL,iBAAkB7K,MAAM,CAAC,CAAC;EAE9B,IAAM8K,QAAQ,GAAGC,OAAO,CAAC,YAAM;IAC7B,OAAO;MACL5B,wBAAwB,EAAED,kCAAkC;MAC5DxH,gBAAgB,EAAET;KACnB;EACH,CAAC,EAAE,CACDiI,kCAAkC,EAClCjI,0BAA0B,CAC3B,CAAC;EAEF,IAAQwD,cAAgB+E,gBAAgB,CAAhC/E;EACR,IAAMuG,cAAc,GAAIhJ,eAAe,IAAI,OAAOA,eAAe,KAAK,UAAU,GAC5EA,eAAe,CAACyC,WAAW,CAAC,GAC5BA,WAAW;EAEf,IAAIuG,cAAc,CAAChG,MAAM,KAAKP,WAAW,CAACO,MAAM,EAAE;IAChD,IAAM5C,OAAO,sHAC0B;IACvC;IACA6I,OAAO,CAACC,IAAI,CAAC9I,OAAO,EAAE;MAAE+I,MAAM,EAAE1G,WAAW;MAAE2G,KAAK,EAAEJ;IAAe,CAAC,CAAC;IACrEpM,MAAM,CAACwD,OAAO,CAACA,OAAO,EAAE;MAAE+I,MAAM,EAAE1G,WAAW;MAAE2G,KAAK,EAAEJ;IAAe,CAAC,CAAC;EACzE;;EAEA;EACAlE,SAAS,CAAC,YAAM;IACd,IAAI,CAACrI,GAAG,IAAI,CAACA,GAAG,CAACoC,YAAY,IAAI,CAAC6D,cAAc,IAAI,EAACA,cAAc,KAAdA,sBAAc,eAAdA,cAAc,CAAEL,GAAG,CAAE;MACxE;IACF;IACA5F,GAAG,CAACoC,YAAY,CAACqG,UAAU,CAACxC,cAAc,CAACL,GAAG,CAAC,CAAC7B,IAAI,CAAE3B,sBAAY,EAAK;MACrE,IAAIA,YAAY,EAAE;QAChBkB,eAAe,CAAClB,YAAY,CAAC;MAC/B,CAAC,MAAM;QACLkB,eAAe,CAAC,IAAI,CAAC;MACvB;IACF,CAAC,CAAC;GACH,EAAE,CAAC2C,cAAc,KAAdA,sBAAc,uBAAdA,cAAc,CAAEL,GAAG,CAAC,CAAC;;EAEzB;EACAsC,mBAAmB,CAAC;IAClBC,gBAAgB,EAAhBA,gBAAgB;IAChBC,QAAQ,EAAEmE,cAAc;IACxBvM;EACF,CAAC,EAAE;IACDG,MAAM,EAANA,MAAM;IACND;EACF,CAAC,CAAC;EAEF,oBACEyI,6BAACD,kBAAkB,CAACkE,QAAQ;IAACC,KAAK;MAChC1D,SAAS,EAATA,SAAS;MACTN,kBAAkB,EAAlBA,kBAAkB;MAClBK,OAAO,EAAEmD,QAAQ;MACjBpD,oBAAoB,EAApBA,oBAAoB;MACpBD,aAAa,EAAbA,aAAa;MACbD,qBAAqB,EAArBA,qBAAqB;MACrBU,kBAAkB,EAAlBA,kBAAkB;MAClBnG,eAAe,EAAfA,eAAe;MACfC,eAAe,EAAfA,eAAe;MACfuF,gBAAgB,EAAE0B,iBAAiB;MACnCtK,qBAAqB,EAArBA,qBAAqB;MACrBkJ;IAAa,GACV2B,gBAAgB;MACnB/E,WAAW,EAAEuG,cAAc;MAC3BlD,cAAc,EAAdA,cAAc;MACdK,wBAAwB,EAAGA,wBAAwB,KAAK,IAAI,GAAIA,wBAAwB,GAAGS,qCAAqC;MAChIR,6BAA6B,EAAGA,6BAA6B,KAAK,IAAI,GAAIA,6BAA6B,GAAGS;IAA0C;EACpJ,gBACAzB,6BAACmE,mBAAmB;IAClBjE,kBAAkB,EAAEwB,6BAA8B;IAClDE,iBAAiB,EAAED,wBAAyB;IAC5CJ,oBAAoB,EAAEA;GAEtBvB;IAAKQ,SAAS,kCAA2BA,SAAU;GAChDK,UAAQ,CACL,CACc,CACM;AAElC;AAEA,SAASuD,qBAAqBA,GAAiC;EAC7D,IAAMC,OAAqC,GAAGC,UAAU,CAACvE,kBAAkB,CAAC;EAC5E,OAAOsE,OAAO;AAChB","names":["RESET_CHANNEL_LIST","CREATE_CHANNEL","USER_INVITED","LEAVE_CHANNEL_SUCCESS","SET_CURRENT_CHANNEL","FETCH_CHANNELS_START","FETCH_CHANNELS_SUCCESS","FETCH_CHANNELS_FAILURE","INIT_CHANNELS_START","INIT_CHANNELS_SUCCESS","INIT_CHANNELS_FAILURE","ON_USER_JOINED","ON_CHANNEL_DELETED","ON_LAST_MESSAGE_UPDATED","ON_USER_LEFT","ON_CHANNEL_CHANGED","ON_CHANNEL_ARCHIVED","ON_CHANNEL_FROZEN","ON_CHANNEL_UNFROZEN","ON_READ_RECEIPT_UPDATED","ON_DELIVERY_RECEIPT_UPDATED","CHANNEL_REPLACED_TO_TOP","CHANNEL_LIST_PARAMS_UPDATED","DELIVERY_RECIPT","createEventHandler","_ref","sdk","sdkChannelHandlerId","channelListDispatcher","logger","ChannelHandler","GroupChannelHandler","onChannelChanged","channel","info","type","channelActions","payload","onChannelDeleted","channelUrl","onUserJoined","lastMessage","onUserReceivedInvitation","inviter","invitees","currentUser","isInvited","find","user","userId","onUserBanned","isMe","onUserLeft","leftUser","onReadStatus","onDeliveryReceiptUpdated","onMessageUpdated","message","isEqual","onChannelHidden","onChannelFrozen","onChannelUnfrozen","groupChannel","addGroupChannelHandler","createChannelListQuery","_ref2","userFilledChannelListQuery","param","includeEmpty","limit","order","Object","keys","forEach","key","channelListQuery","createMyGroupChannelListQuery","setupChannelList","_ref3","setChannelSource","onChannelSelect","sortChannelList","disableAutoSelect","markAsDeliveredScheduler","disableMarkAsDelivered","warning","currentUserId","hasNext","next","then","channelList","sortedChannelList","canSetMarkAsDelivered","appInfo","_sdk$appInfo","premiumFeatureList","_sdk$appInfo$premiumF","feature","push","catch","err","error","pubSubHandleRemover","subscriber","s","remove","pubSubHandler","pubSub","Map","set","topics","subscribe","msg","UPDATE_USER_MESSAGE","updatedChannel","_updatedChannel$lastM","messageId","LEAVE_CHANNEL","url","SEND_MESSAGE_START","initialized","loading","allChannels","currentChannel","reducer","state","action","actions","initialState","length","currentChannels","map","c","filteredChannels","filter","filterChannelListParams","getChannelsWithUpsertedChannel","ch","nextChannel","_state$currentChannel","_state$currentChannel2","_state$currentChannel3","_state$currentChannel4","_ref4","_state$currentChannel5","unreadMessageCount","_state$currentChannel6","_ref5","_ref6","currentUnreadCount","_ref7","_state$currentChannel7","_ref8","isFrozen","_state$currentChannel8","_ref9","useActiveChannelUrl","activeChannelUrl","channels","useEffect","activeChannel","messageActionTypes","_sdk$groupChannel","getChannel","ChannelListContext","React","createContext","disableUserProfile","allowProfileEdit","onBeforeCreateChannel","onThemeChange","onProfileEditSuccess","queries","className","channelSource","typingChannels","ChannelListProvider","props","children","overrideInviteUser","isTypingIndicatorEnabled","isMessageReceiptStatusEnabled","noop","globalStore","useSendbirdStateContext","config","stores","sdkStore","onUserProfileMessage","isTypingIndicatorEnabledOnChannelList","isMessageReceiptStatusEnabledOnChannelList","userDefinedDisableUserProfile","userDefinedRenderProfile","renderUserProfile","enableEditProfile","userFilledApplicationUserListQuery","applicationUserListQuery","sdkIntialized","useReducer","channelListReducers","channelListInitialState","channelListStore","useState","setTypingChannels","uuidv4","removeGroupChannelHandler","channelListActions","_sdk$groupChannel2","_sdk$groupChannel3","typingHandlerId","_sdk$groupChannel4","handler","onTypingStatusUpdated","typingMemberCount","getTypingUsers","_channel$getTypingUse","onUnreadMemberStatusUpdated","onUndeliveredMemberStatusUpdated","getChannelWithoutCache","onMentionReceived","_sdk$groupChannel5","_sdk$groupChannel6","_sdk$currentUser","queries_","useMemo","sortedChannels","console","warn","before","after","Provider","value","UserProfileProvider","useChannelListContext","context","useContext"],"sources":["C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\ChannelList\\dux\\actionTypes.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\ChannelList\\utils.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\ChannelList\\dux\\initialState.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\ChannelList\\dux\\reducers.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\ChannelList\\context\\hooks\\useActiveChannelUrl.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\ChannelList\\context\\ChannelListProvider.tsx"],"sourcesContent":["export const RESET_CHANNEL_LIST = 'RESET_CHANNEL_LIST';\nexport const CREATE_CHANNEL = 'CREATE_CHANNEL';\nexport const USER_INVITED = 'USER_INVITED';\nexport const UNLOAD_CHANNELS = 'UNLOAD_CHANNELS';\nexport const SET_CHANNEL_LOADING = 'SET_CHANNEL_LOADING';\nexport const LEAVE_CHANNEL_SUCCESS = 'LEAVE_CHANNEL_SUCCESS';\n\nexport const SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\n\nexport const FETCH_CHANNELS_START = 'FETCH_CHANNELS_START';\nexport const FETCH_CHANNELS_SUCCESS = 'FETCH_CHANNELS_SUCCESS';\nexport const FETCH_CHANNELS_FAILURE = 'FETCH_CHANNELS_FAILURE';\n\nexport const INIT_CHANNELS_START = 'INIT_CHANNELS_START';\nexport const INIT_CHANNELS_SUCCESS = 'INIT_CHANNELS_SUCCESS';\nexport const INIT_CHANNELS_FAILURE = 'INIT_CHANNELS_FAILURE';\n\nexport const INVITE_MEMBERS_SUCESS = 'INVITE_MEMBERS_SUCESS';\n\nexport const ON_USER_JOINED = 'ON_USER_JOINED';\nexport const ON_CHANNEL_DELETED = 'ON_CHANNEL_DELETED';\nexport const ON_LAST_MESSAGE_UPDATED = 'ON_LAST_MESSAGE_UPDATED';\nexport const ON_USER_LEFT = 'ON_USER_LEFT';\nexport const ON_CHANNEL_CHANGED = 'ON_CHANNEL_CHANGED';\nexport const ON_CHANNEL_ARCHIVED = 'ON_CHANNEL_ARCHIVED';\nexport const ON_CHANNEL_FROZEN = 'ON_CHANNEL_FROZEN';\nexport const ON_CHANNEL_UNFROZEN = 'ON_CHANNEL_UNFROZEN';\n\nexport const ON_READ_RECEIPT_UPDATED = 'ON_READ_RECEIPT_UPDATED';\nexport const ON_DELIVERY_RECEIPT_UPDATED = 'ON_DELIVERY_RECEIPT_UPDATED';\n\nexport const CHANNEL_REPLACED_TO_TOP = 'CHANNEL_REPLACED_TO_TOP';\nexport const CHANNEL_LIST_PARAMS_UPDATED = 'CHANNEL_LIST_PARAMS_UPDATED';\n","import { GroupChannelHandler } from '@sendbird/chat/groupChannel';\nimport * as channelActions from './dux/actionTypes';\nimport topics from '../../lib/pubSub/topics';\n\nconst DELIVERY_RECIPT = 'delivery_receipt';\n\nconst createEventHandler = ({\n  sdk,\n  sdkChannelHandlerId,\n  channelListDispatcher,\n  logger,\n}) => {\n  const ChannelHandler = new GroupChannelHandler({\n    onChannelChanged: (channel) => {\n      logger.info('ChannelList: onChannelChanged', channel);\n      channelListDispatcher({\n        type: channelActions.ON_CHANNEL_CHANGED,\n        payload: channel,\n      });\n    },\n    onChannelDeleted: (channelUrl) => {\n      logger.info('ChannelList: onChannelDeleted', channelUrl);\n      channelListDispatcher({\n        type: channelActions.ON_CHANNEL_DELETED,\n        payload: channelUrl,\n      });\n    },\n    onUserJoined: (channel) => {\n      logger.info('ChannelList: onUserJoined', channel);\n      if (channel?.lastMessage) {\n        channelListDispatcher({\n          type: channelActions.ON_USER_JOINED,\n          payload: channel,\n        });\n      }\n    },\n    onUserReceivedInvitation: (channel, inviter, invitees) => {\n      logger.info('ChannelList: onUserReceivedInvitation', { channel, inviter, invitees });\n      const { currentUser } = sdk;\n      const isInvited = invitees.find((user) => user?.userId === currentUser?.userId);\n      // The newly created channel should be displayed only when there's a message\n      if (isInvited && channel?.lastMessage) {\n        channelListDispatcher({\n          type: channelActions.USER_INVITED,\n          payload: channel,\n        });\n      }\n    },\n    onUserBanned: (channel, user) => {\n      const { currentUser } = sdk;\n      logger.info('Channel: onUserBanned', channel);\n      if (user.userId === currentUser.userId) {\n        channelListDispatcher({\n          type: channelActions.ON_USER_LEFT,\n          payload: {\n            channel,\n            isMe: true,\n          },\n        });\n      } else {\n        channelListDispatcher({\n          type: channelActions.ON_USER_LEFT,\n          payload: {\n            channel,\n            isMe: false,\n          },\n        });\n      }\n    },\n    onUserLeft: (channel, leftUser) => {\n      const { currentUser } = sdk;\n      const isMe = (currentUser.userId === leftUser.userId);\n      logger.info('ChannelList: onUserLeft', channel);\n      channelListDispatcher({\n        type: channelActions.ON_USER_LEFT,\n        payload: {\n          channel,\n          isMe,\n        },\n      });\n    },\n\n    onReadStatus: (channel) => {\n      logger.info('ChannelList: onReadStatus', channel);\n      channelListDispatcher({\n        type: channelActions.ON_READ_RECEIPT_UPDATED,\n        payload: channel,\n      });\n    },\n\n    onDeliveryReceiptUpdated: (channel) => {\n      logger.info('ChannelList: onDeliveryReceiptUpdated', channel);\n      if (channel?.lastMessage) {\n        channelListDispatcher({\n          type: channelActions.ON_DELIVERY_RECEIPT_UPDATED,\n          payload: channel,\n        });\n      }\n    },\n\n    onMessageUpdated: (channel, message) => {\n      if (channel?.lastMessage.isEqual(message)) {\n        logger.info('ChannelList: onMessageUpdated', channel);\n        channelListDispatcher({\n          type: channelActions.ON_LAST_MESSAGE_UPDATED,\n          payload: channel,\n        });\n      }\n    },\n\n    onChannelHidden: (channel) => {\n      logger.info('ChannelList: onChannelHidden', channel);\n      channelListDispatcher({\n        type: channelActions.ON_CHANNEL_ARCHIVED,\n        payload: channel,\n      });\n    },\n\n    onChannelFrozen: (channel) => {\n      logger.info('ChannelList: onChannelFrozen', channel);\n      channelListDispatcher({\n        type: channelActions.ON_CHANNEL_FROZEN,\n        payload: channel,\n      });\n    },\n\n    onChannelUnfrozen: (channel) => {\n      logger.info('ChannelList: onChannelUnfrozen', channel);\n      channelListDispatcher({\n        type: channelActions.ON_CHANNEL_UNFROZEN,\n        payload: channel,\n      });\n    },\n  });\n\n  logger.info('ChannelList: Added channelHandler');\n  sdk.groupChannel.addGroupChannelHandler(sdkChannelHandlerId, ChannelHandler);\n};\n\nconst createChannelListQuery = ({ sdk, userFilledChannelListQuery = {} }) => {\n  const param = {};\n  param.includeEmpty = false;\n  param.limit = 20; // The value of pagination limit could be set up to 100.\n  param.order = 'latest_last_message'; // 'chronological', 'latest_last_message', 'channel_name_alphabetical', and 'metadata_value_alphabetical'\n\n  if (userFilledChannelListQuery) {\n    Object.keys(userFilledChannelListQuery).forEach((key) => {\n      param[key] = userFilledChannelListQuery[key];\n    });\n  }\n\n  const channelListQuery = sdk.groupChannel.createMyGroupChannelListQuery(param);\n\n  return channelListQuery;\n};\n\n/**\n * Setup event listener\n * create channel source query\n * addloading screen\n */\nfunction setupChannelList({\n  sdk,\n  sdkChannelHandlerId,\n  channelListDispatcher,\n  setChannelSource,\n  onChannelSelect,\n  userFilledChannelListQuery,\n  logger,\n  sortChannelList,\n  disableAutoSelect,\n  markAsDeliveredScheduler,\n  disableMarkAsDelivered,\n}) {\n  if (sdk?.groupChannel) {\n    createEventHandler({\n      sdk,\n      channelListDispatcher,\n      sdkChannelHandlerId,\n      logger,\n    });\n  } else {\n    logger.warning('ChannelList - createEventHandler: sdk or sdk.ChannelHandler does not exist', sdk);\n  }\n\n  logger.info('ChannelList - creating query', { userFilledChannelListQuery });\n  const channelListQuery = createChannelListQuery({ sdk, userFilledChannelListQuery });\n  logger.info('ChannelList - created query', channelListQuery);\n  setChannelSource(channelListQuery);\n\n  channelListDispatcher({\n    type: channelActions.INIT_CHANNELS_START,\n  });\n\n  if (userFilledChannelListQuery) {\n    logger.info('ChannelList - setting up channelListQuery', channelListQuery);\n    channelListDispatcher({\n      type: channelActions.CHANNEL_LIST_PARAMS_UPDATED,\n      payload: {\n        channelListQuery,\n        currentUserId: sdk && sdk.currentUser && sdk.currentUser.userId,\n      },\n    });\n  }\n\n  logger.info('ChannelList - fetching channels');\n  if (channelListQuery.hasNext) {\n    channelListQuery.next().then((channelList) => {\n      logger.info('ChannelList - fetched channels', channelList);\n      // select first channel\n      logger.info('ChannelList - highlight channel', channelList[0]);\n      let sortedChannelList = channelList;\n      if (sortChannelList && typeof sortChannelList === 'function') {\n        sortedChannelList = sortChannelList(channelList);\n        logger.info('ChannelList - channel list sorted', sortedChannelList);\n      }\n      if (!disableAutoSelect) {\n        onChannelSelect(sortedChannelList[0]);\n      }\n      channelListDispatcher({\n        type: channelActions.INIT_CHANNELS_SUCCESS,\n        payload: { channelList: sortedChannelList, disableAutoSelect },\n      });\n      const canSetMarkAsDelivered = sdk?.appInfo?.premiumFeatureList\n        ?.find((feature) => (feature === DELIVERY_RECIPT));\n\n      if (canSetMarkAsDelivered && !disableMarkAsDelivered) {\n        sortedChannelList.forEach((channel) => {\n          markAsDeliveredScheduler.push(channel);\n        });\n      }\n    }).catch((err) => {\n      if (err) {\n        logger.error('ChannelList - couldnt fetch channels', err);\n        channelListDispatcher({\n          type: channelActions.INIT_CHANNELS_FAILURE,\n        });\n      }\n    });\n  } else {\n    logger.info('ChannelList - there are no more channels');\n  }\n}\n\nexport const pubSubHandleRemover = (subscriber) => {\n  subscriber.forEach((s) => {\n    try {\n      s.remove();\n    } catch {\n      //\n    }\n  });\n};\n\nexport const pubSubHandler = (pubSub, channelListDispatcher) => {\n  const subscriber = new Map();\n  if (!pubSub) return subscriber;\n  subscriber.set(topics.CREATE_CHANNEL, pubSub.subscribe(topics.CREATE_CHANNEL, (msg) => {\n    const { channel } = msg;\n    channelListDispatcher({\n      type: 'CREATE_CHANNEL',\n      payload: channel,\n    });\n  }));\n\n  subscriber.set(topics.UPDATE_USER_MESSAGE, pubSub.subscribe(topics.UPDATE_USER_MESSAGE, (msg) => {\n    const { channel, message } = msg;\n    const updatedChannel = channel;\n    if (updatedChannel?.lastMessage?.messageId === message.messageId) {\n      updatedChannel.lastMessage = message;\n    }\n    if (channel) {\n      channelListDispatcher({\n        type: channelActions.ON_LAST_MESSAGE_UPDATED,\n        payload: updatedChannel,\n      });\n    }\n  }));\n\n  subscriber.set(topics.LEAVE_CHANNEL, pubSub.subscribe(topics.LEAVE_CHANNEL, (msg) => {\n    const { channel } = msg;\n    channelListDispatcher({\n      type: channelActions.LEAVE_CHANNEL_SUCCESS,\n      payload: channel?.url,\n    });\n  }));\n\n  subscriber.set(topics.SEND_MESSAGE_START, pubSub.subscribe(topics.SEND_MESSAGE_START, (msg) => {\n    const { channel } = msg;\n    channelListDispatcher({\n      type: channelActions.CHANNEL_REPLACED_TO_TOP,\n      payload: channel,\n    });\n  }));\n\n  return subscriber;\n};\n\nexport default setupChannelList;\n","export default {\n  // we might not need this initialized state -> should remove\n  initialized: false,\n  loading: true,\n  allChannels: [],\n  currentChannel: null,\n  channelListQuery: null,\n  currentUserId: '',\n  disableAutoSelect: false,\n};\n","import { filterChannelListParams, getChannelsWithUpsertedChannel } from '../../../utils';\nimport * as actions from './actionTypes';\nimport initialState from './initialState';\n\nexport default function reducer(state, action) {\n  switch (action.type) {\n    case actions.INIT_CHANNELS_START:\n      return {\n        ...state,\n        loading: true,\n      };\n    case actions.RESET_CHANNEL_LIST:\n      return initialState;\n    case actions.INIT_CHANNELS_SUCCESS: {\n      const { channelList, disableAutoSelect } = action.payload;\n      return {\n        ...state,\n        initialized: true,\n        loading: false,\n        allChannels: channelList,\n        disableAutoSelect,\n        currentChannel: (\n          !disableAutoSelect\n          && channelList\n          && channelList.length\n          && channelList.length > 0\n        )\n          ? channelList[0]\n          : null,\n      };\n    }\n    case actions.FETCH_CHANNELS_SUCCESS: {\n      const currentChannels = state.allChannels.map((c) => c.url);\n      const filteredChannels = action.payload.filter(\n        ({ url }) => !(currentChannels.find((c) => c === url)),\n      );\n      return {\n        ...state,\n        allChannels: [\n          ...state.allChannels,\n          ...filteredChannels,\n        ],\n      };\n    }\n    case actions.USER_INVITED: {\n      const channel = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel),\n          };\n        }\n        return {\n          ...state,\n          currentChannel: channel,\n        };\n      }\n      return {\n        ...state,\n        allChannels: [channel, ...state.allChannels.filter((ch) => ch.url !== channel?.url)],\n      };\n    }\n    case actions.CREATE_CHANNEL: {\n      const channel = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel),\n          };\n        }\n        return {\n          ...state,\n          currentChannel: channel,\n        };\n      }\n      return {\n        ...state,\n        allChannels: [channel, ...state.allChannels.filter((ch) => ch.url !== channel?.url)],\n        currentChannel: channel,\n      };\n    }\n    case actions.ON_CHANNEL_ARCHIVED: {\n      const channel = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel),\n          };\n          // TODO: Check if we have to set current channel\n        }\n      }\n      const nextChannel = (channel?.url === state.currentChannel?.url)\n        ? state.allChannels[state.allChannels[0].url === channel?.url ? 1 : 0]\n        : state.currentChannel;\n      return {\n        ...state,\n        allChannels: state.allChannels.filter(({ url }) => url !== channel?.url),\n        currentChannel: state.disableAutoSelect ? null : nextChannel,\n      };\n    }\n    case actions.LEAVE_CHANNEL_SUCCESS:\n    case actions.ON_CHANNEL_DELETED: {\n      const channelUrl = action.payload;\n      return {\n        ...state,\n        currentChannel: (channelUrl === state.currentChannel?.url)\n          ? state.allChannels[0]\n          : state.currentChannel,\n        allChannels: state.allChannels.filter(({ url }) => url !== channelUrl),\n      };\n    }\n    case actions.ON_USER_LEFT: {\n      const { channel, isMe } = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          const filteredChannels = getChannelsWithUpsertedChannel(state.allChannels, channel);\n          const nextChannel = (isMe && (channel?.url === state.currentChannel?.url))\n            ? filteredChannels[0]\n            : state.currentChannel;\n          return {\n            ...state,\n            currentChannel: state.disableAutoSelect ? null : nextChannel,\n            allChannels: filteredChannels,\n          };\n        }\n        const nextChannel = (channel?.url === state.currentChannel?.url)\n          ? state.allChannels[0]\n          : state.currentChannel;\n        return {\n          ...state,\n          currentChannel: state.disableAutoSelect ? null : nextChannel,\n          allChannels: state.allChannels.filter(({ url }) => url !== channel?.url),\n        };\n      }\n      const filteredChannels = state.allChannels.filter((c) => !(c.url === channel?.url && isMe));\n      const nextChannel = (isMe && (channel?.url === state.currentChannel?.url))\n        ? filteredChannels[0]\n        : state.currentChannel;\n      return {\n        ...state,\n        currentChannel: state.disableAutoSelect ? null : nextChannel,\n        allChannels: filteredChannels,\n      };\n    }\n    case actions.ON_USER_JOINED:\n    case actions.ON_CHANNEL_CHANGED:\n    case actions.ON_READ_RECEIPT_UPDATED:\n    case actions.ON_DELIVERY_RECEIPT_UPDATED: {\n      const { allChannels = [] } = state;\n      const channel = action.payload;\n      const { unreadMessageCount } = channel;\n      if (!channel?.lastMessage) return state;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(allChannels, channel),\n          };\n        }\n        const nextChannel = (channel?.url === state.currentChannel?.url)\n          ? state.allChannels[state.allChannels[0].url === channel?.url ? 1 : 0]\n          // if coming channel is first of channel list, current channel will be the next one\n          : state.currentChannel;\n        return {\n          ...state,\n          currentChannel: state.disableAutoSelect ? null : nextChannel,\n          allChannels: state.allChannels.filter(({ url }) => url !== channel?.url),\n        };\n      }\n      // if its only an unread message count change, dont push to top\n      if (unreadMessageCount === 0) {\n        const currentChannel = allChannels.find(({ url }) => url === channel?.url);\n        const currentUnreadCount = currentChannel && currentChannel.unreadMessageCount;\n        if (currentUnreadCount === 0) {\n          return {\n            ...state,\n            allChannels: state.allChannels.map((ch) => (ch.url === channel?.url ? channel : ch)),\n          };\n        }\n      }\n      return {\n        ...state,\n        allChannels: [\n          channel,\n          ...state.allChannels.filter(({ url }) => url !== action.payload.url),\n        ],\n      };\n    }\n    case actions.SET_CURRENT_CHANNEL:\n      return {\n        ...state,\n        currentChannel: action.payload,\n      };\n    case actions.ON_LAST_MESSAGE_UPDATED: {\n      return {\n        ...state,\n        allChannels: state.allChannels.map((channel) => (\n          channel?.url === action.payload.url ? action.payload : channel)),\n      };\n    }\n    case actions.ON_CHANNEL_FROZEN: {\n      const channel = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel),\n          };\n        }\n        const nextChannel = (channel?.url === state.currentChannel?.url)\n          ? state.allChannels[state.allChannels[0].url === channel?.url ? 1 : 0]\n          // if coming channel is first of channel list, current channel will be the next one\n          : state.currentChannel;\n        return {\n          ...state,\n          allChannels: state.allChannels.filter(({ url }) => url !== channel?.url),\n          currentChannel: state.disableAutoSelect ? null : nextChannel,\n        };\n      }\n      return {\n        ...state,\n        allChannels: state.allChannels.map((ch) => {\n          if (ch.url === channel?.url) {\n            // eslint-disable-next-line no-param-reassign\n            ch.isFrozen = true;\n            return ch;\n          }\n          return ch;\n        }),\n      };\n    }\n    case actions.ON_CHANNEL_UNFROZEN: {\n      const channel = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel),\n          };\n        }\n        const nextChannel = (channel?.url === state.currentChannel?.url)\n          ? state.allChannels[state.allChannels[0].url === channel?.url ? 1 : 0]\n          // if coming channel is first of channel list, current channel will be the next one\n          : state.currentChannel;\n        return {\n          ...state,\n          allChannels: state.allChannels.filter(({ url }) => url !== channel?.url),\n          currentChannel: state.disableAutoSelect ? null : nextChannel,\n        };\n      }\n      return {\n        ...state,\n        allChannels: state.allChannels.map((ch) => {\n          if (ch.url === channel?.url) {\n            // eslint-disable-next-line no-param-reassign\n            ch.isFrozen = false;\n            return ch;\n          }\n          return ch;\n        }),\n      };\n    }\n    case actions.CHANNEL_REPLACED_TO_TOP: {\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, action.payload, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: [\n              action.payload,\n              ...state.allChannels.filter((channel) => channel?.url !== action.payload.url),\n            ],\n          };\n        }\n        return state;\n      }\n      return {\n        ...state,\n        allChannels: [\n          action.payload,\n          ...state.allChannels.filter((channel) => channel?.url !== action.payload.url),\n        ],\n      };\n    }\n    case actions.CHANNEL_LIST_PARAMS_UPDATED:\n      return {\n        ...state,\n        currentUserId: action.payload.currentUserId,\n        channelListQuery: action.payload.channelListQuery,\n      };\n    default:\n      return state;\n  }\n}\n","import { useEffect } from 'react';\nimport * as messageActionTypes from '../../dux/actionTypes';\nimport { GroupChannel, SendbirdGroupChat } from '@sendbird/chat/groupChannel';\nimport { Logger } from '../../../../lib/SendbirdState';\n\nexport type DynamicProps = {\n  activeChannelUrl?: string;\n  channels?: GroupChannel[];\n  sdk?: SendbirdGroupChat;\n};\n\nexport type StaticProps = {\n  logger: Logger;\n  channelListDispatcher: React.Dispatch<any>;\n};\n\nfunction useActiveChannelUrl({\n  activeChannelUrl,\n  channels,\n  sdk,\n}: DynamicProps, {\n  logger,\n  channelListDispatcher,\n}: StaticProps): void {\n  return useEffect(() => {\n    if (activeChannelUrl) {\n      logger.info('ChannelListProvider: looking for active channel', { activeChannelUrl });\n      const activeChannel = channels?.find(channel => channel.url === activeChannelUrl);\n      if (activeChannel) {\n        channelListDispatcher({\n          type: messageActionTypes.SET_CURRENT_CHANNEL,\n          payload: activeChannel,\n        });\n      } else {\n        logger.info('ChannelListProvider: searching backend for active channel', { activeChannelUrl });\n        sdk?.groupChannel?.getChannel(activeChannelUrl)\n          .then((channel) => {\n            channelListDispatcher({\n              type: messageActionTypes.FETCH_CHANNELS_SUCCESS,\n              payload: [channel],\n            });\n            channelListDispatcher({\n              type: messageActionTypes.SET_CURRENT_CHANNEL,\n              payload: channel,\n            });\n          })\n          .catch(() => {\n            logger.warning('ChannelListProvider: Active channel not found');\n          });\n      }\n    }\n  }, [activeChannelUrl]);\n}\n\nexport default useActiveChannelUrl;\n","import React, {\n  useState,\n  useEffect,\n  useContext,\n  useReducer,\n  useMemo,\n} from 'react';\n\nimport type { User } from '@sendbird/chat';\nimport {\n  GroupChannel,\n  GroupChannelCreateParams,\n  GroupChannelHandler,\n  SendbirdGroupChat,\n  GroupChannelListQuery as GroupChannelListQuerySb,\n  GroupChannelUserIdsFilter,\n} from '@sendbird/chat/groupChannel';\n\nimport { RenderUserProfileProps } from '../../../types';\n\nimport setupChannelList, {\n  pubSubHandler,\n  pubSubHandleRemover,\n} from '../utils';\nimport { uuidv4 } from '../../../utils/uuid';\nimport { noop } from '../../../utils/utils';\n\nimport * as channelListActions from '../dux/actionTypes';\n\nimport { UserProfileProvider } from '../../../lib/UserProfileContext';\nimport useSendbirdStateContext from '../../../hooks/useSendbirdStateContext';\nimport { CustomUseReducerDispatcher } from '../../../lib/SendbirdState';\nimport channelListReducers from '../dux/reducers';\nimport channelListInitialState from '../dux/initialState';\nimport { CHANNEL_TYPE } from '../../CreateChannel/types';\nimport useActiveChannelUrl from './hooks/useActiveChannelUrl';\n\ninterface ApplicationUserListQuery {\n  limit?: number;\n  userIdsFilter?: Array<string>;\n  metaDataKeyFilter?: string;\n  metaDataValuesFilter?: Array<string>;\n}\n\ninterface GroupChannelListQuery {\n  limit?: number;\n  includeEmpty?: boolean;\n  order?: 'latest_last_message' | 'chronological' | 'channel_name_alphabetical' | 'metadata_value_alphabetical';\n  userIdsExactFilter?: Array<string>;\n  userIdsIncludeFilter?: Array<string>;\n  userIdsIncludeFilterQueryType?: 'AND' | 'OR';\n  nicknameContainsFilter?: string;\n  channelNameContainsFilter?: string;\n  customTypesFilter?: Array<string>;\n  customTypeStartsWithFilter?: string;\n  channelUrlsFilter?: Array<string>;\n  superChannelFilter?: 'all' | 'super' | 'nonsuper';\n  publicChannelFilter?: 'all' | 'public' | 'private';\n  metadataOrderKeyFilter?: string;\n  memberStateFilter?: 'all' | 'joined_only' | 'invited_only' | 'invited_by_friend' | 'invited_by_non_friend';\n  hiddenChannelFilter?: 'unhidden_only' | 'hidden_only' | 'hidden_allow_auto_unhide' | 'hidden_prevent_auto_unhide';\n  unreadChannelFilter?: 'all' | 'unread_message';\n  includeFrozen?: boolean;\n  userIdsFilter?: GroupChannelUserIdsFilter;\n}\n\ninterface ChannelListQueries {\n  applicationUserListQuery?: ApplicationUserListQuery;\n  channelListQuery?: GroupChannelListQuery;\n}\n\ntype OverrideInviteUserType = {\n  users: Array<string>;\n  onClose: () => void;\n  channelType: CHANNEL_TYPE;\n};\n\nexport interface ChannelListProviderProps {\n  allowProfileEdit?: boolean;\n  onBeforeCreateChannel?(users: Array<string>): GroupChannelCreateParams;\n  overrideInviteUser?(params: OverrideInviteUserType): void;\n  onThemeChange?(theme: string): void;\n  onProfileEditSuccess?(user: User): void;\n  onChannelSelect?(channel: GroupChannel | null): void;\n  sortChannelList?: (channels: GroupChannel[]) => GroupChannel[];\n  queries?: ChannelListQueries;\n  children?: React.ReactElement;\n  className?: string | string[];\n  renderUserProfile?: (props: RenderUserProfileProps) => React.ReactElement;\n  disableUserProfile?: boolean;\n  disableAutoSelect?: boolean;\n  activeChannelUrl?: string;\n  typingChannels?: Array<GroupChannel>;\n  isTypingIndicatorEnabled?: boolean;\n  isMessageReceiptStatusEnabled?: boolean;\n}\n\nexport interface ChannelListProviderInterface extends ChannelListProviderProps {\n  initialized: boolean;\n  loading: boolean;\n  allChannels: GroupChannel[];\n  currentChannel: GroupChannel;\n  channelListQuery: GroupChannelListQuery;\n  currentUserId: string;\n  channelListDispatcher: CustomUseReducerDispatcher;\n  channelSource: GroupChannelListQuerySb | null;\n}\n\ninterface ChannelListStoreInterface {\n  initialized: boolean;\n  loading: boolean;\n  allChannels: GroupChannel[];\n  currentChannel: GroupChannel;\n  channelListQuery: GroupChannelListQuery;\n  currentUserId: string;\n  disableAutoSelect: boolean;\n}\n\nconst ChannelListContext = React.createContext<ChannelListProviderInterface | null>({\n  disableUserProfile: true,\n  allowProfileEdit: true,\n  onBeforeCreateChannel: null,\n  onThemeChange: null,\n  onProfileEditSuccess: null,\n  onChannelSelect: null,\n  queries: {},\n  className: null,\n  initialized: false,\n  loading: false,\n  allChannels: [],\n  currentChannel: null,\n  channelListQuery: {},\n  currentUserId: null,\n  channelListDispatcher: null,\n  channelSource: null,\n  typingChannels: [],\n});\n\nconst ChannelListProvider: React.FC<ChannelListProviderProps> = (props: ChannelListProviderProps) => {\n  // destruct props\n  const {\n    children,\n    className,\n    disableUserProfile,\n    allowProfileEdit,\n    queries,\n    onProfileEditSuccess,\n    onThemeChange,\n    onBeforeCreateChannel,\n    sortChannelList,\n    overrideInviteUser,\n    activeChannelUrl,\n    isTypingIndicatorEnabled = null,\n    isMessageReceiptStatusEnabled = null,\n  } = props;\n  // disable autoselect, if activeChannelUrl is provided\n  // useActiveChannelUrl should be executed when activeChannelUrl is present\n  const disableAutoSelect = props?.disableAutoSelect || !!activeChannelUrl;\n  const onChannelSelect = props?.onChannelSelect || noop;\n  // fetch store from <SendbirdProvider />\n  const globalStore = useSendbirdStateContext();\n  const { config, stores } = globalStore;\n  const { sdkStore } = stores;\n  const { pubSub, logger, onUserProfileMessage } = config;\n  const {\n    markAsDeliveredScheduler,\n    disableMarkAsDelivered = false,\n    isTypingIndicatorEnabledOnChannelList = false,\n    isMessageReceiptStatusEnabledOnChannelList = false,\n  } = config;\n  const sdk = sdkStore?.sdk as SendbirdGroupChat;\n\n  // derive some variables\n  // enable if it is true atleast once(both are flase by default)\n  const userDefinedDisableUserProfile = disableUserProfile || config?.disableUserProfile;\n  const userDefinedRenderProfile = config?.renderUserProfile;\n  const enableEditProfile = allowProfileEdit || config?.allowProfileEdit;\n\n  const userFilledChannelListQuery = queries?.channelListQuery;\n  const userFilledApplicationUserListQuery = queries?.applicationUserListQuery;\n\n  const sdkIntialized = sdkStore?.initialized;\n\n  const [channelListStore, channelListDispatcher] = useReducer(\n    channelListReducers,\n    channelListInitialState,\n  ) as [ChannelListStoreInterface, CustomUseReducerDispatcher];\n  const { currentChannel } = channelListStore;\n\n  const [channelSource, setChannelSource] = useState<GroupChannelListQuerySb | null>(null);\n  const [typingChannels, setTypingChannels] = useState<Array<GroupChannel>>([]);\n\n  useEffect(() => {\n    const subscriber = pubSubHandler(pubSub, channelListDispatcher);\n    return () => {\n      pubSubHandleRemover(subscriber);\n    };\n  }, [sdkIntialized]);\n\n  useEffect(() => {\n    const sdkChannelHandlerId = uuidv4();\n    if (sdkIntialized) {\n      logger.info('ChannelList: Setup channelHandlers');\n      setupChannelList({\n        sdk,\n        sdkChannelHandlerId,\n        channelListDispatcher,\n        setChannelSource,\n        onChannelSelect,\n        userFilledChannelListQuery,\n        logger,\n        sortChannelList,\n        disableAutoSelect,\n        markAsDeliveredScheduler,\n        disableMarkAsDelivered,\n      });\n    } else {\n      logger.info('ChannelList: Removing channelHandlers');\n      // remove previous channelHandlers\n      if (sdk?.groupChannel?.removeGroupChannelHandler) {\n        sdk.groupChannel.removeGroupChannelHandler(sdkChannelHandlerId);\n      }\n      // remove channelSource\n      setChannelSource(null);\n      // cleanup\n      channelListDispatcher({\n        type: channelListActions.RESET_CHANNEL_LIST,\n        payload: null,\n      });\n    }\n    return () => {\n      logger.info('ChannelList: Removing channelHandlers');\n      if (sdk?.groupChannel?.removeGroupChannelHandler) {\n        sdk?.groupChannel?.removeGroupChannelHandler(sdkChannelHandlerId);\n      }\n    };\n  }, [sdkIntialized, userFilledChannelListQuery, sortChannelList]);\n\n  useEffect(() => {\n    let typingHandlerId = '';\n    if (sdk?.groupChannel?.addGroupChannelHandler) {\n      typingHandlerId = uuidv4();\n      const handler = new GroupChannelHandler({\n        onTypingStatusUpdated: (channel) => {\n          const typingMemberCount = channel?.getTypingUsers()?.length;\n          const channelList = typingChannels.filter(ch => ch.url !== channel.url);\n          if (typingMemberCount > 0) {\n            setTypingChannels([...channelList, channel]);\n          } else {\n            setTypingChannels(channelList);\n          }\n        },\n        onUnreadMemberStatusUpdated(channel) {\n          channelListDispatcher({\n            type: channelListActions.ON_LAST_MESSAGE_UPDATED,\n            payload: channel,\n          });\n        },\n        onUndeliveredMemberStatusUpdated(channel) {\n          channelListDispatcher({\n            type: channelListActions.ON_LAST_MESSAGE_UPDATED,\n            payload: channel,\n          });\n        },\n        onMessageUpdated(channel) {\n          channelListDispatcher({\n            type: channelListActions.ON_LAST_MESSAGE_UPDATED,\n            payload: channel,\n          });\n          sdk.groupChannel.getChannelWithoutCache(channel.url)\n            .then((ch) => {\n              channelListDispatcher({\n                type: channelListActions.ON_LAST_MESSAGE_UPDATED,\n                payload: ch,\n              });\n            });\n        },\n        onMentionReceived(channel) {\n          channelListDispatcher({\n            type: channelListActions.ON_LAST_MESSAGE_UPDATED,\n            payload: channel,\n          });\n          sdk.groupChannel.getChannelWithoutCache(channel.url)\n            .then((ch) => {\n              channelListDispatcher({\n                type: channelListActions.ON_LAST_MESSAGE_UPDATED,\n                payload: ch,\n              });\n            });\n        },\n      });\n      sdk?.groupChannel?.addGroupChannelHandler(typingHandlerId, handler);\n    }\n    return () => {\n      if (sdk?.groupChannel?.removeGroupChannelHandler && typingHandlerId !== '') {\n        sdk.groupChannel.removeGroupChannelHandler(typingHandlerId);\n      }\n    };\n  }, [sdk?.currentUser?.userId]);\n\n  const queries_ = useMemo(() => {\n    return {\n      applicationUserListQuery: userFilledApplicationUserListQuery,\n      channelListQuery: userFilledChannelListQuery,\n    };\n  }, [\n    userFilledApplicationUserListQuery,\n    userFilledChannelListQuery,\n  ]);\n\n  const { allChannels } = channelListStore;\n  const sortedChannels = (sortChannelList && typeof sortChannelList === 'function')\n    ? sortChannelList(allChannels)\n    : allChannels;\n\n  if (sortedChannels.length !== allChannels.length) {\n    const warning = `ChannelList: You have removed/added extra channels on sortChannelList\n      this could cause unexpected problems`;\n    // eslint-disable-next-line no-console\n    console.warn(warning, { before: allChannels, after: sortedChannels });\n    logger.warning(warning, { before: allChannels, after: sortedChannels });\n  }\n\n  // Set current channel (by on_channel_selected event)\n  useEffect(() => {\n    if (!sdk || !sdk.groupChannel || !currentChannel || !currentChannel?.url) {\n      return;\n    }\n    sdk.groupChannel.getChannel(currentChannel.url).then((groupChannel) => {\n      if (groupChannel) {\n        onChannelSelect(groupChannel);\n      } else {\n        onChannelSelect(null);\n      }\n    });\n  }, [currentChannel?.url]);\n\n  // Set active channel (by url)\n  useActiveChannelUrl({\n    activeChannelUrl,\n    channels: sortedChannels,\n    sdk,\n  }, {\n    logger,\n    channelListDispatcher,\n  });\n\n  return (\n    <ChannelListContext.Provider value={{\n      className,\n      disableUserProfile,\n      queries: queries_,\n      onProfileEditSuccess,\n      onThemeChange,\n      onBeforeCreateChannel,\n      overrideInviteUser,\n      onChannelSelect,\n      sortChannelList,\n      allowProfileEdit: enableEditProfile,\n      channelListDispatcher,\n      channelSource,\n      ...channelListStore,\n      allChannels: sortedChannels,\n      typingChannels,\n      isTypingIndicatorEnabled: (isTypingIndicatorEnabled !== null) ? isTypingIndicatorEnabled : isTypingIndicatorEnabledOnChannelList,\n      isMessageReceiptStatusEnabled: (isMessageReceiptStatusEnabled !== null) ? isMessageReceiptStatusEnabled : isMessageReceiptStatusEnabledOnChannelList,\n    }}>\n      <UserProfileProvider\n        disableUserProfile={userDefinedDisableUserProfile}\n        renderUserProfile={userDefinedRenderProfile}\n        onUserProfileMessage={onUserProfileMessage}\n      >\n        <div className={`sendbird-channel-list ${className}`}>\n          {children}\n        </div>\n      </UserProfileProvider>\n    </ChannelListContext.Provider>\n  );\n};\n\nfunction useChannelListContext(): ChannelListProviderInterface {\n  const context: ChannelListProviderInterface = useContext(ChannelListContext);\n  return context;\n}\n\nexport {\n  ChannelListProvider,\n  useChannelListContext,\n};\n"]},"metadata":{},"sourceType":"module"}