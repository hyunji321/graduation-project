{"ast":null,"code":"import React__default from 'react';\nimport useSendbirdStateContext from '../../useSendbirdStateContext.js';\nimport { useChannelSettingsContext } from '../context.js';\nimport { n as noop } from '../../utils-4bbbca2c.js';\nimport Modal from '../../ui/Modal.js';\nimport { u as useLocalization } from '../../LocalizationContext-076d6d2e.js';\nimport { u as useMediaQueryContext } from '../../MediaQueryContext-11f0e43f.js';\nimport TextButton from '../../ui/TextButton.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../../index-63949de5.js';\nimport '../../withSendbird.js';\nimport '../../_rollupPluginBabelHelpers-6bb0305c.js';\nimport '../../UserProfileContext-9cfbab4d.js';\nimport 'prop-types';\nimport '../../uuid-1adedf62.js';\nimport 'react-dom';\nimport '../../index-38e61c64.js';\nimport '../../ui/Button.js';\nimport '../../ui/Icon.js';\nimport '../../ui/IconButton.js';\nimport '../../stringSet-13bbd4a2.js';\nimport '../../index-99aabd9e.js';\nimport '../../color-879cc347.js';\nconst LeaveChannel = props => {\n  var _state$config, _state$config2;\n  const {\n    onSubmit = noop,\n    onCancel = noop\n  } = props;\n  const {\n    channel,\n    onLeaveChannel\n  } = useChannelSettingsContext();\n  const {\n    stringSet\n  } = useLocalization();\n  const state = useSendbirdStateContext();\n  const logger = state === null || state === void 0 ? void 0 : (_state$config = state.config) === null || _state$config === void 0 ? void 0 : _state$config.logger;\n  const isOnline = state === null || state === void 0 ? void 0 : (_state$config2 = state.config) === null || _state$config2 === void 0 ? void 0 : _state$config2.isOnline;\n  const {\n    isMobile\n  } = useMediaQueryContext();\n  const getChannelName = channel => {\n    if (channel !== null && channel !== void 0 && channel.name && (channel === null || channel === void 0 ? void 0 : channel.name) !== 'Group Channel') {\n      return channel.name;\n    }\n    if ((channel === null || channel === void 0 ? void 0 : channel.name) === 'Group Channel' || !(channel !== null && channel !== void 0 && channel.name)) {\n      return ((channel === null || channel === void 0 ? void 0 : channel.members) || []).map(member => member.nickname || stringSet.NO_NAME).join(', ');\n    }\n    return stringSet.NO_TITLE;\n  };\n  if (isMobile) {\n    return /*#__PURE__*/React__default.createElement(Modal, {\n      className: \"sendbird-channel-settings__leave--mobile\",\n      titleText: getChannelName(channel),\n      hideFooter: true,\n      isCloseOnClickOutside: true,\n      onCancel: onCancel\n    }, /*#__PURE__*/React__default.createElement(TextButton, {\n      onClick: () => {\n        logger.info('ChannelSettings: Leaving channel', channel);\n        channel === null || channel === void 0 ? void 0 : channel.leave().then(() => {\n          logger.info('ChannelSettings: Leaving channel successful!', channel);\n          onLeaveChannel();\n        });\n      },\n      className: \"sendbird-channel-settings__leave-label--mobile\"\n    }, /*#__PURE__*/React__default.createElement(Label, {\n      type: LabelTypography.SUBTITLE_1,\n      color: LabelColors.ONBACKGROUND_1\n    }, stringSet.CHANNEL_PREVIEW_MOBILE_LEAVE)));\n  }\n  return /*#__PURE__*/React__default.createElement(Modal, {\n    isFullScreenOnMobile: true,\n    disabled: !isOnline,\n    onCancel: onCancel,\n    onSubmit: () => {\n      logger.info('ChannelSettings: Leaving channel', channel);\n      channel === null || channel === void 0 ? void 0 : channel.leave().then(() => {\n        logger.info('ChannelSettings: Leaving channel successful!', channel);\n        // is for backward compactability\n        if (onLeaveChannel) {\n          onLeaveChannel();\n        } else {\n          onSubmit();\n        }\n      });\n    },\n    submitText: stringSet.MODAL__LEAVE_CHANNEL__FOOTER,\n    titleText: stringSet.MODAL__LEAVE_CHANNEL__TITLE\n  });\n};\nexport { LeaveChannel as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;AAuBMA,kBAAyC,GAAIC,KAAwB,IAAK;EAAA;EAC9E,MAAM;IACJC,QAAQ,GAAGC,IAAI;IACfC,QAAQ,GAAGD;EACb,CAAC,GAAGF,KAAK;EAET,MAAM;IAAEI,OAAO;IAAEC;GAAgB,GAAGC,yBAAyB,EAAE;EAC/D,MAAM;IAAEC;GAAW,GAAGC,eAAe,EAAE;EACvC,MAAMC,KAAK,GAAGC,uBAAuB,EAAE;EACvC,MAAMC,MAAM,GAAGF,KAAK,KAALA,aAAK,wCAALA,KAAK,CAAEG,MAAM,gCAAbC,gCAAeF,MAAM;EACpC,MAAMG,QAAQ,GAAGL,KAAK,KAALA,aAAK,yCAALA,KAAK,CAAEG,MAAM,iCAAbG,iCAAeD,QAAQ;EACxC,MAAM;IAAEE;GAAU,GAAGC,oBAAoB,EAAE;EAC3C,MAAMC,cAAc,GAAId,OAAqB,IAAK;IAChD,IAAIA,OAAO,KAAPA,eAAO,eAAPA,OAAO,CAAEe,IAAI,IAAI,QAAO,aAAPf,OAAO,KAAPA,yBAAO,CAAEe,IAAI,MAAK,eAAe,EAAE;MACtD,OAAOf,OAAO,CAACe,IAAI;IACrB;IACA,IAAI,QAAO,aAAPf,OAAO,KAAPA,yBAAO,CAAEe,IAAI,MAAK,eAAe,IAAI,EAACf,OAAO,KAAPA,eAAO,eAAPA,OAAO,CAAEe,IAAI,CAAE;MACvD,OAAO,CAAC,QAAO,aAAPf,OAAO,uBAAPA,OAAO,CAAEgB,OAAO,KAAI,EAAE,EAAEC,GAAG,CAAEC,MAAM,IAAKA,MAAM,CAACC,QAAQ,IAAIhB,SAAS,CAACiB,OAAO,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;IAClG;IAEA,OAAOlB,SAAS,CAACmB,QAAQ;GAC1B;EACD,IAAIV,QAAQ,EAAE;IACZ,oBACEW,6BAACC,KAAK;MACJC,SAAS,EAAC,0CAA0C;MACpDC,SAAS,EAAEZ,cAAc,CAACd,OAAO,CAAE;MACnC2B,UAAU;MACVC,qBAAqB;MACrB7B,QAAQ,EAAEA;IAAS,gBAEnBwB,6BAACM,UAAU;MACTC,OAAO,EAAEA,MAAM;QACbvB,MAAM,CAACwB,IAAI,CAAC,kCAAkC,EAAE/B,OAAO,CAAC;QACxDA,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEgC,KAAK,EAAE,CACbC,IAAI,CAAC,MAAM;UACV1B,MAAM,CAACwB,IAAI,CAAC,8CAA8C,EAAE/B,OAAO,CAAC;UACpEC,cAAc,EAAE;QAClB,CAAC,CAAC;OACJ;MACFwB,SAAS,EAAC;IAAgD,gBAE1DF,6BAACW,KAAK;MACJC,IAAI,EAAEC,eAAe,CAACC,UAAW;MACjCC,KAAK,EAAEC,WAAW,CAACC;IAAe,GAEjCrC,SAAS,CAACsC,4BAA4B,CACjC,CACG,CACP;EAEZ;EACA,oBACElB,6BAACC,KAAK;IACJkB,oBAAoB;IACpBC,QAAQ,EAAE,CAACjC,QAAS;IACpBX,QAAQ,EAAEA,QAAS;IACnBF,QAAQ,EAAEA,MAAM;MACdU,MAAM,CAACwB,IAAI,CAAC,kCAAkC,EAAE/B,OAAO,CAAC;MACxDA,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEgC,KAAK,EAAE,CACbC,IAAI,CAAC,MAAM;QACV1B,MAAM,CAACwB,IAAI,CAAC,8CAA8C,EAAE/B,OAAO,CAAC;QACpE;QACA,IAAIC,cAAc,EAAE;UAClBA,cAAc,EAAE;QAClB,CAAC,MAAM;UACLJ,QAAQ,EAAE;QACZ;MACF,CAAC,CAAC;KACJ;IACF+C,UAAU,EAAEzC,SAAS,CAAC0C,4BAA6B;IACnDnB,SAAS,EAAEvB,SAAS,CAAC2C;GACrB;AAEN","names":["LeaveChannel","props","onSubmit","noop","onCancel","channel","onLeaveChannel","useChannelSettingsContext","stringSet","useLocalization","state","useSendbirdStateContext","logger","config","_state$config","isOnline","_state$config2","isMobile","useMediaQueryContext","getChannelName","name","members","map","member","nickname","NO_NAME","join","NO_TITLE","React","Modal","className","titleText","hideFooter","isCloseOnClickOutside","TextButton","onClick","info","leave","then","Label","type","LabelTypography","SUBTITLE_1","color","LabelColors","ONBACKGROUND_1","CHANNEL_PREVIEW_MOBILE_LEAVE","isFullScreenOnMobile","disabled","submitText","MODAL__LEAVE_CHANNEL__FOOTER","MODAL__LEAVE_CHANNEL__TITLE"],"sources":["C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\ChannelSettings\\components\\LeaveChannel\\index.tsx"],"sourcesContent":["import './leave-channel.scss';\n\nimport React from 'react';\nimport type { GroupChannel } from '@sendbird/chat/groupChannel';\n\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\nimport { useChannelSettingsContext } from '../../context/ChannelSettingsProvider';\nimport { noop } from '../../../../utils/utils';\n\nimport Modal from '../../../../ui/Modal';\nimport { useLocalization } from '../../../../lib/LocalizationContext';\nimport { useMediaQueryContext } from '../../../../lib/MediaQueryContext';\nimport TextButton from '../../../../ui/TextButton';\nimport Label, {\n  LabelTypography,\n  LabelColors,\n} from '../../../../ui/Label';\n\nexport type LeaveChannelProps = {\n  onSubmit: () => void;\n  onCancel: () => void;\n};\n\nconst LeaveChannel: React.FC<LeaveChannelProps> = (props: LeaveChannelProps) => {\n  const {\n    onSubmit = noop,\n    onCancel = noop,\n  } = props;\n\n  const { channel, onLeaveChannel } = useChannelSettingsContext();\n  const { stringSet } = useLocalization();\n  const state = useSendbirdStateContext();\n  const logger = state?.config?.logger;\n  const isOnline = state?.config?.isOnline;\n  const { isMobile } = useMediaQueryContext();\n  const getChannelName = (channel: GroupChannel) => {\n    if (channel?.name && channel?.name !== 'Group Channel') {\n      return channel.name;\n    }\n    if (channel?.name === 'Group Channel' || !channel?.name) {\n      return (channel?.members || []).map((member) => member.nickname || stringSet.NO_NAME).join(', ');\n    }\n\n    return stringSet.NO_TITLE;\n  };\n  if (isMobile) {\n    return (\n      <Modal\n        className=\"sendbird-channel-settings__leave--mobile\"\n        titleText={getChannelName(channel)}\n        hideFooter\n        isCloseOnClickOutside\n        onCancel={onCancel}\n      >\n        <TextButton\n          onClick={() => {\n            logger.info('ChannelSettings: Leaving channel', channel);\n            channel?.leave()\n              .then(() => {\n                logger.info('ChannelSettings: Leaving channel successful!', channel);\n                onLeaveChannel();\n              });\n          }}\n          className=\"sendbird-channel-settings__leave-label--mobile\"\n        >\n          <Label\n            type={LabelTypography.SUBTITLE_1}\n            color={LabelColors.ONBACKGROUND_1}\n          >\n            {stringSet.CHANNEL_PREVIEW_MOBILE_LEAVE}\n          </Label>\n        </TextButton>\n      </Modal>\n    );\n  }\n  return (\n    <Modal\n      isFullScreenOnMobile\n      disabled={!isOnline}\n      onCancel={onCancel}\n      onSubmit={() => {\n        logger.info('ChannelSettings: Leaving channel', channel);\n        channel?.leave()\n          .then(() => {\n            logger.info('ChannelSettings: Leaving channel successful!', channel);\n            // is for backward compactability\n            if (onLeaveChannel) {\n              onLeaveChannel();\n            } else {\n              onSubmit();\n            }\n          });\n      }}\n      submitText={stringSet.MODAL__LEAVE_CHANNEL__FOOTER}\n      titleText={stringSet.MODAL__LEAVE_CHANNEL__TITLE}\n    />\n  );\n};\n\nexport default LeaveChannel;\n"]},"metadata":{},"sourceType":"module"}