{"ast":null,"code":"import React__default, { useState, useEffect, useRef, useLayoutEffect, useMemo } from 'react';\nimport { f as format } from '../../index-7cdd58b8.js';\nimport SuggestedMentionList from './SuggestedMentionList.js';\nimport useSendbirdStateContext from '../../useSendbirdStateContext.js';\nimport { u as useChannelContext, a as isDisabledBecauseFrozen, b as isDisabledBecauseMuted } from '../../ChannelProvider-910bbc1f.js';\nimport { h as getClassName } from '../../index-7eb65acf.js';\nimport { M as MAX_USER_MENTION_COUNT, a as MAX_USER_SUGGESTION_COUNT } from '../../const-b3f02313.js';\nimport DateSeparator from '../../ui/DateSeparator.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../../index-63949de5.js';\nimport MessageInput from '../../ui/MessageInput.js';\nimport MessageContent from '../../ui/MessageContent.js';\nimport FileViewer from './FileViewer.js';\nimport RemoveMessage from './RemoveMessageModal.js';\nimport { M as MessageInputKeys } from '../../const-221c6a89.js';\nimport { u as useLocalization } from '../../LocalizationContext-076d6d2e.js';\nimport { a as useHandleOnScrollCallback } from '../../index-9e49ffe3.js';\nimport { u as useDirtyGetMentions } from '../../useDirtyGetMentions-aa730e2c.js';\nimport '../../index-99aabd9e.js';\nimport '../../ui/Icon.js';\nimport 'prop-types';\nimport '../../ui/Avatar.js';\nimport '../../ui/ImageRenderer.js';\nimport '../../uuid-1adedf62.js';\nimport '../../ThreadProvider-3a4a4db0.js';\nimport '../../utils/message/getOutgoingMessageState.js';\nimport '../../UserProfileContext-9cfbab4d.js';\nimport '../../_rollupPluginBabelHelpers-6bb0305c.js';\nimport '../../Thread/context/types.js';\nimport '@sendbird/chat';\nimport '../../topics-b2b77fb9.js';\nimport '@sendbird/chat/groupChannel';\nimport '@sendbird/chat/message';\nimport '../../consts-95d8566e.js';\nimport '../../withSendbird.js';\nimport '../../compareIds-defe2bb3.js';\nimport '../../color-879cc347.js';\nimport '../../stringSet-13bbd4a2.js';\nimport '../../ui/IconButton.js';\nimport '../../ui/Button.js';\nimport 'dompurify';\nimport '../../consts-ff014656.js';\nimport '../../consts-c41580ae.js';\nimport '../../consts-81544e52.js';\nimport '../../tokenize-c40f2b57.js';\nimport '../../ui/UserProfile.js';\nimport '../../sendbirdSelectors.js';\nimport '../../utils-4bbbca2c.js';\nimport '../../index-5c1b672d.js';\nimport '../../ui/Loader.js';\nimport '../../index-306bc4ab.js';\nimport '../../index-fe932783.js';\nimport '../../ui/MessageItemMenu.js';\nimport '../../ui/ContextMenu.js';\nimport 'react-dom';\nimport '../../ui/SortByRow.js';\nimport '../../types-4ff4177c.js';\nimport '../../ui/MessageItemReactionMenu.js';\nimport '../../ui/ReactionButton.js';\nimport '../../useLongPress-1303953d.js';\nimport '../../MediaQueryContext-11f0e43f.js';\nimport '../../ui/EmojiReactions.js';\nimport '../../ui/ReactionBadge.js';\nimport '../../ui/BottomSheet.js';\nimport '../../index-38e61c64.js';\nimport '../../ui/UserListItem.js';\nimport '../../ui/MutedAvatarOverlay.js';\nimport '../../ui/Checkbox.js';\nimport '../../ui/Tooltip.js';\nimport '../../ui/TooltipWrapper.js';\nimport '../../Message/context.js';\nimport '../../ui/AdminMessage.js';\nimport '../../ui/TextMessageItemBody.js';\nimport '../../index-2c3e11ea.js';\nimport '../../index.module-54d57ec3.js';\nimport '../../ui/MentionLabel.js';\nimport '../../ui/LinkLabel.js';\nimport '../../ui/FileMessageItemBody.js';\nimport '../../ui/TextButton.js';\nimport '../../ui/ThumbnailMessageItemBody.js';\nimport '../../ui/OGMessageItemBody.js';\nimport '../../ui/UnknownMessageItemBody.js';\nimport '../../ui/QuoteMessage.js';\nimport '../../index-aca30408.js';\nimport '../../ui/ThreadReplies.js';\nimport '../../ui/VoiceMessageItemBody.js';\nimport '../../ui/ProgressBar.js';\nimport '../../VoicePlayer/useVoicePlayer.js';\nimport '../../index-5c985608.js';\nimport '../../VoiceRecorder/context.js';\nimport '../../ui/PlaybackTime.js';\nimport '../../ui/Modal.js';\nconst useDidMountEffect = (func, deps) => {\n  const [didMount, setDidmount] = useState(false);\n  useEffect(() => {\n    if (didMount) {\n      func();\n    } else {\n      setDidmount(true);\n    }\n  }, deps);\n};\n\n// todo: Refactor this component, is too complex now\nconst Message = _ref => {\n  var _message$reactions, _message$isUserMessag;\n  let {\n    message,\n    hasSeparator,\n    chainTop,\n    chainBottom,\n    handleScroll,\n    handleMessageListHeightChange,\n    renderCustomSeparator,\n    renderEditInput,\n    renderMessage,\n    renderMessageContent\n  } = _ref;\n  const {\n    dateLocale\n  } = useLocalization();\n  const globalStore = useSendbirdStateContext();\n  const {\n    userId,\n    isOnline,\n    isMentionEnabled,\n    userMention,\n    logger\n  } = globalStore.config;\n  const maxUserMentionCount = (userMention === null || userMention === void 0 ? void 0 : userMention.maxMentionCount) || MAX_USER_MENTION_COUNT;\n  const maxUserSuggestionCount = (userMention === null || userMention === void 0 ? void 0 : userMention.maxSuggestionCount) || MAX_USER_SUGGESTION_COUNT;\n  const {\n    initialized,\n    currentGroupChannel,\n    highLightedMessageId,\n    setHighLightedMessageId,\n    animatedMessageId,\n    setAnimatedMessageId,\n    updateMessage,\n    scrollToMessage,\n    replyType,\n    threadReplySelectType,\n    isReactionEnabled,\n    toggleReaction,\n    emojiContainer,\n    nicknamesMap,\n    setQuoteMessage,\n    resendMessage,\n    renderUserMentionItem,\n    onReplyInThread,\n    onQuoteMessageClick,\n    onMessageAnimated,\n    onMessageHighlighted,\n    onScrollCallback\n  } = useChannelContext();\n  const [showEdit, setShowEdit] = useState(false);\n  const [showRemove, setShowRemove] = useState(false);\n  const [showFileViewer, setShowFileViewer] = useState(false);\n  const [isAnimated, setIsAnimated] = useState(false);\n  const [isHighlighted, setIsHighlighted] = useState(false);\n  const [mentionNickname, setMentionNickname] = useState('');\n  const [mentionedUsers, setMentionedUsers] = useState([]);\n  const [mentionedUserIds, setMentionedUserIds] = useState([]);\n  const [messageInputEvent, setMessageInputEvent] = useState(null);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [mentionSuggestedUsers, setMentionSuggestedUsers] = useState([]);\n  const editMessageInputRef = useRef(null);\n  const messageScrollRef = useRef(null);\n  const displaySuggestedMentionList = isOnline && isMentionEnabled && mentionNickname.length > 0 && !isDisabledBecauseFrozen(currentGroupChannel) && !isDisabledBecauseMuted(currentGroupChannel);\n  const disabled = !initialized || isDisabledBecauseFrozen(currentGroupChannel) || isDisabledBecauseMuted(currentGroupChannel) || !isOnline;\n  const handleOnScroll = useHandleOnScrollCallback({\n    hasMore: false,\n    onScroll: onScrollCallback,\n    scrollRef: messageScrollRef\n  });\n  const mentionNodes = useDirtyGetMentions({\n    ref: editMessageInputRef\n  }, {\n    logger\n  });\n  const ableMention = (mentionNodes === null || mentionNodes === void 0 ? void 0 : mentionNodes.length) < maxUserMentionCount;\n  useEffect(() => {\n    setMentionedUsers(mentionedUsers.filter(_ref2 => {\n      let {\n        userId\n      } = _ref2;\n      const i = mentionedUserIds.indexOf(userId);\n      if (i < 0) {\n        return false;\n      } else {\n        mentionedUserIds.splice(i, 1);\n        return true;\n      }\n    }));\n  }, [mentionedUserIds]);\n\n  // Move the messsage list scroll when the last message's height is changed by reactions\n  useDidMountEffect(() => {\n    var _currentGroupChannel$;\n    if ((currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : (_currentGroupChannel$ = currentGroupChannel.lastMessage) === null || _currentGroupChannel$ === void 0 ? void 0 : _currentGroupChannel$.messageId) === (message === null || message === void 0 ? void 0 : message.messageId)) {\n      handleScroll === null || handleScroll === void 0 ? void 0 : handleScroll();\n    }\n  }, [showEdit, message === null || message === void 0 ? void 0 : (_message$reactions = message.reactions) === null || _message$reactions === void 0 ? void 0 : _message$reactions.length]);\n  useLayoutEffect(() => {\n    handleMessageListHeightChange === null || handleMessageListHeightChange === void 0 ? void 0 : handleMessageListHeightChange();\n  }, []);\n  useLayoutEffect(() => {\n    let animationTimeout = null;\n    let messageHighlightedTimeout = null;\n    if (highLightedMessageId === message.messageId && messageScrollRef !== null && messageScrollRef !== void 0 && messageScrollRef.current) {\n      handleOnScroll();\n      setIsAnimated(false);\n      animationTimeout = setTimeout(() => {\n        setIsHighlighted(true);\n      }, 500);\n      messageHighlightedTimeout = setTimeout(() => {\n        setHighLightedMessageId(0);\n        onMessageHighlighted === null || onMessageHighlighted === void 0 ? void 0 : onMessageHighlighted();\n      }, 1600);\n    } else {\n      setIsHighlighted(false);\n    }\n    return () => {\n      clearTimeout(animationTimeout);\n      clearTimeout(messageHighlightedTimeout);\n    };\n  }, [highLightedMessageId, messageScrollRef.current, message.messageId]);\n  useLayoutEffect(() => {\n    let animationTimeout = null;\n    let messageAnimatedTimeout = null;\n    if (animatedMessageId === message.messageId && messageScrollRef !== null && messageScrollRef !== void 0 && messageScrollRef.current) {\n      handleOnScroll();\n      setIsHighlighted(false);\n      animationTimeout = setTimeout(() => {\n        setIsAnimated(true);\n      }, 500);\n      messageAnimatedTimeout = setTimeout(() => {\n        setAnimatedMessageId(0);\n        onMessageAnimated === null || onMessageAnimated === void 0 ? void 0 : onMessageAnimated();\n      }, 1600);\n    } else {\n      setIsAnimated(false);\n    }\n    return () => {\n      clearTimeout(animationTimeout);\n      clearTimeout(messageAnimatedTimeout);\n    };\n  }, [animatedMessageId, messageScrollRef.current, message.messageId, onMessageAnimated]);\n  const renderedMessage = useMemo(() => {\n    return renderMessage === null || renderMessage === void 0 ? void 0 : renderMessage({\n      message,\n      chainTop,\n      chainBottom\n    });\n  }, [message, renderMessage]);\n  const renderedCustomSeparator = useMemo(() => {\n    if (renderCustomSeparator) {\n      return renderCustomSeparator === null || renderCustomSeparator === void 0 ? void 0 : renderCustomSeparator({\n        message: message\n      });\n    }\n    return null;\n  }, [message, renderCustomSeparator]);\n  if (renderedMessage) {\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      // do not delete this data attribute, used for scroll to given message\n      // and also for testing\n      \"data-sb-message-id\": message.messageId,\n      \"data-sb-created-at\": message.createdAt,\n      ref: messageScrollRef,\n      className: getClassName(['sendbird-msg-hoc sendbird-msg--scroll-ref', isAnimated ? 'sendbird-msg-hoc__animated' : '', isHighlighted ? 'sendbird-msg-hoc__highlighted' : ''])\n    },\n    // TODO: Add message instance as a function parameter\n    hasSeparator && (renderedCustomSeparator || /*#__PURE__*/React__default.createElement(DateSeparator, null, /*#__PURE__*/React__default.createElement(Label, {\n      type: LabelTypography.CAPTION_2,\n      color: LabelColors.ONBACKGROUND_2\n    }, format(message.createdAt, 'MMMM dd, yyyy', {\n      locale: dateLocale\n    })))), renderedMessage);\n  }\n  if (showEdit && message !== null && message !== void 0 && (_message$isUserMessag = message.isUserMessage) !== null && _message$isUserMessag !== void 0 && _message$isUserMessag.call(message)) {\n    return (renderEditInput === null || renderEditInput === void 0 ? void 0 : renderEditInput()) || /*#__PURE__*/React__default.createElement(React__default.Fragment, null, displaySuggestedMentionList && /*#__PURE__*/React__default.createElement(SuggestedMentionList, {\n      targetNickname: mentionNickname,\n      inputEvent: messageInputEvent,\n      renderUserMentionItem: renderUserMentionItem,\n      onUserItemClick: user => {\n        if (user) {\n          setMentionedUsers([...mentionedUsers, user]);\n        }\n        setMentionNickname('');\n        setSelectedUser(user);\n        setMessageInputEvent(null);\n      },\n      onFocusItemChange: () => {\n        setMessageInputEvent(null);\n      },\n      onFetchUsers: users => {\n        setMentionSuggestedUsers(users);\n      },\n      ableAddMention: ableMention,\n      maxMentionCount: maxUserMentionCount,\n      maxSuggestionCount: maxUserSuggestionCount\n    }), /*#__PURE__*/React__default.createElement(MessageInput, {\n      isEdit: true,\n      disabled: disabled,\n      ref: editMessageInputRef,\n      mentionSelectedUser: selectedUser,\n      isMentionEnabled: isMentionEnabled,\n      message: message,\n      onStartTyping: () => {\n        var _currentGroupChannel$2;\n        currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : (_currentGroupChannel$2 = currentGroupChannel.startTyping) === null || _currentGroupChannel$2 === void 0 ? void 0 : _currentGroupChannel$2.call(currentGroupChannel);\n      },\n      onUpdateMessage: _ref3 => {\n        var _currentGroupChannel$3;\n        let {\n          messageId,\n          message,\n          mentionTemplate\n        } = _ref3;\n        updateMessage({\n          messageId,\n          message,\n          mentionedUsers,\n          mentionTemplate\n        });\n        setShowEdit(false);\n        currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : (_currentGroupChannel$3 = currentGroupChannel.endTyping) === null || _currentGroupChannel$3 === void 0 ? void 0 : _currentGroupChannel$3.call(currentGroupChannel);\n      },\n      onCancelEdit: () => {\n        var _currentGroupChannel$4;\n        setMentionNickname('');\n        setMentionedUsers([]);\n        setMentionedUserIds([]);\n        setMentionSuggestedUsers([]);\n        setShowEdit(false);\n        currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : (_currentGroupChannel$4 = currentGroupChannel.endTyping) === null || _currentGroupChannel$4 === void 0 ? void 0 : _currentGroupChannel$4.call(currentGroupChannel);\n      },\n      onUserMentioned: user => {\n        if ((selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser.userId) === (user === null || user === void 0 ? void 0 : user.userId)) {\n          setSelectedUser(null);\n          setMentionNickname('');\n        }\n      },\n      onMentionStringChange: mentionText => {\n        setMentionNickname(mentionText);\n      },\n      onMentionedUserIdsUpdated: userIds => {\n        setMentionedUserIds(userIds);\n      },\n      onKeyDown: e => {\n        if (displaySuggestedMentionList && (mentionSuggestedUsers === null || mentionSuggestedUsers === void 0 ? void 0 : mentionSuggestedUsers.length) > 0 && (e.key === MessageInputKeys.Enter && ableMention || e.key === MessageInputKeys.ArrowUp || e.key === MessageInputKeys.ArrowDown)) {\n          setMessageInputEvent(e);\n          return true;\n        }\n        return false;\n      }\n    }));\n  }\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName(['sendbird-msg-hoc sendbird-msg--scroll-ref', isAnimated ? 'sendbird-msg-hoc__animated' : '', isHighlighted ? 'sendbird-msg-hoc__highlighted' : '']),\n    style: {\n      marginBottom: '2px'\n    },\n    \"data-sb-message-id\": message.messageId,\n    \"data-sb-created-at\": message.createdAt,\n    ref: messageScrollRef\n  }, hasSeparator && (renderedCustomSeparator || /*#__PURE__*/React__default.createElement(DateSeparator, null, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.CAPTION_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, format(message.createdAt, 'MMMM dd, yyyy', {\n    locale: dateLocale\n  })))), (renderMessageContent === null || renderMessageContent === void 0 ? void 0 : renderMessageContent()) || /*#__PURE__*/React__default.createElement(MessageContent, {\n    className: \"sendbird-message-hoc__message-content\",\n    userId: userId,\n    scrollToMessage: scrollToMessage,\n    channel: currentGroupChannel,\n    message: message,\n    disabled: !isOnline,\n    chainTop: chainTop,\n    chainBottom: chainBottom,\n    isReactionEnabled: isReactionEnabled,\n    replyType: replyType,\n    threadReplySelectType: threadReplySelectType,\n    nicknamesMap: nicknamesMap,\n    emojiContainer: emojiContainer,\n    showEdit: setShowEdit,\n    showRemove: setShowRemove,\n    showFileViewer: setShowFileViewer,\n    resendMessage: resendMessage,\n    toggleReaction: toggleReaction,\n    setQuoteMessage: setQuoteMessage,\n    onReplyInThread: onReplyInThread,\n    onQuoteMessageClick: onQuoteMessageClick,\n    onMessageHeightChange: handleScroll\n  }), showRemove && /*#__PURE__*/React__default.createElement(RemoveMessage, {\n    message: message,\n    onCancel: () => setShowRemove(false)\n  }), showFileViewer && /*#__PURE__*/React__default.createElement(FileViewer, {\n    message: message,\n    onCancel: () => setShowFileViewer(false)\n  }));\n};\nexport { Message as default };","map":{"version":3,"mappings":"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","names":["useDidMountEffect","func","deps","didMount","setDidmount","useState","useEffect","Message","_ref","message","hasSeparator","chainTop","chainBottom","handleScroll","handleMessageListHeightChange","renderCustomSeparator","renderEditInput","renderMessage","renderMessageContent","dateLocale","useLocalization","globalStore","useSendbirdStateContext","userId","isOnline","isMentionEnabled","userMention","logger","config","maxUserMentionCount","maxMentionCount","MAX_USER_MENTION_COUNT","maxUserSuggestionCount","maxSuggestionCount","MAX_USER_SUGGESTION_COUNT","initialized","currentGroupChannel","highLightedMessageId","setHighLightedMessageId","animatedMessageId","setAnimatedMessageId","updateMessage","scrollToMessage","replyType","threadReplySelectType","isReactionEnabled","toggleReaction","emojiContainer","nicknamesMap","setQuoteMessage","resendMessage","renderUserMentionItem","onReplyInThread","onQuoteMessageClick","onMessageAnimated","onMessageHighlighted","onScrollCallback","useChannelContext","showEdit","setShowEdit","showRemove","setShowRemove","showFileViewer","setShowFileViewer","isAnimated","setIsAnimated","isHighlighted","setIsHighlighted","mentionNickname","setMentionNickname","mentionedUsers","setMentionedUsers","mentionedUserIds","setMentionedUserIds","messageInputEvent","setMessageInputEvent","selectedUser","setSelectedUser","mentionSuggestedUsers","setMentionSuggestedUsers","editMessageInputRef","useRef","messageScrollRef","displaySuggestedMentionList","length","isDisabledBecauseFrozen","isDisabledBecauseMuted","disabled","handleOnScroll","useHandleOnScrollCallback","hasMore","onScroll","scrollRef","mentionNodes","useDirtyGetMentions","ref","ableMention","filter","_ref2","i","indexOf","splice","lastMessage","_currentGroupChannel$","messageId","reactions","_message$reactions","useLayoutEffect","animationTimeout","messageHighlightedTimeout","current","setTimeout","clearTimeout","messageAnimatedTimeout","renderedMessage","useMemo","renderedCustomSeparator","React","createdAt","className","getClassName","DateSeparator","Label","type","LabelTypography","CAPTION_2","color","LabelColors","ONBACKGROUND_2","format","locale","isUserMessage","_message$isUserMessag","SuggestedMentionList","targetNickname","inputEvent","onUserItemClick","user","onFocusItemChange","onFetchUsers","users","ableAddMention","MessageInput","isEdit","mentionSelectedUser","onStartTyping","startTyping","_currentGroupChannel$2","onUpdateMessage","_ref3","mentionTemplate","endTyping","_currentGroupChannel$3","onCancelEdit","_currentGroupChannel$4","onUserMentioned","onMentionStringChange","mentionText","onMentionedUserIdsUpdated","userIds","onKeyDown","e","key","MessageInputKeys","Enter","ArrowUp","ArrowDown","style","marginBottom","MessageContent","channel","onMessageHeightChange","RemoveMessageModal","onCancel","FileViewer"],"sources":["C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\utils\\useDidMountEffect.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Channel\\components\\Message\\index.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nconst useDidMountEffect = (func: () => void, deps: Array<unknown>): void => {\n  const [didMount, setDidmount] = useState(false);\n  useEffect(() => {\n    if (didMount) {\n      func();\n    } else {\n      setDidmount(true);\n    }\n  }, deps);\n};\n\nexport default useDidMountEffect;\n","import React, {\n  useRef,\n  useMemo,\n  useState,\n  useEffect,\n  useLayoutEffect,\n} from 'react';\nimport type { FileMessage } from '@sendbird/chat/message';\nimport format from 'date-fns/format';\n\nimport useDidMountEffect from '../../../../utils/useDidMountEffect';\nimport SuggestedMentionList from '../SuggestedMentionList';\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\nimport { useChannelContext } from '../../context/ChannelProvider';\nimport { getClassName } from '../../../../utils';\nimport { isDisabledBecauseFrozen, isDisabledBecauseMuted } from '../../context/utils';\nimport { MAX_USER_MENTION_COUNT, MAX_USER_SUGGESTION_COUNT } from '../../context/const';\n\nimport DateSeparator from '../../../../ui/DateSeparator';\nimport Label, { LabelTypography, LabelColors } from '../../../../ui/Label';\nimport MessageInput from '../../../../ui/MessageInput';\nimport MessageContent from '../../../../ui/MessageContent';\nimport FileViewer from '../FileViewer';\nimport RemoveMessageModal from '../RemoveMessageModal';\nimport { MessageInputKeys } from '../../../../ui/MessageInput/const';\nimport { EveryMessage, RenderCustomSeparatorProps, RenderMessageProps } from '../../../../types';\nimport { useLocalization } from '../../../../lib/LocalizationContext';\nimport { useHandleOnScrollCallback } from '../../../../hooks/useHandleOnScrollCallback';\nimport { useDirtyGetMentions } from '../../../Message/hooks/useDirtyGetMentions';\n\ntype MessageUIProps = {\n  message: EveryMessage;\n  hasSeparator?: boolean;\n  chainTop?: boolean;\n  chainBottom?: boolean;\n  handleScroll?: () => void;\n  handleMessageListHeightChange?: () => void;\n  // for extending\n  renderMessage?: (props: RenderMessageProps) => React.ReactElement;\n  renderCustomSeparator?: (props: RenderCustomSeparatorProps) => React.ReactElement;\n  renderEditInput?: () => React.ReactElement;\n  renderMessageContent?: () => React.ReactElement;\n};\n\n// todo: Refactor this component, is too complex now\nconst Message = ({\n  message,\n  hasSeparator,\n  chainTop,\n  chainBottom,\n  handleScroll,\n  handleMessageListHeightChange,\n  renderCustomSeparator,\n  renderEditInput,\n  renderMessage,\n  renderMessageContent,\n}: MessageUIProps): React.ReactElement => {\n  const { dateLocale } = useLocalization();\n  const globalStore = useSendbirdStateContext();\n\n  const {\n    userId,\n    isOnline,\n    isMentionEnabled,\n    userMention,\n    logger,\n  } = globalStore.config;\n  const maxUserMentionCount = userMention?.maxMentionCount || MAX_USER_MENTION_COUNT;\n  const maxUserSuggestionCount = userMention?.maxSuggestionCount || MAX_USER_SUGGESTION_COUNT;\n\n  const {\n    initialized,\n    currentGroupChannel,\n    highLightedMessageId,\n    setHighLightedMessageId,\n    animatedMessageId,\n    setAnimatedMessageId,\n    updateMessage,\n    scrollToMessage,\n    replyType,\n    threadReplySelectType,\n    isReactionEnabled,\n    toggleReaction,\n    emojiContainer,\n    nicknamesMap,\n    setQuoteMessage,\n    resendMessage,\n    renderUserMentionItem,\n    onReplyInThread,\n    onQuoteMessageClick,\n    onMessageAnimated,\n    onMessageHighlighted,\n    onScrollCallback,\n  } = useChannelContext();\n  const [showEdit, setShowEdit] = useState(false);\n  const [showRemove, setShowRemove] = useState(false);\n  const [showFileViewer, setShowFileViewer] = useState(false);\n  const [isAnimated, setIsAnimated] = useState(false);\n  const [isHighlighted, setIsHighlighted] = useState(false);\n  const [mentionNickname, setMentionNickname] = useState('');\n  const [mentionedUsers, setMentionedUsers] = useState([]);\n  const [mentionedUserIds, setMentionedUserIds] = useState([]);\n  const [messageInputEvent, setMessageInputEvent] = useState(null);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [mentionSuggestedUsers, setMentionSuggestedUsers] = useState([]);\n  const editMessageInputRef = useRef(null);\n  const messageScrollRef = useRef(null);\n  const displaySuggestedMentionList = isOnline\n    && isMentionEnabled\n    && mentionNickname.length > 0\n    && !isDisabledBecauseFrozen(currentGroupChannel)\n    && !isDisabledBecauseMuted(currentGroupChannel);\n  const disabled = !initialized\n    || isDisabledBecauseFrozen(currentGroupChannel)\n    || isDisabledBecauseMuted(currentGroupChannel)\n    || !isOnline;\n\n  const handleOnScroll = useHandleOnScrollCallback({\n    hasMore: false,\n    onScroll: onScrollCallback,\n    scrollRef: messageScrollRef,\n  });\n\n  const mentionNodes = useDirtyGetMentions({ ref: editMessageInputRef }, { logger });\n  const ableMention = mentionNodes?.length < maxUserMentionCount;\n\n  useEffect(() => {\n    setMentionedUsers(mentionedUsers.filter(({ userId }) => {\n      const i = mentionedUserIds.indexOf(userId);\n      if (i < 0) {\n        return false;\n      } else {\n        mentionedUserIds.splice(i, 1);\n        return true;\n      }\n    }));\n  }, [mentionedUserIds]);\n\n  // Move the messsage list scroll when the last message's height is changed by reactions\n  useDidMountEffect(() => {\n    if (currentGroupChannel?.lastMessage?.messageId === message?.messageId) {\n      handleScroll?.();\n    }\n  }, [showEdit, message?.reactions?.length]);\n  useLayoutEffect(() => {\n    handleMessageListHeightChange?.();\n  }, []);\n\n  useLayoutEffect(() => {\n    let animationTimeout = null;\n    let messageHighlightedTimeout = null;\n    if (highLightedMessageId === message.messageId && messageScrollRef?.current) {\n      handleOnScroll();\n      setIsAnimated(false);\n      animationTimeout = setTimeout(() => {\n        setIsHighlighted(true);\n      }, 500);\n      messageHighlightedTimeout = setTimeout(() => {\n        setHighLightedMessageId(0);\n        onMessageHighlighted?.();\n      }, 1600);\n    } else {\n      setIsHighlighted(false);\n    }\n    return () => {\n      clearTimeout(animationTimeout);\n      clearTimeout(messageHighlightedTimeout);\n    };\n  }, [highLightedMessageId, messageScrollRef.current, message.messageId]);\n\n  useLayoutEffect(() => {\n    let animationTimeout = null;\n    let messageAnimatedTimeout = null;\n    if (animatedMessageId === message.messageId && messageScrollRef?.current) {\n      handleOnScroll();\n      setIsHighlighted(false);\n      animationTimeout = setTimeout(() => {\n        setIsAnimated(true);\n      }, 500);\n      messageAnimatedTimeout = setTimeout(() => {\n        setAnimatedMessageId(0);\n        onMessageAnimated?.();\n      }, 1600);\n    } else {\n      setIsAnimated(false);\n    }\n    return () => {\n      clearTimeout(animationTimeout);\n      clearTimeout(messageAnimatedTimeout);\n    };\n  }, [animatedMessageId, messageScrollRef.current, message.messageId, onMessageAnimated]);\n  const renderedMessage = useMemo(() => {\n    return renderMessage?.({\n      message,\n      chainTop,\n      chainBottom,\n    });\n  }, [message, renderMessage]);\n  const renderedCustomSeparator = useMemo(() => {\n    if (renderCustomSeparator) {\n      return renderCustomSeparator?.({ message: message });\n    }\n    return null;\n  }, [message, renderCustomSeparator]);\n\n  if (renderedMessage) {\n    return (\n      <div\n        // do not delete this data attribute, used for scroll to given message\n        // and also for testing\n        data-sb-message-id={message.messageId}\n        data-sb-created-at={message.createdAt}\n        ref={messageScrollRef}\n        className={getClassName([\n          'sendbird-msg-hoc sendbird-msg--scroll-ref',\n          isAnimated ? 'sendbird-msg-hoc__animated' : '',\n          isHighlighted ? 'sendbird-msg-hoc__highlighted' : '',\n        ])}\n      >\n        {/* date-separator */}\n        {\n          // TODO: Add message instance as a function parameter\n          hasSeparator && (renderedCustomSeparator || (\n            <DateSeparator>\n              <Label type={LabelTypography.CAPTION_2} color={LabelColors.ONBACKGROUND_2}>\n                {format(message.createdAt, 'MMMM dd, yyyy', {\n                  locale: dateLocale,\n                })}\n              </Label>\n            </DateSeparator>\n          ))\n        }\n        {renderedMessage}\n      </div>\n    );\n  }\n\n  if (showEdit && message?.isUserMessage?.()) {\n    return renderEditInput?.() || (\n      <>\n        {\n          displaySuggestedMentionList && (\n            <SuggestedMentionList\n              targetNickname={mentionNickname}\n              inputEvent={messageInputEvent}\n              renderUserMentionItem={renderUserMentionItem}\n              onUserItemClick={(user) => {\n                if (user) {\n                  setMentionedUsers([...mentionedUsers, user]);\n                }\n                setMentionNickname('');\n                setSelectedUser(user);\n                setMessageInputEvent(null);\n              }}\n              onFocusItemChange={() => {\n                setMessageInputEvent(null);\n              }}\n              onFetchUsers={(users) => {\n                setMentionSuggestedUsers(users);\n              }}\n              ableAddMention={ableMention}\n              maxMentionCount={maxUserMentionCount}\n              maxSuggestionCount={maxUserSuggestionCount}\n            />\n          )\n        }\n        <MessageInput\n          isEdit\n          disabled={disabled}\n          ref={editMessageInputRef}\n          mentionSelectedUser={selectedUser}\n          isMentionEnabled={isMentionEnabled}\n          message={message}\n          onStartTyping={() => {\n            currentGroupChannel?.startTyping?.();\n          }}\n          onUpdateMessage={({ messageId, message, mentionTemplate }) => {\n            updateMessage({\n              messageId,\n              message,\n              mentionedUsers,\n              mentionTemplate,\n            });\n            setShowEdit(false);\n            currentGroupChannel?.endTyping?.();\n          }}\n          onCancelEdit={() => {\n            setMentionNickname('');\n            setMentionedUsers([]);\n            setMentionedUserIds([]);\n            setMentionSuggestedUsers([]);\n            setShowEdit(false);\n            currentGroupChannel?.endTyping?.();\n          }}\n          onUserMentioned={(user) => {\n            if (selectedUser?.userId === user?.userId) {\n              setSelectedUser(null);\n              setMentionNickname('');\n            }\n          }}\n          onMentionStringChange={(mentionText) => {\n            setMentionNickname(mentionText);\n          }}\n          onMentionedUserIdsUpdated={(userIds) => {\n            setMentionedUserIds(userIds);\n          }}\n          onKeyDown={(e) => {\n            if (displaySuggestedMentionList && mentionSuggestedUsers?.length > 0\n              && ((e.key === MessageInputKeys.Enter && ableMention) || e.key === MessageInputKeys.ArrowUp || e.key === MessageInputKeys.ArrowDown)\n            ) {\n              setMessageInputEvent(e);\n              return true;\n            }\n            return false;\n          }}\n        />\n      </>\n    );\n  }\n\n  return (\n    <div\n      className={getClassName([\n        'sendbird-msg-hoc sendbird-msg--scroll-ref',\n        isAnimated ? 'sendbird-msg-hoc__animated' : '',\n        isHighlighted ? 'sendbird-msg-hoc__highlighted' : '',\n      ])}\n      style={{ marginBottom: '2px' }}\n      data-sb-message-id={message.messageId}\n      data-sb-created-at={message.createdAt}\n      ref={messageScrollRef}\n    >\n      {/* date-separator */}\n      {\n        hasSeparator && (renderedCustomSeparator || (\n          <DateSeparator>\n            <Label type={LabelTypography.CAPTION_2} color={LabelColors.ONBACKGROUND_2}>\n              {format(message.createdAt, 'MMMM dd, yyyy', {\n                locale: dateLocale,\n              })}\n            </Label>\n          </DateSeparator>\n        ))\n      }\n      {/* Message */}\n      {\n        renderMessageContent?.() || (\n          <MessageContent\n            className=\"sendbird-message-hoc__message-content\"\n            userId={userId}\n            scrollToMessage={scrollToMessage}\n            channel={currentGroupChannel}\n            message={message}\n            disabled={!isOnline}\n            chainTop={chainTop}\n            chainBottom={chainBottom}\n            isReactionEnabled={isReactionEnabled}\n            replyType={replyType}\n            threadReplySelectType={threadReplySelectType}\n            nicknamesMap={nicknamesMap}\n            emojiContainer={emojiContainer}\n            showEdit={setShowEdit}\n            showRemove={setShowRemove}\n            showFileViewer={setShowFileViewer}\n            resendMessage={resendMessage}\n            toggleReaction={toggleReaction}\n            setQuoteMessage={setQuoteMessage}\n            onReplyInThread={onReplyInThread}\n            onQuoteMessageClick={onQuoteMessageClick}\n            onMessageHeightChange={handleScroll}\n          />\n        )\n      }\n      {/* Modal */}\n      {\n        showRemove && (\n          <RemoveMessageModal\n            message={message}\n            onCancel={() => setShowRemove(false)}\n          />\n        )\n      }\n      {\n        showFileViewer && (\n          <FileViewer\n            message={message as FileMessage}\n            onCancel={() => setShowFileViewer(false)}\n          />\n        )\n      }\n    </div>\n  );\n};\n\nexport default Message;\n"]},"metadata":{},"sourceType":"module"}