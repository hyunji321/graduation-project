{"ast":null,"code":"import React__default, { useContext, useRef } from 'react';\nimport ContextMenu, { MenuItems, MenuItem } from './ContextMenu.js';\nimport Icon, { IconTypes, IconColors } from './Icon.js';\nimport IconButton from './IconButton.js';\nimport { q as isUserMessage, C as isSentMessage, D as isFailedMessage, E as isPendingMessage, h as getClassName, F as copyToClipboard } from '../index-7eb65acf.js';\nimport { a as LocalizationContext } from '../LocalizationContext-076d6d2e.js';\nimport { R as Role } from '../types-4ff4177c.js';\nimport '../_rollupPluginBabelHelpers-6bb0305c.js';\nimport 'react-dom';\nimport './SortByRow.js';\nimport '../uuid-1adedf62.js';\nimport '../index-63949de5.js';\nimport 'prop-types';\nimport '../stringSet-13bbd4a2.js';\nimport '../utils/message/getOutgoingMessageState.js';\nimport '../index-99aabd9e.js';\nfunction MessageItemMenu(_ref) {\n  var _channel$isGroupChann;\n  let {\n    className,\n    message,\n    channel,\n    isByMe = false,\n    disabled = false,\n    replyType,\n    disableDeleteMessage = null,\n    showEdit,\n    showRemove,\n    resendMessage,\n    setQuoteMessage,\n    setSupposedHover,\n    onReplyInThread,\n    onMoveToParentMessage = null\n  } = _ref;\n  const {\n    stringSet\n  } = useContext(LocalizationContext);\n  const triggerRef = useRef(null);\n  const containerRef = useRef(null);\n  const showMenuItemCopy = isUserMessage(message);\n  const showMenuItemEdit = !(channel !== null && channel !== void 0 && channel.isEphemeral) && isUserMessage(message) && isSentMessage(message) && isByMe;\n  const showMenuItemResend = isFailedMessage(message) && (message === null || message === void 0 ? void 0 : message.isResendable) && isByMe;\n  const showMenuItemDelete = !(channel !== null && channel !== void 0 && channel.isEphemeral) && !isPendingMessage(message) && isByMe;\n  const showMenuItemOpenInChannel = onMoveToParentMessage !== null;\n  /**\n   * TODO: Manage timing issue\n   * User delete pending message -> Sending message success\n   */\n  const isReplyTypeEnabled = !isFailedMessage(message) && !isPendingMessage(message) && (channel === null || channel === void 0 ? void 0 : (_channel$isGroupChann = channel.isGroupChannel) === null || _channel$isGroupChann === void 0 ? void 0 : _channel$isGroupChann.call(channel)) && !(channel !== null && channel !== void 0 && channel.isEphemeral) && ((channel === null || channel === void 0 ? void 0 : channel.isBroadcast) && (channel === null || channel === void 0 ? void 0 : channel.myRole) === Role.OPERATOR || !(channel !== null && channel !== void 0 && channel.isBroadcast));\n  const showMenuItemReply = isReplyTypeEnabled && replyType === 'QUOTE_REPLY';\n  const showMenuItemThread = isReplyTypeEnabled && replyType === 'THREAD' && !(message !== null && message !== void 0 && message.parentMessageId) && onReplyInThread;\n  if (!(showMenuItemCopy || showMenuItemReply || showMenuItemThread || showMenuItemOpenInChannel || showMenuItemEdit || showMenuItemResend || showMenuItemDelete)) {\n    return null;\n  }\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName([className, 'sendbird-message-item-menu']),\n    ref: containerRef\n  }, /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: toggleDropdown => /*#__PURE__*/React__default.createElement(IconButton, {\n      className: \"sendbird-message-item-menu__trigger\",\n      ref: triggerRef,\n      width: \"32px\",\n      height: \"32px\",\n      onClick: () => {\n        toggleDropdown();\n        setSupposedHover(true);\n      },\n      onBlur: () => {\n        setSupposedHover(false);\n      }\n    }, /*#__PURE__*/React__default.createElement(Icon, {\n      className: \"sendbird-message-item-menu__trigger__icon\",\n      type: IconTypes.MORE,\n      fillColor: IconColors.CONTENT_INVERSE,\n      width: \"24px\",\n      height: \"24px\"\n    })),\n    menuItems: close => {\n      var _message$threadInfo;\n      const closeDropdown = () => {\n        close();\n        setSupposedHover(false);\n      };\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        className: \"sendbird-message-item-menu__list\",\n        parentRef: triggerRef,\n        parentContainRef: containerRef,\n        closeDropdown: closeDropdown,\n        openLeft: isByMe\n      }, showMenuItemCopy && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-message-item-menu__list__menu-item menu-item-copy\",\n        onClick: () => {\n          copyToClipboard(message === null || message === void 0 ? void 0 : message.message);\n          closeDropdown();\n        },\n        dataSbId: \"ui_message_item_menu_copy\"\n      }, stringSet.MESSAGE_MENU__COPY), showMenuItemReply && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-message-item-menu__list__menu-item menu-item-reply\",\n        onClick: () => {\n          setQuoteMessage(message);\n          closeDropdown();\n        },\n        disable: (message === null || message === void 0 ? void 0 : message.parentMessageId) > 0,\n        dataSbId: \"ui_message_item_menu_reply\"\n      }, stringSet.MESSAGE_MENU__REPLY), showMenuItemThread && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-message-item-menu__list__menu-item menu-item-thread\",\n        onClick: () => {\n          onReplyInThread === null || onReplyInThread === void 0 ? void 0 : onReplyInThread({\n            message\n          });\n          closeDropdown();\n        },\n        dataSbId: \"ui_message_item_menu_thread\"\n      }, stringSet.MESSAGE_MENU__THREAD), showMenuItemOpenInChannel && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-message-item-menu__list__menu-item menu-item-open-channel\",\n        onClick: () => {\n          onMoveToParentMessage === null || onMoveToParentMessage === void 0 ? void 0 : onMoveToParentMessage();\n          closeDropdown();\n        },\n        dataSbId: \"ui_message_item_menu_open_in_channel\"\n      }, stringSet.MESSAGE_MENU__OPEN_IN_CHANNEL), showMenuItemEdit && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-message-item-menu__list__menu-item menu-item-edit\",\n        onClick: () => {\n          if (!disabled) {\n            showEdit(true);\n            closeDropdown();\n          }\n        },\n        dataSbId: \"ui_message_item_menu_edit\"\n      }, stringSet.MESSAGE_MENU__EDIT), showMenuItemResend && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-message-item-menu__list__menu-item menu-item-resend\",\n        onClick: () => {\n          if (!disabled) {\n            resendMessage(message);\n            closeDropdown();\n          }\n        },\n        dataSbId: \"ui_message_item_menu_resend\"\n      }, stringSet.MESSAGE_MENU__RESEND), showMenuItemDelete && /*#__PURE__*/React__default.createElement(MenuItem, {\n        className: \"sendbird-message-item-menu__list__menu-item menu-item-delete\",\n        onClick: () => {\n          if (!disabled) {\n            showRemove(true);\n            closeDropdown();\n          }\n        },\n        disable: typeof disableDeleteMessage === 'boolean' ? disableDeleteMessage : (message === null || message === void 0 ? void 0 : (_message$threadInfo = message.threadInfo) === null || _message$threadInfo === void 0 ? void 0 : _message$threadInfo.replyCount) > 0,\n        dataSbId: \"ui_message_item_menu_delete\"\n      }, stringSet.MESSAGE_MENU__DELETE));\n    }\n  }));\n}\nexport { MessageItemMenu as default };","map":{"version":3,"mappings":"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","names":["MessageItemMenu","className","message","channel","isByMe","disabled","replyType","disableDeleteMessage","showEdit","showRemove","resendMessage","setQuoteMessage","setSupposedHover","onReplyInThread","onMoveToParentMessage","stringSet","useContext","LocalizationContext","triggerRef","useRef","containerRef","showMenuItemCopy","isUserMessage","showMenuItemEdit","isEphemeral","isSentMessage","showMenuItemResend","isFailedMessage","isResendable","showMenuItemDelete","isPendingMessage","showMenuItemOpenInChannel","isReplyTypeEnabled","isGroupChannel","_channel$isGroupChann","isBroadcast","myRole","Role","OPERATOR","showMenuItemReply","showMenuItemThread","parentMessageId","React","getClassName","ref","ContextMenu","menuTrigger","toggleDropdown","IconButton","width","height","onClick","onBlur","Icon","type","IconTypes","MORE","fillColor","IconColors","CONTENT_INVERSE","menuItems","close","closeDropdown","MenuItems","parentRef","parentContainRef","openLeft","MenuItem","copyToClipboard","dataSbId","MESSAGE_MENU__COPY","disable","MESSAGE_MENU__REPLY","MESSAGE_MENU__THREAD","MESSAGE_MENU__OPEN_IN_CHANNEL","MESSAGE_MENU__EDIT","MESSAGE_MENU__RESEND","threadInfo","_message$threadInfo","replyCount","MESSAGE_MENU__DELETE"],"sources":["C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\ui\\MessageItemMenu\\index.tsx"],"sourcesContent":["import './index.scss';\nimport React, { ReactElement, useContext, useRef } from 'react';\nimport type { FileMessage, UserMessage } from '@sendbird/chat/message';\nimport type { GroupChannel } from '@sendbird/chat/groupChannel';\nimport type { OpenChannel } from '@sendbird/chat/openChannel';\n\nimport ContextMenu, { MenuItems, MenuItem } from '../ContextMenu';\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport IconButton from '../IconButton';\nimport {\n  getClassName,\n  copyToClipboard,\n  isUserMessage,\n  isSentMessage,\n  isFailedMessage,\n  isPendingMessage,\n} from '../../utils/index';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport { ReplyType } from '../../index';\nimport { Role } from '../../lib/types';\n\ninterface Props {\n  className?: string | Array<string>;\n  message: UserMessage | FileMessage;\n  channel: GroupChannel | OpenChannel;\n  isByMe?: boolean;\n  disabled?: boolean;\n  replyType?: ReplyType;\n  disableDeleteMessage?: boolean;\n  showEdit?: (bool: boolean) => void;\n  showRemove?: (bool: boolean) => void;\n  resendMessage?: (message: UserMessage | FileMessage) => void;\n  setQuoteMessage?: (message: UserMessage | FileMessage) => void;\n  setSupposedHover?: (bool: boolean) => void;\n  onReplyInThread?: (props: { message: UserMessage | FileMessage }) => void;\n  onMoveToParentMessage?: () => void;\n}\n\nexport default function MessageItemMenu({\n  className,\n  message,\n  channel,\n  isByMe = false,\n  disabled = false,\n  replyType,\n  disableDeleteMessage = null,\n  showEdit,\n  showRemove,\n  resendMessage,\n  setQuoteMessage,\n  setSupposedHover,\n  onReplyInThread,\n  onMoveToParentMessage = null,\n}: Props): ReactElement {\n  const { stringSet } = useContext(LocalizationContext);\n  const triggerRef = useRef(null);\n  const containerRef = useRef(null);\n\n  const showMenuItemCopy: boolean = isUserMessage(message as UserMessage);\n  const showMenuItemEdit: boolean = (!channel?.isEphemeral && isUserMessage(message as UserMessage) && isSentMessage(message) && isByMe);\n  const showMenuItemResend: boolean = (isFailedMessage(message) && message?.isResendable && isByMe);\n  const showMenuItemDelete: boolean = !channel?.isEphemeral && !isPendingMessage(message) && isByMe;\n  const showMenuItemOpenInChannel: boolean = onMoveToParentMessage !== null;\n  /**\n   * TODO: Manage timing issue\n   * User delete pending message -> Sending message success\n   */\n  const isReplyTypeEnabled = !isFailedMessage(message)\n    && !isPendingMessage(message)\n    && (channel?.isGroupChannel?.()\n    && !channel?.isEphemeral\n    && (\n      ((channel as GroupChannel)?.isBroadcast && channel?.myRole === Role.OPERATOR)\n      || !(channel as GroupChannel)?.isBroadcast\n    ));\n  const showMenuItemReply = isReplyTypeEnabled && replyType === 'QUOTE_REPLY';\n  const showMenuItemThread = isReplyTypeEnabled && replyType === 'THREAD' && !message?.parentMessageId && onReplyInThread;\n\n  if (!(showMenuItemCopy\n    || showMenuItemReply\n    || showMenuItemThread\n    || showMenuItemOpenInChannel\n    || showMenuItemEdit\n    || showMenuItemResend\n    || showMenuItemDelete\n  )) {\n    return null;\n  }\n  return (\n    <div\n      className={getClassName([className, 'sendbird-message-item-menu'])}\n      ref={containerRef}\n    >\n      <ContextMenu\n        menuTrigger={(toggleDropdown: () => void): ReactElement => (\n          <IconButton\n            className=\"sendbird-message-item-menu__trigger\"\n            ref={triggerRef}\n            width=\"32px\"\n            height=\"32px\"\n            onClick={(): void => {\n              toggleDropdown();\n              setSupposedHover(true);\n            }}\n            onBlur={(): void => {\n              setSupposedHover(false);\n            }}\n          >\n            <Icon\n              className=\"sendbird-message-item-menu__trigger__icon\"\n              type={IconTypes.MORE}\n              fillColor={IconColors.CONTENT_INVERSE}\n              width=\"24px\"\n              height=\"24px\"\n            />\n          </IconButton>\n        )}\n        menuItems={(close: () => void): ReactElement => {\n          const closeDropdown = (): void => {\n            close();\n            setSupposedHover(false);\n          };\n          return (\n            <MenuItems\n              className=\"sendbird-message-item-menu__list\"\n              parentRef={triggerRef}\n              parentContainRef={containerRef}\n              closeDropdown={closeDropdown}\n              openLeft={isByMe}\n            >\n              {showMenuItemCopy && (\n                <MenuItem\n                  className=\"sendbird-message-item-menu__list__menu-item menu-item-copy\"\n                  onClick={() => {\n                    copyToClipboard((message as UserMessage)?.message);\n                    closeDropdown();\n                  }}\n                  dataSbId=\"ui_message_item_menu_copy\"\n                >\n                  {stringSet.MESSAGE_MENU__COPY}\n                </MenuItem>\n              )}\n              {showMenuItemReply && (\n                <MenuItem\n                  className=\"sendbird-message-item-menu__list__menu-item menu-item-reply\"\n                  onClick={() => {\n                    setQuoteMessage(message);\n                    closeDropdown();\n                  }}\n                  disable={message?.parentMessageId > 0}\n                  dataSbId=\"ui_message_item_menu_reply\"\n                >\n                  {stringSet.MESSAGE_MENU__REPLY}\n                </MenuItem>\n              )}\n              {showMenuItemThread && (\n                <MenuItem\n                  className=\"sendbird-message-item-menu__list__menu-item menu-item-thread\"\n                  onClick={() => {\n                    onReplyInThread?.({ message });\n                    closeDropdown();\n                  }}\n                  dataSbId=\"ui_message_item_menu_thread\"\n                >\n                  {stringSet.MESSAGE_MENU__THREAD}\n                </MenuItem>\n              )}\n              {showMenuItemOpenInChannel && (\n                <MenuItem\n                  className=\"sendbird-message-item-menu__list__menu-item menu-item-open-channel\"\n                  onClick={() => {\n                    onMoveToParentMessage?.();\n                    closeDropdown();\n                  }}\n                  dataSbId=\"ui_message_item_menu_open_in_channel\"\n                >\n                  {stringSet.MESSAGE_MENU__OPEN_IN_CHANNEL}\n                </MenuItem>\n              )}\n              {showMenuItemEdit && (\n                <MenuItem\n                  className=\"sendbird-message-item-menu__list__menu-item menu-item-edit\"\n                  onClick={() => {\n                    if (!disabled) {\n                      showEdit(true);\n                      closeDropdown();\n                    }\n                  }}\n                  dataSbId=\"ui_message_item_menu_edit\"\n                >\n                  {stringSet.MESSAGE_MENU__EDIT}\n                </MenuItem>\n              )}\n              {showMenuItemResend && (\n                <MenuItem\n                  className=\"sendbird-message-item-menu__list__menu-item menu-item-resend\"\n                  onClick={() => {\n                    if (!disabled) {\n                      resendMessage(message);\n                      closeDropdown();\n                    }\n                  }}\n                  dataSbId=\"ui_message_item_menu_resend\"\n                >\n                  {stringSet.MESSAGE_MENU__RESEND}\n                </MenuItem>\n              )}\n              {showMenuItemDelete && (\n                <MenuItem\n                  className=\"sendbird-message-item-menu__list__menu-item menu-item-delete\"\n                  onClick={() => {\n                    if (!disabled) {\n                      showRemove(true);\n                      closeDropdown();\n                    }\n                  }}\n                  disable={\n                    typeof disableDeleteMessage === 'boolean'\n                      ? disableDeleteMessage\n                      : message?.threadInfo?.replyCount > 0\n                  }\n                  dataSbId=\"ui_message_item_menu_delete\"\n                >\n                  {stringSet.MESSAGE_MENU__DELETE}\n                </MenuItem>\n              )}\n            </MenuItems>\n          );\n        }}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}