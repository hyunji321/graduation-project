{"ast":null,"code":"import React__default from 'react';\nimport { K } from './index.module-54d57ec3.js';\nimport { T as TOKEN_TYPES, U as USER_MENTION_PREFIX, g as getWhiteSpacePreservedText } from './tokenize-c40f2b57.js';\nimport { useMessageContext } from './Message/context.js';\nimport MentionLabel from './ui/MentionLabel.js';\nimport LinkLabel from './ui/LinkLabel.js';\nimport { a as LabelTypography } from './index-63949de5.js';\n\n// this function is used to generate a unique key for token in message\n// it changes with updated time and index\n// messageUpdatedAt is the key part of this key generator\nfunction keyGenerator(createdAt, messageUpdatedAt, index) {\n  return `sb-msg_${createdAt}_${messageUpdatedAt}_${index}`;\n}\nfunction TextFragment(_ref) {\n  let {\n    tokens\n  } = _ref;\n  const messageStore = useMessageContext();\n  const message = messageStore === null || messageStore === void 0 ? void 0 : messageStore.message;\n  const isByMe = messageStore === null || messageStore === void 0 ? void 0 : messageStore.isByMe;\n  const {\n    updatedAt,\n    createdAt\n  } = message;\n  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, tokens === null || tokens === void 0 ? void 0 : tokens.map((token, idx) => {\n    const key = keyGenerator(createdAt, updatedAt, idx);\n    return K(token.type).with(TOKEN_TYPES.mention, () => /*#__PURE__*/React__default.createElement(\"span\", {\n      className: \"sendbird-word\",\n      key: key\n    }, /*#__PURE__*/React__default.createElement(MentionLabel, {\n      mentionTemplate: USER_MENTION_PREFIX,\n      mentionedUserId: token.userId,\n      mentionedUserNickname: token.value,\n      isByMe: isByMe\n    }))).with(TOKEN_TYPES.url, () => /*#__PURE__*/React__default.createElement(\"span\", {\n      className: \"sendbird-word\",\n      key: key\n    }, /*#__PURE__*/React__default.createElement(LinkLabel, {\n      className: \"sendbird-word__url\",\n      src: token.value,\n      type: LabelTypography.BODY_1\n    }, token.value))).otherwise(() => /*#__PURE__*/React__default.createElement(React__default.Fragment, {\n      key: key\n    }, getWhiteSpacePreservedText(token.value)));\n  }));\n}\nexport { TextFragment as T };","map":{"version":3,"mappings":";;;;;;;;AAAA;AACA;AACA;AACO,SAASA,YAAYA,CAC1BC,SAAiB,EACjBC,gBAAwB,EACxBC,KAAa,EACL;EACR,OAAQ,UAASF,SAAU,IAAGC,gBAAiB,IAAGC,KAAO;AAC3D;ACQe,SAASC,YAAYA,OAEM;EAAA,IAFL;IACnCC;EACiB,CAAC;EAClB,MAAMC,YAAY,GAAGC,iBAAiB,EAAE;EAExC,MAAMC,OAAO,GAAGF,YAAY,aAAZA,YAAY,KAAZA,8BAAY,CAAEE,OAAsB;EACpD,MAAMC,MAAM,GAAGH,YAAY,aAAZA,YAAY,KAAZA,8BAAY,CAAEG,MAAM;EACnC,MAAM;IAAEC,SAAS;IAAET;EAAU,CAAC,GAAGO,OAAO;EAExC,oBACEG,4DACGN,MAAM,aAANA,MAAM,KAANA,wBAAM,CAAEO,GAAG,CAAC,CAACC,KAAK,EAAEC,GAAG,KAAK;IAC3B,MAAMC,GAAG,GAAGf,YAAY,CAACC,SAAS,EAAES,SAAS,EAAEI,GAAG,CAAC;IACnD,OAAOE,CAAK,CAACH,KAAK,CAACI,IAAI,CAAC,CACrBC,IAAI,CAACC,WAAW,CAACC,OAAO,EAAE,mBACzBT;MAAMU,SAAS,EAAC,eAAe;MAACN,GAAG,EAAEA;IAAI,gBACvCJ,6BAACW,YAAY;MACXC,eAAe,EAAEC,mBAAoB;MACrCC,eAAe,EAAEZ,KAAK,CAACa,MAAO;MAC9BC,qBAAqB,EAAEd,KAAK,CAACe,KAAM;MACnCnB,MAAM,EAAEA;IAAO,EACf,CAEL,CAAC,CACDS,IAAI,CAACC,WAAW,CAACU,GAAG,EAAE,mBACrBlB;MAAMU,SAAS,EAAC,eAAe;MAACN,GAAG,EAAEA;IAAI,gBACvCJ,6BAACmB,SAAS;MACRT,SAAS,EAAC,oBAAoB;MAC9BU,GAAG,EAAElB,KAAK,CAACe,KAAM;MACjBX,IAAI,EAAEe,eAAe,CAACC;IAAO,GAE5BpB,KAAK,CAACe,KAAK,CACF,CAEf,CAAC,CACDM,SAAS,CAAC,mBAAMvB,6BAACA,cAAK,CAACwB,QAAQ;MAACpB,GAAG,EAAEA;IAAI,GAAEqB,0BAA0B,CAACvB,KAAK,CAACe,KAAK,CAAC,CAAkB,CAAC;EAC1G,CAAC,CAAC,CACD;AAEP","names":["keyGenerator","createdAt","messageUpdatedAt","index","TextFragment","tokens","messageStore","useMessageContext","message","isByMe","updatedAt","React","map","token","idx","key","match","type","with","TOKEN_TYPES","mention","className","MentionLabel","mentionTemplate","USER_MENTION_PREFIX","mentionedUserId","userId","mentionedUserNickname","value","url","LinkLabel","src","LabelTypography","BODY_1","otherwise","Fragment","getWhiteSpacePreservedText"],"sources":["C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Message\\utils\\tokens\\keyGenerator.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Message\\components\\TextFragment\\index.tsx"],"sourcesContent":["// this function is used to generate a unique key for token in message\n// it changes with updated time and index\n// messageUpdatedAt is the key part of this key generator\nexport function keyGenerator(\n  createdAt: number,\n  messageUpdatedAt: number,\n  index: number,\n): string {\n  return `sb-msg_${createdAt}_${messageUpdatedAt}_${index}`;\n}\n","import React from 'react';\nimport { UserMessage } from '@sendbird/chat/message';\nimport { match } from 'ts-pattern';\n\nimport { TOKEN_TYPES, Token } from '../../utils/tokens/types';\nimport { useMessageContext } from '../../context/MessageProvider';\nimport { keyGenerator } from '../../utils/tokens/keyGenerator';\nimport MentionLabel from '../../../../ui/MentionLabel';\nimport { USER_MENTION_PREFIX } from '../../consts';\nimport LinkLabel from '../../../../ui/LinkLabel';\nimport { LabelTypography } from '../../../../ui/Label';\nimport { getWhiteSpacePreservedText } from '../../utils/tokens/tokenize';\n\nexport type TextFragmentProps = {\n  tokens: Token[];\n};\n\nexport default function TextFragment({\n  tokens,\n}: TextFragmentProps): React.ReactElement {\n  const messageStore = useMessageContext();\n\n  const message = messageStore?.message as UserMessage;\n  const isByMe = messageStore?.isByMe;\n  const { updatedAt, createdAt } = message;\n\n  return (\n    <>\n      {tokens?.map((token, idx) => {\n        const key = keyGenerator(createdAt, updatedAt, idx);\n        return match(token.type)\n          .with(TOKEN_TYPES.mention, () => (\n            <span className=\"sendbird-word\" key={key}>\n              <MentionLabel\n                mentionTemplate={USER_MENTION_PREFIX}\n                mentionedUserId={token.userId}\n                mentionedUserNickname={token.value}\n                isByMe={isByMe}\n              />\n            </span>\n          ))\n          .with(TOKEN_TYPES.url, () => (\n            <span className=\"sendbird-word\" key={key}>\n              <LinkLabel\n                className=\"sendbird-word__url\"\n                src={token.value}\n                type={LabelTypography.BODY_1}\n              >\n                {token.value}\n              </LinkLabel>\n            </span>\n          ))\n          .otherwise(() => <React.Fragment key={key}>{getWhiteSpacePreservedText(token.value)}</React.Fragment>);\n      })}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}