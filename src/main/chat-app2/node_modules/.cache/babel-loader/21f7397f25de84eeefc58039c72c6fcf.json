{"ast":null,"code":"import { d as defaultLocale } from './index-99aabd9e.js';\nfunction requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}\nfunction _typeof$1(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof$1 = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof$1 = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof$1(obj);\n}\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nfunction toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || _typeof$1(argument) === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n    return new Date(NaN);\n  }\n}\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\n/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param {*} value - the value to check\n * @returns {boolean} true if the given value is a date\n * @throws {TypeError} 1 arguments required\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\n\nfunction isDate(value) {\n  requiredArgs(1, arguments);\n  return value instanceof Date || _typeof(value) === 'object' && Object.prototype.toString.call(value) === '[object Date]';\n}\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @param {*} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\n\nfunction isValid(dirtyDate) {\n  requiredArgs(1, arguments);\n  if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {\n    return false;\n  }\n  var date = toDate(dirtyDate);\n  return !isNaN(Number(date));\n}\nfunction toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n  var number = Number(dirtyNumber);\n  if (isNaN(number)) {\n    return number;\n  }\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}\n\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\n\nfunction addMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var timestamp = toDate(dirtyDate).getTime();\n  var amount = toInteger(dirtyAmount);\n  return new Date(timestamp + amount);\n}\n\n/**\n * @name subMilliseconds\n * @category Millisecond Helpers\n * @summary Subtract the specified number of milliseconds from the given date.\n *\n * @description\n * Subtract the specified number of milliseconds from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:\n * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:29.250\n */\n\nfunction subMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, -amount);\n}\nvar MILLISECONDS_IN_DAY = 86400000;\nfunction getUTCDayOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var timestamp = date.getTime();\n  date.setUTCMonth(0, 1);\n  date.setUTCHours(0, 0, 0, 0);\n  var startOfYearTimestamp = date.getTime();\n  var difference = timestamp - startOfYearTimestamp;\n  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;\n}\nfunction startOfUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var weekStartsOn = 1;\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}\nfunction getUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getUTCFullYear();\n  var fourthOfJanuaryOfNextYear = new Date(0);\n  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);\n  var fourthOfJanuaryOfThisYear = new Date(0);\n  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\nfunction startOfUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var year = getUTCISOWeekYear(dirtyDate);\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setUTCFullYear(year, 0, 4);\n  fourthOfJanuary.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCISOWeek(fourthOfJanuary);\n  return date;\n}\nvar MILLISECONDS_IN_WEEK$1 = 604800000;\nfunction getUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1;\n}\nvar defaultOptions = {};\nfunction getDefaultOptions() {\n  return defaultOptions;\n}\nfunction startOfUTCWeek(dirtyDate, options) {\n  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;\n  requiredArgs(1, arguments);\n  var defaultOptions = getDefaultOptions();\n  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}\nfunction getUTCWeekYear(dirtyDate, options) {\n  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getUTCFullYear();\n  var defaultOptions = getDefaultOptions();\n  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n  var firstWeekOfNextYear = new Date(0);\n  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options);\n  var firstWeekOfThisYear = new Date(0);\n  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options);\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\nfunction startOfUTCWeekYear(dirtyDate, options) {\n  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;\n  requiredArgs(1, arguments);\n  var defaultOptions = getDefaultOptions();\n  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);\n  var year = getUTCWeekYear(dirtyDate, options);\n  var firstWeek = new Date(0);\n  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCWeek(firstWeek, options);\n  return date;\n}\nvar MILLISECONDS_IN_WEEK = 604800000;\nfunction getUTCWeek(dirtyDate, options) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}\nfunction addLeadingZeros(number, targetLength) {\n  var sign = number < 0 ? '-' : '';\n  var output = Math.abs(number).toString();\n  while (output.length < targetLength) {\n    output = '0' + output;\n  }\n  return sign + output;\n}\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nvar formatters$2 = {\n  // Year\n  y: function y(date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n    var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);\n  },\n  // Month\n  M: function M(date, token) {\n    var month = date.getUTCMonth();\n    return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n  // Day of the month\n  d: function d(date, token) {\n    return addLeadingZeros(date.getUTCDate(), token.length);\n  },\n  // AM or PM\n  a: function a(date, token) {\n    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';\n    switch (token) {\n      case 'a':\n      case 'aa':\n        return dayPeriodEnumValue.toUpperCase();\n      case 'aaa':\n        return dayPeriodEnumValue;\n      case 'aaaaa':\n        return dayPeriodEnumValue[0];\n      case 'aaaa':\n      default:\n        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';\n    }\n  },\n  // Hour [1-12]\n  h: function h(date, token) {\n    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);\n  },\n  // Hour [0-23]\n  H: function H(date, token) {\n    return addLeadingZeros(date.getUTCHours(), token.length);\n  },\n  // Minute\n  m: function m(date, token) {\n    return addLeadingZeros(date.getUTCMinutes(), token.length);\n  },\n  // Second\n  s: function s(date, token) {\n    return addLeadingZeros(date.getUTCSeconds(), token.length);\n  },\n  // Fraction of second\n  S: function S(date, token) {\n    var numberOfDigits = token.length;\n    var milliseconds = date.getUTCMilliseconds();\n    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));\n    return addLeadingZeros(fractionalSeconds, token.length);\n  }\n};\nvar dayPeriodEnum = {\n  am: 'am',\n  pm: 'pm',\n  midnight: 'midnight',\n  noon: 'noon',\n  morning: 'morning',\n  afternoon: 'afternoon',\n  evening: 'evening',\n  night: 'night'\n};\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\nvar formatters = {\n  // Era\n  G: function G(date, token, localize) {\n    var era = date.getUTCFullYear() > 0 ? 1 : 0;\n    switch (token) {\n      // AD, BC\n      case 'G':\n      case 'GG':\n      case 'GGG':\n        return localize.era(era, {\n          width: 'abbreviated'\n        });\n      // A, B\n\n      case 'GGGGG':\n        return localize.era(era, {\n          width: 'narrow'\n        });\n      // Anno Domini, Before Christ\n\n      case 'GGGG':\n      default:\n        return localize.era(era, {\n          width: 'wide'\n        });\n    }\n  },\n  // Year\n  y: function y(date, token, localize) {\n    // Ordinal number\n    if (token === 'yo') {\n      var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n      var year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, {\n        unit: 'year'\n      });\n    }\n    return formatters$2.y(date, token);\n  },\n  // Local week-numbering year\n  Y: function Y(date, token, localize, options) {\n    var signedWeekYear = getUTCWeekYear(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year\n\n    if (token === 'YY') {\n      var twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    } // Ordinal number\n\n    if (token === 'Yo') {\n      return localize.ordinalNumber(weekYear, {\n        unit: 'year'\n      });\n    } // Padding\n\n    return addLeadingZeros(weekYear, token.length);\n  },\n  // ISO week-numbering year\n  R: function R(date, token) {\n    var isoWeekYear = getUTCISOWeekYear(date); // Padding\n\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function u(date, token) {\n    var year = date.getUTCFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n  // Quarter\n  Q: function Q(date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'Q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'QQ':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'Qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'QQQ':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'QQQQQ':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'QQQQ':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone quarter\n  q: function q(date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'qq':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'qqq':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'qqqqq':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'qqqq':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Month\n  M: function M(date, token, localize) {\n    var month = date.getUTCMonth();\n    switch (token) {\n      case 'M':\n      case 'MM':\n        return formatters$2.M(date, token);\n      // 1st, 2nd, ..., 12th\n\n      case 'Mo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'MMM':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // J, F, ..., D\n\n      case 'MMMMM':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // January, February, ..., December\n\n      case 'MMMM':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone month\n  L: function L(date, token, localize) {\n    var month = date.getUTCMonth();\n    switch (token) {\n      // 1, 2, ..., 12\n      case 'L':\n        return String(month + 1);\n      // 01, 02, ..., 12\n\n      case 'LL':\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n\n      case 'Lo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'LLL':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // J, F, ..., D\n\n      case 'LLLLL':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // January, February, ..., December\n\n      case 'LLLL':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Local week of year\n  w: function w(date, token, localize, options) {\n    var week = getUTCWeek(date, options);\n    if (token === 'wo') {\n      return localize.ordinalNumber(week, {\n        unit: 'week'\n      });\n    }\n    return addLeadingZeros(week, token.length);\n  },\n  // ISO week of year\n  I: function I(date, token, localize) {\n    var isoWeek = getUTCISOWeek(date);\n    if (token === 'Io') {\n      return localize.ordinalNumber(isoWeek, {\n        unit: 'week'\n      });\n    }\n    return addLeadingZeros(isoWeek, token.length);\n  },\n  // Day of the month\n  d: function d(date, token, localize) {\n    if (token === 'do') {\n      return localize.ordinalNumber(date.getUTCDate(), {\n        unit: 'date'\n      });\n    }\n    return formatters$2.d(date, token);\n  },\n  // Day of year\n  D: function D(date, token, localize) {\n    var dayOfYear = getUTCDayOfYear(date);\n    if (token === 'Do') {\n      return localize.ordinalNumber(dayOfYear, {\n        unit: 'dayOfYear'\n      });\n    }\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n  // Day of week\n  E: function E(date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n    switch (token) {\n      // Tue\n      case 'E':\n      case 'EE':\n      case 'EEE':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'EEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'EEEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'EEEE':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Local day of week\n  e: function e(date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case 'e':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'ee':\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n\n      case 'eo':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n      case 'eee':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'eeeee':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'eeeeee':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'eeee':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone local day of week\n  c: function c(date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case 'c':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'cc':\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n\n      case 'co':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n      case 'ccc':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // T\n\n      case 'ccccc':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // Tu\n\n      case 'cccccc':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'standalone'\n        });\n      // Tuesday\n\n      case 'cccc':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // ISO day of week\n  i: function i(date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n    switch (token) {\n      // 2\n      case 'i':\n        return String(isoDayOfWeek);\n      // 02\n\n      case 'ii':\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n\n      case 'io':\n        return localize.ordinalNumber(isoDayOfWeek, {\n          unit: 'day'\n        });\n      // Tue\n\n      case 'iii':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'iiiii':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'iiiiii':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'iiii':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM or PM\n  a: function a(date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n    switch (token) {\n      case 'a':\n      case 'aa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      case 'aaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }).toLowerCase();\n      case 'aaaaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      case 'aaaa':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM, PM, midnight, noon\n  b: function b(date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n    }\n    switch (token) {\n      case 'b':\n      case 'bb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      case 'bbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }).toLowerCase();\n      case 'bbbbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      case 'bbbb':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // in the morning, in the afternoon, in the evening, at night\n  B: function B(date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n    switch (token) {\n      case 'B':\n      case 'BB':\n      case 'BBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      case 'BBBBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      case 'BBBB':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Hour [1-12]\n  h: function h(date, token, localize) {\n    if (token === 'ho') {\n      var hours = date.getUTCHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n    return formatters$2.h(date, token);\n  },\n  // Hour [0-23]\n  H: function H(date, token, localize) {\n    if (token === 'Ho') {\n      return localize.ordinalNumber(date.getUTCHours(), {\n        unit: 'hour'\n      });\n    }\n    return formatters$2.H(date, token);\n  },\n  // Hour [0-11]\n  K: function K(date, token, localize) {\n    var hours = date.getUTCHours() % 12;\n    if (token === 'Ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n    return addLeadingZeros(hours, token.length);\n  },\n  // Hour [1-24]\n  k: function k(date, token, localize) {\n    var hours = date.getUTCHours();\n    if (hours === 0) hours = 24;\n    if (token === 'ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n    return addLeadingZeros(hours, token.length);\n  },\n  // Minute\n  m: function m(date, token, localize) {\n    if (token === 'mo') {\n      return localize.ordinalNumber(date.getUTCMinutes(), {\n        unit: 'minute'\n      });\n    }\n    return formatters$2.m(date, token);\n  },\n  // Second\n  s: function s(date, token, localize) {\n    if (token === 'so') {\n      return localize.ordinalNumber(date.getUTCSeconds(), {\n        unit: 'second'\n      });\n    }\n    return formatters$2.s(date, token);\n  },\n  // Fraction of second\n  S: function S(date, token) {\n    return formatters$2.S(date, token);\n  },\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function X(date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n    if (timezoneOffset === 0) {\n      return 'Z';\n    }\n    switch (token) {\n      // Hours and optional minutes\n      case 'X':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n\n      case 'XXXX':\n      case 'XX':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n\n      case 'XXXXX':\n      case 'XXX': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function x(date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n    switch (token) {\n      // Hours and optional minutes\n      case 'x':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n\n      case 'xxxx':\n      case 'xx':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n\n      case 'xxxxx':\n      case 'xxx': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (GMT)\n  O: function O(date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n    switch (token) {\n      // Short\n      case 'O':\n      case 'OO':\n      case 'OOO':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'OOOO':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (specific non-location)\n  z: function z(date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n    switch (token) {\n      // Short\n      case 'z':\n      case 'zz':\n      case 'zzz':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'zzzz':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Seconds timestamp\n  t: function t(date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = Math.floor(originalDate.getTime() / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n  // Milliseconds timestamp\n  T: function T(date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = originalDate.getTime();\n    return addLeadingZeros(timestamp, token.length);\n  }\n};\nfunction formatTimezoneShort(offset, dirtyDelimiter) {\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = Math.floor(absOffset / 60);\n  var minutes = absOffset % 60;\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n  var delimiter = dirtyDelimiter || '';\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\nfunction formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {\n  if (offset % 60 === 0) {\n    var sign = offset > 0 ? '-' : '+';\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n  return formatTimezone(offset, dirtyDelimiter);\n}\nfunction formatTimezone(offset, dirtyDelimiter) {\n  var delimiter = dirtyDelimiter || '';\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);\n  var minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\nvar formatters$1 = formatters;\nvar dateLongFormatter = function dateLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'P':\n      return formatLong.date({\n        width: 'short'\n      });\n    case 'PP':\n      return formatLong.date({\n        width: 'medium'\n      });\n    case 'PPP':\n      return formatLong.date({\n        width: 'long'\n      });\n    case 'PPPP':\n    default:\n      return formatLong.date({\n        width: 'full'\n      });\n  }\n};\nvar timeLongFormatter = function timeLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'p':\n      return formatLong.time({\n        width: 'short'\n      });\n    case 'pp':\n      return formatLong.time({\n        width: 'medium'\n      });\n    case 'ppp':\n      return formatLong.time({\n        width: 'long'\n      });\n    case 'pppp':\n    default:\n      return formatLong.time({\n        width: 'full'\n      });\n  }\n};\nvar dateTimeLongFormatter = function dateTimeLongFormatter(pattern, formatLong) {\n  var matchResult = pattern.match(/(P+)(p+)?/) || [];\n  var datePattern = matchResult[1];\n  var timePattern = matchResult[2];\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n  var dateTimeFormat;\n  switch (datePattern) {\n    case 'P':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'short'\n      });\n      break;\n    case 'PP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'medium'\n      });\n      break;\n    case 'PPP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'long'\n      });\n      break;\n    case 'PPPP':\n    default:\n      dateTimeFormat = formatLong.dateTime({\n        width: 'full'\n      });\n      break;\n  }\n  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));\n};\nvar longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter\n};\nvar longFormatters$1 = longFormatters;\n\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nfunction getTimezoneOffsetInMilliseconds(date) {\n  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n  utcDate.setUTCFullYear(date.getFullYear());\n  return date.getTime() - utcDate.getTime();\n}\nvar protectedDayOfYearTokens = ['D', 'DD'];\nvar protectedWeekYearTokens = ['YY', 'YYYY'];\nfunction isProtectedDayOfYearToken(token) {\n  return protectedDayOfYearTokens.indexOf(token) !== -1;\n}\nfunction isProtectedWeekYearToken(token) {\n  return protectedWeekYearTokens.indexOf(token) !== -1;\n}\nfunction throwProtectedError(token, format, input) {\n  if (token === 'YYYY') {\n    throw new RangeError(\"Use `yyyy` instead of `YYYY` (in `\".concat(format, \"`) for formatting years to the input `\").concat(input, \"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\"));\n  } else if (token === 'YY') {\n    throw new RangeError(\"Use `yy` instead of `YY` (in `\".concat(format, \"`) for formatting years to the input `\").concat(input, \"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\"));\n  } else if (token === 'D') {\n    throw new RangeError(\"Use `d` instead of `D` (in `\".concat(format, \"`) for formatting days of the month to the input `\").concat(input, \"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\"));\n  } else if (token === 'DD') {\n    throw new RangeError(\"Use `dd` instead of `DD` (in `\".concat(format, \"`) for formatting days of the month to the input `\").concat(input, \"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\"));\n  }\n}\n\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\n\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name format\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}\n *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @param {Date|Number} date - the original date\n * @param {String} format - the string of tokens\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @returns {String} the formatted date string\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `localize` property\n * @throws {RangeError} `options.locale` must contain `formatLong` property\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * const result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\n\nfunction format(dirtyDate, dirtyFormatStr, options) {\n  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;\n  requiredArgs(2, arguments);\n  var formatStr = String(dirtyFormatStr);\n  var defaultOptions = getDefaultOptions();\n  var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : defaultLocale;\n  var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n  var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n  if (!locale.localize) {\n    throw new RangeError('locale must contain localize property');\n  }\n  if (!locale.formatLong) {\n    throw new RangeError('locale must contain formatLong property');\n  }\n  var originalDate = toDate(dirtyDate);\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376\n\n  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);\n  var utcDate = subMilliseconds(originalDate, timezoneOffset);\n  var formatterOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale,\n    _originalDate: originalDate\n  };\n  var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {\n    var firstCharacter = substring[0];\n    if (firstCharacter === 'p' || firstCharacter === 'P') {\n      var longFormatter = longFormatters$1[firstCharacter];\n      return longFormatter(substring, locale.formatLong);\n    }\n    return substring;\n  }).join('').match(formattingTokensRegExp).map(function (substring) {\n    // Replace two single quote characters with one single quote character\n    if (substring === \"''\") {\n      return \"'\";\n    }\n    var firstCharacter = substring[0];\n    if (firstCharacter === \"'\") {\n      return cleanEscapedString(substring);\n    }\n    var formatter = formatters$1[firstCharacter];\n    if (formatter) {\n      if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));\n      }\n      if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));\n      }\n      return formatter(utcDate, substring, locale.localize, formatterOptions);\n    }\n    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n    }\n    return substring;\n  }).join('');\n  return result;\n}\nfunction cleanEscapedString(input) {\n  var matched = input.match(escapedStringRegExp);\n  if (!matched) {\n    return input;\n  }\n  return matched[1].replace(doubleQuoteRegExp, \"'\");\n}\nexport { toInteger as a, format as f, requiredArgs as r, toDate as t };","map":{"version":3,"mappings":"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","names":["requiredArgs","required","args","length","TypeError","_typeof","obj","Symbol","iterator","constructor","prototype","toDate","argument","arguments","argStr","Object","toString","call","Date","getTime","console","warn","Error","stack","NaN","isDate","value","isValid","dirtyDate","date","isNaN","Number","toInteger","dirtyNumber","number","Math","ceil","floor","addMilliseconds","dirtyAmount","timestamp","amount","subMilliseconds","MILLISECONDS_IN_DAY","getUTCDayOfYear","setUTCMonth","setUTCHours","startOfYearTimestamp","difference","startOfUTCISOWeek","weekStartsOn","day","getUTCDay","diff","setUTCDate","getUTCDate","getUTCISOWeekYear","year","getUTCFullYear","fourthOfJanuaryOfNextYear","setUTCFullYear","startOfNextYear","fourthOfJanuaryOfThisYear","startOfThisYear","startOfUTCISOWeekYear","fourthOfJanuary","MILLISECONDS_IN_WEEK","getUTCISOWeek","round","defaultOptions","getDefaultOptions","startOfUTCWeek","options","_ref","_ref2","_ref3","_options$weekStartsOn","_options$locale","_options$locale$optio","_defaultOptions$local","_defaultOptions$local2","locale","RangeError","getUTCWeekYear","_options$firstWeekCon","firstWeekContainsDate","firstWeekOfNextYear","firstWeekOfThisYear","startOfUTCWeekYear","firstWeek","getUTCWeek","addLeadingZeros","targetLength","sign","output","abs","formatters","y","token","signedYear","M","month","getUTCMonth","String","d","a","dayPeriodEnumValue","getUTCHours","toUpperCase","h","H","m","getUTCMinutes","s","getUTCSeconds","S","numberOfDigits","milliseconds","getUTCMilliseconds","fractionalSeconds","pow","dayPeriodEnum","am","pm","midnight","noon","morning","afternoon","evening","night","G","localize","era","width","ordinalNumber","unit","lightFormatters","Y","signedWeekYear","weekYear","twoDigitYear","R","isoWeekYear","u","Q","quarter","context","q","L","w","week","I","isoWeek","D","dayOfYear","E","dayOfWeek","e","localDayOfWeek","c","i","isoDayOfWeek","hours","dayPeriod","toLowerCase","b","B","K","k","X","_localize","originalDate","_originalDate","timezoneOffset","getTimezoneOffset","formatTimezoneWithOptionalMinutes","formatTimezone","x","O","formatTimezoneShort","z","t","T","offset","dirtyDelimiter","absOffset","minutes","delimiter","dateLongFormatter","pattern","formatLong","timeLongFormatter","time","dateTimeLongFormatter","matchResult","match","datePattern","timePattern","dateTimeFormat","dateTime","replace","longFormatters","p","P","getTimezoneOffsetInMilliseconds","utcDate","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","protectedDayOfYearTokens","protectedWeekYearTokens","isProtectedDayOfYearToken","indexOf","isProtectedWeekYearToken","throwProtectedError","format","input","concat","formattingTokensRegExp","longFormattingTokensRegExp","escapedStringRegExp","doubleQuoteRegExp","unescapedLatinCharacterRegExp","dirtyFormatStr","_ref4","_options$locale2","_options$locale2$opti","_ref5","_ref6","_ref7","_options$locale3","_options$locale3$opti","_defaultOptions$local3","_defaultOptions$local4","formatStr","defaultLocale","formatterOptions","result","map","substring","firstCharacter","longFormatter","join","cleanEscapedString","formatter","useAdditionalWeekYearTokens","useAdditionalDayOfYearTokens","matched"],"sources":["C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\node_modules\\date-fns\\esm\\_lib\\requiredArgs\\index.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\node_modules\\date-fns\\esm\\toDate\\index.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\node_modules\\date-fns\\esm\\isDate\\index.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\node_modules\\date-fns\\esm\\isValid\\index.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\node_modules\\date-fns\\esm\\_lib\\toInteger\\index.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\node_modules\\date-fns\\esm\\addMilliseconds\\index.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\node_modules\\date-fns\\esm\\subMilliseconds\\index.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\node_modules\\date-fns\\esm\\_lib\\getUTCDayOfYear\\index.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\node_modules\\date-fns\\esm\\_lib\\startOfUTCISOWeek\\index.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\node_modules\\date-fns\\esm\\_lib\\getUTCISOWeekYear\\index.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\node_modules\\date-fns\\esm\\_lib\\startOfUTCISOWeekYear\\index.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\node_modules\\date-fns\\esm\\_lib\\getUTCISOWeek\\index.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\node_modules\\date-fns\\esm\\_lib\\defaultOptions\\index.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\node_modules\\date-fns\\esm\\_lib\\startOfUTCWeek\\index.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\node_modules\\date-fns\\esm\\_lib\\getUTCWeekYear\\index.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\node_modules\\date-fns\\esm\\_lib\\startOfUTCWeekYear\\index.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\node_modules\\date-fns\\esm\\_lib\\getUTCWeek\\index.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\node_modules\\date-fns\\esm\\_lib\\addLeadingZeros\\index.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\node_modules\\date-fns\\esm\\_lib\\format\\lightFormatters\\index.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\node_modules\\date-fns\\esm\\_lib\\format\\formatters\\index.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\node_modules\\date-fns\\esm\\_lib\\format\\longFormatters\\index.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\node_modules\\date-fns\\esm\\_lib\\getTimezoneOffsetInMilliseconds\\index.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\node_modules\\date-fns\\esm\\_lib\\protectedTokens\\index.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\node_modules\\date-fns\\esm\\format\\index.js"],"sourcesContent":["export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || _typeof(argument) === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}","function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param {*} value - the value to check\n * @returns {boolean} true if the given value is a date\n * @throws {TypeError} 1 arguments required\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\n\nexport default function isDate(value) {\n  requiredArgs(1, arguments);\n  return value instanceof Date || _typeof(value) === 'object' && Object.prototype.toString.call(value) === '[object Date]';\n}","import isDate from \"../isDate/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @param {*} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\n\nexport default function isValid(dirtyDate) {\n  requiredArgs(1, arguments);\n\n  if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {\n    return false;\n  }\n\n  var date = toDate(dirtyDate);\n  return !isNaN(Number(date));\n}","export default function toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\n\nexport default function addMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var timestamp = toDate(dirtyDate).getTime();\n  var amount = toInteger(dirtyAmount);\n  return new Date(timestamp + amount);\n}","import addMilliseconds from \"../addMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name subMilliseconds\n * @category Millisecond Helpers\n * @summary Subtract the specified number of milliseconds from the given date.\n *\n * @description\n * Subtract the specified number of milliseconds from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:\n * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:29.250\n */\n\nexport default function subMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, -amount);\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_DAY = 86400000;\nexport default function getUTCDayOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var timestamp = date.getTime();\n  date.setUTCMonth(0, 1);\n  date.setUTCHours(0, 0, 0, 0);\n  var startOfYearTimestamp = date.getTime();\n  var difference = timestamp - startOfYearTimestamp;\n  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nexport default function startOfUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var weekStartsOn = 1;\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nimport startOfUTCISOWeek from \"../startOfUTCISOWeek/index.js\";\nexport default function getUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getUTCFullYear();\n  var fourthOfJanuaryOfNextYear = new Date(0);\n  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);\n  var fourthOfJanuaryOfThisYear = new Date(0);\n  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","import getUTCISOWeekYear from \"../getUTCISOWeekYear/index.js\";\nimport startOfUTCISOWeek from \"../startOfUTCISOWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nexport default function startOfUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var year = getUTCISOWeekYear(dirtyDate);\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setUTCFullYear(year, 0, 4);\n  fourthOfJanuary.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCISOWeek(fourthOfJanuary);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport startOfUTCISOWeek from \"../startOfUTCISOWeek/index.js\";\nimport startOfUTCISOWeekYear from \"../startOfUTCISOWeekYear/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000;\nexport default function getUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","var defaultOptions = {};\nexport function getDefaultOptions() {\n  return defaultOptions;\n}\nexport function setDefaultOptions(newOptions) {\n  defaultOptions = newOptions;\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nimport toInteger from \"../toInteger/index.js\";\nimport { getDefaultOptions } from \"../defaultOptions/index.js\";\nexport default function startOfUTCWeek(dirtyDate, options) {\n  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;\n\n  requiredArgs(1, arguments);\n  var defaultOptions = getDefaultOptions();\n  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nimport toInteger from \"../toInteger/index.js\";\nimport { getDefaultOptions } from \"../defaultOptions/index.js\";\nexport default function getUTCWeekYear(dirtyDate, options) {\n  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;\n\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getUTCFullYear();\n  var defaultOptions = getDefaultOptions();\n  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var firstWeekOfNextYear = new Date(0);\n  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options);\n  var firstWeekOfThisYear = new Date(0);\n  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","import getUTCWeekYear from \"../getUTCWeekYear/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nimport toInteger from \"../toInteger/index.js\";\nimport { getDefaultOptions } from \"../defaultOptions/index.js\";\nexport default function startOfUTCWeekYear(dirtyDate, options) {\n  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;\n\n  requiredArgs(1, arguments);\n  var defaultOptions = getDefaultOptions();\n  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);\n  var year = getUTCWeekYear(dirtyDate, options);\n  var firstWeek = new Date(0);\n  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCWeek(firstWeek, options);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nimport startOfUTCWeekYear from \"../startOfUTCWeekYear/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000;\nexport default function getUTCWeek(dirtyDate, options) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","export default function addLeadingZeros(number, targetLength) {\n  var sign = number < 0 ? '-' : '';\n  var output = Math.abs(number).toString();\n\n  while (output.length < targetLength) {\n    output = '0' + output;\n  }\n\n  return sign + output;\n}","import addLeadingZeros from \"../../addLeadingZeros/index.js\";\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nvar formatters = {\n  // Year\n  y: function y(date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n    var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);\n  },\n  // Month\n  M: function M(date, token) {\n    var month = date.getUTCMonth();\n    return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n  // Day of the month\n  d: function d(date, token) {\n    return addLeadingZeros(date.getUTCDate(), token.length);\n  },\n  // AM or PM\n  a: function a(date, token) {\n    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n        return dayPeriodEnumValue.toUpperCase();\n\n      case 'aaa':\n        return dayPeriodEnumValue;\n\n      case 'aaaaa':\n        return dayPeriodEnumValue[0];\n\n      case 'aaaa':\n      default:\n        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';\n    }\n  },\n  // Hour [1-12]\n  h: function h(date, token) {\n    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);\n  },\n  // Hour [0-23]\n  H: function H(date, token) {\n    return addLeadingZeros(date.getUTCHours(), token.length);\n  },\n  // Minute\n  m: function m(date, token) {\n    return addLeadingZeros(date.getUTCMinutes(), token.length);\n  },\n  // Second\n  s: function s(date, token) {\n    return addLeadingZeros(date.getUTCSeconds(), token.length);\n  },\n  // Fraction of second\n  S: function S(date, token) {\n    var numberOfDigits = token.length;\n    var milliseconds = date.getUTCMilliseconds();\n    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));\n    return addLeadingZeros(fractionalSeconds, token.length);\n  }\n};\nexport default formatters;","import getUTCDayOfYear from \"../../../_lib/getUTCDayOfYear/index.js\";\nimport getUTCISOWeek from \"../../../_lib/getUTCISOWeek/index.js\";\nimport getUTCISOWeekYear from \"../../../_lib/getUTCISOWeekYear/index.js\";\nimport getUTCWeek from \"../../../_lib/getUTCWeek/index.js\";\nimport getUTCWeekYear from \"../../../_lib/getUTCWeekYear/index.js\";\nimport addLeadingZeros from \"../../addLeadingZeros/index.js\";\nimport lightFormatters from \"../lightFormatters/index.js\";\nvar dayPeriodEnum = {\n  am: 'am',\n  pm: 'pm',\n  midnight: 'midnight',\n  noon: 'noon',\n  morning: 'morning',\n  afternoon: 'afternoon',\n  evening: 'evening',\n  night: 'night'\n};\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\nvar formatters = {\n  // Era\n  G: function G(date, token, localize) {\n    var era = date.getUTCFullYear() > 0 ? 1 : 0;\n\n    switch (token) {\n      // AD, BC\n      case 'G':\n      case 'GG':\n      case 'GGG':\n        return localize.era(era, {\n          width: 'abbreviated'\n        });\n      // A, B\n\n      case 'GGGGG':\n        return localize.era(era, {\n          width: 'narrow'\n        });\n      // Anno Domini, Before Christ\n\n      case 'GGGG':\n      default:\n        return localize.era(era, {\n          width: 'wide'\n        });\n    }\n  },\n  // Year\n  y: function y(date, token, localize) {\n    // Ordinal number\n    if (token === 'yo') {\n      var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n      var year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, {\n        unit: 'year'\n      });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n  // Local week-numbering year\n  Y: function Y(date, token, localize, options) {\n    var signedWeekYear = getUTCWeekYear(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year\n\n    if (token === 'YY') {\n      var twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    } // Ordinal number\n\n\n    if (token === 'Yo') {\n      return localize.ordinalNumber(weekYear, {\n        unit: 'year'\n      });\n    } // Padding\n\n\n    return addLeadingZeros(weekYear, token.length);\n  },\n  // ISO week-numbering year\n  R: function R(date, token) {\n    var isoWeekYear = getUTCISOWeekYear(date); // Padding\n\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function u(date, token) {\n    var year = date.getUTCFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n  // Quarter\n  Q: function Q(date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'Q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'QQ':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'Qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'QQQ':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'QQQQQ':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'QQQQ':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone quarter\n  q: function q(date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'qq':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'qqq':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'qqqqq':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'qqqq':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Month\n  M: function M(date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      case 'M':\n      case 'MM':\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n\n      case 'Mo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'MMM':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // J, F, ..., D\n\n      case 'MMMMM':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // January, February, ..., December\n\n      case 'MMMM':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone month\n  L: function L(date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case 'L':\n        return String(month + 1);\n      // 01, 02, ..., 12\n\n      case 'LL':\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n\n      case 'Lo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'LLL':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // J, F, ..., D\n\n      case 'LLLLL':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // January, February, ..., December\n\n      case 'LLLL':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Local week of year\n  w: function w(date, token, localize, options) {\n    var week = getUTCWeek(date, options);\n\n    if (token === 'wo') {\n      return localize.ordinalNumber(week, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n  // ISO week of year\n  I: function I(date, token, localize) {\n    var isoWeek = getUTCISOWeek(date);\n\n    if (token === 'Io') {\n      return localize.ordinalNumber(isoWeek, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n  // Day of the month\n  d: function d(date, token, localize) {\n    if (token === 'do') {\n      return localize.ordinalNumber(date.getUTCDate(), {\n        unit: 'date'\n      });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n  // Day of year\n  D: function D(date, token, localize) {\n    var dayOfYear = getUTCDayOfYear(date);\n\n    if (token === 'Do') {\n      return localize.ordinalNumber(dayOfYear, {\n        unit: 'dayOfYear'\n      });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n  // Day of week\n  E: function E(date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n\n    switch (token) {\n      // Tue\n      case 'E':\n      case 'EE':\n      case 'EEE':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'EEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'EEEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'EEEE':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Local day of week\n  e: function e(date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case 'e':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'ee':\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n\n      case 'eo':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'eee':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'eeeee':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'eeeeee':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'eeee':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone local day of week\n  c: function c(date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case 'c':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'cc':\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n\n      case 'co':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'ccc':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // T\n\n      case 'ccccc':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // Tu\n\n      case 'cccccc':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'standalone'\n        });\n      // Tuesday\n\n      case 'cccc':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // ISO day of week\n  i: function i(date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n\n    switch (token) {\n      // 2\n      case 'i':\n        return String(isoDayOfWeek);\n      // 02\n\n      case 'ii':\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n\n      case 'io':\n        return localize.ordinalNumber(isoDayOfWeek, {\n          unit: 'day'\n        });\n      // Tue\n\n      case 'iii':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'iiiii':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'iiiiii':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'iiii':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM or PM\n  a: function a(date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'aaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }).toLowerCase();\n\n      case 'aaaaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'aaaa':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM, PM, midnight, noon\n  b: function b(date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n    }\n\n    switch (token) {\n      case 'b':\n      case 'bb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'bbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }).toLowerCase();\n\n      case 'bbbbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'bbbb':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // in the morning, in the afternoon, in the evening, at night\n  B: function B(date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case 'B':\n      case 'BB':\n      case 'BBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'BBBBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'BBBB':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Hour [1-12]\n  h: function h(date, token, localize) {\n    if (token === 'ho') {\n      var hours = date.getUTCHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n  // Hour [0-23]\n  H: function H(date, token, localize) {\n    if (token === 'Ho') {\n      return localize.ordinalNumber(date.getUTCHours(), {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n  // Hour [0-11]\n  K: function K(date, token, localize) {\n    var hours = date.getUTCHours() % 12;\n\n    if (token === 'Ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Hour [1-24]\n  k: function k(date, token, localize) {\n    var hours = date.getUTCHours();\n    if (hours === 0) hours = 24;\n\n    if (token === 'ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Minute\n  m: function m(date, token, localize) {\n    if (token === 'mo') {\n      return localize.ordinalNumber(date.getUTCMinutes(), {\n        unit: 'minute'\n      });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n  // Second\n  s: function s(date, token, localize) {\n    if (token === 'so') {\n      return localize.ordinalNumber(date.getUTCSeconds(), {\n        unit: 'second'\n      });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n  // Fraction of second\n  S: function S(date, token) {\n    return lightFormatters.S(date, token);\n  },\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function X(date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return 'Z';\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'X':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n\n      case 'XXXX':\n      case 'XX':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n\n      case 'XXXXX':\n      case 'XXX': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function x(date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'x':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n\n      case 'xxxx':\n      case 'xx':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n\n      case 'xxxxx':\n      case 'xxx': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (GMT)\n  O: function O(date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'O':\n      case 'OO':\n      case 'OOO':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'OOOO':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (specific non-location)\n  z: function z(date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'z':\n      case 'zz':\n      case 'zzz':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'zzzz':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Seconds timestamp\n  t: function t(date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = Math.floor(originalDate.getTime() / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n  // Milliseconds timestamp\n  T: function T(date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = originalDate.getTime();\n    return addLeadingZeros(timestamp, token.length);\n  }\n};\n\nfunction formatTimezoneShort(offset, dirtyDelimiter) {\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = Math.floor(absOffset / 60);\n  var minutes = absOffset % 60;\n\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n\n  var delimiter = dirtyDelimiter || '';\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {\n  if (offset % 60 === 0) {\n    var sign = offset > 0 ? '-' : '+';\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n\n  return formatTimezone(offset, dirtyDelimiter);\n}\n\nfunction formatTimezone(offset, dirtyDelimiter) {\n  var delimiter = dirtyDelimiter || '';\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);\n  var minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n\nexport default formatters;","var dateLongFormatter = function dateLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'P':\n      return formatLong.date({\n        width: 'short'\n      });\n\n    case 'PP':\n      return formatLong.date({\n        width: 'medium'\n      });\n\n    case 'PPP':\n      return formatLong.date({\n        width: 'long'\n      });\n\n    case 'PPPP':\n    default:\n      return formatLong.date({\n        width: 'full'\n      });\n  }\n};\n\nvar timeLongFormatter = function timeLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'p':\n      return formatLong.time({\n        width: 'short'\n      });\n\n    case 'pp':\n      return formatLong.time({\n        width: 'medium'\n      });\n\n    case 'ppp':\n      return formatLong.time({\n        width: 'long'\n      });\n\n    case 'pppp':\n    default:\n      return formatLong.time({\n        width: 'full'\n      });\n  }\n};\n\nvar dateTimeLongFormatter = function dateTimeLongFormatter(pattern, formatLong) {\n  var matchResult = pattern.match(/(P+)(p+)?/) || [];\n  var datePattern = matchResult[1];\n  var timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  var dateTimeFormat;\n\n  switch (datePattern) {\n    case 'P':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'short'\n      });\n      break;\n\n    case 'PP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'medium'\n      });\n      break;\n\n    case 'PPP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'long'\n      });\n      break;\n\n    case 'PPPP':\n    default:\n      dateTimeFormat = formatLong.dateTime({\n        width: 'full'\n      });\n      break;\n  }\n\n  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));\n};\n\nvar longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter\n};\nexport default longFormatters;","/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport default function getTimezoneOffsetInMilliseconds(date) {\n  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n  utcDate.setUTCFullYear(date.getFullYear());\n  return date.getTime() - utcDate.getTime();\n}","var protectedDayOfYearTokens = ['D', 'DD'];\nvar protectedWeekYearTokens = ['YY', 'YYYY'];\nexport function isProtectedDayOfYearToken(token) {\n  return protectedDayOfYearTokens.indexOf(token) !== -1;\n}\nexport function isProtectedWeekYearToken(token) {\n  return protectedWeekYearTokens.indexOf(token) !== -1;\n}\nexport function throwProtectedError(token, format, input) {\n  if (token === 'YYYY') {\n    throw new RangeError(\"Use `yyyy` instead of `YYYY` (in `\".concat(format, \"`) for formatting years to the input `\").concat(input, \"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\"));\n  } else if (token === 'YY') {\n    throw new RangeError(\"Use `yy` instead of `YY` (in `\".concat(format, \"`) for formatting years to the input `\").concat(input, \"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\"));\n  } else if (token === 'D') {\n    throw new RangeError(\"Use `d` instead of `D` (in `\".concat(format, \"`) for formatting days of the month to the input `\").concat(input, \"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\"));\n  } else if (token === 'DD') {\n    throw new RangeError(\"Use `dd` instead of `DD` (in `\".concat(format, \"`) for formatting days of the month to the input `\").concat(input, \"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\"));\n  }\n}","import isValid from \"../isValid/index.js\";\nimport subMilliseconds from \"../subMilliseconds/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport formatters from \"../_lib/format/formatters/index.js\";\nimport longFormatters from \"../_lib/format/longFormatters/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport { isProtectedDayOfYearToken, isProtectedWeekYearToken, throwProtectedError } from \"../_lib/protectedTokens/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getDefaultOptions } from \"../_lib/defaultOptions/index.js\";\nimport defaultLocale from \"../_lib/defaultLocale/index.js\"; // This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\n\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name format\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}\n *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @param {Date|Number} date - the original date\n * @param {String} format - the string of tokens\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @returns {String} the formatted date string\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `localize` property\n * @throws {RangeError} `options.locale` must contain `formatLong` property\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * const result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\n\nexport default function format(dirtyDate, dirtyFormatStr, options) {\n  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;\n\n  requiredArgs(2, arguments);\n  var formatStr = String(dirtyFormatStr);\n  var defaultOptions = getDefaultOptions();\n  var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : defaultLocale;\n  var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  if (!locale.localize) {\n    throw new RangeError('locale must contain localize property');\n  }\n\n  if (!locale.formatLong) {\n    throw new RangeError('locale must contain formatLong property');\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376\n\n\n  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);\n  var utcDate = subMilliseconds(originalDate, timezoneOffset);\n  var formatterOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale,\n    _originalDate: originalDate\n  };\n  var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === 'p' || firstCharacter === 'P') {\n      var longFormatter = longFormatters[firstCharacter];\n      return longFormatter(substring, locale.formatLong);\n    }\n\n    return substring;\n  }).join('').match(formattingTokensRegExp).map(function (substring) {\n    // Replace two single quote characters with one single quote character\n    if (substring === \"''\") {\n      return \"'\";\n    }\n\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === \"'\") {\n      return cleanEscapedString(substring);\n    }\n\n    var formatter = formatters[firstCharacter];\n\n    if (formatter) {\n      if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));\n      }\n\n      if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));\n      }\n\n      return formatter(utcDate, substring, locale.localize, formatterOptions);\n    }\n\n    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n    }\n\n    return substring;\n  }).join('');\n  return result;\n}\n\nfunction cleanEscapedString(input) {\n  var matched = input.match(escapedStringRegExp);\n\n  if (!matched) {\n    return input;\n  }\n\n  return matched[1].replace(doubleQuoteRegExp, \"'\");\n}"]},"metadata":{},"sourceType":"module"}