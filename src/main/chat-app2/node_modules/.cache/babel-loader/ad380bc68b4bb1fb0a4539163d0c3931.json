{"ast":null,"code":"import { _ as _objectSpread2 } from './_rollupPluginBabelHelpers-6bb0305c.js';\nimport React__default, { useEffect, useReducer, useState, useMemo, useContext } from 'react';\nimport { GroupChannelHandler } from '@sendbird/chat/groupChannel';\nimport { P as PUBSUB_TOPICS } from './topics-b2b77fb9.js';\nimport { u as uuidv4 } from './uuid-1adedf62.js';\nimport { n as noop } from './utils-4bbbca2c.js';\nimport { U as UserProfileProvider } from './UserProfileContext-9cfbab4d.js';\nimport useSendbirdStateContext from './useSendbirdStateContext.js';\nimport { f as filterChannelListParams, g as getChannelsWithUpsertedChannel } from './index-7eb65acf.js';\nconst RESET_CHANNEL_LIST = 'RESET_CHANNEL_LIST';\nconst CREATE_CHANNEL = 'CREATE_CHANNEL';\nconst USER_INVITED = 'USER_INVITED';\nconst LEAVE_CHANNEL_SUCCESS = 'LEAVE_CHANNEL_SUCCESS';\nconst SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\nconst FETCH_CHANNELS_START = 'FETCH_CHANNELS_START';\nconst FETCH_CHANNELS_SUCCESS = 'FETCH_CHANNELS_SUCCESS';\nconst FETCH_CHANNELS_FAILURE = 'FETCH_CHANNELS_FAILURE';\nconst INIT_CHANNELS_START = 'INIT_CHANNELS_START';\nconst INIT_CHANNELS_SUCCESS = 'INIT_CHANNELS_SUCCESS';\nconst INIT_CHANNELS_FAILURE = 'INIT_CHANNELS_FAILURE';\nconst ON_USER_JOINED = 'ON_USER_JOINED';\nconst ON_CHANNEL_DELETED = 'ON_CHANNEL_DELETED';\nconst ON_LAST_MESSAGE_UPDATED = 'ON_LAST_MESSAGE_UPDATED';\nconst ON_USER_LEFT = 'ON_USER_LEFT';\nconst ON_CHANNEL_CHANGED = 'ON_CHANNEL_CHANGED';\nconst ON_CHANNEL_ARCHIVED = 'ON_CHANNEL_ARCHIVED';\nconst ON_CHANNEL_FROZEN = 'ON_CHANNEL_FROZEN';\nconst ON_CHANNEL_UNFROZEN = 'ON_CHANNEL_UNFROZEN';\nconst ON_READ_RECEIPT_UPDATED = 'ON_READ_RECEIPT_UPDATED';\nconst ON_DELIVERY_RECEIPT_UPDATED = 'ON_DELIVERY_RECEIPT_UPDATED';\nconst CHANNEL_REPLACED_TO_TOP = 'CHANNEL_REPLACED_TO_TOP';\nconst CHANNEL_LIST_PARAMS_UPDATED = 'CHANNEL_LIST_PARAMS_UPDATED';\nconst DELIVERY_RECIPT = 'delivery_receipt';\nconst createEventHandler = _ref => {\n  let {\n    sdk,\n    sdkChannelHandlerId,\n    channelListDispatcher,\n    logger\n  } = _ref;\n  const ChannelHandler = new GroupChannelHandler({\n    onChannelChanged: channel => {\n      logger.info('ChannelList: onChannelChanged', channel);\n      channelListDispatcher({\n        type: ON_CHANNEL_CHANGED,\n        payload: channel\n      });\n    },\n    onChannelDeleted: channelUrl => {\n      logger.info('ChannelList: onChannelDeleted', channelUrl);\n      channelListDispatcher({\n        type: ON_CHANNEL_DELETED,\n        payload: channelUrl\n      });\n    },\n    onUserJoined: channel => {\n      logger.info('ChannelList: onUserJoined', channel);\n      if (channel !== null && channel !== void 0 && channel.lastMessage) {\n        channelListDispatcher({\n          type: ON_USER_JOINED,\n          payload: channel\n        });\n      }\n    },\n    onUserReceivedInvitation: (channel, inviter, invitees) => {\n      logger.info('ChannelList: onUserReceivedInvitation', {\n        channel,\n        inviter,\n        invitees\n      });\n      const {\n        currentUser\n      } = sdk;\n      const isInvited = invitees.find(user => (user === null || user === void 0 ? void 0 : user.userId) === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.userId));\n      // The newly created channel should be displayed only when there's a message\n      if (isInvited && channel !== null && channel !== void 0 && channel.lastMessage) {\n        channelListDispatcher({\n          type: USER_INVITED,\n          payload: channel\n        });\n      }\n    },\n    onUserBanned: (channel, user) => {\n      const {\n        currentUser\n      } = sdk;\n      logger.info('Channel: onUserBanned', channel);\n      if (user.userId === currentUser.userId) {\n        channelListDispatcher({\n          type: ON_USER_LEFT,\n          payload: {\n            channel,\n            isMe: true\n          }\n        });\n      } else {\n        channelListDispatcher({\n          type: ON_USER_LEFT,\n          payload: {\n            channel,\n            isMe: false\n          }\n        });\n      }\n    },\n    onUserLeft: (channel, leftUser) => {\n      const {\n        currentUser\n      } = sdk;\n      const isMe = currentUser.userId === leftUser.userId;\n      logger.info('ChannelList: onUserLeft', channel);\n      channelListDispatcher({\n        type: ON_USER_LEFT,\n        payload: {\n          channel,\n          isMe\n        }\n      });\n    },\n    onReadStatus: channel => {\n      logger.info('ChannelList: onReadStatus', channel);\n      channelListDispatcher({\n        type: ON_READ_RECEIPT_UPDATED,\n        payload: channel\n      });\n    },\n    onDeliveryReceiptUpdated: channel => {\n      logger.info('ChannelList: onDeliveryReceiptUpdated', channel);\n      if (channel !== null && channel !== void 0 && channel.lastMessage) {\n        channelListDispatcher({\n          type: ON_DELIVERY_RECEIPT_UPDATED,\n          payload: channel\n        });\n      }\n    },\n    onMessageUpdated: (channel, message) => {\n      if (channel !== null && channel !== void 0 && channel.lastMessage.isEqual(message)) {\n        logger.info('ChannelList: onMessageUpdated', channel);\n        channelListDispatcher({\n          type: ON_LAST_MESSAGE_UPDATED,\n          payload: channel\n        });\n      }\n    },\n    onChannelHidden: channel => {\n      logger.info('ChannelList: onChannelHidden', channel);\n      channelListDispatcher({\n        type: ON_CHANNEL_ARCHIVED,\n        payload: channel\n      });\n    },\n    onChannelFrozen: channel => {\n      logger.info('ChannelList: onChannelFrozen', channel);\n      channelListDispatcher({\n        type: ON_CHANNEL_FROZEN,\n        payload: channel\n      });\n    },\n    onChannelUnfrozen: channel => {\n      logger.info('ChannelList: onChannelUnfrozen', channel);\n      channelListDispatcher({\n        type: ON_CHANNEL_UNFROZEN,\n        payload: channel\n      });\n    }\n  });\n  logger.info('ChannelList: Added channelHandler');\n  sdk.groupChannel.addGroupChannelHandler(sdkChannelHandlerId, ChannelHandler);\n};\nconst createChannelListQuery = _ref2 => {\n  let {\n    sdk,\n    userFilledChannelListQuery = {}\n  } = _ref2;\n  const param = {};\n  param.includeEmpty = false;\n  param.limit = 20; // The value of pagination limit could be set up to 100.\n  param.order = 'latest_last_message'; // 'chronological', 'latest_last_message', 'channel_name_alphabetical', and 'metadata_value_alphabetical'\n\n  if (userFilledChannelListQuery) {\n    Object.keys(userFilledChannelListQuery).forEach(key => {\n      param[key] = userFilledChannelListQuery[key];\n    });\n  }\n  const channelListQuery = sdk.groupChannel.createMyGroupChannelListQuery(param);\n  return channelListQuery;\n};\n\n/**\n * Setup event listener\n * create channel source query\n * addloading screen\n */\nfunction setupChannelList(_ref3) {\n  let {\n    sdk,\n    sdkChannelHandlerId,\n    channelListDispatcher,\n    setChannelSource,\n    onChannelSelect,\n    userFilledChannelListQuery,\n    logger,\n    sortChannelList,\n    disableAutoSelect,\n    markAsDeliveredScheduler,\n    disableMarkAsDelivered\n  } = _ref3;\n  if (sdk !== null && sdk !== void 0 && sdk.groupChannel) {\n    createEventHandler({\n      sdk,\n      channelListDispatcher,\n      sdkChannelHandlerId,\n      logger\n    });\n  } else {\n    logger.warning('ChannelList - createEventHandler: sdk or sdk.ChannelHandler does not exist', sdk);\n  }\n  logger.info('ChannelList - creating query', {\n    userFilledChannelListQuery\n  });\n  const channelListQuery = createChannelListQuery({\n    sdk,\n    userFilledChannelListQuery\n  });\n  logger.info('ChannelList - created query', channelListQuery);\n  setChannelSource(channelListQuery);\n  channelListDispatcher({\n    type: INIT_CHANNELS_START\n  });\n  if (userFilledChannelListQuery) {\n    logger.info('ChannelList - setting up channelListQuery', channelListQuery);\n    channelListDispatcher({\n      type: CHANNEL_LIST_PARAMS_UPDATED,\n      payload: {\n        channelListQuery,\n        currentUserId: sdk && sdk.currentUser && sdk.currentUser.userId\n      }\n    });\n  }\n  logger.info('ChannelList - fetching channels');\n  if (channelListQuery.hasNext) {\n    channelListQuery.next().then(channelList => {\n      var _sdk$appInfo, _sdk$appInfo$premiumF;\n      logger.info('ChannelList - fetched channels', channelList);\n      // select first channel\n      logger.info('ChannelList - highlight channel', channelList[0]);\n      let sortedChannelList = channelList;\n      if (sortChannelList && typeof sortChannelList === 'function') {\n        sortedChannelList = sortChannelList(channelList);\n        logger.info('ChannelList - channel list sorted', sortedChannelList);\n      }\n      if (!disableAutoSelect) {\n        onChannelSelect(sortedChannelList[0]);\n      }\n      channelListDispatcher({\n        type: INIT_CHANNELS_SUCCESS,\n        payload: {\n          channelList: sortedChannelList,\n          disableAutoSelect\n        }\n      });\n      const canSetMarkAsDelivered = sdk === null || sdk === void 0 ? void 0 : (_sdk$appInfo = sdk.appInfo) === null || _sdk$appInfo === void 0 ? void 0 : (_sdk$appInfo$premiumF = _sdk$appInfo.premiumFeatureList) === null || _sdk$appInfo$premiumF === void 0 ? void 0 : _sdk$appInfo$premiumF.find(feature => feature === DELIVERY_RECIPT);\n      if (canSetMarkAsDelivered && !disableMarkAsDelivered) {\n        sortedChannelList.forEach(channel => {\n          markAsDeliveredScheduler.push(channel);\n        });\n      }\n    }).catch(err => {\n      if (err) {\n        logger.error('ChannelList - couldnt fetch channels', err);\n        channelListDispatcher({\n          type: INIT_CHANNELS_FAILURE\n        });\n      }\n    });\n  } else {\n    logger.info('ChannelList - there are no more channels');\n  }\n}\nconst pubSubHandleRemover = subscriber => {\n  subscriber.forEach(s => {\n    try {\n      s.remove();\n    } catch (_unused) {\n      //\n    }\n  });\n};\nconst pubSubHandler = (pubSub, channelListDispatcher) => {\n  const subscriber = new Map();\n  if (!pubSub) return subscriber;\n  subscriber.set(PUBSUB_TOPICS.CREATE_CHANNEL, pubSub.subscribe(PUBSUB_TOPICS.CREATE_CHANNEL, msg => {\n    const {\n      channel\n    } = msg;\n    channelListDispatcher({\n      type: 'CREATE_CHANNEL',\n      payload: channel\n    });\n  }));\n  subscriber.set(PUBSUB_TOPICS.UPDATE_USER_MESSAGE, pubSub.subscribe(PUBSUB_TOPICS.UPDATE_USER_MESSAGE, msg => {\n    var _updatedChannel$lastM;\n    const {\n      channel,\n      message\n    } = msg;\n    const updatedChannel = channel;\n    if ((updatedChannel === null || updatedChannel === void 0 ? void 0 : (_updatedChannel$lastM = updatedChannel.lastMessage) === null || _updatedChannel$lastM === void 0 ? void 0 : _updatedChannel$lastM.messageId) === message.messageId) {\n      updatedChannel.lastMessage = message;\n    }\n    if (channel) {\n      channelListDispatcher({\n        type: ON_LAST_MESSAGE_UPDATED,\n        payload: updatedChannel\n      });\n    }\n  }));\n  subscriber.set(PUBSUB_TOPICS.LEAVE_CHANNEL, pubSub.subscribe(PUBSUB_TOPICS.LEAVE_CHANNEL, msg => {\n    const {\n      channel\n    } = msg;\n    channelListDispatcher({\n      type: LEAVE_CHANNEL_SUCCESS,\n      payload: channel === null || channel === void 0 ? void 0 : channel.url\n    });\n  }));\n  subscriber.set(PUBSUB_TOPICS.SEND_MESSAGE_START, pubSub.subscribe(PUBSUB_TOPICS.SEND_MESSAGE_START, msg => {\n    const {\n      channel\n    } = msg;\n    channelListDispatcher({\n      type: CHANNEL_REPLACED_TO_TOP,\n      payload: channel\n    });\n  }));\n  return subscriber;\n};\nvar channelListInitialState = {\n  // we might not need this initialized state -> should remove\n  initialized: false,\n  loading: true,\n  allChannels: [],\n  currentChannel: null,\n  channelListQuery: null,\n  currentUserId: '',\n  disableAutoSelect: false\n};\nfunction reducer(state, action) {\n  switch (action.type) {\n    case INIT_CHANNELS_START:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        loading: true\n      });\n    case RESET_CHANNEL_LIST:\n      return channelListInitialState;\n    case INIT_CHANNELS_SUCCESS:\n      {\n        const {\n          channelList,\n          disableAutoSelect\n        } = action.payload;\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          initialized: true,\n          loading: false,\n          allChannels: channelList,\n          disableAutoSelect,\n          currentChannel: !disableAutoSelect && channelList && channelList.length && channelList.length > 0 ? channelList[0] : null\n        });\n      }\n    case FETCH_CHANNELS_SUCCESS:\n      {\n        const currentChannels = state.allChannels.map(c => c.url);\n        const filteredChannels = action.payload.filter(_ref => {\n          let {\n            url\n          } = _ref;\n          return !currentChannels.find(c => c === url);\n        });\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: [...state.allChannels, ...filteredChannels]\n        });\n      }\n    case USER_INVITED:\n      {\n        const channel = action.payload;\n        if (state.channelListQuery) {\n          if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel)\n            });\n          }\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            currentChannel: channel\n          });\n        }\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: [channel, ...state.allChannels.filter(ch => ch.url !== (channel === null || channel === void 0 ? void 0 : channel.url))]\n        });\n      }\n    case CREATE_CHANNEL:\n      {\n        const channel = action.payload;\n        if (state.channelListQuery) {\n          if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel)\n            });\n          }\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            currentChannel: channel\n          });\n        }\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: [channel, ...state.allChannels.filter(ch => ch.url !== (channel === null || channel === void 0 ? void 0 : channel.url))],\n          currentChannel: channel\n        });\n      }\n    case ON_CHANNEL_ARCHIVED:\n      {\n        var _state$currentChannel;\n        const channel = action.payload;\n        if (state.channelListQuery) {\n          if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel)\n            });\n            // TODO: Check if we have to set current channel\n          }\n        }\n\n        const nextChannel = (channel === null || channel === void 0 ? void 0 : channel.url) === ((_state$currentChannel = state.currentChannel) === null || _state$currentChannel === void 0 ? void 0 : _state$currentChannel.url) ? state.allChannels[state.allChannels[0].url === (channel === null || channel === void 0 ? void 0 : channel.url) ? 1 : 0] : state.currentChannel;\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: state.allChannels.filter(_ref2 => {\n            let {\n              url\n            } = _ref2;\n            return url !== (channel === null || channel === void 0 ? void 0 : channel.url);\n          }),\n          currentChannel: state.disableAutoSelect ? null : nextChannel\n        });\n      }\n    case LEAVE_CHANNEL_SUCCESS:\n    case ON_CHANNEL_DELETED:\n      {\n        var _state$currentChannel2;\n        const channelUrl = action.payload;\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          currentChannel: channelUrl === ((_state$currentChannel2 = state.currentChannel) === null || _state$currentChannel2 === void 0 ? void 0 : _state$currentChannel2.url) ? state.allChannels[0] : state.currentChannel,\n          allChannels: state.allChannels.filter(_ref3 => {\n            let {\n              url\n            } = _ref3;\n            return url !== channelUrl;\n          })\n        });\n      }\n    case ON_USER_LEFT:\n      {\n        var _state$currentChannel5;\n        const {\n          channel,\n          isMe\n        } = action.payload;\n        if (state.channelListQuery) {\n          var _state$currentChannel4;\n          if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n            var _state$currentChannel3;\n            const filteredChannels = getChannelsWithUpsertedChannel(state.allChannels, channel);\n            const nextChannel = isMe && (channel === null || channel === void 0 ? void 0 : channel.url) === ((_state$currentChannel3 = state.currentChannel) === null || _state$currentChannel3 === void 0 ? void 0 : _state$currentChannel3.url) ? filteredChannels[0] : state.currentChannel;\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              currentChannel: state.disableAutoSelect ? null : nextChannel,\n              allChannels: filteredChannels\n            });\n          }\n          const nextChannel = (channel === null || channel === void 0 ? void 0 : channel.url) === ((_state$currentChannel4 = state.currentChannel) === null || _state$currentChannel4 === void 0 ? void 0 : _state$currentChannel4.url) ? state.allChannels[0] : state.currentChannel;\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            currentChannel: state.disableAutoSelect ? null : nextChannel,\n            allChannels: state.allChannels.filter(_ref4 => {\n              let {\n                url\n              } = _ref4;\n              return url !== (channel === null || channel === void 0 ? void 0 : channel.url);\n            })\n          });\n        }\n        const filteredChannels = state.allChannels.filter(c => !(c.url === (channel === null || channel === void 0 ? void 0 : channel.url) && isMe));\n        const nextChannel = isMe && (channel === null || channel === void 0 ? void 0 : channel.url) === ((_state$currentChannel5 = state.currentChannel) === null || _state$currentChannel5 === void 0 ? void 0 : _state$currentChannel5.url) ? filteredChannels[0] : state.currentChannel;\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          currentChannel: state.disableAutoSelect ? null : nextChannel,\n          allChannels: filteredChannels\n        });\n      }\n    case ON_USER_JOINED:\n    case ON_CHANNEL_CHANGED:\n    case ON_READ_RECEIPT_UPDATED:\n    case ON_DELIVERY_RECEIPT_UPDATED:\n      {\n        const {\n          allChannels = []\n        } = state;\n        const channel = action.payload;\n        const {\n          unreadMessageCount\n        } = channel;\n        if (!(channel !== null && channel !== void 0 && channel.lastMessage)) return state;\n        if (state.channelListQuery) {\n          var _state$currentChannel6;\n          if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: getChannelsWithUpsertedChannel(allChannels, channel)\n            });\n          }\n          const nextChannel = (channel === null || channel === void 0 ? void 0 : channel.url) === ((_state$currentChannel6 = state.currentChannel) === null || _state$currentChannel6 === void 0 ? void 0 : _state$currentChannel6.url) ? state.allChannels[state.allChannels[0].url === (channel === null || channel === void 0 ? void 0 : channel.url) ? 1 : 0]\n          // if coming channel is first of channel list, current channel will be the next one\n          : state.currentChannel;\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            currentChannel: state.disableAutoSelect ? null : nextChannel,\n            allChannels: state.allChannels.filter(_ref5 => {\n              let {\n                url\n              } = _ref5;\n              return url !== (channel === null || channel === void 0 ? void 0 : channel.url);\n            })\n          });\n        }\n        // if its only an unread message count change, dont push to top\n        if (unreadMessageCount === 0) {\n          const currentChannel = allChannels.find(_ref6 => {\n            let {\n              url\n            } = _ref6;\n            return url === (channel === null || channel === void 0 ? void 0 : channel.url);\n          });\n          const currentUnreadCount = currentChannel && currentChannel.unreadMessageCount;\n          if (currentUnreadCount === 0) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: state.allChannels.map(ch => ch.url === (channel === null || channel === void 0 ? void 0 : channel.url) ? channel : ch)\n            });\n          }\n        }\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: [channel, ...state.allChannels.filter(_ref7 => {\n            let {\n              url\n            } = _ref7;\n            return url !== action.payload.url;\n          })]\n        });\n      }\n    case SET_CURRENT_CHANNEL:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        currentChannel: action.payload\n      });\n    case ON_LAST_MESSAGE_UPDATED:\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: state.allChannels.map(channel => (channel === null || channel === void 0 ? void 0 : channel.url) === action.payload.url ? action.payload : channel)\n        });\n      }\n    case ON_CHANNEL_FROZEN:\n      {\n        const channel = action.payload;\n        if (state.channelListQuery) {\n          var _state$currentChannel7;\n          if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel)\n            });\n          }\n          const nextChannel = (channel === null || channel === void 0 ? void 0 : channel.url) === ((_state$currentChannel7 = state.currentChannel) === null || _state$currentChannel7 === void 0 ? void 0 : _state$currentChannel7.url) ? state.allChannels[state.allChannels[0].url === (channel === null || channel === void 0 ? void 0 : channel.url) ? 1 : 0]\n          // if coming channel is first of channel list, current channel will be the next one\n          : state.currentChannel;\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            allChannels: state.allChannels.filter(_ref8 => {\n              let {\n                url\n              } = _ref8;\n              return url !== (channel === null || channel === void 0 ? void 0 : channel.url);\n            }),\n            currentChannel: state.disableAutoSelect ? null : nextChannel\n          });\n        }\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: state.allChannels.map(ch => {\n            if (ch.url === (channel === null || channel === void 0 ? void 0 : channel.url)) {\n              // eslint-disable-next-line no-param-reassign\n              ch.isFrozen = true;\n              return ch;\n            }\n            return ch;\n          })\n        });\n      }\n    case ON_CHANNEL_UNFROZEN:\n      {\n        const channel = action.payload;\n        if (state.channelListQuery) {\n          var _state$currentChannel8;\n          if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel)\n            });\n          }\n          const nextChannel = (channel === null || channel === void 0 ? void 0 : channel.url) === ((_state$currentChannel8 = state.currentChannel) === null || _state$currentChannel8 === void 0 ? void 0 : _state$currentChannel8.url) ? state.allChannels[state.allChannels[0].url === (channel === null || channel === void 0 ? void 0 : channel.url) ? 1 : 0]\n          // if coming channel is first of channel list, current channel will be the next one\n          : state.currentChannel;\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            allChannels: state.allChannels.filter(_ref9 => {\n              let {\n                url\n              } = _ref9;\n              return url !== (channel === null || channel === void 0 ? void 0 : channel.url);\n            }),\n            currentChannel: state.disableAutoSelect ? null : nextChannel\n          });\n        }\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: state.allChannels.map(ch => {\n            if (ch.url === (channel === null || channel === void 0 ? void 0 : channel.url)) {\n              // eslint-disable-next-line no-param-reassign\n              ch.isFrozen = false;\n              return ch;\n            }\n            return ch;\n          })\n        });\n      }\n    case CHANNEL_REPLACED_TO_TOP:\n      {\n        if (state.channelListQuery) {\n          if (filterChannelListParams(state.channelListQuery, action.payload, state.currentUserId)) {\n            return _objectSpread2(_objectSpread2({}, state), {}, {\n              allChannels: [action.payload, ...state.allChannels.filter(channel => (channel === null || channel === void 0 ? void 0 : channel.url) !== action.payload.url)]\n            });\n          }\n          return state;\n        }\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allChannels: [action.payload, ...state.allChannels.filter(channel => (channel === null || channel === void 0 ? void 0 : channel.url) !== action.payload.url)]\n        });\n      }\n    case CHANNEL_LIST_PARAMS_UPDATED:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        currentUserId: action.payload.currentUserId,\n        channelListQuery: action.payload.channelListQuery\n      });\n    default:\n      return state;\n  }\n}\nfunction useActiveChannelUrl(_ref, _ref2) {\n  let {\n    activeChannelUrl,\n    channels,\n    sdk\n  } = _ref;\n  let {\n    logger,\n    channelListDispatcher\n  } = _ref2;\n  return useEffect(() => {\n    if (activeChannelUrl) {\n      logger.info('ChannelListProvider: looking for active channel', {\n        activeChannelUrl\n      });\n      const activeChannel = channels === null || channels === void 0 ? void 0 : channels.find(channel => channel.url === activeChannelUrl);\n      if (activeChannel) {\n        channelListDispatcher({\n          type: SET_CURRENT_CHANNEL,\n          payload: activeChannel\n        });\n      } else {\n        var _sdk$groupChannel;\n        logger.info('ChannelListProvider: searching backend for active channel', {\n          activeChannelUrl\n        });\n        sdk === null || sdk === void 0 ? void 0 : (_sdk$groupChannel = sdk.groupChannel) === null || _sdk$groupChannel === void 0 ? void 0 : _sdk$groupChannel.getChannel(activeChannelUrl).then(channel => {\n          channelListDispatcher({\n            type: FETCH_CHANNELS_SUCCESS,\n            payload: [channel]\n          });\n          channelListDispatcher({\n            type: SET_CURRENT_CHANNEL,\n            payload: channel\n          });\n        }).catch(() => {\n          logger.warning('ChannelListProvider: Active channel not found');\n        });\n      }\n    }\n  }, [activeChannelUrl]);\n}\nconst ChannelListContext = /*#__PURE__*/React__default.createContext({\n  disableUserProfile: true,\n  allowProfileEdit: true,\n  onBeforeCreateChannel: null,\n  onThemeChange: null,\n  onProfileEditSuccess: null,\n  onChannelSelect: null,\n  queries: {},\n  className: null,\n  initialized: false,\n  loading: false,\n  allChannels: [],\n  currentChannel: null,\n  channelListQuery: {},\n  currentUserId: null,\n  channelListDispatcher: null,\n  channelSource: null,\n  typingChannels: []\n});\nconst ChannelListProvider = props => {\n  var _sdk$currentUser;\n  // destruct props\n  const {\n    children,\n    className,\n    disableUserProfile,\n    allowProfileEdit,\n    queries,\n    onProfileEditSuccess,\n    onThemeChange,\n    onBeforeCreateChannel,\n    sortChannelList,\n    overrideInviteUser,\n    activeChannelUrl,\n    isTypingIndicatorEnabled = null,\n    isMessageReceiptStatusEnabled = null\n  } = props;\n  // disable autoselect, if activeChannelUrl is provided\n  // useActiveChannelUrl should be executed when activeChannelUrl is present\n  const disableAutoSelect = (props === null || props === void 0 ? void 0 : props.disableAutoSelect) || !!activeChannelUrl;\n  const onChannelSelect = (props === null || props === void 0 ? void 0 : props.onChannelSelect) || noop;\n  // fetch store from <SendbirdProvider />\n  const globalStore = useSendbirdStateContext();\n  const {\n    config,\n    stores\n  } = globalStore;\n  const {\n    sdkStore\n  } = stores;\n  const {\n    pubSub,\n    logger,\n    onUserProfileMessage\n  } = config;\n  const {\n    markAsDeliveredScheduler,\n    disableMarkAsDelivered = false,\n    isTypingIndicatorEnabledOnChannelList = false,\n    isMessageReceiptStatusEnabledOnChannelList = false\n  } = config;\n  const sdk = sdkStore === null || sdkStore === void 0 ? void 0 : sdkStore.sdk;\n\n  // derive some variables\n  // enable if it is true atleast once(both are flase by default)\n  const userDefinedDisableUserProfile = disableUserProfile || (config === null || config === void 0 ? void 0 : config.disableUserProfile);\n  const userDefinedRenderProfile = config === null || config === void 0 ? void 0 : config.renderUserProfile;\n  const enableEditProfile = allowProfileEdit || (config === null || config === void 0 ? void 0 : config.allowProfileEdit);\n  const userFilledChannelListQuery = queries === null || queries === void 0 ? void 0 : queries.channelListQuery;\n  const userFilledApplicationUserListQuery = queries === null || queries === void 0 ? void 0 : queries.applicationUserListQuery;\n  const sdkIntialized = sdkStore === null || sdkStore === void 0 ? void 0 : sdkStore.initialized;\n  const [channelListStore, channelListDispatcher] = useReducer(reducer, channelListInitialState);\n  const {\n    currentChannel\n  } = channelListStore;\n  const [channelSource, setChannelSource] = useState(null);\n  const [typingChannels, setTypingChannels] = useState([]);\n  useEffect(() => {\n    const subscriber = pubSubHandler(pubSub, channelListDispatcher);\n    return () => {\n      pubSubHandleRemover(subscriber);\n    };\n  }, [sdkIntialized]);\n  useEffect(() => {\n    const sdkChannelHandlerId = uuidv4();\n    if (sdkIntialized) {\n      logger.info('ChannelList: Setup channelHandlers');\n      setupChannelList({\n        sdk,\n        sdkChannelHandlerId,\n        channelListDispatcher,\n        setChannelSource,\n        onChannelSelect,\n        userFilledChannelListQuery,\n        logger,\n        sortChannelList,\n        disableAutoSelect,\n        markAsDeliveredScheduler,\n        disableMarkAsDelivered\n      });\n    } else {\n      var _sdk$groupChannel;\n      logger.info('ChannelList: Removing channelHandlers');\n      // remove previous channelHandlers\n      if (sdk !== null && sdk !== void 0 && (_sdk$groupChannel = sdk.groupChannel) !== null && _sdk$groupChannel !== void 0 && _sdk$groupChannel.removeGroupChannelHandler) {\n        sdk.groupChannel.removeGroupChannelHandler(sdkChannelHandlerId);\n      }\n      // remove channelSource\n      setChannelSource(null);\n      // cleanup\n      channelListDispatcher({\n        type: RESET_CHANNEL_LIST,\n        payload: null\n      });\n    }\n    return () => {\n      var _sdk$groupChannel2;\n      logger.info('ChannelList: Removing channelHandlers');\n      if (sdk !== null && sdk !== void 0 && (_sdk$groupChannel2 = sdk.groupChannel) !== null && _sdk$groupChannel2 !== void 0 && _sdk$groupChannel2.removeGroupChannelHandler) {\n        var _sdk$groupChannel3;\n        sdk === null || sdk === void 0 ? void 0 : (_sdk$groupChannel3 = sdk.groupChannel) === null || _sdk$groupChannel3 === void 0 ? void 0 : _sdk$groupChannel3.removeGroupChannelHandler(sdkChannelHandlerId);\n      }\n    };\n  }, [sdkIntialized, userFilledChannelListQuery, sortChannelList]);\n  useEffect(() => {\n    var _sdk$groupChannel4;\n    let typingHandlerId = '';\n    if (sdk !== null && sdk !== void 0 && (_sdk$groupChannel4 = sdk.groupChannel) !== null && _sdk$groupChannel4 !== void 0 && _sdk$groupChannel4.addGroupChannelHandler) {\n      var _sdk$groupChannel5;\n      typingHandlerId = uuidv4();\n      const handler = new GroupChannelHandler({\n        onTypingStatusUpdated: channel => {\n          var _channel$getTypingUse;\n          const typingMemberCount = channel === null || channel === void 0 ? void 0 : (_channel$getTypingUse = channel.getTypingUsers()) === null || _channel$getTypingUse === void 0 ? void 0 : _channel$getTypingUse.length;\n          const channelList = typingChannels.filter(ch => ch.url !== channel.url);\n          if (typingMemberCount > 0) {\n            setTypingChannels([...channelList, channel]);\n          } else {\n            setTypingChannels(channelList);\n          }\n        },\n        onUnreadMemberStatusUpdated(channel) {\n          channelListDispatcher({\n            type: ON_LAST_MESSAGE_UPDATED,\n            payload: channel\n          });\n        },\n        onUndeliveredMemberStatusUpdated(channel) {\n          channelListDispatcher({\n            type: ON_LAST_MESSAGE_UPDATED,\n            payload: channel\n          });\n        },\n        onMessageUpdated(channel) {\n          channelListDispatcher({\n            type: ON_LAST_MESSAGE_UPDATED,\n            payload: channel\n          });\n          sdk.groupChannel.getChannelWithoutCache(channel.url).then(ch => {\n            channelListDispatcher({\n              type: ON_LAST_MESSAGE_UPDATED,\n              payload: ch\n            });\n          });\n        },\n        onMentionReceived(channel) {\n          channelListDispatcher({\n            type: ON_LAST_MESSAGE_UPDATED,\n            payload: channel\n          });\n          sdk.groupChannel.getChannelWithoutCache(channel.url).then(ch => {\n            channelListDispatcher({\n              type: ON_LAST_MESSAGE_UPDATED,\n              payload: ch\n            });\n          });\n        }\n      });\n      sdk === null || sdk === void 0 ? void 0 : (_sdk$groupChannel5 = sdk.groupChannel) === null || _sdk$groupChannel5 === void 0 ? void 0 : _sdk$groupChannel5.addGroupChannelHandler(typingHandlerId, handler);\n    }\n    return () => {\n      var _sdk$groupChannel6;\n      if (sdk !== null && sdk !== void 0 && (_sdk$groupChannel6 = sdk.groupChannel) !== null && _sdk$groupChannel6 !== void 0 && _sdk$groupChannel6.removeGroupChannelHandler && typingHandlerId !== '') {\n        sdk.groupChannel.removeGroupChannelHandler(typingHandlerId);\n      }\n    };\n  }, [sdk === null || sdk === void 0 ? void 0 : (_sdk$currentUser = sdk.currentUser) === null || _sdk$currentUser === void 0 ? void 0 : _sdk$currentUser.userId]);\n  const queries_ = useMemo(() => {\n    return {\n      applicationUserListQuery: userFilledApplicationUserListQuery,\n      channelListQuery: userFilledChannelListQuery\n    };\n  }, [userFilledApplicationUserListQuery, userFilledChannelListQuery]);\n  const {\n    allChannels\n  } = channelListStore;\n  const sortedChannels = sortChannelList && typeof sortChannelList === 'function' ? sortChannelList(allChannels) : allChannels;\n  if (sortedChannels.length !== allChannels.length) {\n    const warning = `ChannelList: You have removed/added extra channels on sortChannelList\n      this could cause unexpected problems`;\n    // eslint-disable-next-line no-console\n    console.warn(warning, {\n      before: allChannels,\n      after: sortedChannels\n    });\n    logger.warning(warning, {\n      before: allChannels,\n      after: sortedChannels\n    });\n  }\n\n  // Set current channel (by on_channel_selected event)\n  useEffect(() => {\n    if (!sdk || !sdk.groupChannel || !currentChannel || !(currentChannel !== null && currentChannel !== void 0 && currentChannel.url)) {\n      return;\n    }\n    sdk.groupChannel.getChannel(currentChannel.url).then(groupChannel => {\n      if (groupChannel) {\n        onChannelSelect(groupChannel);\n      } else {\n        onChannelSelect(null);\n      }\n    });\n  }, [currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url]);\n\n  // Set active channel (by url)\n  useActiveChannelUrl({\n    activeChannelUrl,\n    channels: sortedChannels,\n    sdk\n  }, {\n    logger,\n    channelListDispatcher\n  });\n  return /*#__PURE__*/React__default.createElement(ChannelListContext.Provider, {\n    value: _objectSpread2(_objectSpread2({\n      className,\n      disableUserProfile,\n      queries: queries_,\n      onProfileEditSuccess,\n      onThemeChange,\n      onBeforeCreateChannel,\n      overrideInviteUser,\n      onChannelSelect,\n      sortChannelList,\n      allowProfileEdit: enableEditProfile,\n      channelListDispatcher,\n      channelSource\n    }, channelListStore), {}, {\n      allChannels: sortedChannels,\n      typingChannels,\n      isTypingIndicatorEnabled: isTypingIndicatorEnabled !== null ? isTypingIndicatorEnabled : isTypingIndicatorEnabledOnChannelList,\n      isMessageReceiptStatusEnabled: isMessageReceiptStatusEnabled !== null ? isMessageReceiptStatusEnabled : isMessageReceiptStatusEnabledOnChannelList\n    })\n  }, /*#__PURE__*/React__default.createElement(UserProfileProvider, {\n    disableUserProfile: userDefinedDisableUserProfile,\n    renderUserProfile: userDefinedRenderProfile,\n    onUserProfileMessage: onUserProfileMessage\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: `sendbird-channel-list ${className}`\n  }, children)));\n};\nfunction useChannelListContext() {\n  const context = useContext(ChannelListContext);\n  return context;\n}\nexport { ChannelListProvider as C, FETCH_CHANNELS_START as F, LEAVE_CHANNEL_SUCCESS as L, SET_CURRENT_CHANNEL as S, FETCH_CHANNELS_SUCCESS as a, FETCH_CHANNELS_FAILURE as b, useChannelListContext as u };","map":{"version":3,"mappings":"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","names":["RESET_CHANNEL_LIST","CREATE_CHANNEL","USER_INVITED","LEAVE_CHANNEL_SUCCESS","SET_CURRENT_CHANNEL","FETCH_CHANNELS_START","FETCH_CHANNELS_SUCCESS","FETCH_CHANNELS_FAILURE","INIT_CHANNELS_START","INIT_CHANNELS_SUCCESS","INIT_CHANNELS_FAILURE","ON_USER_JOINED","ON_CHANNEL_DELETED","ON_LAST_MESSAGE_UPDATED","ON_USER_LEFT","ON_CHANNEL_CHANGED","ON_CHANNEL_ARCHIVED","ON_CHANNEL_FROZEN","ON_CHANNEL_UNFROZEN","ON_READ_RECEIPT_UPDATED","ON_DELIVERY_RECEIPT_UPDATED","CHANNEL_REPLACED_TO_TOP","CHANNEL_LIST_PARAMS_UPDATED","DELIVERY_RECIPT","createEventHandler","_ref","sdk","sdkChannelHandlerId","channelListDispatcher","logger","ChannelHandler","GroupChannelHandler","onChannelChanged","channel","info","type","channelActions","payload","onChannelDeleted","channelUrl","onUserJoined","lastMessage","onUserReceivedInvitation","inviter","invitees","currentUser","isInvited","find","user","userId","onUserBanned","isMe","onUserLeft","leftUser","onReadStatus","onDeliveryReceiptUpdated","onMessageUpdated","message","isEqual","onChannelHidden","onChannelFrozen","onChannelUnfrozen","groupChannel","addGroupChannelHandler","createChannelListQuery","_ref2","userFilledChannelListQuery","param","includeEmpty","limit","order","Object","keys","forEach","key","channelListQuery","createMyGroupChannelListQuery","setupChannelList","setChannelSource","onChannelSelect","sortChannelList","disableAutoSelect","markAsDeliveredScheduler","disableMarkAsDelivered","warning","currentUserId","hasNext","next","then","channelList","sortedChannelList","canSetMarkAsDelivered","appInfo","_sdk$appInfo","premiumFeatureList","_sdk$appInfo$premiumF","feature","push","catch","err","error","pubSubHandleRemover","subscriber","s","remove","pubSubHandler","pubSub","Map","set","topics","subscribe","msg","UPDATE_USER_MESSAGE","updatedChannel","_updatedChannel$lastM","messageId","LEAVE_CHANNEL","url","SEND_MESSAGE_START","initialized","loading","allChannels","currentChannel","reducer","state","action","actions","initialState","length","currentChannels","map","c","filteredChannels","filter","filterChannelListParams","getChannelsWithUpsertedChannel","ch","nextChannel","_state$currentChannel","_state$currentChannel2","_ref3","_state$currentChannel3","_state$currentChannel4","_ref4","_state$currentChannel5","unreadMessageCount","_state$currentChannel6","_ref5","_ref6","currentUnreadCount","_ref7","_state$currentChannel7","_ref8","isFrozen","_state$currentChannel8","_ref9","useActiveChannelUrl","activeChannelUrl","channels","useEffect","activeChannel","messageActionTypes","_sdk$groupChannel","getChannel","ChannelListContext","React","createContext","disableUserProfile","allowProfileEdit","onBeforeCreateChannel","onThemeChange","onProfileEditSuccess","queries","className","channelSource","typingChannels","ChannelListProvider","props","children","overrideInviteUser","isTypingIndicatorEnabled","isMessageReceiptStatusEnabled","noop","globalStore","useSendbirdStateContext","config","stores","sdkStore","onUserProfileMessage","isTypingIndicatorEnabledOnChannelList","isMessageReceiptStatusEnabledOnChannelList","userDefinedDisableUserProfile","userDefinedRenderProfile","renderUserProfile","enableEditProfile","userFilledApplicationUserListQuery","applicationUserListQuery","sdkIntialized","channelListStore","useReducer","channelListReducers","channelListInitialState","useState","setTypingChannels","uuidv4","removeGroupChannelHandler","channelListActions","_sdk$groupChannel2","_sdk$groupChannel3","typingHandlerId","_sdk$groupChannel4","handler","onTypingStatusUpdated","typingMemberCount","getTypingUsers","_channel$getTypingUse","onUnreadMemberStatusUpdated","onUndeliveredMemberStatusUpdated","getChannelWithoutCache","onMentionReceived","_sdk$groupChannel5","_sdk$groupChannel6","_sdk$currentUser","queries_","useMemo","sortedChannels","console","warn","before","after","Provider","value","UserProfileProvider","useChannelListContext","context","useContext"],"sources":["C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\ChannelList\\dux\\actionTypes.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\ChannelList\\utils.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\ChannelList\\dux\\initialState.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\ChannelList\\dux\\reducers.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\ChannelList\\context\\hooks\\useActiveChannelUrl.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\ChannelList\\context\\ChannelListProvider.tsx"],"sourcesContent":["export const RESET_CHANNEL_LIST = 'RESET_CHANNEL_LIST';\nexport const CREATE_CHANNEL = 'CREATE_CHANNEL';\nexport const USER_INVITED = 'USER_INVITED';\nexport const UNLOAD_CHANNELS = 'UNLOAD_CHANNELS';\nexport const SET_CHANNEL_LOADING = 'SET_CHANNEL_LOADING';\nexport const LEAVE_CHANNEL_SUCCESS = 'LEAVE_CHANNEL_SUCCESS';\n\nexport const SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\n\nexport const FETCH_CHANNELS_START = 'FETCH_CHANNELS_START';\nexport const FETCH_CHANNELS_SUCCESS = 'FETCH_CHANNELS_SUCCESS';\nexport const FETCH_CHANNELS_FAILURE = 'FETCH_CHANNELS_FAILURE';\n\nexport const INIT_CHANNELS_START = 'INIT_CHANNELS_START';\nexport const INIT_CHANNELS_SUCCESS = 'INIT_CHANNELS_SUCCESS';\nexport const INIT_CHANNELS_FAILURE = 'INIT_CHANNELS_FAILURE';\n\nexport const INVITE_MEMBERS_SUCESS = 'INVITE_MEMBERS_SUCESS';\n\nexport const ON_USER_JOINED = 'ON_USER_JOINED';\nexport const ON_CHANNEL_DELETED = 'ON_CHANNEL_DELETED';\nexport const ON_LAST_MESSAGE_UPDATED = 'ON_LAST_MESSAGE_UPDATED';\nexport const ON_USER_LEFT = 'ON_USER_LEFT';\nexport const ON_CHANNEL_CHANGED = 'ON_CHANNEL_CHANGED';\nexport const ON_CHANNEL_ARCHIVED = 'ON_CHANNEL_ARCHIVED';\nexport const ON_CHANNEL_FROZEN = 'ON_CHANNEL_FROZEN';\nexport const ON_CHANNEL_UNFROZEN = 'ON_CHANNEL_UNFROZEN';\n\nexport const ON_READ_RECEIPT_UPDATED = 'ON_READ_RECEIPT_UPDATED';\nexport const ON_DELIVERY_RECEIPT_UPDATED = 'ON_DELIVERY_RECEIPT_UPDATED';\n\nexport const CHANNEL_REPLACED_TO_TOP = 'CHANNEL_REPLACED_TO_TOP';\nexport const CHANNEL_LIST_PARAMS_UPDATED = 'CHANNEL_LIST_PARAMS_UPDATED';\n","import { GroupChannelHandler } from '@sendbird/chat/groupChannel';\nimport * as channelActions from './dux/actionTypes';\nimport topics from '../../lib/pubSub/topics';\n\nconst DELIVERY_RECIPT = 'delivery_receipt';\n\nconst createEventHandler = ({\n  sdk,\n  sdkChannelHandlerId,\n  channelListDispatcher,\n  logger,\n}) => {\n  const ChannelHandler = new GroupChannelHandler({\n    onChannelChanged: (channel) => {\n      logger.info('ChannelList: onChannelChanged', channel);\n      channelListDispatcher({\n        type: channelActions.ON_CHANNEL_CHANGED,\n        payload: channel,\n      });\n    },\n    onChannelDeleted: (channelUrl) => {\n      logger.info('ChannelList: onChannelDeleted', channelUrl);\n      channelListDispatcher({\n        type: channelActions.ON_CHANNEL_DELETED,\n        payload: channelUrl,\n      });\n    },\n    onUserJoined: (channel) => {\n      logger.info('ChannelList: onUserJoined', channel);\n      if (channel?.lastMessage) {\n        channelListDispatcher({\n          type: channelActions.ON_USER_JOINED,\n          payload: channel,\n        });\n      }\n    },\n    onUserReceivedInvitation: (channel, inviter, invitees) => {\n      logger.info('ChannelList: onUserReceivedInvitation', { channel, inviter, invitees });\n      const { currentUser } = sdk;\n      const isInvited = invitees.find((user) => user?.userId === currentUser?.userId);\n      // The newly created channel should be displayed only when there's a message\n      if (isInvited && channel?.lastMessage) {\n        channelListDispatcher({\n          type: channelActions.USER_INVITED,\n          payload: channel,\n        });\n      }\n    },\n    onUserBanned: (channel, user) => {\n      const { currentUser } = sdk;\n      logger.info('Channel: onUserBanned', channel);\n      if (user.userId === currentUser.userId) {\n        channelListDispatcher({\n          type: channelActions.ON_USER_LEFT,\n          payload: {\n            channel,\n            isMe: true,\n          },\n        });\n      } else {\n        channelListDispatcher({\n          type: channelActions.ON_USER_LEFT,\n          payload: {\n            channel,\n            isMe: false,\n          },\n        });\n      }\n    },\n    onUserLeft: (channel, leftUser) => {\n      const { currentUser } = sdk;\n      const isMe = (currentUser.userId === leftUser.userId);\n      logger.info('ChannelList: onUserLeft', channel);\n      channelListDispatcher({\n        type: channelActions.ON_USER_LEFT,\n        payload: {\n          channel,\n          isMe,\n        },\n      });\n    },\n\n    onReadStatus: (channel) => {\n      logger.info('ChannelList: onReadStatus', channel);\n      channelListDispatcher({\n        type: channelActions.ON_READ_RECEIPT_UPDATED,\n        payload: channel,\n      });\n    },\n\n    onDeliveryReceiptUpdated: (channel) => {\n      logger.info('ChannelList: onDeliveryReceiptUpdated', channel);\n      if (channel?.lastMessage) {\n        channelListDispatcher({\n          type: channelActions.ON_DELIVERY_RECEIPT_UPDATED,\n          payload: channel,\n        });\n      }\n    },\n\n    onMessageUpdated: (channel, message) => {\n      if (channel?.lastMessage.isEqual(message)) {\n        logger.info('ChannelList: onMessageUpdated', channel);\n        channelListDispatcher({\n          type: channelActions.ON_LAST_MESSAGE_UPDATED,\n          payload: channel,\n        });\n      }\n    },\n\n    onChannelHidden: (channel) => {\n      logger.info('ChannelList: onChannelHidden', channel);\n      channelListDispatcher({\n        type: channelActions.ON_CHANNEL_ARCHIVED,\n        payload: channel,\n      });\n    },\n\n    onChannelFrozen: (channel) => {\n      logger.info('ChannelList: onChannelFrozen', channel);\n      channelListDispatcher({\n        type: channelActions.ON_CHANNEL_FROZEN,\n        payload: channel,\n      });\n    },\n\n    onChannelUnfrozen: (channel) => {\n      logger.info('ChannelList: onChannelUnfrozen', channel);\n      channelListDispatcher({\n        type: channelActions.ON_CHANNEL_UNFROZEN,\n        payload: channel,\n      });\n    },\n  });\n\n  logger.info('ChannelList: Added channelHandler');\n  sdk.groupChannel.addGroupChannelHandler(sdkChannelHandlerId, ChannelHandler);\n};\n\nconst createChannelListQuery = ({ sdk, userFilledChannelListQuery = {} }) => {\n  const param = {};\n  param.includeEmpty = false;\n  param.limit = 20; // The value of pagination limit could be set up to 100.\n  param.order = 'latest_last_message'; // 'chronological', 'latest_last_message', 'channel_name_alphabetical', and 'metadata_value_alphabetical'\n\n  if (userFilledChannelListQuery) {\n    Object.keys(userFilledChannelListQuery).forEach((key) => {\n      param[key] = userFilledChannelListQuery[key];\n    });\n  }\n\n  const channelListQuery = sdk.groupChannel.createMyGroupChannelListQuery(param);\n\n  return channelListQuery;\n};\n\n/**\n * Setup event listener\n * create channel source query\n * addloading screen\n */\nfunction setupChannelList({\n  sdk,\n  sdkChannelHandlerId,\n  channelListDispatcher,\n  setChannelSource,\n  onChannelSelect,\n  userFilledChannelListQuery,\n  logger,\n  sortChannelList,\n  disableAutoSelect,\n  markAsDeliveredScheduler,\n  disableMarkAsDelivered,\n}) {\n  if (sdk?.groupChannel) {\n    createEventHandler({\n      sdk,\n      channelListDispatcher,\n      sdkChannelHandlerId,\n      logger,\n    });\n  } else {\n    logger.warning('ChannelList - createEventHandler: sdk or sdk.ChannelHandler does not exist', sdk);\n  }\n\n  logger.info('ChannelList - creating query', { userFilledChannelListQuery });\n  const channelListQuery = createChannelListQuery({ sdk, userFilledChannelListQuery });\n  logger.info('ChannelList - created query', channelListQuery);\n  setChannelSource(channelListQuery);\n\n  channelListDispatcher({\n    type: channelActions.INIT_CHANNELS_START,\n  });\n\n  if (userFilledChannelListQuery) {\n    logger.info('ChannelList - setting up channelListQuery', channelListQuery);\n    channelListDispatcher({\n      type: channelActions.CHANNEL_LIST_PARAMS_UPDATED,\n      payload: {\n        channelListQuery,\n        currentUserId: sdk && sdk.currentUser && sdk.currentUser.userId,\n      },\n    });\n  }\n\n  logger.info('ChannelList - fetching channels');\n  if (channelListQuery.hasNext) {\n    channelListQuery.next().then((channelList) => {\n      logger.info('ChannelList - fetched channels', channelList);\n      // select first channel\n      logger.info('ChannelList - highlight channel', channelList[0]);\n      let sortedChannelList = channelList;\n      if (sortChannelList && typeof sortChannelList === 'function') {\n        sortedChannelList = sortChannelList(channelList);\n        logger.info('ChannelList - channel list sorted', sortedChannelList);\n      }\n      if (!disableAutoSelect) {\n        onChannelSelect(sortedChannelList[0]);\n      }\n      channelListDispatcher({\n        type: channelActions.INIT_CHANNELS_SUCCESS,\n        payload: { channelList: sortedChannelList, disableAutoSelect },\n      });\n      const canSetMarkAsDelivered = sdk?.appInfo?.premiumFeatureList\n        ?.find((feature) => (feature === DELIVERY_RECIPT));\n\n      if (canSetMarkAsDelivered && !disableMarkAsDelivered) {\n        sortedChannelList.forEach((channel) => {\n          markAsDeliveredScheduler.push(channel);\n        });\n      }\n    }).catch((err) => {\n      if (err) {\n        logger.error('ChannelList - couldnt fetch channels', err);\n        channelListDispatcher({\n          type: channelActions.INIT_CHANNELS_FAILURE,\n        });\n      }\n    });\n  } else {\n    logger.info('ChannelList - there are no more channels');\n  }\n}\n\nexport const pubSubHandleRemover = (subscriber) => {\n  subscriber.forEach((s) => {\n    try {\n      s.remove();\n    } catch {\n      //\n    }\n  });\n};\n\nexport const pubSubHandler = (pubSub, channelListDispatcher) => {\n  const subscriber = new Map();\n  if (!pubSub) return subscriber;\n  subscriber.set(topics.CREATE_CHANNEL, pubSub.subscribe(topics.CREATE_CHANNEL, (msg) => {\n    const { channel } = msg;\n    channelListDispatcher({\n      type: 'CREATE_CHANNEL',\n      payload: channel,\n    });\n  }));\n\n  subscriber.set(topics.UPDATE_USER_MESSAGE, pubSub.subscribe(topics.UPDATE_USER_MESSAGE, (msg) => {\n    const { channel, message } = msg;\n    const updatedChannel = channel;\n    if (updatedChannel?.lastMessage?.messageId === message.messageId) {\n      updatedChannel.lastMessage = message;\n    }\n    if (channel) {\n      channelListDispatcher({\n        type: channelActions.ON_LAST_MESSAGE_UPDATED,\n        payload: updatedChannel,\n      });\n    }\n  }));\n\n  subscriber.set(topics.LEAVE_CHANNEL, pubSub.subscribe(topics.LEAVE_CHANNEL, (msg) => {\n    const { channel } = msg;\n    channelListDispatcher({\n      type: channelActions.LEAVE_CHANNEL_SUCCESS,\n      payload: channel?.url,\n    });\n  }));\n\n  subscriber.set(topics.SEND_MESSAGE_START, pubSub.subscribe(topics.SEND_MESSAGE_START, (msg) => {\n    const { channel } = msg;\n    channelListDispatcher({\n      type: channelActions.CHANNEL_REPLACED_TO_TOP,\n      payload: channel,\n    });\n  }));\n\n  return subscriber;\n};\n\nexport default setupChannelList;\n","export default {\n  // we might not need this initialized state -> should remove\n  initialized: false,\n  loading: true,\n  allChannels: [],\n  currentChannel: null,\n  channelListQuery: null,\n  currentUserId: '',\n  disableAutoSelect: false,\n};\n","import { filterChannelListParams, getChannelsWithUpsertedChannel } from '../../../utils';\nimport * as actions from './actionTypes';\nimport initialState from './initialState';\n\nexport default function reducer(state, action) {\n  switch (action.type) {\n    case actions.INIT_CHANNELS_START:\n      return {\n        ...state,\n        loading: true,\n      };\n    case actions.RESET_CHANNEL_LIST:\n      return initialState;\n    case actions.INIT_CHANNELS_SUCCESS: {\n      const { channelList, disableAutoSelect } = action.payload;\n      return {\n        ...state,\n        initialized: true,\n        loading: false,\n        allChannels: channelList,\n        disableAutoSelect,\n        currentChannel: (\n          !disableAutoSelect\n          && channelList\n          && channelList.length\n          && channelList.length > 0\n        )\n          ? channelList[0]\n          : null,\n      };\n    }\n    case actions.FETCH_CHANNELS_SUCCESS: {\n      const currentChannels = state.allChannels.map((c) => c.url);\n      const filteredChannels = action.payload.filter(\n        ({ url }) => !(currentChannels.find((c) => c === url)),\n      );\n      return {\n        ...state,\n        allChannels: [\n          ...state.allChannels,\n          ...filteredChannels,\n        ],\n      };\n    }\n    case actions.USER_INVITED: {\n      const channel = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel),\n          };\n        }\n        return {\n          ...state,\n          currentChannel: channel,\n        };\n      }\n      return {\n        ...state,\n        allChannels: [channel, ...state.allChannels.filter((ch) => ch.url !== channel?.url)],\n      };\n    }\n    case actions.CREATE_CHANNEL: {\n      const channel = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel),\n          };\n        }\n        return {\n          ...state,\n          currentChannel: channel,\n        };\n      }\n      return {\n        ...state,\n        allChannels: [channel, ...state.allChannels.filter((ch) => ch.url !== channel?.url)],\n        currentChannel: channel,\n      };\n    }\n    case actions.ON_CHANNEL_ARCHIVED: {\n      const channel = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel),\n          };\n          // TODO: Check if we have to set current channel\n        }\n      }\n      const nextChannel = (channel?.url === state.currentChannel?.url)\n        ? state.allChannels[state.allChannels[0].url === channel?.url ? 1 : 0]\n        : state.currentChannel;\n      return {\n        ...state,\n        allChannels: state.allChannels.filter(({ url }) => url !== channel?.url),\n        currentChannel: state.disableAutoSelect ? null : nextChannel,\n      };\n    }\n    case actions.LEAVE_CHANNEL_SUCCESS:\n    case actions.ON_CHANNEL_DELETED: {\n      const channelUrl = action.payload;\n      return {\n        ...state,\n        currentChannel: (channelUrl === state.currentChannel?.url)\n          ? state.allChannels[0]\n          : state.currentChannel,\n        allChannels: state.allChannels.filter(({ url }) => url !== channelUrl),\n      };\n    }\n    case actions.ON_USER_LEFT: {\n      const { channel, isMe } = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          const filteredChannels = getChannelsWithUpsertedChannel(state.allChannels, channel);\n          const nextChannel = (isMe && (channel?.url === state.currentChannel?.url))\n            ? filteredChannels[0]\n            : state.currentChannel;\n          return {\n            ...state,\n            currentChannel: state.disableAutoSelect ? null : nextChannel,\n            allChannels: filteredChannels,\n          };\n        }\n        const nextChannel = (channel?.url === state.currentChannel?.url)\n          ? state.allChannels[0]\n          : state.currentChannel;\n        return {\n          ...state,\n          currentChannel: state.disableAutoSelect ? null : nextChannel,\n          allChannels: state.allChannels.filter(({ url }) => url !== channel?.url),\n        };\n      }\n      const filteredChannels = state.allChannels.filter((c) => !(c.url === channel?.url && isMe));\n      const nextChannel = (isMe && (channel?.url === state.currentChannel?.url))\n        ? filteredChannels[0]\n        : state.currentChannel;\n      return {\n        ...state,\n        currentChannel: state.disableAutoSelect ? null : nextChannel,\n        allChannels: filteredChannels,\n      };\n    }\n    case actions.ON_USER_JOINED:\n    case actions.ON_CHANNEL_CHANGED:\n    case actions.ON_READ_RECEIPT_UPDATED:\n    case actions.ON_DELIVERY_RECEIPT_UPDATED: {\n      const { allChannels = [] } = state;\n      const channel = action.payload;\n      const { unreadMessageCount } = channel;\n      if (!channel?.lastMessage) return state;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(allChannels, channel),\n          };\n        }\n        const nextChannel = (channel?.url === state.currentChannel?.url)\n          ? state.allChannels[state.allChannels[0].url === channel?.url ? 1 : 0]\n          // if coming channel is first of channel list, current channel will be the next one\n          : state.currentChannel;\n        return {\n          ...state,\n          currentChannel: state.disableAutoSelect ? null : nextChannel,\n          allChannels: state.allChannels.filter(({ url }) => url !== channel?.url),\n        };\n      }\n      // if its only an unread message count change, dont push to top\n      if (unreadMessageCount === 0) {\n        const currentChannel = allChannels.find(({ url }) => url === channel?.url);\n        const currentUnreadCount = currentChannel && currentChannel.unreadMessageCount;\n        if (currentUnreadCount === 0) {\n          return {\n            ...state,\n            allChannels: state.allChannels.map((ch) => (ch.url === channel?.url ? channel : ch)),\n          };\n        }\n      }\n      return {\n        ...state,\n        allChannels: [\n          channel,\n          ...state.allChannels.filter(({ url }) => url !== action.payload.url),\n        ],\n      };\n    }\n    case actions.SET_CURRENT_CHANNEL:\n      return {\n        ...state,\n        currentChannel: action.payload,\n      };\n    case actions.ON_LAST_MESSAGE_UPDATED: {\n      return {\n        ...state,\n        allChannels: state.allChannels.map((channel) => (\n          channel?.url === action.payload.url ? action.payload : channel)),\n      };\n    }\n    case actions.ON_CHANNEL_FROZEN: {\n      const channel = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel),\n          };\n        }\n        const nextChannel = (channel?.url === state.currentChannel?.url)\n          ? state.allChannels[state.allChannels[0].url === channel?.url ? 1 : 0]\n          // if coming channel is first of channel list, current channel will be the next one\n          : state.currentChannel;\n        return {\n          ...state,\n          allChannels: state.allChannels.filter(({ url }) => url !== channel?.url),\n          currentChannel: state.disableAutoSelect ? null : nextChannel,\n        };\n      }\n      return {\n        ...state,\n        allChannels: state.allChannels.map((ch) => {\n          if (ch.url === channel?.url) {\n            // eslint-disable-next-line no-param-reassign\n            ch.isFrozen = true;\n            return ch;\n          }\n          return ch;\n        }),\n      };\n    }\n    case actions.ON_CHANNEL_UNFROZEN: {\n      const channel = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel),\n          };\n        }\n        const nextChannel = (channel?.url === state.currentChannel?.url)\n          ? state.allChannels[state.allChannels[0].url === channel?.url ? 1 : 0]\n          // if coming channel is first of channel list, current channel will be the next one\n          : state.currentChannel;\n        return {\n          ...state,\n          allChannels: state.allChannels.filter(({ url }) => url !== channel?.url),\n          currentChannel: state.disableAutoSelect ? null : nextChannel,\n        };\n      }\n      return {\n        ...state,\n        allChannels: state.allChannels.map((ch) => {\n          if (ch.url === channel?.url) {\n            // eslint-disable-next-line no-param-reassign\n            ch.isFrozen = false;\n            return ch;\n          }\n          return ch;\n        }),\n      };\n    }\n    case actions.CHANNEL_REPLACED_TO_TOP: {\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, action.payload, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: [\n              action.payload,\n              ...state.allChannels.filter((channel) => channel?.url !== action.payload.url),\n            ],\n          };\n        }\n        return state;\n      }\n      return {\n        ...state,\n        allChannels: [\n          action.payload,\n          ...state.allChannels.filter((channel) => channel?.url !== action.payload.url),\n        ],\n      };\n    }\n    case actions.CHANNEL_LIST_PARAMS_UPDATED:\n      return {\n        ...state,\n        currentUserId: action.payload.currentUserId,\n        channelListQuery: action.payload.channelListQuery,\n      };\n    default:\n      return state;\n  }\n}\n","import { useEffect } from 'react';\nimport * as messageActionTypes from '../../dux/actionTypes';\nimport { GroupChannel, SendbirdGroupChat } from '@sendbird/chat/groupChannel';\nimport { Logger } from '../../../../lib/SendbirdState';\n\nexport type DynamicProps = {\n  activeChannelUrl?: string;\n  channels?: GroupChannel[];\n  sdk?: SendbirdGroupChat;\n};\n\nexport type StaticProps = {\n  logger: Logger;\n  channelListDispatcher: React.Dispatch<any>;\n};\n\nfunction useActiveChannelUrl({\n  activeChannelUrl,\n  channels,\n  sdk,\n}: DynamicProps, {\n  logger,\n  channelListDispatcher,\n}: StaticProps): void {\n  return useEffect(() => {\n    if (activeChannelUrl) {\n      logger.info('ChannelListProvider: looking for active channel', { activeChannelUrl });\n      const activeChannel = channels?.find(channel => channel.url === activeChannelUrl);\n      if (activeChannel) {\n        channelListDispatcher({\n          type: messageActionTypes.SET_CURRENT_CHANNEL,\n          payload: activeChannel,\n        });\n      } else {\n        logger.info('ChannelListProvider: searching backend for active channel', { activeChannelUrl });\n        sdk?.groupChannel?.getChannel(activeChannelUrl)\n          .then((channel) => {\n            channelListDispatcher({\n              type: messageActionTypes.FETCH_CHANNELS_SUCCESS,\n              payload: [channel],\n            });\n            channelListDispatcher({\n              type: messageActionTypes.SET_CURRENT_CHANNEL,\n              payload: channel,\n            });\n          })\n          .catch(() => {\n            logger.warning('ChannelListProvider: Active channel not found');\n          });\n      }\n    }\n  }, [activeChannelUrl]);\n}\n\nexport default useActiveChannelUrl;\n","import React, {\n  useState,\n  useEffect,\n  useContext,\n  useReducer,\n  useMemo,\n} from 'react';\n\nimport type { User } from '@sendbird/chat';\nimport {\n  GroupChannel,\n  GroupChannelCreateParams,\n  GroupChannelHandler,\n  SendbirdGroupChat,\n  GroupChannelListQuery as GroupChannelListQuerySb,\n  GroupChannelUserIdsFilter,\n} from '@sendbird/chat/groupChannel';\n\nimport { RenderUserProfileProps } from '../../../types';\n\nimport setupChannelList, {\n  pubSubHandler,\n  pubSubHandleRemover,\n} from '../utils';\nimport { uuidv4 } from '../../../utils/uuid';\nimport { noop } from '../../../utils/utils';\n\nimport * as channelListActions from '../dux/actionTypes';\n\nimport { UserProfileProvider } from '../../../lib/UserProfileContext';\nimport useSendbirdStateContext from '../../../hooks/useSendbirdStateContext';\nimport { CustomUseReducerDispatcher } from '../../../lib/SendbirdState';\nimport channelListReducers from '../dux/reducers';\nimport channelListInitialState from '../dux/initialState';\nimport { CHANNEL_TYPE } from '../../CreateChannel/types';\nimport useActiveChannelUrl from './hooks/useActiveChannelUrl';\n\ninterface ApplicationUserListQuery {\n  limit?: number;\n  userIdsFilter?: Array<string>;\n  metaDataKeyFilter?: string;\n  metaDataValuesFilter?: Array<string>;\n}\n\ninterface GroupChannelListQuery {\n  limit?: number;\n  includeEmpty?: boolean;\n  order?: 'latest_last_message' | 'chronological' | 'channel_name_alphabetical' | 'metadata_value_alphabetical';\n  userIdsExactFilter?: Array<string>;\n  userIdsIncludeFilter?: Array<string>;\n  userIdsIncludeFilterQueryType?: 'AND' | 'OR';\n  nicknameContainsFilter?: string;\n  channelNameContainsFilter?: string;\n  customTypesFilter?: Array<string>;\n  customTypeStartsWithFilter?: string;\n  channelUrlsFilter?: Array<string>;\n  superChannelFilter?: 'all' | 'super' | 'nonsuper';\n  publicChannelFilter?: 'all' | 'public' | 'private';\n  metadataOrderKeyFilter?: string;\n  memberStateFilter?: 'all' | 'joined_only' | 'invited_only' | 'invited_by_friend' | 'invited_by_non_friend';\n  hiddenChannelFilter?: 'unhidden_only' | 'hidden_only' | 'hidden_allow_auto_unhide' | 'hidden_prevent_auto_unhide';\n  unreadChannelFilter?: 'all' | 'unread_message';\n  includeFrozen?: boolean;\n  userIdsFilter?: GroupChannelUserIdsFilter;\n}\n\ninterface ChannelListQueries {\n  applicationUserListQuery?: ApplicationUserListQuery;\n  channelListQuery?: GroupChannelListQuery;\n}\n\ntype OverrideInviteUserType = {\n  users: Array<string>;\n  onClose: () => void;\n  channelType: CHANNEL_TYPE;\n};\n\nexport interface ChannelListProviderProps {\n  allowProfileEdit?: boolean;\n  onBeforeCreateChannel?(users: Array<string>): GroupChannelCreateParams;\n  overrideInviteUser?(params: OverrideInviteUserType): void;\n  onThemeChange?(theme: string): void;\n  onProfileEditSuccess?(user: User): void;\n  onChannelSelect?(channel: GroupChannel | null): void;\n  sortChannelList?: (channels: GroupChannel[]) => GroupChannel[];\n  queries?: ChannelListQueries;\n  children?: React.ReactElement;\n  className?: string | string[];\n  renderUserProfile?: (props: RenderUserProfileProps) => React.ReactElement;\n  disableUserProfile?: boolean;\n  disableAutoSelect?: boolean;\n  activeChannelUrl?: string;\n  typingChannels?: Array<GroupChannel>;\n  isTypingIndicatorEnabled?: boolean;\n  isMessageReceiptStatusEnabled?: boolean;\n}\n\nexport interface ChannelListProviderInterface extends ChannelListProviderProps {\n  initialized: boolean;\n  loading: boolean;\n  allChannels: GroupChannel[];\n  currentChannel: GroupChannel;\n  channelListQuery: GroupChannelListQuery;\n  currentUserId: string;\n  channelListDispatcher: CustomUseReducerDispatcher;\n  channelSource: GroupChannelListQuerySb | null;\n}\n\ninterface ChannelListStoreInterface {\n  initialized: boolean;\n  loading: boolean;\n  allChannels: GroupChannel[];\n  currentChannel: GroupChannel;\n  channelListQuery: GroupChannelListQuery;\n  currentUserId: string;\n  disableAutoSelect: boolean;\n}\n\nconst ChannelListContext = React.createContext<ChannelListProviderInterface | null>({\n  disableUserProfile: true,\n  allowProfileEdit: true,\n  onBeforeCreateChannel: null,\n  onThemeChange: null,\n  onProfileEditSuccess: null,\n  onChannelSelect: null,\n  queries: {},\n  className: null,\n  initialized: false,\n  loading: false,\n  allChannels: [],\n  currentChannel: null,\n  channelListQuery: {},\n  currentUserId: null,\n  channelListDispatcher: null,\n  channelSource: null,\n  typingChannels: [],\n});\n\nconst ChannelListProvider: React.FC<ChannelListProviderProps> = (props: ChannelListProviderProps) => {\n  // destruct props\n  const {\n    children,\n    className,\n    disableUserProfile,\n    allowProfileEdit,\n    queries,\n    onProfileEditSuccess,\n    onThemeChange,\n    onBeforeCreateChannel,\n    sortChannelList,\n    overrideInviteUser,\n    activeChannelUrl,\n    isTypingIndicatorEnabled = null,\n    isMessageReceiptStatusEnabled = null,\n  } = props;\n  // disable autoselect, if activeChannelUrl is provided\n  // useActiveChannelUrl should be executed when activeChannelUrl is present\n  const disableAutoSelect = props?.disableAutoSelect || !!activeChannelUrl;\n  const onChannelSelect = props?.onChannelSelect || noop;\n  // fetch store from <SendbirdProvider />\n  const globalStore = useSendbirdStateContext();\n  const { config, stores } = globalStore;\n  const { sdkStore } = stores;\n  const { pubSub, logger, onUserProfileMessage } = config;\n  const {\n    markAsDeliveredScheduler,\n    disableMarkAsDelivered = false,\n    isTypingIndicatorEnabledOnChannelList = false,\n    isMessageReceiptStatusEnabledOnChannelList = false,\n  } = config;\n  const sdk = sdkStore?.sdk as SendbirdGroupChat;\n\n  // derive some variables\n  // enable if it is true atleast once(both are flase by default)\n  const userDefinedDisableUserProfile = disableUserProfile || config?.disableUserProfile;\n  const userDefinedRenderProfile = config?.renderUserProfile;\n  const enableEditProfile = allowProfileEdit || config?.allowProfileEdit;\n\n  const userFilledChannelListQuery = queries?.channelListQuery;\n  const userFilledApplicationUserListQuery = queries?.applicationUserListQuery;\n\n  const sdkIntialized = sdkStore?.initialized;\n\n  const [channelListStore, channelListDispatcher] = useReducer(\n    channelListReducers,\n    channelListInitialState,\n  ) as [ChannelListStoreInterface, CustomUseReducerDispatcher];\n  const { currentChannel } = channelListStore;\n\n  const [channelSource, setChannelSource] = useState<GroupChannelListQuerySb | null>(null);\n  const [typingChannels, setTypingChannels] = useState<Array<GroupChannel>>([]);\n\n  useEffect(() => {\n    const subscriber = pubSubHandler(pubSub, channelListDispatcher);\n    return () => {\n      pubSubHandleRemover(subscriber);\n    };\n  }, [sdkIntialized]);\n\n  useEffect(() => {\n    const sdkChannelHandlerId = uuidv4();\n    if (sdkIntialized) {\n      logger.info('ChannelList: Setup channelHandlers');\n      setupChannelList({\n        sdk,\n        sdkChannelHandlerId,\n        channelListDispatcher,\n        setChannelSource,\n        onChannelSelect,\n        userFilledChannelListQuery,\n        logger,\n        sortChannelList,\n        disableAutoSelect,\n        markAsDeliveredScheduler,\n        disableMarkAsDelivered,\n      });\n    } else {\n      logger.info('ChannelList: Removing channelHandlers');\n      // remove previous channelHandlers\n      if (sdk?.groupChannel?.removeGroupChannelHandler) {\n        sdk.groupChannel.removeGroupChannelHandler(sdkChannelHandlerId);\n      }\n      // remove channelSource\n      setChannelSource(null);\n      // cleanup\n      channelListDispatcher({\n        type: channelListActions.RESET_CHANNEL_LIST,\n        payload: null,\n      });\n    }\n    return () => {\n      logger.info('ChannelList: Removing channelHandlers');\n      if (sdk?.groupChannel?.removeGroupChannelHandler) {\n        sdk?.groupChannel?.removeGroupChannelHandler(sdkChannelHandlerId);\n      }\n    };\n  }, [sdkIntialized, userFilledChannelListQuery, sortChannelList]);\n\n  useEffect(() => {\n    let typingHandlerId = '';\n    if (sdk?.groupChannel?.addGroupChannelHandler) {\n      typingHandlerId = uuidv4();\n      const handler = new GroupChannelHandler({\n        onTypingStatusUpdated: (channel) => {\n          const typingMemberCount = channel?.getTypingUsers()?.length;\n          const channelList = typingChannels.filter(ch => ch.url !== channel.url);\n          if (typingMemberCount > 0) {\n            setTypingChannels([...channelList, channel]);\n          } else {\n            setTypingChannels(channelList);\n          }\n        },\n        onUnreadMemberStatusUpdated(channel) {\n          channelListDispatcher({\n            type: channelListActions.ON_LAST_MESSAGE_UPDATED,\n            payload: channel,\n          });\n        },\n        onUndeliveredMemberStatusUpdated(channel) {\n          channelListDispatcher({\n            type: channelListActions.ON_LAST_MESSAGE_UPDATED,\n            payload: channel,\n          });\n        },\n        onMessageUpdated(channel) {\n          channelListDispatcher({\n            type: channelListActions.ON_LAST_MESSAGE_UPDATED,\n            payload: channel,\n          });\n          sdk.groupChannel.getChannelWithoutCache(channel.url)\n            .then((ch) => {\n              channelListDispatcher({\n                type: channelListActions.ON_LAST_MESSAGE_UPDATED,\n                payload: ch,\n              });\n            });\n        },\n        onMentionReceived(channel) {\n          channelListDispatcher({\n            type: channelListActions.ON_LAST_MESSAGE_UPDATED,\n            payload: channel,\n          });\n          sdk.groupChannel.getChannelWithoutCache(channel.url)\n            .then((ch) => {\n              channelListDispatcher({\n                type: channelListActions.ON_LAST_MESSAGE_UPDATED,\n                payload: ch,\n              });\n            });\n        },\n      });\n      sdk?.groupChannel?.addGroupChannelHandler(typingHandlerId, handler);\n    }\n    return () => {\n      if (sdk?.groupChannel?.removeGroupChannelHandler && typingHandlerId !== '') {\n        sdk.groupChannel.removeGroupChannelHandler(typingHandlerId);\n      }\n    };\n  }, [sdk?.currentUser?.userId]);\n\n  const queries_ = useMemo(() => {\n    return {\n      applicationUserListQuery: userFilledApplicationUserListQuery,\n      channelListQuery: userFilledChannelListQuery,\n    };\n  }, [\n    userFilledApplicationUserListQuery,\n    userFilledChannelListQuery,\n  ]);\n\n  const { allChannels } = channelListStore;\n  const sortedChannels = (sortChannelList && typeof sortChannelList === 'function')\n    ? sortChannelList(allChannels)\n    : allChannels;\n\n  if (sortedChannels.length !== allChannels.length) {\n    const warning = `ChannelList: You have removed/added extra channels on sortChannelList\n      this could cause unexpected problems`;\n    // eslint-disable-next-line no-console\n    console.warn(warning, { before: allChannels, after: sortedChannels });\n    logger.warning(warning, { before: allChannels, after: sortedChannels });\n  }\n\n  // Set current channel (by on_channel_selected event)\n  useEffect(() => {\n    if (!sdk || !sdk.groupChannel || !currentChannel || !currentChannel?.url) {\n      return;\n    }\n    sdk.groupChannel.getChannel(currentChannel.url).then((groupChannel) => {\n      if (groupChannel) {\n        onChannelSelect(groupChannel);\n      } else {\n        onChannelSelect(null);\n      }\n    });\n  }, [currentChannel?.url]);\n\n  // Set active channel (by url)\n  useActiveChannelUrl({\n    activeChannelUrl,\n    channels: sortedChannels,\n    sdk,\n  }, {\n    logger,\n    channelListDispatcher,\n  });\n\n  return (\n    <ChannelListContext.Provider value={{\n      className,\n      disableUserProfile,\n      queries: queries_,\n      onProfileEditSuccess,\n      onThemeChange,\n      onBeforeCreateChannel,\n      overrideInviteUser,\n      onChannelSelect,\n      sortChannelList,\n      allowProfileEdit: enableEditProfile,\n      channelListDispatcher,\n      channelSource,\n      ...channelListStore,\n      allChannels: sortedChannels,\n      typingChannels,\n      isTypingIndicatorEnabled: (isTypingIndicatorEnabled !== null) ? isTypingIndicatorEnabled : isTypingIndicatorEnabledOnChannelList,\n      isMessageReceiptStatusEnabled: (isMessageReceiptStatusEnabled !== null) ? isMessageReceiptStatusEnabled : isMessageReceiptStatusEnabledOnChannelList,\n    }}>\n      <UserProfileProvider\n        disableUserProfile={userDefinedDisableUserProfile}\n        renderUserProfile={userDefinedRenderProfile}\n        onUserProfileMessage={onUserProfileMessage}\n      >\n        <div className={`sendbird-channel-list ${className}`}>\n          {children}\n        </div>\n      </UserProfileProvider>\n    </ChannelListContext.Provider>\n  );\n};\n\nfunction useChannelListContext(): ChannelListProviderInterface {\n  const context: ChannelListProviderInterface = useContext(ChannelListContext);\n  return context;\n}\n\nexport {\n  ChannelListProvider,\n  useChannelListContext,\n};\n"]},"metadata":{},"sourceType":"module"}