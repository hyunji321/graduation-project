{"ast":null,"code":"import _slicedToArray from \"C:/Users/\\uC774\\uACBD\\uBBFC/IdeaProjects/sendbird-uikit-whatsapp-sample/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport React__default, { useState, useMemo, useCallback } from 'react';\nimport { PlaybackTime } from './ui/PlaybackTime.js';\nimport { ProgressBar } from './ui/ProgressBar.js';\nimport TextButton from './ui/TextButton.js';\nimport Icon, { IconTypes, IconColors } from './ui/Icon.js';\nimport { b as LabelColors, L as Label, a as LabelTypography } from './index-63949de5.js';\nimport { u as useLocalization } from './LocalizationContext-076d6d2e.js';\nimport { i as VOICE_RECORDER_CLICK_BUFFER_TIME, a as VOICE_RECORDER_DEFAULT_MIN } from './consts-95d8566e.js';\n\n/* eslint-disable no-redeclare */\nvar VoiceMessageInputStatus = {\n  READY_TO_RECORD: 'READY_TO_RECORD',\n  RECORDING: 'RECORDING',\n  READY_TO_PLAY: 'READY_TO_PLAY',\n  PLAYING: 'PLAYING'\n};\nvar ControlerIcon = function ControlerIcon(_ref) {\n  var inputState = _ref.inputState;\n  switch (inputState) {\n    case VoiceMessageInputStatus.READY_TO_RECORD:\n      {\n        return /*#__PURE__*/React__default.createElement(\"div\", {\n          className: \"sendbird-controler-icon record-icon\"\n        });\n      }\n    case VoiceMessageInputStatus.RECORDING:\n      {\n        return /*#__PURE__*/React__default.createElement(\"div\", {\n          className: \"sendbird-controler-icon stop-icon\"\n        });\n      }\n    case VoiceMessageInputStatus.READY_TO_PLAY:\n      {\n        return /*#__PURE__*/React__default.createElement(Icon, {\n          className: \"sendbird-controler-icon play-icon\",\n          width: \"20px\",\n          height: \"20px\",\n          type: IconTypes.PLAY,\n          fillColor: IconColors.ON_BACKGROUND_1\n        });\n      }\n    case VoiceMessageInputStatus.PLAYING:\n      {\n        return /*#__PURE__*/React__default.createElement(\"div\", {\n          className: \"sendbird-controler-icon pause-icon\"\n        }, /*#__PURE__*/React__default.createElement(\"div\", {\n          className: \"sendbird-controler-icon pause-icon-inner\"\n        }), /*#__PURE__*/React__default.createElement(\"div\", {\n          className: \"sendbird-controler-icon pause-icon-inner\"\n        }));\n      }\n    default:\n      return null;\n  }\n};\nvar VoiceMessageInput = function VoiceMessageInput(_ref) {\n  var _ref$minRecordTime = _ref.minRecordTime,\n    minRecordTime = _ref$minRecordTime === void 0 ? VOICE_RECORDER_DEFAULT_MIN : _ref$minRecordTime,\n    maximumValue = _ref.maximumValue,\n    _ref$currentValue = _ref.currentValue,\n    currentValue = _ref$currentValue === void 0 ? 0 : _ref$currentValue,\n    currentType = _ref.currentType,\n    onCancelClick = _ref.onCancelClick,\n    onControlClick = _ref.onControlClick,\n    onSubmitClick = _ref.onSubmitClick,\n    renderCancelButton = _ref.renderCancelButton,\n    renderControlButton = _ref.renderControlButton,\n    renderSubmitButton = _ref.renderSubmitButton;\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    lastClickTime = _useState2[0],\n    setLastClickTime = _useState2[1];\n  var isReadyToRecord = useMemo(function () {\n    return currentType === VoiceMessageInputStatus.READY_TO_RECORD;\n  }, [currentType]);\n  var isRecording = useMemo(function () {\n    return currentType === VoiceMessageInputStatus.RECORDING;\n  }, [currentType]);\n  var isSendButtonDisabled = useMemo(function () {\n    if (currentType === VoiceMessageInputStatus.READY_TO_RECORD || currentType === VoiceMessageInputStatus.RECORDING) {\n      return minRecordTime > currentValue;\n    }\n    return false;\n  }, [currentType, minRecordTime, currentValue]);\n  var isPlayMode = useMemo(function () {\n    return currentType === VoiceMessageInputStatus.READY_TO_PLAY || currentType === VoiceMessageInputStatus.PLAYING;\n  }, [currentType]);\n  var _useLocalization = useLocalization(),\n    stringSet = _useLocalization.stringSet;\n  var handleOnCancelClick = function handleOnCancelClick() {\n    var currentTime = Date.now();\n    if (currentTime - lastClickTime > VOICE_RECORDER_CLICK_BUFFER_TIME) {\n      onCancelClick();\n      setLastClickTime(currentTime);\n    }\n  };\n  var handleOnControlClick = useCallback(function () {\n    var currentTime = Date.now();\n    if (currentTime - lastClickTime > VOICE_RECORDER_CLICK_BUFFER_TIME) {\n      onControlClick(currentType);\n      setLastClickTime(currentTime);\n    }\n  }, [currentType]);\n  var handleOnSubmitClick = function handleOnSubmitClick() {\n    var currentTime = Date.now();\n    if (currentTime - lastClickTime > VOICE_RECORDER_CLICK_BUFFER_TIME) {\n      if (!isSendButtonDisabled) {\n        onSubmitClick();\n      }\n      setLastClickTime(currentTime);\n    }\n  };\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-voice-message-input\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-voice-message-input__indicator\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-voice-message-input__indicator__progress-bar\"\n  }, /*#__PURE__*/React__default.createElement(ProgressBar, {\n    className: \"sendbird-voice-message-input__indicator__progress-bar__bar\",\n    disabled: isReadyToRecord,\n    maxSize: maximumValue,\n    currentSize: currentValue\n  })), isRecording ? /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-voice-message-input__indicator__on-rec\"\n  }) : null, /*#__PURE__*/React__default.createElement(PlaybackTime, {\n    className: \"sendbird-voice-message-input__indicator__playback-time\",\n    time: isPlayMode ? maximumValue - currentValue : currentValue,\n    labelColor: isReadyToRecord ? LabelColors.ONBACKGROUND_4 : LabelColors.ONCONTENT_1\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-voice-message-input__controler\"\n  }, (renderCancelButton === null || renderCancelButton === void 0 ? void 0 : renderCancelButton()) || /*#__PURE__*/React__default.createElement(TextButton, {\n    className: \"sendbird-voice-message-input__controler__cancel\",\n    onClick: handleOnCancelClick,\n    disableUnderline: true\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.BUTTON_1,\n    color: LabelColors.PRIMARY\n  }, stringSet.BUTTON__CANCEL)), (renderControlButton === null || renderControlButton === void 0 ? void 0 : renderControlButton(currentType)) || /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-voice-message-input__controler__main\",\n    onClick: handleOnControlClick\n  }, /*#__PURE__*/React__default.createElement(ControlerIcon, {\n    inputState: currentType\n  })), (renderSubmitButton === null || renderSubmitButton === void 0 ? void 0 : renderSubmitButton()) || /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-voice-message-input__controler__submit \".concat(isSendButtonDisabled ? 'voice-message--disabled' : ''),\n    onClick: handleOnSubmitClick\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    width: \"19px\",\n    height: \"19px\",\n    type: IconTypes.SEND,\n    fillColor: isSendButtonDisabled ? IconColors.ON_BACKGROUND_4 : IconColors.CONTENT\n  }))));\n};\nexport { VoiceMessageInputStatus as V, VoiceMessageInput as a };","map":{"version":3,"mappings":"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","names":["VoiceMessageInputStatus","READY_TO_RECORD","RECORDING","READY_TO_PLAY","PLAYING","ControlerIcon","_ref","inputState","React","className","Icon","width","height","type","IconTypes","PLAY","fillColor","IconColors","ON_BACKGROUND_1","VoiceMessageInput","minRecordTime","VOICE_RECORDER_DEFAULT_MIN","maximumValue","currentValue","currentType","onCancelClick","onControlClick","onSubmitClick","renderCancelButton","renderControlButton","renderSubmitButton","useState","lastClickTime","setLastClickTime","isReadyToRecord","useMemo","isRecording","isSendButtonDisabled","isPlayMode","useLocalization","stringSet","handleOnCancelClick","currentTime","Date","now","VOICE_RECORDER_CLICK_BUFFER_TIME","handleOnControlClick","useCallback","handleOnSubmitClick","ProgressBar","disabled","maxSize","currentSize","PlaybackTime","time","labelColor","LabelColors","ONBACKGROUND_4","ONCONTENT_1","TextButton","onClick","disableUnderline","Label","LabelTypography","BUTTON_1","color","PRIMARY","BUTTON__CANCEL","SEND","ON_BACKGROUND_4","CONTENT"],"sources":["C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\ui\\VoiceMessageInput\\types.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\ui\\VoiceMessageInput\\controlerIcons.tsx","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\ui\\VoiceMessageInput\\index.tsx"],"sourcesContent":["/* eslint-disable no-redeclare */\nexport const VoiceMessageInputStatus = {\n  READY_TO_RECORD: 'READY_TO_RECORD',\n  RECORDING: 'RECORDING',\n  READY_TO_PLAY: 'READY_TO_PLAY',\n  PLAYING: 'PLAYING',\n} as const;\nexport type VoiceMessageInputStatus = typeof VoiceMessageInputStatus[keyof typeof VoiceMessageInputStatus];\n","import React from 'react';\n\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport { VoiceMessageInputStatus } from './types';\n\nexport interface ControlerIconProps {\n  inputState?: VoiceMessageInputStatus;\n}\n\nexport const ControlerIcon = ({\n  inputState,\n}: ControlerIconProps): React.ReactElement => {\n  switch (inputState) {\n    case VoiceMessageInputStatus.READY_TO_RECORD: {\n      return (\n        <div className=\"sendbird-controler-icon record-icon\" />\n      );\n    }\n    case VoiceMessageInputStatus.RECORDING: {\n      return (\n        <div className=\"sendbird-controler-icon stop-icon\" />\n      );\n    }\n    case VoiceMessageInputStatus.READY_TO_PLAY: {\n      return (\n        <Icon\n          className=\"sendbird-controler-icon play-icon\"\n          width=\"20px\"\n          height=\"20px\"\n          type={IconTypes.PLAY}\n          fillColor={IconColors.ON_BACKGROUND_1}\n        />\n      );\n    }\n    case VoiceMessageInputStatus.PLAYING: {\n      return (\n        <div className=\"sendbird-controler-icon pause-icon\">\n          <div className=\"sendbird-controler-icon pause-icon-inner\"/>\n          <div className=\"sendbird-controler-icon pause-icon-inner\"/>\n        </div>\n      );\n    }\n    default:\n      return null;\n  }\n};\n\nexport default ControlerIcon;\n","import React, { useCallback, useMemo, useState } from 'react';\nimport './index.scss';\n\nimport PlaybackTime from '../PlaybackTime';\nimport ProgressBar from '../ProgressBar';\nimport TextButton from '../TextButton';\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport { useLocalization } from '../../lib/LocalizationContext';\nimport ControlerIcon from './controlerIcons';\nimport { VOICE_RECORDER_CLICK_BUFFER_TIME, VOICE_RECORDER_DEFAULT_MIN } from '../../utils/consts';\nimport { VoiceMessageInputStatus } from './types';\n\nexport interface VoiceMessageInputProps {\n  minRecordTime?: number;\n  maximumValue: number;\n  currentValue?: number;\n  currentType: VoiceMessageInputStatus;\n  onCancelClick?: () => void;\n  onControlClick?: (type: VoiceMessageInputStatus) => void;\n  onSubmitClick?: () => void;\n  renderCancelButton?: () => React.ReactElement;\n  renderControlButton?: (type: VoiceMessageInputStatus) => React.ReactElement;\n  renderSubmitButton?: () => React.ReactElement;\n}\n\nexport const VoiceMessageInput = ({\n  minRecordTime = VOICE_RECORDER_DEFAULT_MIN,\n  maximumValue,\n  currentValue = 0,\n  currentType,\n  onCancelClick,\n  onControlClick,\n  onSubmitClick,\n  renderCancelButton,\n  renderControlButton,\n  renderSubmitButton,\n}: VoiceMessageInputProps): React.ReactElement => {\n  const [lastClickTime, setLastClickTime] = useState<number>(0);\n  const isReadyToRecord = useMemo(() => currentType === VoiceMessageInputStatus.READY_TO_RECORD, [currentType]);\n  const isRecording = useMemo(() => currentType === VoiceMessageInputStatus.RECORDING, [currentType]);\n  const isSendButtonDisabled = useMemo(() => {\n    if (currentType === VoiceMessageInputStatus.READY_TO_RECORD\n      || currentType === VoiceMessageInputStatus.RECORDING\n    ) {\n      return minRecordTime > currentValue;\n    }\n    return false;\n  }, [currentType, minRecordTime, currentValue]);\n  const isPlayMode = useMemo(() => {\n    return (\n      currentType === VoiceMessageInputStatus.READY_TO_PLAY\n      || currentType === VoiceMessageInputStatus.PLAYING\n    );\n  }, [currentType]);\n  const { stringSet } = useLocalization();\n\n  const handleOnCancelClick = () => {\n    const currentTime = Date.now();\n    if (currentTime - lastClickTime > VOICE_RECORDER_CLICK_BUFFER_TIME) {\n      onCancelClick();\n      setLastClickTime(currentTime);\n    }\n  };\n  const handleOnControlClick = useCallback(() => {\n    const currentTime = Date.now();\n    if (currentTime - lastClickTime > VOICE_RECORDER_CLICK_BUFFER_TIME) {\n      onControlClick(currentType);\n      setLastClickTime(currentTime);\n    }\n  }, [currentType]);\n  const handleOnSubmitClick = () => {\n    const currentTime = Date.now();\n    if (currentTime - lastClickTime > VOICE_RECORDER_CLICK_BUFFER_TIME) {\n      if (!isSendButtonDisabled) {\n        onSubmitClick();\n      }\n      setLastClickTime(currentTime);\n    }\n  };\n\n  return (\n    <div className=\"sendbird-voice-message-input\">\n      <div className=\"sendbird-voice-message-input__indicator\">\n        <div className=\"sendbird-voice-message-input__indicator__progress-bar\">\n          <ProgressBar\n            className=\"sendbird-voice-message-input__indicator__progress-bar__bar\"\n            disabled={isReadyToRecord}\n            maxSize={maximumValue}\n            currentSize={currentValue}\n          />\n        </div>\n        {(isRecording) ? (<div className=\"sendbird-voice-message-input__indicator__on-rec\" />) : null}\n        <PlaybackTime\n          className=\"sendbird-voice-message-input__indicator__playback-time\"\n          time={isPlayMode ? maximumValue - currentValue : currentValue}\n          labelColor={isReadyToRecord ? LabelColors.ONBACKGROUND_4 : LabelColors.ONCONTENT_1}\n        />\n      </div>\n      <div className=\"sendbird-voice-message-input__controler\">\n        {\n          renderCancelButton?.() || (\n            <TextButton\n              className=\"sendbird-voice-message-input__controler__cancel\"\n              onClick={handleOnCancelClick}\n              disableUnderline\n            >\n              <Label\n                type={LabelTypography.BUTTON_1}\n                color={LabelColors.PRIMARY}\n              >\n                {stringSet.BUTTON__CANCEL}\n              </Label>\n            </TextButton>\n          )\n        }\n        {\n          renderControlButton?.(currentType) || (\n            <div\n              className=\"sendbird-voice-message-input__controler__main\"\n              onClick={handleOnControlClick}\n            >\n              <ControlerIcon inputState={currentType} />\n            </div>\n          )\n        }\n        {\n          renderSubmitButton?.() || (\n            <div\n              className={`sendbird-voice-message-input__controler__submit ${isSendButtonDisabled ? 'voice-message--disabled' : ''}`}\n              onClick={handleOnSubmitClick}\n            >\n              <Icon\n                width=\"19px\"\n                height=\"19px\"\n                type={IconTypes.SEND}\n                fillColor={isSendButtonDisabled ? IconColors.ON_BACKGROUND_4 : IconColors.CONTENT}\n              />\n            </div>\n          )\n        }\n      </div>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}