{"ast":null,"code":"import _slicedToArray from \"C:/Users/\\uC774\\uACBD\\uBBFC/IdeaProjects/sendbird-uikit-whatsapp-sample/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport React__default, { useState } from 'react';\nimport ChannelListHeader from './ChannelListHeader.js';\nimport { AddChannel } from './AddChannel.js';\nimport ChannelPreview from './ChannelPreview.js';\nimport ChannelPreviewAction from './ChannelPreviewAction.js';\nimport { u as useChannelListContext, F as FETCH_CHANNELS_START, a as FETCH_CHANNELS_SUCCESS, b as FETCH_CHANNELS_FAILURE, L as LEAVE_CHANNEL_SUCCESS, S as SET_CURRENT_CHANNEL } from '../../ChannelListProvider-21425002.js';\nimport useSendbirdStateContext from '../../useSendbirdStateContext.js';\nimport EditProfile from '../../EditUserProfile.js';\nimport { P as PlaceHolder, a as PlaceHolderTypes } from '../../index-cef1cfff.js';\nimport '../../LocalizationContext-076d6d2e.js';\nimport '../../stringSet-13bbd4a2.js';\nimport '../../index-99aabd9e.js';\nimport '../../index-63949de5.js';\nimport 'prop-types';\nimport '../../ui/Avatar.js';\nimport '../../ui/ImageRenderer.js';\nimport '../../ui/Icon.js';\nimport '../../uuid-1adedf62.js';\nimport '../../ui/IconButton.js';\nimport '../../_rollupPluginBabelHelpers-6bb0305c.js';\nimport '../../CreateChannel.js';\nimport '../../CreateChannel/components/CreateChannelUI.js';\nimport '../../CreateChannelProvider-11c8b9a3.js';\nimport '../../sendbirdSelectors.js';\nimport '../../topics-b2b77fb9.js';\nimport '../../utils-4bbbca2c.js';\nimport '../../CreateChannel/components/InviteUsers.js';\nimport '../../ui/Modal.js';\nimport 'react-dom';\nimport '../../index-38e61c64.js';\nimport '../../ui/Button.js';\nimport '../../MediaQueryContext-11f0e43f.js';\nimport '../../ui/UserListItem.js';\nimport '../../UserProfileContext-9cfbab4d.js';\nimport '../../ui/MutedAvatarOverlay.js';\nimport '../../ui/Checkbox.js';\nimport '../../ui/UserProfile.js';\nimport '../../ui/ContextMenu.js';\nimport '../../ui/SortByRow.js';\nimport '../../index-7eb65acf.js';\nimport '../../utils/message/getOutgoingMessageState.js';\nimport '../../CreateChannel/components/SelectChannelType.js';\nimport '../../ui/ChannelAvatar.js';\nimport '../../utils-d86ad6ab.js';\nimport '../../ui/Badge.js';\nimport '../../index-5c1b672d.js';\nimport '../../index-7cdd58b8.js';\nimport '../../ui/Loader.js';\nimport '../../index-306bc4ab.js';\nimport '../../index-fe932783.js';\nimport '../../ui/MentionUserLabel.js';\nimport '../../consts-ff014656.js';\nimport '../../ui/TextButton.js';\nimport '../../color-879cc347.js';\nimport '../../Channel/components/TypingIndicator.js';\nimport '@sendbird/chat/groupChannel';\nimport '../../ChannelProvider-910bbc1f.js';\nimport '../../compareIds-defe2bb3.js';\nimport '../../const-b3f02313.js';\nimport '@sendbird/chat/message';\nimport '../../consts-95d8566e.js';\nimport '../../useLongPress-1303953d.js';\nimport '../../withSendbird.js';\nimport '../../index-fb8a5bc3.js';\nimport '../../ui/Input.js';\nimport '../../actionTypes-ce6caec1.js';\nvar isAboutSame = function isAboutSame(a, b, px) {\n  return Math.abs(a - b) <= px;\n};\nvar DELIVERY_RECIPT = 'delivery_receipt';\nvar ChannelListUI = function ChannelListUI(props) {\n  var _state$stores;\n  var renderHeader = props.renderHeader,\n    renderChannelPreview = props.renderChannelPreview,\n    renderPlaceHolderError = props.renderPlaceHolderError,\n    renderPlaceHolderLoading = props.renderPlaceHolderLoading,\n    renderPlaceHolderEmptyList = props.renderPlaceHolderEmptyList;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    showProfileEdit = _useState2[0],\n    setShowProfileEdit = _useState2[1];\n  var _useChannelListContex = useChannelListContext(),\n    onThemeChange = _useChannelListContex.onThemeChange,\n    allowProfileEdit = _useChannelListContex.allowProfileEdit,\n    allChannels = _useChannelListContex.allChannels,\n    loading = _useChannelListContex.loading,\n    currentChannel = _useChannelListContex.currentChannel,\n    channelListDispatcher = _useChannelListContex.channelListDispatcher,\n    channelSource = _useChannelListContex.channelSource,\n    typingChannels = _useChannelListContex.typingChannels,\n    initialized = _useChannelListContex.initialized;\n  var state = useSendbirdStateContext();\n  var sdkStore = state === null || state === void 0 ? void 0 : (_state$stores = state.stores) === null || _state$stores === void 0 ? void 0 : _state$stores.sdkStore;\n  var config = state === null || state === void 0 ? void 0 : state.config;\n  var logger = config.logger,\n    _config$isOnline = config.isOnline,\n    isOnline = _config$isOnline === void 0 ? false : _config$isOnline,\n    markAsDeliveredScheduler = config.markAsDeliveredScheduler,\n    disableMarkAsDelivered = config.disableMarkAsDelivered;\n  var sdk = sdkStore === null || sdkStore === void 0 ? void 0 : sdkStore.sdk;\n  var sdkError = sdkStore === null || sdkStore === void 0 ? void 0 : sdkStore.error;\n  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-list__header\"\n  }, (renderHeader === null || renderHeader === void 0 ? void 0 : renderHeader()) || /*#__PURE__*/React__default.createElement(ChannelListHeader, {\n    onEdit: function onEdit() {\n      if (allowProfileEdit) {\n        setShowProfileEdit(true);\n      }\n    },\n    allowProfileEdit: allowProfileEdit,\n    renderIconButton: function renderIconButton() {\n      return /*#__PURE__*/React__default.createElement(AddChannel, null);\n    }\n  })), showProfileEdit && /*#__PURE__*/React__default.createElement(EditProfile, {\n    onThemeChange: onThemeChange,\n    onCancel: function onCancel() {\n      setShowProfileEdit(false);\n    },\n    onEditProfile: function onEditProfile() {\n      setShowProfileEdit(false);\n    }\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-list__body\",\n    onScroll: function onScroll(e) {\n      var target = e === null || e === void 0 ? void 0 : e.target;\n      var fetchMore = isAboutSame(target.clientHeight + target.scrollTop, target.scrollHeight, 10);\n      if (fetchMore && channelSource !== null && channelSource !== void 0 && channelSource.hasNext) {\n        logger.info('ChannelList: Fetching more channels');\n        channelListDispatcher({\n          type: FETCH_CHANNELS_START,\n          payload: null\n        });\n        channelSource.next().then(function (channelList) {\n          var _sdk$appInfo, _sdk$appInfo$premiumF;\n          logger.info('ChannelList: Fetching channels successful', channelList);\n          channelListDispatcher({\n            type: FETCH_CHANNELS_SUCCESS,\n            payload: channelList\n          });\n          var canSetMarkAsDelivered = sdk === null || sdk === void 0 ? void 0 : (_sdk$appInfo = sdk.appInfo) === null || _sdk$appInfo === void 0 ? void 0 : (_sdk$appInfo$premiumF = _sdk$appInfo.premiumFeatureList) === null || _sdk$appInfo$premiumF === void 0 ? void 0 : _sdk$appInfo$premiumF.find(function (feature) {\n            return feature === DELIVERY_RECIPT;\n          });\n          if (canSetMarkAsDelivered && !disableMarkAsDelivered) {\n            logger.info('ChannelList: Marking all channels as read');\n            // eslint-disable-next-line no-unused-expressions\n            channelList === null || channelList === void 0 ? void 0 : channelList.forEach(function (channel) {\n              if ((channel === null || channel === void 0 ? void 0 : channel.unreadMessageCount) > 0) {\n                markAsDeliveredScheduler.push(channel);\n              }\n            });\n          }\n        }).catch(function (err) {\n          logger.info('ChannelList: Fetching channels failed', err);\n          channelListDispatcher({\n            type: FETCH_CHANNELS_FAILURE,\n            payload: err\n          });\n        });\n      }\n    }\n  }, sdkError && !loading && (renderPlaceHolderError && typeof renderPlaceHolderError === 'function' ? renderPlaceHolderError === null || renderPlaceHolderError === void 0 ? void 0 : renderPlaceHolderError() : /*#__PURE__*/React__default.createElement(PlaceHolder, {\n    type: PlaceHolderTypes.WRONG\n  })), /*#__PURE__*/React__default.createElement(\"div\", null, allChannels && allChannels.map(function (channel, idx) {\n    // todo: Refactor and move this inside channel - preview\n    var _onLeaveChannel = function onLeaveChannel(c, cb) {\n      logger.info('ChannelList: Leaving channel', c);\n      c.leave().then(function (res) {\n        logger.info('ChannelList: Leaving channel success', res);\n        if (cb && typeof cb === 'function') {\n          cb(res, null);\n        }\n        channelListDispatcher({\n          type: LEAVE_CHANNEL_SUCCESS,\n          payload: channel === null || channel === void 0 ? void 0 : channel.url\n        });\n      }).catch(function (err) {\n        logger.error('ChannelList: Leaving channel failed', err);\n        if (cb && typeof cb === 'function') {\n          cb(null, err);\n        }\n      });\n    };\n    var onClick = function onClick() {\n      if (!isOnline) {\n        return;\n      }\n      logger.info('ChannelList: Clicked on channel:', channel);\n      channelListDispatcher({\n        type: SET_CURRENT_CHANNEL,\n        payload: channel\n      });\n    };\n    return renderChannelPreview ? /*#__PURE__*/\n    // eslint-disable-next-line\n    React__default.createElement(\"div\", {\n      key: channel === null || channel === void 0 ? void 0 : channel.url,\n      onClick: onClick\n    }, renderChannelPreview({\n      channel: channel,\n      onLeaveChannel: _onLeaveChannel\n    })) : /*#__PURE__*/React__default.createElement(ChannelPreview, {\n      key: channel === null || channel === void 0 ? void 0 : channel.url,\n      tabIndex: idx,\n      onClick: onClick,\n      channel: channel,\n      onLeaveChannel: function onLeaveChannel() {\n        return _onLeaveChannel(channel, null);\n      },\n      isActive: (channel === null || channel === void 0 ? void 0 : channel.url) === (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url),\n      isTyping: typingChannels === null || typingChannels === void 0 ? void 0 : typingChannels.some(function (_ref) {\n        var url = _ref.url;\n        return url === (channel === null || channel === void 0 ? void 0 : channel.url);\n      }),\n      renderChannelAction: function renderChannelAction() {\n        return /*#__PURE__*/React__default.createElement(ChannelPreviewAction, {\n          channel: channel,\n          disabled: !isOnline,\n          onLeaveChannel: function onLeaveChannel() {\n            return _onLeaveChannel(channel, null);\n          }\n        });\n      }\n    });\n  })), !initialized && loading && (renderPlaceHolderLoading && typeof renderPlaceHolderLoading === 'function' ? renderPlaceHolderLoading === null || renderPlaceHolderLoading === void 0 ? void 0 : renderPlaceHolderLoading() : /*#__PURE__*/React__default.createElement(PlaceHolder, {\n    type: PlaceHolderTypes.LOADING\n  })), initialized && (allChannels === null || allChannels === void 0 ? void 0 : allChannels.length) === 0 && (renderPlaceHolderEmptyList && typeof renderPlaceHolderEmptyList === 'function' ? renderPlaceHolderEmptyList === null || renderPlaceHolderEmptyList === void 0 ? void 0 : renderPlaceHolderEmptyList() : /*#__PURE__*/React__default.createElement(PlaceHolder, {\n    type: PlaceHolderTypes.NO_CHANNELS\n  }))));\n};\nexport { ChannelListUI as default };","map":{"version":3,"mappings":"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","names":["isAboutSame","a","b","px","Math","abs","DELIVERY_RECIPT","ChannelListUI","props","renderHeader","renderChannelPreview","renderPlaceHolderError","renderPlaceHolderLoading","renderPlaceHolderEmptyList","useState","showProfileEdit","setShowProfileEdit","useChannelListContext","onThemeChange","allowProfileEdit","allChannels","loading","currentChannel","channelListDispatcher","channelSource","typingChannels","initialized","state","useSendbirdStateContext","sdkStore","stores","_state$stores","config","logger","isOnline","markAsDeliveredScheduler","disableMarkAsDelivered","sdk","sdkError","error","React","className","ChannelListHeader","onEdit","renderIconButton","AddChannel","EditUserProfile","onCancel","onEditProfile","onScroll","e","target","fetchMore","clientHeight","scrollTop","scrollHeight","hasNext","info","type","channelListActions","payload","next","then","channelList","canSetMarkAsDelivered","appInfo","_sdk$appInfo","premiumFeatureList","_sdk$appInfo$premiumF","find","feature","forEach","channel","unreadMessageCount","push","catch","err","PlaceHolder","PlaceHolderTypes","WRONG","map","idx","onLeaveChannel","c","cb","leave","res","url","onClick","key","ChannelPreview","tabIndex","isActive","isTyping","some","_ref","renderChannelAction","ChannelPreviewAction","disabled","LOADING","length","NO_CHANNELS"],"sources":["C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\ChannelList\\components\\utils.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\ChannelList\\components\\ChannelListUI\\index.tsx"],"sourcesContent":["export const createDefaultUserListQuery = ({ sdk, userFilledApplicationUserListQuery = {} }) => {\n  if (sdk?.createApplicationUserListQuery) {\n    const params = sdk?.createApplicationUserListQuery();\n    if (userFilledApplicationUserListQuery) {\n      Object.keys(userFilledApplicationUserListQuery).forEach((key) => {\n        params[key] = userFilledApplicationUserListQuery[key];\n      });\n    }\n    return params;\n  }\n  return null;\n};\n\nconst getApplicationAttributes = (sdk = {}) => {\n  const { appInfo = {} } = sdk;\n  const { applicationAttributes = [] } = appInfo;\n  return applicationAttributes;\n};\n\nexport const isBroadcastChannelEnabled = (sdk = {}) => {\n  const ALLOW_BROADCAST_CHANNEL = 'allow_broadcast_channel';\n  const applicationAttributes = getApplicationAttributes(sdk);\n\n  if (Array.isArray(applicationAttributes)) {\n    return applicationAttributes.includes(ALLOW_BROADCAST_CHANNEL);\n  }\n\n  return false;\n};\nexport const isSuperGroupChannelEnabled = (sdk = {}) => {\n  const ALLOW_SUPER_GROUP_CHANNEL = 'allow_super_group_channel';\n  const applicationAttributes = getApplicationAttributes(sdk);\n\n  if (Array.isArray(applicationAttributes)) {\n    return applicationAttributes.includes(ALLOW_SUPER_GROUP_CHANNEL);\n  }\n\n  return false;\n};\n\nexport const isAboutSame = (a, b, px) => (Math.abs(a - b) <= px);\n\nexport const setChannelType = (params, type) => {\n  if (type === 'broadcast') {\n    // eslint-disable-next-line no-param-reassign\n    params.isBroadcast = true;\n  }\n  if (type === 'supergroup') {\n    // eslint-disable-next-line no-param-reassign\n    params.isSuper = true;\n  }\n  return params;\n};\n\nexport const createChannel = (\n  sdk,\n  selectedUsers,\n  onBeforeCreateChannel,\n  userId,\n  type = 'group',\n) => new Promise((resolve, reject) => {\n  // have custom params\n  if (onBeforeCreateChannel) {\n    const params = onBeforeCreateChannel(selectedUsers);\n    setChannelType(params, type);\n    sdk.groupChannel.createChannel(params).then((groupChannel) => {\n      resolve(groupChannel);\n    }).catch((err) => { reject(err); });\n    return;\n  }\n\n  const params = new sdk.GroupChannelParams();\n  params.addUserIds(selectedUsers);\n  params.isDistinct = false;\n\n  if (userId) {\n    params.operatorUserIds = [userId];\n  }\n  setChannelType(params, type);\n  // do not have custom params\n  sdk.groupChannel.createChannel(params).then((groupChannel) => {\n    resolve(groupChannel);\n  }).catch((err) => { resolve(err); });\n});\n\nexport default createChannel;\n","import './channel-list-ui.scss';\n\nimport React, { useState } from 'react';\nimport type { GroupChannel, Member, SendbirdGroupChat } from '@sendbird/chat/groupChannel';\nimport type { User } from '@sendbird/chat';\n\nimport ChannelListHeader from '../ChannelListHeader';\nimport AddChannel from '../AddChannel';\nimport ChannelPreview from '../ChannelPreview';\nimport ChannelPreviewAction from '../ChannelPreviewAction';\nimport { useChannelListContext } from '../../context/ChannelListProvider';\nimport * as channelListActions from '../../dux/actionTypes';\n\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\nimport EditUserProfile from '../../../EditUserProfile';\nimport PlaceHolder, { PlaceHolderTypes } from '../../../../ui/PlaceHolder';\nimport { isAboutSame } from '../utils';\n\nconst DELIVERY_RECIPT = 'delivery_receipt';\n\ninterface RenderChannelPreviewProps {\n  channel: GroupChannel;\n  onLeaveChannel(\n    channel: GroupChannel,\n    onLeaveChannelCb?: (c: GroupChannel) => void,\n  );\n}\n\ninterface RenderUserProfileProps {\n  user: Member | User;\n  currentUserId: string;\n  close(): void;\n}\n\nexport interface ChannelListUIProps {\n  renderChannelPreview?: (props: RenderChannelPreviewProps) => React.ReactElement;\n  renderUserProfile?: (props: RenderUserProfileProps) => React.ReactElement;\n  renderHeader?: (props: void) => React.ReactElement;\n  renderPlaceHolderError?: (props: void) => React.ReactElement;\n  renderPlaceHolderLoading?: (props: void) => React.ReactElement;\n  renderPlaceHolderEmptyList?: (props: void) => React.ReactElement;\n}\n\nconst ChannelListUI: React.FC<ChannelListUIProps> = (props: ChannelListUIProps) => {\n  const {\n    renderHeader,\n    renderChannelPreview,\n    renderPlaceHolderError,\n    renderPlaceHolderLoading,\n    renderPlaceHolderEmptyList,\n  } = props;\n\n  const [showProfileEdit, setShowProfileEdit] = useState(false);\n\n  const {\n    onThemeChange,\n    allowProfileEdit,\n    allChannels,\n    loading,\n    currentChannel,\n    channelListDispatcher,\n    channelSource,\n    typingChannels,\n    initialized,\n  } = useChannelListContext();\n\n  const state = useSendbirdStateContext();\n\n  const sdkStore = state?.stores?.sdkStore;\n  const config = state?.config;\n  const {\n    logger,\n    isOnline = false,\n    markAsDeliveredScheduler,\n    disableMarkAsDelivered,\n  } = config;\n\n  const sdk = sdkStore?.sdk as SendbirdGroupChat;\n  const sdkError = sdkStore?.error;\n\n  return (\n    <>\n      <div className=\"sendbird-channel-list__header\">\n        {\n          renderHeader?.() || (\n            <ChannelListHeader\n              onEdit={() => {\n                if (allowProfileEdit) {\n                  setShowProfileEdit(true);\n                }\n              }}\n              allowProfileEdit={allowProfileEdit}\n              renderIconButton={() => (\n                <AddChannel />\n              )}\n            />\n          )\n        }\n      </div>\n      {\n        showProfileEdit && (\n          <EditUserProfile\n            onThemeChange={onThemeChange}\n            onCancel={() => { setShowProfileEdit(false); }}\n            onEditProfile={() => {\n              setShowProfileEdit(false);\n            }}\n          />\n        )\n      }\n      <div\n        className=\"sendbird-channel-list__body\"\n        onScroll={(e) => {\n          const target = e?.target as HTMLDivElement;\n          const fetchMore = isAboutSame(target.clientHeight + target.scrollTop, target.scrollHeight, 10);\n          if (fetchMore && channelSource?.hasNext) {\n            logger.info('ChannelList: Fetching more channels');\n            channelListDispatcher({\n              type: channelListActions.FETCH_CHANNELS_START,\n              payload: null,\n            });\n            channelSource.next().then((channelList) => {\n              logger.info('ChannelList: Fetching channels successful', channelList);\n              channelListDispatcher({\n                type: channelListActions.FETCH_CHANNELS_SUCCESS,\n                payload: channelList,\n              });\n              const canSetMarkAsDelivered = sdk?.appInfo?.premiumFeatureList\n                ?.find((feature) => (feature === DELIVERY_RECIPT));\n\n              if (canSetMarkAsDelivered && !disableMarkAsDelivered) {\n                logger.info('ChannelList: Marking all channels as read');\n                // eslint-disable-next-line no-unused-expressions\n                channelList?.forEach((channel) => {\n                  if (channel?.unreadMessageCount > 0) {\n                    markAsDeliveredScheduler.push(channel);\n                  }\n                });\n              }\n            }).catch((err) => {\n              logger.info('ChannelList: Fetching channels failed', err);\n              channelListDispatcher({\n                type: channelListActions.FETCH_CHANNELS_FAILURE,\n                payload: err,\n              });\n            });\n          }\n        }}\n      >\n        {\n          (sdkError && !loading) && (\n            (renderPlaceHolderError && typeof renderPlaceHolderError === 'function') ? (\n              renderPlaceHolderError?.()\n            ) : (\n              <PlaceHolder type={PlaceHolderTypes.WRONG} />\n            )\n          )\n        }\n        {/*\n          To do: Implement windowing\n          Implement windowing if you are dealing with large number of messages/channels\n          https://github.com/bvaughn/react-window -> recommendation\n          We hesitate to bring one more dependency to our library,\n          we are planning to implement it inside the library\n        */}\n        <div>\n          {\n            allChannels && allChannels.map((channel, idx) => {\n              // todo: Refactor and move this inside channel - preview\n              const onLeaveChannel = (c, cb) => {\n                logger.info('ChannelList: Leaving channel', c);\n                c.leave()\n                  .then((res) => {\n                    logger.info('ChannelList: Leaving channel success', res);\n                    if (cb && typeof cb === 'function') {\n                      cb(res, null);\n                    }\n                    channelListDispatcher({\n                      type: channelListActions.LEAVE_CHANNEL_SUCCESS,\n                      payload: channel?.url,\n                    });\n                  })\n                  .catch((err) => {\n                    logger.error('ChannelList: Leaving channel failed', err);\n                    if (cb && typeof cb === 'function') {\n                      cb(null, err);\n                    }\n                  });\n              };\n\n              const onClick = () => {\n                if (!isOnline) { return; }\n                logger.info('ChannelList: Clicked on channel:', channel);\n                channelListDispatcher({\n                  type: channelListActions.SET_CURRENT_CHANNEL,\n                  payload: channel,\n                });\n              };\n\n              return (\n                (renderChannelPreview)\n                  ? (\n                    // eslint-disable-next-line\n                    <div key={channel?.url} onClick={onClick}>\n                      {renderChannelPreview({ channel, onLeaveChannel })}\n                    </div>\n                  )\n                  : (\n                    <ChannelPreview\n                      key={channel?.url}\n                      tabIndex={idx}\n                      onClick={onClick}\n                      channel={channel}\n                      onLeaveChannel={() => onLeaveChannel(channel, null)}\n                      isActive={channel?.url === currentChannel?.url}\n                      isTyping={typingChannels?.some(({ url }) => url === channel?.url)}\n                      renderChannelAction={(() => (\n                        <ChannelPreviewAction\n                          channel={channel}\n                          disabled={!isOnline}\n                          onLeaveChannel={() => onLeaveChannel(channel, null)}\n                        />\n                      ))}\n                    />\n                  )\n              );\n            })\n          }\n        </div>\n        {\n          (!initialized && loading) && (\n            (renderPlaceHolderLoading && typeof renderPlaceHolderLoading === 'function') ? (\n              renderPlaceHolderLoading?.()\n            ) : (\n              <PlaceHolder type={PlaceHolderTypes.LOADING} />\n            )\n          )\n        }\n        {\n          (initialized && allChannels?.length === 0) && (\n            (renderPlaceHolderEmptyList && typeof renderPlaceHolderEmptyList === 'function') ? (\n              renderPlaceHolderEmptyList?.()\n            ) : (\n              <PlaceHolder type={PlaceHolderTypes.NO_CHANNELS} />\n            )\n          )\n        }\n      </div>\n    </>\n  );\n};\n\nexport default ChannelListUI;\n"]},"metadata":{},"sourceType":"module"}