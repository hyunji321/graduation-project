{"ast":null,"code":"import { _ as _objectSpread2 } from './_rollupPluginBabelHelpers-6bb0305c.js';\nimport { useState, useRef, useCallback } from 'react';\nimport { u as useMediaQueryContext } from './MediaQueryContext-11f0e43f.js';\nconst DEFAULT_DURATION = 300;\nfunction preventDefault(e) {\n  if (!isTouchEvent(e)) {\n    return;\n  }\n  if (e.touches.length < 2 && e.preventDefault) {\n    e.preventDefault();\n  }\n}\nfunction isTouchEvent(e) {\n  return e && 'touches' in e;\n}\nfunction useLongPress(_ref) {\n  let {\n    onLongPress,\n    onClick\n  } = _ref;\n  let {\n    delay = DEFAULT_DURATION,\n    shouldPreventDefault = true,\n    shouldStopPropagation = false\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    isMobile\n  } = useMediaQueryContext();\n  const [longPressTriggered, setLongPressTriggered] = useState(false);\n  const [dragTriggered, setDragTriggered] = useState(false);\n  // https://www.typescriptlang.org/docs/handbook/utility-types.html#returntypetype\n  const timeout = useRef();\n  const target = useRef();\n  const start = useCallback(e => {\n    e.persist();\n    const clonedEvent = _objectSpread2({}, e);\n    setDragTriggered(false);\n    if (shouldStopPropagation) {\n      e.stopPropagation();\n    }\n    if (shouldPreventDefault && e.target) {\n      e.target.addEventListener('touchend', preventDefault, {\n        passive: false\n      });\n      target.current = e.target;\n    }\n    timeout.current = setTimeout(() => {\n      onLongPress(clonedEvent);\n      setLongPressTriggered(true);\n    }, delay);\n  }, [onLongPress, delay, shouldPreventDefault, shouldStopPropagation, isMobile]);\n  const clear = useCallback(function (e) {\n    let shouldTriggerClick = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let onDrag = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (onDrag) {\n      setDragTriggered(true);\n    } else {\n      setDragTriggered(false);\n    }\n    if (timeout !== null && timeout !== void 0 && timeout.current) {\n      clearTimeout(timeout.current);\n    }\n    if (shouldTriggerClick && !longPressTriggered && !dragTriggered) {\n      onClick === null || onClick === void 0 ? void 0 : onClick(e);\n    }\n    setLongPressTriggered(false);\n    if (shouldPreventDefault && target.current) {\n      target.current.removeEventListener('touchend', preventDefault);\n    }\n  }, [shouldPreventDefault, onClick, longPressTriggered, dragTriggered]);\n  return {\n    onMouseDown: e => start(e),\n    onMouseUp: e => clear(e),\n    onMouseLeave: e => clear(e, false),\n    onTouchStart: e => start(e),\n    // setDragTriggered as true on touchmove, so that next onTouchEnd is ignored\n    // if we dont do it, onClick?.(e) will be triggred, see inside clear()\n    onTouchMove: e => clear(e, false, true),\n    onTouchEnd: e => clear(e)\n  };\n}\nexport { useLongPress as u };","map":{"version":3,"mappings":"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","names":["DEFAULT_DURATION","preventDefault","e","isTouchEvent","touches","length","useLongPress","onLongPress","onClick","delay","shouldPreventDefault","shouldStopPropagation","isMobile","useMediaQueryContext","longPressTriggered","setLongPressTriggered","useState","dragTriggered","setDragTriggered","timeout","useRef","target","start","useCallback","persist","clonedEvent","stopPropagation","addEventListener","passive","current","setTimeout","clear","shouldTriggerClick","onDrag","clearTimeout","removeEventListener","onMouseDown","onMouseUp","onMouseLeave","onTouchStart","onTouchMove","onTouchEnd"],"sources":["C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\hooks\\useLongPress.tsx"],"sourcesContent":["// thanks to: https://stackoverflow.com/questions/48048957/react-long-press-event\n/* example:\n  const Component = ({ onClick }) => {\n    const onLongPress = useLongPress({\n      onClick: onClick,\n      onLongPress: () => {\n        alert('longpress');\n      }\n    }, {\n      delay: 500,\n      shouldPreventDefault: true,\n    });\n    return (\n      <button {...onLongPress}>\n        hello\n      </button>\n    )\n  }\n*/\nimport React, {\n  useState,\n  useRef,\n  useCallback,\n} from 'react';\nimport {\n  useMediaQueryContext,\n} from '../lib/MediaQueryContext';\n\nconst DEFAULT_DURATION = 300;\n\nfunction preventDefault(e: Event) {\n  if (!isTouchEvent(e)) {\n    return;\n  }\n\n  if (e.touches.length < 2 && e.preventDefault) {\n    e.preventDefault();\n  }\n}\n\nexport function isTouchEvent(e: Event): e is TouchEvent {\n  return e && 'touches' in e;\n}\n\ninterface PressHandlers<T> {\n  onLongPress: (e: React.MouseEvent<T> | React.TouchEvent<T>) => void;\n  onClick?: (e: React.MouseEvent<T> | React.TouchEvent<T>) => void;\n}\n\ninterface Options {\n  delay?: number;\n  shouldPreventDefault?: boolean;\n  shouldStopPropagation?: boolean;\n}\n\ninterface UseLongPressType<T> {\n  onTouchMove: (e: React.TouchEvent<T>) => void;\n  onMouseDown: (e: React.MouseEvent<T>) => void;\n  onTouchStart: (e: React.TouchEvent<T>) => void;\n  onMouseUp: (e: React.MouseEvent<T>) => void;\n  onMouseLeave: (e: React.MouseEvent<T>) => void;\n  onTouchEnd: (e: React.TouchEvent<T>) => void;\n}\n\nexport default function useLongPress<T>({\n  onLongPress,\n  onClick,\n}: PressHandlers<T>, {\n  delay = DEFAULT_DURATION,\n  shouldPreventDefault = true,\n  shouldStopPropagation = false,\n}: Options = {}): UseLongPressType<T> {\n  const { isMobile } = useMediaQueryContext();\n  const [longPressTriggered, setLongPressTriggered] = useState(false);\n  const [dragTriggered, setDragTriggered] = useState(false);\n  // https://www.typescriptlang.org/docs/handbook/utility-types.html#returntypetype\n  const timeout = useRef<ReturnType<typeof setTimeout>>();\n  const target = useRef<EventTarget>();\n\n  const start = useCallback((e: React.MouseEvent<T> | React.TouchEvent<T>) => {\n    e.persist();\n    const clonedEvent = {\n      ...e,\n    };\n    setDragTriggered(false);\n    if (shouldStopPropagation) {\n      e.stopPropagation();\n    }\n    if (shouldPreventDefault && e.target) {\n      e.target.addEventListener(\n        'touchend',\n        preventDefault,\n        {\n          passive: false,\n        },\n      );\n      target.current = e.target;\n    }\n\n    timeout.current = setTimeout(() => {\n      onLongPress(clonedEvent);\n      setLongPressTriggered(true);\n    }, delay);\n  }, [onLongPress, delay, shouldPreventDefault, shouldStopPropagation, isMobile]);\n\n  const clear = useCallback((\n    e: React.MouseEvent<T> | React.TouchEvent<T>,\n    shouldTriggerClick = true,\n    onDrag = false,\n  ) => {\n    if (onDrag) {\n      setDragTriggered(true);\n    } else {\n      setDragTriggered(false);\n    }\n    if (timeout?.current) {\n      clearTimeout(timeout.current);\n    }\n    if (shouldTriggerClick && !longPressTriggered && !dragTriggered) {\n      onClick?.(e);\n    }\n    setLongPressTriggered(false);\n    if (shouldPreventDefault && target.current) {\n      target.current.removeEventListener('touchend', preventDefault);\n    }\n  }, [shouldPreventDefault, onClick, longPressTriggered, dragTriggered]);\n\n  return {\n    onMouseDown: (e: React.MouseEvent<T>) => start(e),\n    onMouseUp: (e: React.MouseEvent<T>) => clear(e),\n    onMouseLeave: (e: React.MouseEvent<T>) => clear(e, false),\n    onTouchStart: (e: React.TouchEvent<T>) => start(e),\n    // setDragTriggered as true on touchmove, so that next onTouchEnd is ignored\n    // if we dont do it, onClick?.(e) will be triggred, see inside clear()\n    onTouchMove: (e: React.TouchEvent<T>) => clear(e, false, true),\n    onTouchEnd: (e: React.TouchEvent<T>) => clear(e),\n  };\n}\n"]},"metadata":{},"sourceType":"module"}