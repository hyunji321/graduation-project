{"ast":null,"code":"/*!\n * css-vars-ponyfill\n * v2.4.8\n * https://jhildenbiddle.github.io/css-vars-ponyfill/\n * (c) 2018-2022 John Hildenbiddle <http://hildenbiddle.com>\n * MIT license\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n/*!\n * get-css-data\n * v2.1.0\n * https://github.com/jhildenbiddle/get-css-data\n * (c) 2018-2022 John Hildenbiddle <http://hildenbiddle.com>\n * MIT license\n */\nfunction getUrls(urls) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var settings = {\n    mimeType: options.mimeType || null,\n    onBeforeSend: options.onBeforeSend || Function.prototype,\n    onSuccess: options.onSuccess || Function.prototype,\n    onError: options.onError || Function.prototype,\n    onComplete: options.onComplete || Function.prototype\n  };\n  var urlArray = Array.isArray(urls) ? urls : [urls];\n  var urlQueue = Array.apply(null, Array(urlArray.length)).map(function (x) {\n    return null;\n  });\n  function isValidCss(text) {\n    var isString = typeof text === \"string\";\n    var isHTML = isString && text.trim().charAt(0) === \"<\";\n    return isString && !isHTML;\n  }\n  function onError(xhr, urlIndex) {\n    settings.onError(xhr, urlArray[urlIndex], urlIndex);\n  }\n  function onSuccess(responseText, urlIndex) {\n    var returnVal = settings.onSuccess(responseText, urlArray[urlIndex], urlIndex);\n    responseText = returnVal === false ? \"\" : returnVal || responseText;\n    urlQueue[urlIndex] = responseText;\n    if (urlQueue.indexOf(null) === -1) {\n      settings.onComplete(urlQueue);\n    }\n  }\n  var parser = document.createElement(\"a\");\n  urlArray.forEach(function (url, i) {\n    parser.setAttribute(\"href\", url);\n    parser.href = String(parser.href);\n    var isIElte9 = Boolean(document.all && !window.atob);\n    var isIElte9CORS = isIElte9 && parser.host.split(\":\")[0] !== location.host.split(\":\")[0];\n    if (isIElte9CORS) {\n      var isSameProtocol = parser.protocol === location.protocol;\n      if (isSameProtocol) {\n        var xdr = new XDomainRequest();\n        xdr.open(\"GET\", url);\n        xdr.timeout = 0;\n        xdr.onprogress = Function.prototype;\n        xdr.ontimeout = Function.prototype;\n        xdr.onload = function () {\n          var text = xdr.responseText;\n          if (isValidCss(text)) {\n            onSuccess(text, i);\n          } else {\n            onError(xdr, i);\n          }\n        };\n        xdr.onerror = function (err) {\n          onError(xdr, i);\n        };\n        setTimeout(function () {\n          xdr.send();\n        }, 0);\n      } else {\n        console.warn(\"Internet Explorer 9 Cross-Origin (CORS) requests must use the same protocol (\".concat(url, \")\"));\n        onError(null, i);\n      }\n    } else {\n      var xhr = new XMLHttpRequest();\n      xhr.open(\"GET\", url);\n      if (settings.mimeType && xhr.overrideMimeType) {\n        xhr.overrideMimeType(settings.mimeType);\n      }\n      settings.onBeforeSend(xhr, url, i);\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4) {\n          var text = xhr.responseText;\n          if (xhr.status < 400 && isValidCss(text)) {\n            onSuccess(text, i);\n          } else if (xhr.status === 0 && isValidCss(text)) {\n            onSuccess(text, i);\n          } else {\n            onError(xhr, i);\n          }\n        }\n      };\n      xhr.send();\n    }\n  });\n}\n\n/**\n * Gets CSS data from <style> and <link> nodes (including @imports), then\n * returns data in order processed by DOM. Allows specifying nodes to\n * include/exclude and filtering CSS data using RegEx.\n *\n * @preserve\n * @param {object}   [options] The options object\n * @param {object}   [options.rootElement=document] Root element to traverse for\n *                   <link> and <style> nodes.\n * @param {string}   [options.include] CSS selector matching <link> and <style>\n *                   nodes to include\n * @param {string}   [options.exclude] CSS selector matching <link> and <style>\n *                   nodes to exclude\n * @param {object}   [options.filter] Regular expression used to filter node CSS\n *                   data. Each block of CSS data is tested against the filter,\n *                   and only matching data is included.\n * @param {boolean}  [options.skipDisabled=true] Determines if disabled\n *                   stylesheets will be skipped while collecting CSS data.\n * @param {boolean}  [options.useCSSOM=false] Determines if CSS data will be\n *                   collected from a stylesheet's runtime values instead of its\n *                   text content. This is required to get accurate CSS data\n *                   when a stylesheet has been modified using the deleteRule()\n *                   or insertRule() methods because these modifications will\n *                   not be reflected in the stylesheet's text content.\n * @param {function} [options.onBeforeSend] Callback before XHR is sent. Passes\n *                   1) the XHR object, 2) source node reference, and 3) the\n *                   source URL as arguments.\n * @param {function} [options.onSuccess] Callback on each CSS node read. Passes\n *                   1) CSS text, 2) source node reference, and 3) the source\n *                   URL as arguments.\n * @param {function} [options.onError] Callback on each error. Passes 1) the XHR\n *                   object for inspection, 2) soure node reference, and 3) the\n *                   source URL that failed (either a <link> href or an @import)\n *                   as arguments\n * @param {function} [options.onComplete] Callback after all nodes have been\n *                   processed. Passes 1) concatenated CSS text, 2) an array of\n *                   CSS text in DOM order, and 3) an array of nodes in DOM\n *                   order as arguments.\n *\n * @example\n *\n *   getCssData({\n *     rootElement : document,\n *     include     : 'style,link[rel=\"stylesheet\"]',\n *     exclude     : '[href=\"skip.css\"]',\n *     filter      : /red/,\n *     skipDisabled: true,\n *     useCSSOM    : false,\n *     onBeforeSend(xhr, node, url) {\n *       // ...\n *     }\n *     onSuccess(cssText, node, url) {\n *       // ...\n *     }\n *     onError(xhr, node, url) {\n *       // ...\n *     },\n *     onComplete(cssText, cssArray, nodeArray) {\n *       // ...\n *     }\n *   });\n */\nfunction getCssData(options) {\n  var regex = {\n    cssComments: /\\/\\*[\\s\\S]+?\\*\\//g,\n    cssImports: /(?:@import\\s*)(?:url\\(\\s*)?(?:['\"])([^'\"]*)(?:['\"])(?:\\s*\\))?(?:[^;]*;)/g\n  };\n  var settings = {\n    rootElement: options.rootElement || document,\n    include: options.include || 'style,link[rel=\"stylesheet\"]',\n    exclude: options.exclude || null,\n    filter: options.filter || null,\n    skipDisabled: options.skipDisabled !== false,\n    useCSSOM: options.useCSSOM || false,\n    onBeforeSend: options.onBeforeSend || Function.prototype,\n    onSuccess: options.onSuccess || Function.prototype,\n    onError: options.onError || Function.prototype,\n    onComplete: options.onComplete || Function.prototype\n  };\n  var sourceNodes = Array.apply(null, settings.rootElement.querySelectorAll(settings.include)).filter(function (node) {\n    return !matchesSelector(node, settings.exclude);\n  });\n  var cssArray = Array.apply(null, Array(sourceNodes.length)).map(function (x) {\n    return null;\n  });\n  function handleComplete() {\n    var isComplete = cssArray.indexOf(null) === -1;\n    if (isComplete) {\n      cssArray.reduce(function (skipIndices, value, i) {\n        if (value === \"\") {\n          skipIndices.push(i);\n        }\n        return skipIndices;\n      }, []).reverse().forEach(function (skipIndex) {\n        return [sourceNodes, cssArray].forEach(function (arr) {\n          return arr.splice(skipIndex, 1);\n        });\n      });\n      var cssText = cssArray.join(\"\");\n      settings.onComplete(cssText, cssArray, sourceNodes);\n    }\n  }\n  function handleSuccess(cssText, cssIndex, node, sourceUrl) {\n    var returnVal = settings.onSuccess(cssText, node, sourceUrl);\n    cssText = returnVal !== undefined && Boolean(returnVal) === false ? \"\" : returnVal || cssText;\n    resolveImports(cssText, node, sourceUrl, function (resolvedCssText, errorData) {\n      if (cssArray[cssIndex] === null) {\n        errorData.forEach(function (data) {\n          return settings.onError(data.xhr, node, data.url);\n        });\n        if (!settings.filter || settings.filter.test(resolvedCssText)) {\n          cssArray[cssIndex] = resolvedCssText;\n        } else {\n          cssArray[cssIndex] = \"\";\n        }\n        handleComplete();\n      }\n    });\n  }\n  function parseImportData(cssText, baseUrl) {\n    var ignoreRules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var importData = {};\n    importData.rules = (cssText.replace(regex.cssComments, \"\").match(regex.cssImports) || []).filter(function (rule) {\n      return ignoreRules.indexOf(rule) === -1;\n    });\n    importData.urls = importData.rules.map(function (rule) {\n      return rule.replace(regex.cssImports, \"$1\");\n    });\n    importData.absoluteUrls = importData.urls.map(function (url) {\n      return getFullUrl$1(url, baseUrl);\n    });\n    importData.absoluteRules = importData.rules.map(function (rule, i) {\n      var oldUrl = importData.urls[i];\n      var newUrl = getFullUrl$1(importData.absoluteUrls[i], baseUrl);\n      return rule.replace(oldUrl, newUrl);\n    });\n    return importData;\n  }\n  function resolveImports(cssText, node, baseUrl, callbackFn) {\n    var __errorData = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n    var __errorRules = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n    var importData = parseImportData(cssText, baseUrl, __errorRules);\n    if (importData.rules.length) {\n      getUrls(importData.absoluteUrls, {\n        onBeforeSend: function onBeforeSend(xhr, url, urlIndex) {\n          settings.onBeforeSend(xhr, node, url);\n        },\n        onSuccess: function onSuccess(cssText, url, urlIndex) {\n          var returnVal = settings.onSuccess(cssText, node, url);\n          cssText = returnVal === false ? \"\" : returnVal || cssText;\n          var responseImportData = parseImportData(cssText, url, __errorRules);\n          responseImportData.rules.forEach(function (rule, i) {\n            cssText = cssText.replace(rule, responseImportData.absoluteRules[i]);\n          });\n          return cssText;\n        },\n        onError: function onError(xhr, url, urlIndex) {\n          __errorData.push({\n            xhr: xhr,\n            url: url\n          });\n          __errorRules.push(importData.rules[urlIndex]);\n          resolveImports(cssText, node, baseUrl, callbackFn, __errorData, __errorRules);\n        },\n        onComplete: function onComplete(responseArray) {\n          responseArray.forEach(function (importText, i) {\n            cssText = cssText.replace(importData.rules[i], importText);\n          });\n          resolveImports(cssText, node, baseUrl, callbackFn, __errorData, __errorRules);\n        }\n      });\n    } else {\n      callbackFn(cssText, __errorData);\n    }\n  }\n  if (sourceNodes.length) {\n    sourceNodes.forEach(function (node, i) {\n      var linkHref = node.getAttribute(\"href\");\n      var linkRel = node.getAttribute(\"rel\");\n      var isLink = node.nodeName.toLowerCase() === \"link\" && linkHref && linkRel && linkRel.toLowerCase().indexOf(\"stylesheet\") !== -1;\n      var isSkip = settings.skipDisabled === false ? false : node.disabled;\n      var isStyle = node.nodeName.toLowerCase() === \"style\";\n      if (isLink && !isSkip) {\n        var isURIScheme = linkHref.indexOf(\"data:text/css\") !== -1;\n        if (isURIScheme) {\n          var cssText = decodeURIComponent(linkHref.substring(linkHref.indexOf(\",\") + 1));\n          if (settings.useCSSOM) {\n            cssText = Array.apply(null, node.sheet.cssRules).map(function (rule) {\n              return rule.cssText;\n            }).join(\"\");\n          }\n          handleSuccess(cssText, i, node, location.href);\n        } else {\n          getUrls(linkHref, {\n            mimeType: \"text/css\",\n            onBeforeSend: function onBeforeSend(xhr, url, urlIndex) {\n              settings.onBeforeSend(xhr, node, url);\n            },\n            onSuccess: function onSuccess(cssText, url, urlIndex) {\n              var sourceUrl = getFullUrl$1(linkHref);\n              handleSuccess(cssText, i, node, sourceUrl);\n            },\n            onError: function onError(xhr, url, urlIndex) {\n              cssArray[i] = \"\";\n              settings.onError(xhr, node, url);\n              handleComplete();\n            }\n          });\n        }\n      } else if (isStyle && !isSkip) {\n        var _cssText = node.textContent;\n        if (settings.useCSSOM) {\n          _cssText = Array.apply(null, node.sheet.cssRules).map(function (rule) {\n            return rule.cssText;\n          }).join(\"\");\n        }\n        handleSuccess(_cssText, i, node, location.href);\n      } else {\n        cssArray[i] = \"\";\n        handleComplete();\n      }\n    });\n  } else {\n    settings.onComplete(\"\", []);\n  }\n}\nfunction getFullUrl$1(url, base) {\n  var d = document.implementation.createHTMLDocument(\"\");\n  var b = d.createElement(\"base\");\n  var a = d.createElement(\"a\");\n  d.head.appendChild(b);\n  d.body.appendChild(a);\n  b.href = base || document.baseURI || (document.querySelector(\"base\") || {}).href || location.href;\n  a.href = url;\n  return a.href;\n}\nfunction matchesSelector(elm, selector) {\n  var matches = elm.matches || elm.matchesSelector || elm.webkitMatchesSelector || elm.mozMatchesSelector || elm.msMatchesSelector || elm.oMatchesSelector;\n  return matches.call(elm, selector);\n}\nvar balancedMatch = balanced;\nfunction balanced(a, b, str) {\n  if (a instanceof RegExp) a = maybeMatch(a, str);\n  if (b instanceof RegExp) b = maybeMatch(b, str);\n  var r = range(a, b, str);\n  return r && {\n    start: r[0],\n    end: r[1],\n    pre: str.slice(0, r[0]),\n    body: str.slice(r[0] + a.length, r[1]),\n    post: str.slice(r[1] + b.length)\n  };\n}\nfunction maybeMatch(reg, str) {\n  var m = str.match(reg);\n  return m ? m[0] : null;\n}\nbalanced.range = range;\nfunction range(a, b, str) {\n  var begs, beg, left, right, result;\n  var ai = str.indexOf(a);\n  var bi = str.indexOf(b, ai + 1);\n  var i = ai;\n  if (ai >= 0 && bi > 0) {\n    if (a === b) {\n      return [ai, bi];\n    }\n    begs = [];\n    left = str.length;\n    while (i >= 0 && !result) {\n      if (i == ai) {\n        begs.push(i);\n        ai = str.indexOf(a, i + 1);\n      } else if (begs.length == 1) {\n        result = [begs.pop(), bi];\n      } else {\n        beg = begs.pop();\n        if (beg < left) {\n          left = beg;\n          right = bi;\n        }\n        bi = str.indexOf(b, i + 1);\n      }\n      i = ai < bi && ai >= 0 ? ai : bi;\n    }\n    if (begs.length) {\n      result = [left, right];\n    }\n  }\n  return result;\n}\nfunction parseCss(css) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var defaults = {\n    preserveStatic: true,\n    removeComments: false\n  };\n  var settings = _extends({}, defaults, options);\n  var errors = [];\n  function error(msg) {\n    throw new Error(\"CSS parse error: \".concat(msg));\n  }\n  function match(re) {\n    var m = re.exec(css);\n    if (m) {\n      css = css.slice(m[0].length);\n      return m;\n    }\n  }\n  function open() {\n    return match(/^{\\s*/);\n  }\n  function close() {\n    return match(/^}/);\n  }\n  function whitespace() {\n    match(/^\\s*/);\n  }\n  function comment() {\n    whitespace();\n    if (css[0] !== \"/\" || css[1] !== \"*\") {\n      return;\n    }\n    var i = 2;\n    while (css[i] && (css[i] !== \"*\" || css[i + 1] !== \"/\")) {\n      i++;\n    }\n    if (!css[i]) {\n      return error(\"end of comment is missing\");\n    }\n    var str = css.slice(2, i);\n    css = css.slice(i + 2);\n    return {\n      type: \"comment\",\n      comment: str\n    };\n  }\n  function comments() {\n    var cmnts = [];\n    var c;\n    while (c = comment()) {\n      cmnts.push(c);\n    }\n    return settings.removeComments ? [] : cmnts;\n  }\n  function selector() {\n    whitespace();\n    while (css[0] === \"}\") {\n      error(\"extra closing bracket\");\n    }\n    var m = match(/^((\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'|[^{])+)/);\n    if (m) {\n      var _selector = m[0].trim();\n      var selectorItems;\n      var hasComment = /\\/\\*/.test(_selector);\n      if (hasComment) {\n        _selector = _selector.replace(/\\/\\*([^*]|[\\r\\n]|(\\*+([^*/]|[\\r\\n])))*\\*\\/+/g, \"\");\n      }\n      var hasCommaInQuotes = /[\"']\\w*,\\w*[\"']/.test(_selector);\n      if (hasCommaInQuotes) {\n        _selector = _selector.replace(/\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'/g, function (m) {\n          return m.replace(/,/g, \"‌\");\n        });\n      }\n      var hasMultipleSelectors = /,/.test(_selector);\n      if (hasMultipleSelectors) {\n        selectorItems = _selector.split(/\\s*(?![^(]*\\)),\\s*/);\n      } else {\n        selectorItems = [_selector];\n      }\n      if (hasCommaInQuotes) {\n        selectorItems = selectorItems.map(function (s) {\n          return s.replace(/\\u200C/g, \",\");\n        });\n      }\n      return selectorItems;\n    }\n  }\n  function declaration() {\n    if (css[0] === \"@\") {\n      return at_rule();\n    }\n    match(/^([;\\s]*)+/);\n    var comment_regexp = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n    var prop = match(/^(\\*?[-#/*\\\\\\w.]+(\\[[0-9a-z_-]+\\])?)\\s*/);\n    if (!prop) {\n      return;\n    }\n    prop = prop[0].trim();\n    if (!match(/^:\\s*/)) {\n      return error(\"property missing ':'\");\n    }\n    var val = match(/^((?:\\/\\*.*?\\*\\/|'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\((\\s*'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|[^)]*?)\\s*\\)|[^};])+)/);\n    var ret = {\n      type: \"declaration\",\n      property: prop.replace(comment_regexp, \"\"),\n      value: val ? val[0].replace(comment_regexp, \"\").trim() : \"\"\n    };\n    match(/^[;\\s]*/);\n    return ret;\n  }\n  function declarations() {\n    if (!open()) {\n      return error(\"missing '{'\");\n    }\n    var d;\n    var decls = comments();\n    while (d = declaration()) {\n      decls.push(d);\n      decls = decls.concat(comments());\n    }\n    if (!close()) {\n      return error(\"missing '}'\");\n    }\n    return decls;\n  }\n  function keyframe() {\n    whitespace();\n    var vals = [];\n    var m;\n    while (m = match(/^((\\d+\\.\\d+|\\.\\d+|\\d+)%?|[a-z]+)\\s*/)) {\n      vals.push(m[1]);\n      match(/^,\\s*/);\n    }\n    if (vals.length) {\n      return {\n        type: \"keyframe\",\n        values: vals,\n        declarations: declarations()\n      };\n    }\n  }\n  function at_keyframes() {\n    var m = match(/^@([-\\w]+)?keyframes\\s*/);\n    if (!m) {\n      return;\n    }\n    var vendor = m[1];\n    m = match(/^([-\\w]+)\\s*/);\n    if (!m) {\n      return error(\"@keyframes missing name\");\n    }\n    var name = m[1];\n    if (!open()) {\n      return error(\"@keyframes missing '{'\");\n    }\n    var frame;\n    var frames = comments();\n    while (frame = keyframe()) {\n      frames.push(frame);\n      frames = frames.concat(comments());\n    }\n    if (!close()) {\n      return error(\"@keyframes missing '}'\");\n    }\n    return {\n      type: \"keyframes\",\n      name: name,\n      vendor: vendor,\n      keyframes: frames\n    };\n  }\n  function at_page() {\n    var m = match(/^@page */);\n    if (m) {\n      var sel = selector() || [];\n      return {\n        type: \"page\",\n        selectors: sel,\n        declarations: declarations()\n      };\n    }\n  }\n  function at_page_margin_box() {\n    var m = match(/@(top|bottom|left|right)-(left|center|right|top|middle|bottom)-?(corner)?\\s*/);\n    if (m) {\n      var name = \"\".concat(m[1], \"-\").concat(m[2]) + (m[3] ? \"-\".concat(m[3]) : \"\");\n      return {\n        type: \"page-margin-box\",\n        name: name,\n        declarations: declarations()\n      };\n    }\n  }\n  function at_fontface() {\n    var m = match(/^@font-face\\s*/);\n    if (m) {\n      return {\n        type: \"font-face\",\n        declarations: declarations()\n      };\n    }\n  }\n  function at_supports() {\n    var m = match(/^@supports *([^{]+)/);\n    if (m) {\n      return {\n        type: \"supports\",\n        supports: m[1].trim(),\n        rules: rules()\n      };\n    }\n  }\n  function at_host() {\n    var m = match(/^@host\\s*/);\n    if (m) {\n      return {\n        type: \"host\",\n        rules: rules()\n      };\n    }\n  }\n  function at_media() {\n    var m = match(/^@media([^{]+)*/);\n    if (m) {\n      return {\n        type: \"media\",\n        media: (m[1] || \"\").trim(),\n        rules: rules()\n      };\n    }\n  }\n  function at_custom_m() {\n    var m = match(/^@custom-media\\s+(--[^\\s]+)\\s*([^{;]+);/);\n    if (m) {\n      return {\n        type: \"custom-media\",\n        name: m[1].trim(),\n        media: m[2].trim()\n      };\n    }\n  }\n  function at_document() {\n    var m = match(/^@([-\\w]+)?document *([^{]+)/);\n    if (m) {\n      return {\n        type: \"document\",\n        document: m[2].trim(),\n        vendor: m[1] ? m[1].trim() : null,\n        rules: rules()\n      };\n    }\n  }\n  function at_x() {\n    var m = match(/^@(import|charset|namespace)\\s*([^;]+);/);\n    if (m) {\n      return {\n        type: m[1],\n        name: m[2].trim()\n      };\n    }\n  }\n  function at_rule() {\n    whitespace();\n    if (css[0] === \"@\") {\n      var ret = at_x() || at_fontface() || at_media() || at_keyframes() || at_supports() || at_document() || at_custom_m() || at_host() || at_page() || at_page_margin_box();\n      if (ret && !settings.preserveStatic) {\n        var hasVarFunc = false;\n        if (ret.declarations) {\n          hasVarFunc = ret.declarations.some(function (decl) {\n            return /var\\(/.test(decl.value);\n          });\n        } else {\n          var arr = ret.keyframes || ret.rules || [];\n          hasVarFunc = arr.some(function (obj) {\n            return (obj.declarations || []).some(function (decl) {\n              return /var\\(/.test(decl.value);\n            });\n          });\n        }\n        return hasVarFunc ? ret : {};\n      }\n      return ret;\n    }\n  }\n  function rule() {\n    if (!settings.preserveStatic) {\n      var balancedMatch$1 = balancedMatch(\"{\", \"}\", css);\n      if (balancedMatch$1) {\n        var hasVarDecl = /:(?:root|host)(?![.:#(])/.test(balancedMatch$1.pre) && /--\\S*\\s*:/.test(balancedMatch$1.body);\n        var hasVarFunc = /var\\(/.test(balancedMatch$1.body);\n        if (!hasVarDecl && !hasVarFunc) {\n          css = css.slice(balancedMatch$1.end + 1);\n          return {};\n        }\n      }\n    }\n    var sel = selector() || [];\n    var decls = settings.preserveStatic ? declarations() : declarations().filter(function (decl) {\n      var hasVarDecl = sel.some(function (s) {\n        return /:(?:root|host)(?![.:#(])/.test(s);\n      }) && /^--\\S/.test(decl.property);\n      var hasVarFunc = /var\\(/.test(decl.value);\n      return hasVarDecl || hasVarFunc;\n    });\n    if (!sel.length) {\n      error(\"selector missing\");\n    }\n    return {\n      type: \"rule\",\n      selectors: sel,\n      declarations: decls\n    };\n  }\n  function rules(core) {\n    if (!core && !open()) {\n      return error(\"missing '{'\");\n    }\n    var node;\n    var rules = comments();\n    while (css.length && (core || css[0] !== \"}\") && (node = at_rule() || rule())) {\n      if (node.type) {\n        rules.push(node);\n      }\n      rules = rules.concat(comments());\n    }\n    if (!core && !close()) {\n      return error(\"missing '}'\");\n    }\n    return rules;\n  }\n  return {\n    type: \"stylesheet\",\n    stylesheet: {\n      rules: rules(true),\n      errors: errors\n    }\n  };\n}\nfunction parseVars(cssData) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var defaults = {\n    parseHost: false,\n    store: {},\n    onWarning: function onWarning() {}\n  };\n  var settings = _extends({}, defaults, options);\n  var reVarDeclSelectors = new RegExp(\":\".concat(settings.parseHost ? \"host\" : \"root\", \"$\"));\n  if (typeof cssData === \"string\") {\n    cssData = parseCss(cssData, settings);\n  }\n  cssData.stylesheet.rules.forEach(function (rule) {\n    if (rule.type !== \"rule\" || !rule.selectors.some(function (s) {\n      return reVarDeclSelectors.test(s);\n    })) {\n      return;\n    }\n    rule.declarations.forEach(function (decl, i) {\n      var prop = decl.property;\n      var value = decl.value;\n      if (prop && prop.indexOf(\"--\") === 0) {\n        settings.store[prop] = value;\n      }\n    });\n  });\n  return settings.store;\n}\nfunction stringifyCss(tree) {\n  var delim = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  var cb = arguments.length > 2 ? arguments[2] : undefined;\n  var renderMethods = {\n    charset: function charset(node) {\n      return \"@charset \" + node.name + \";\";\n    },\n    comment: function comment(node) {\n      return node.comment.indexOf(\"__CSSVARSPONYFILL\") === 0 ? \"/*\" + node.comment + \"*/\" : \"\";\n    },\n    \"custom-media\": function customMedia(node) {\n      return \"@custom-media \" + node.name + \" \" + node.media + \";\";\n    },\n    declaration: function declaration(node) {\n      return node.property + \":\" + node.value + \";\";\n    },\n    document: function document(node) {\n      return \"@\" + (node.vendor || \"\") + \"document \" + node.document + \"{\" + visit(node.rules) + \"}\";\n    },\n    \"font-face\": function fontFace(node) {\n      return \"@font-face\" + \"{\" + visit(node.declarations) + \"}\";\n    },\n    host: function host(node) {\n      return \"@host\" + \"{\" + visit(node.rules) + \"}\";\n    },\n    import: function _import(node) {\n      return \"@import \" + node.name + \";\";\n    },\n    keyframe: function keyframe(node) {\n      return node.values.join(\",\") + \"{\" + visit(node.declarations) + \"}\";\n    },\n    keyframes: function keyframes(node) {\n      return \"@\" + (node.vendor || \"\") + \"keyframes \" + node.name + \"{\" + visit(node.keyframes) + \"}\";\n    },\n    media: function media(node) {\n      return \"@media \" + node.media + \"{\" + visit(node.rules) + \"}\";\n    },\n    namespace: function namespace(node) {\n      return \"@namespace \" + node.name + \";\";\n    },\n    page: function page(node) {\n      return \"@page \" + (node.selectors.length ? node.selectors.join(\", \") : \"\") + \"{\" + visit(node.declarations) + \"}\";\n    },\n    \"page-margin-box\": function pageMarginBox(node) {\n      return \"@\" + node.name + \"{\" + visit(node.declarations) + \"}\";\n    },\n    rule: function rule(node) {\n      var decls = node.declarations;\n      if (decls.length) {\n        return node.selectors.join(\",\") + \"{\" + visit(decls) + \"}\";\n      }\n    },\n    supports: function supports(node) {\n      return \"@supports \" + node.supports + \"{\" + visit(node.rules) + \"}\";\n    }\n  };\n  function visit(nodes) {\n    var buf = \"\";\n    for (var i = 0; i < nodes.length; i++) {\n      var n = nodes[i];\n      if (cb) {\n        cb(n);\n      }\n      var txt = renderMethods[n.type](n);\n      if (txt) {\n        buf += txt;\n        if (txt.length && n.selectors) {\n          buf += delim;\n        }\n      }\n    }\n    return buf;\n  }\n  return visit(tree.stylesheet.rules);\n}\nfunction walkCss(node, fn) {\n  node.rules.forEach(function (rule) {\n    if (rule.rules) {\n      walkCss(rule, fn);\n      return;\n    }\n    if (rule.keyframes) {\n      rule.keyframes.forEach(function (keyframe) {\n        if (keyframe.type === \"keyframe\") {\n          fn(keyframe.declarations, rule);\n        }\n      });\n      return;\n    }\n    if (!rule.declarations) {\n      return;\n    }\n    fn(rule.declarations, node);\n  });\n}\nvar VAR_PROP_IDENTIFIER = \"--\";\nvar VAR_FUNC_IDENTIFIER = \"var\";\nfunction transformCss(cssData) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var defaults = {\n    preserveStatic: true,\n    preserveVars: false,\n    variables: {},\n    onWarning: function onWarning() {}\n  };\n  var settings = _extends({}, defaults, options);\n  if (typeof cssData === \"string\") {\n    cssData = parseCss(cssData, settings);\n  }\n  walkCss(cssData.stylesheet, function (declarations, node) {\n    for (var i = 0; i < declarations.length; i++) {\n      var decl = declarations[i];\n      var type = decl.type;\n      var prop = decl.property;\n      var value = decl.value;\n      if (type !== \"declaration\") {\n        continue;\n      }\n      if (!settings.preserveVars && prop && prop.indexOf(VAR_PROP_IDENTIFIER) === 0) {\n        declarations.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (value.indexOf(VAR_FUNC_IDENTIFIER + \"(\") !== -1) {\n        var resolvedValue = resolveValue(value, settings);\n        if (resolvedValue !== decl.value) {\n          resolvedValue = fixNestedCalc(resolvedValue);\n          if (!settings.preserveVars) {\n            decl.value = resolvedValue;\n          } else {\n            declarations.splice(i, 0, {\n              type: type,\n              property: prop,\n              value: resolvedValue\n            });\n            i++;\n          }\n        }\n      }\n    }\n  });\n  return stringifyCss(cssData);\n}\nfunction fixNestedCalc(value) {\n  var reCalcVal = /calc\\(([^)]+)\\)/g;\n  (value.match(reCalcVal) || []).forEach(function (match) {\n    var newVal = \"calc\".concat(match.split(\"calc\").join(\"\"));\n    value = value.replace(match, newVal);\n  });\n  return value;\n}\nfunction resolveValue(value) {\n  var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var __recursiveFallback = arguments.length > 2 ? arguments[2] : undefined;\n  if (value.indexOf(\"var(\") === -1) {\n    return value;\n  }\n  var valueData = balancedMatch(\"(\", \")\", value);\n  function resolveFunc(value) {\n    var name = value.split(\",\")[0].replace(/[\\s\\n\\t]/g, \"\");\n    var fallback = (value.match(/(?:\\s*,\\s*){1}(.*)?/) || [])[1];\n    var match = Object.prototype.hasOwnProperty.call(settings.variables, name) ? String(settings.variables[name]) : undefined;\n    var replacement = match || (fallback ? String(fallback) : undefined);\n    var unresolvedFallback = __recursiveFallback || value;\n    if (!match) {\n      settings.onWarning('variable \"'.concat(name, '\" is undefined'));\n    }\n    if (replacement && replacement !== \"undefined\" && replacement.length > 0) {\n      return resolveValue(replacement, settings, unresolvedFallback);\n    } else {\n      return \"var(\".concat(unresolvedFallback, \")\");\n    }\n  }\n  if (!valueData) {\n    if (value.indexOf(\"var(\") !== -1) {\n      settings.onWarning('missing closing \")\" in the value \"'.concat(value, '\"'));\n    }\n    return value;\n  } else if (valueData.pre.slice(-3) === \"var\") {\n    var isEmptyVarFunc = valueData.body.trim().length === 0;\n    if (isEmptyVarFunc) {\n      settings.onWarning(\"var() must contain a non-whitespace string\");\n      return value;\n    } else {\n      return valueData.pre.slice(0, -3) + resolveFunc(valueData.body) + resolveValue(valueData.post, settings);\n    }\n  } else {\n    return valueData.pre + \"(\".concat(resolveValue(valueData.body, settings), \")\") + resolveValue(valueData.post, settings);\n  }\n}\nvar isBrowser = typeof window !== \"undefined\";\nvar isNativeSupport = isBrowser && window.CSS && window.CSS.supports && window.CSS.supports(\"(--a: 0)\");\nvar counters = {\n  group: 0,\n  job: 0\n};\nvar defaults = {\n  rootElement: isBrowser ? document : null,\n  shadowDOM: false,\n  include: \"style,link[rel=stylesheet]\",\n  exclude: \"\",\n  variables: {},\n  onlyLegacy: true,\n  preserveStatic: true,\n  preserveVars: false,\n  silent: false,\n  updateDOM: true,\n  updateURLs: true,\n  watch: null,\n  onBeforeSend: function onBeforeSend() {},\n  onError: function onError() {},\n  onWarning: function onWarning() {},\n  onSuccess: function onSuccess() {},\n  onComplete: function onComplete() {},\n  onFinally: function onFinally() {}\n};\nvar regex = {\n  cssComments: /\\/\\*[\\s\\S]+?\\*\\//g,\n  cssKeyframes: /@(?:-\\w*-)?keyframes/,\n  cssMediaQueries: /@media[^{]+\\{([\\s\\S]+?})\\s*}/g,\n  cssUrls: /url\\((?!['\"]?(?:data|http|\\/\\/):)['\"]?([^'\")]*)['\"]?\\)/g,\n  cssVarDeclRules: /(?::(?:root|host)(?![.:#(])[\\s,]*[^{]*{\\s*[^}]*})/g,\n  cssVarDecls: /(?:[\\s;]*)(-{2}\\w[\\w-]*)(?:\\s*:\\s*)([^;]*);/g,\n  cssVarFunc: /var\\(\\s*--[\\w-]/,\n  cssVars: /(?:(?::(?:root|host)(?![.:#(])[\\s,]*[^{]*{\\s*[^;]*;*\\s*)|(?:var\\(\\s*))(--[^:)]+)(?:\\s*[:)])/\n};\nvar variableStore = {\n  dom: {},\n  job: {},\n  user: {}\n};\nvar cssVarsIsRunning = false;\nvar cssVarsObserver = null;\nvar cssVarsSrcNodeCount = 0;\nvar debounceTimer = null;\nvar isShadowDOMReady = false;\n\n/**\n * Fetches, parses, and transforms CSS custom properties from specified\n * <style> and <link> elements into static values, then appends a new <style>\n * element with static values to the DOM to provide CSS custom property\n * compatibility for legacy browsers. Also provides a single interface for\n * live updates of runtime values in both modern and legacy browsers.\n *\n * @preserve\n * @param {object}   [options] Options object\n * @param {object}   [options.rootElement=document] Root element to traverse for\n *                   <link> and <style> nodes\n * @param {boolean}  [options.shadowDOM=false] Determines if shadow DOM <link>\n *                   and <style> nodes will be processed.\n * @param {string}   [options.include=\"style,link[rel=stylesheet]\"] CSS selector\n *                   matching <link re=\"stylesheet\"> and <style> nodes to\n *                   process\n * @param {string}   [options.exclude] CSS selector matching <link\n *                   rel=\"stylehseet\"> and <style> nodes to exclude from those\n *                   matches by options.include\n * @param {object}   [options.variables] A map of custom property name/value\n *                   pairs. Property names can omit or include the leading\n *                   double-hyphen (—), and values specified will override\n *                   previous values\n * @param {boolean}  [options.onlyLegacy=true] Determines if the ponyfill will\n *                   only generate legacy-compatible CSS in browsers that lack\n *                   native support (i.e., legacy browsers)\n * @param {boolean}  [options.preserveStatic=true] Determines if CSS\n *                   declarations that do not reference a custom property will\n *                   be preserved in the transformed CSS\n * @param {boolean}  [options.preserveVars=false] Determines if CSS custom\n *                   property declarations will be preserved in the transformed\n *                   CSS\n * @param {boolean}  [options.silent=false] Determines if warning and error\n *                   messages will be displayed on the console\n * @param {boolean}  [options.updateDOM=true] Determines if the ponyfill will\n *                   update the DOM after processing CSS custom properties\n * @param {boolean}  [options.updateURLs=true] Determines if relative url()\n *                   paths will be converted to absolute urls in external CSS\n * @param {boolean}  [options.watch=false] Determines if a MutationObserver will\n *                   be created that will execute the ponyfill when a <link> or\n *                   <style> DOM mutation is observed\n * @param {function} [options.onBeforeSend] Callback before XHR is sent. Passes\n *                   1) the XHR object, 2) source node reference, and 3) the\n *                   source URL as arguments\n * @param {function} [options.onError] Callback after a CSS parsing error has\n *                   occurred or an XHR request has failed. Passes 1) an error\n *                   message, and 2) source node reference, 3) xhr, and 4 url as\n *                   arguments.\n * @param {function} [options.onWarning] Callback after each CSS parsing warning\n *                   has occurred. Passes 1) a warning message as an argument.\n * @param {function} [options.onSuccess] Callback after CSS data has been\n *                   collected from each node and before CSS custom properties\n *                   have been transformed. Allows modifying the CSS data before\n *                   it is transformed by returning any string value (or false\n *                   to skip). Passes 1) CSS text, 2) source node reference, and\n *                   3) the source URL as arguments.\n * @param {function} [options.onComplete] Callback after all CSS has been\n *                   processed, legacy-compatible CSS has been generated, and\n *                   (optionally) the DOM has been updated. Passes 1) a CSS\n *                   string with CSS variable values resolved, 2) an array of\n *                   output <style> node references that have been appended to\n *                   the DOM, 3) an object containing all custom properies names\n *                   and values, and 4) the ponyfill execution time in\n *                   milliseconds.\n * @param {function} [options.onFinally] Callback in modern and legacy browsers\n *                   after the ponyfill has finished all tasks. Passes 1) a\n *                   boolean indicating if the last ponyfill call resulted in a\n *                   style change, 2) a boolean indicating if the current\n *                   browser provides native support for CSS custom properties,\n *                   and 3) the ponyfill execution time in milliseconds.\n * @example\n *\n *   cssVars({\n *     rootElement   : document,\n *     shadowDOM     : false,\n *     include       : 'style,link[rel=\"stylesheet\"]',\n *     exclude       : '',\n *     variables     : {},\n *     onlyLegacy    : true,\n *     preserveStatic: true,\n *     preserveVars  : false,\n *     silent        : false,\n *     updateDOM     : true,\n *     updateURLs    : true,\n *     watch         : false,\n *     onBeforeSend(xhr, node, url) {},\n *     onError(message, node, xhr, url) {},\n *     onWarning(message) {},\n *     onSuccess(cssText, node, url) {},\n *     onComplete(cssText, styleNode, cssVariables, benchmark) {},\n *     onFinally(hasChanged, hasNativeSupport, benchmark)\n *   });\n */\nfunction cssVars() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var msgPrefix = \"cssVars(): \";\n  var settings = _extends({}, defaults, options);\n  function handleError(message, sourceNode, xhr, url) {\n    if (!settings.silent && window.console) {\n      console.error(\"\".concat(msgPrefix).concat(message, \"\\n\"), sourceNode);\n    }\n    settings.onError(message, sourceNode, xhr, url);\n  }\n  function handleWarning(message) {\n    if (!settings.silent && window.console) {\n      console.warn(\"\".concat(msgPrefix).concat(message));\n    }\n    settings.onWarning(message);\n  }\n  function handleFinally(hasChanged) {\n    settings.onFinally(Boolean(hasChanged), isNativeSupport, getTimeStamp() - settings.__benchmark);\n  }\n  if (!isBrowser) {\n    return;\n  }\n  if (settings.watch) {\n    settings.watch = defaults.watch;\n    addMutationObserver(settings);\n    cssVars(settings);\n    return;\n  } else if (settings.watch === false && cssVarsObserver) {\n    cssVarsObserver.disconnect();\n    cssVarsObserver = null;\n  }\n  if (!settings.__benchmark) {\n    if (cssVarsIsRunning === settings.rootElement) {\n      cssVarsDebounced(options);\n      return;\n    }\n    var srcNodes = [].slice.call(settings.rootElement.querySelectorAll('[data-cssvars]:not([data-cssvars=\"out\"])'));\n    settings.__benchmark = getTimeStamp();\n    settings.exclude = [cssVarsObserver ? '[data-cssvars]:not([data-cssvars=\"\"])' : '[data-cssvars=\"out\"]', \"link[disabled]:not([data-cssvars])\", settings.exclude].filter(function (selector) {\n      return selector;\n    }).join(\",\");\n    settings.variables = fixVarNames(settings.variables);\n    srcNodes.forEach(function (srcNode) {\n      var hasStyleCache = srcNode.nodeName.toLowerCase() === \"style\" && srcNode.__cssVars.text;\n      var hasStyleChanged = hasStyleCache && srcNode.textContent !== srcNode.__cssVars.text;\n      if (hasStyleCache && hasStyleChanged) {\n        srcNode.sheet && (srcNode.sheet.disabled = false);\n        srcNode.setAttribute(\"data-cssvars\", \"\");\n      }\n    });\n    if (!cssVarsObserver) {\n      var outNodes = [].slice.call(settings.rootElement.querySelectorAll('[data-cssvars=\"out\"]'));\n      outNodes.forEach(function (outNode) {\n        var dataGroup = outNode.getAttribute(\"data-cssvars-group\");\n        var srcNode = dataGroup ? settings.rootElement.querySelector('[data-cssvars=\"src\"][data-cssvars-group=\"'.concat(dataGroup, '\"]')) : null;\n        if (!srcNode) {\n          outNode.parentNode.removeChild(outNode);\n        }\n      });\n      if (cssVarsSrcNodeCount && srcNodes.length < cssVarsSrcNodeCount) {\n        cssVarsSrcNodeCount = srcNodes.length;\n        variableStore.dom = {};\n      }\n    }\n  }\n  if (document.readyState !== \"loading\") {\n    if (isNativeSupport && settings.onlyLegacy) {\n      var hasVarChange = false;\n      if (settings.updateDOM) {\n        var targetElm = settings.rootElement.host || (settings.rootElement === document ? document.documentElement : settings.rootElement);\n        Object.keys(settings.variables).forEach(function (key) {\n          var varValue = settings.variables[key];\n          hasVarChange = hasVarChange || varValue !== getComputedStyle(targetElm).getPropertyValue(key);\n          targetElm.style.setProperty(key, varValue);\n        });\n      }\n      handleFinally(hasVarChange);\n    } else if (!isShadowDOMReady && (settings.shadowDOM || settings.rootElement.shadowRoot || settings.rootElement.host)) {\n      getCssData({\n        rootElement: defaults.rootElement,\n        include: defaults.include,\n        exclude: settings.exclude,\n        skipDisabled: false,\n        onSuccess: function onSuccess(cssText, node, url) {\n          var isUserDisabled = (node.sheet || {}).disabled && !node.__cssVars;\n          if (isUserDisabled) {\n            return false;\n          }\n          cssText = cssText.replace(regex.cssComments, \"\").replace(regex.cssMediaQueries, \"\");\n          cssText = (cssText.match(regex.cssVarDeclRules) || []).join(\"\");\n          return cssText || false;\n        },\n        onComplete: function onComplete(cssText, cssArray, nodeArray) {\n          parseVars(cssText, {\n            store: variableStore.dom,\n            onWarning: handleWarning\n          });\n          isShadowDOMReady = true;\n          cssVars(settings);\n        }\n      });\n    } else {\n      cssVarsIsRunning = settings.rootElement;\n      getCssData({\n        rootElement: settings.rootElement,\n        include: settings.include,\n        exclude: settings.exclude,\n        skipDisabled: false,\n        onBeforeSend: settings.onBeforeSend,\n        onError: function onError(xhr, node, url) {\n          var responseUrl = xhr.responseURL || getFullUrl(url, location.href);\n          var statusText = xhr.statusText ? \"(\".concat(xhr.statusText, \")\") : \"Unspecified Error\" + (xhr.status === 0 ? \" (possibly CORS related)\" : \"\");\n          var errorMsg = \"CSS XHR Error: \".concat(responseUrl, \" \").concat(xhr.status, \" \").concat(statusText);\n          handleError(errorMsg, node, xhr, responseUrl);\n        },\n        onSuccess: function onSuccess(cssText, node, url) {\n          var isUserDisabled = (node.sheet || {}).disabled && !node.__cssVars;\n          if (isUserDisabled) {\n            return false;\n          }\n          var isLink = node.nodeName.toLowerCase() === \"link\";\n          var isStyleImport = node.nodeName.toLowerCase() === \"style\" && cssText !== node.textContent;\n          var returnVal = settings.onSuccess(cssText, node, url);\n          cssText = returnVal !== undefined && Boolean(returnVal) === false ? \"\" : returnVal || cssText;\n          if (settings.updateURLs && (isLink || isStyleImport)) {\n            cssText = fixRelativeCssUrls(cssText, url);\n          }\n          return cssText;\n        },\n        onComplete: function onComplete(cssText, cssArray) {\n          var nodeArray = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n          var currentVars = _extends({}, variableStore.dom, variableStore.user);\n          var hasVarChange = false;\n          variableStore.job = {};\n          nodeArray.forEach(function (node, i) {\n            var nodeCSS = cssArray[i];\n            node.__cssVars = node.__cssVars || {};\n            node.__cssVars.text = nodeCSS;\n            if (regex.cssVars.test(nodeCSS)) {\n              try {\n                var cssTree = parseCss(nodeCSS, {\n                  preserveStatic: settings.preserveStatic,\n                  removeComments: true\n                });\n                parseVars(cssTree, {\n                  parseHost: Boolean(settings.rootElement.host),\n                  store: variableStore.dom,\n                  onWarning: handleWarning\n                });\n                node.__cssVars.tree = cssTree;\n              } catch (err) {\n                handleError(err.message, node);\n              }\n            }\n          });\n          _extends(variableStore.job, variableStore.dom);\n          if (settings.updateDOM) {\n            _extends(variableStore.user, settings.variables);\n            _extends(variableStore.job, variableStore.user);\n          } else {\n            _extends(variableStore.job, variableStore.user, settings.variables);\n            _extends(currentVars, settings.variables);\n          }\n          hasVarChange = counters.job > 0 && Boolean(Object.keys(variableStore.job).length > Object.keys(currentVars).length || Boolean(Object.keys(currentVars).length && Object.keys(variableStore.job).some(function (key) {\n            return variableStore.job[key] !== currentVars[key];\n          })));\n          if (hasVarChange) {\n            resetCssNodes(settings.rootElement);\n            cssVars(settings);\n          } else {\n            var outCssArray = [];\n            var outNodeArray = [];\n            var hasKeyframesWithVars = false;\n            if (settings.updateDOM) {\n              counters.job++;\n            }\n            nodeArray.forEach(function (node, i) {\n              var isSkip = !node.__cssVars.tree;\n              if (node.__cssVars.tree) {\n                try {\n                  transformCss(node.__cssVars.tree, _extends({}, settings, {\n                    variables: variableStore.job,\n                    onWarning: handleWarning\n                  }));\n                  var outCss = stringifyCss(node.__cssVars.tree);\n                  if (settings.updateDOM) {\n                    var nodeCSS = cssArray[i];\n                    var hasCSSVarFunc = regex.cssVarFunc.test(nodeCSS);\n                    if (!node.getAttribute(\"data-cssvars\")) {\n                      node.setAttribute(\"data-cssvars\", \"src\");\n                    }\n                    if (outCss.length && hasCSSVarFunc) {\n                      var dataGroup = node.getAttribute(\"data-cssvars-group\") || ++counters.group;\n                      var outCssNoSpaces = outCss.replace(/\\s/g, \"\");\n                      var outNode = settings.rootElement.querySelector('[data-cssvars=\"out\"][data-cssvars-group=\"'.concat(dataGroup, '\"]')) || document.createElement(\"style\");\n                      hasKeyframesWithVars = hasKeyframesWithVars || regex.cssKeyframes.test(outCss);\n                      if (settings.preserveStatic) {\n                        node.sheet && (node.sheet.disabled = true);\n                      }\n                      if (!outNode.hasAttribute(\"data-cssvars\")) {\n                        outNode.setAttribute(\"data-cssvars\", \"out\");\n                      }\n                      if (outCssNoSpaces === node.textContent.replace(/\\s/g, \"\")) {\n                        isSkip = true;\n                        if (outNode && outNode.parentNode) {\n                          node.removeAttribute(\"data-cssvars-group\");\n                          outNode.parentNode.removeChild(outNode);\n                        }\n                      } else if (outCssNoSpaces !== outNode.textContent.replace(/\\s/g, \"\")) {\n                        [node, outNode].forEach(function (n) {\n                          n.setAttribute(\"data-cssvars-job\", counters.job);\n                          n.setAttribute(\"data-cssvars-group\", dataGroup);\n                        });\n                        outNode.textContent = outCss;\n                        outCssArray.push(outCss);\n                        outNodeArray.push(outNode);\n                        if (!outNode.parentNode) {\n                          node.parentNode.insertBefore(outNode, node.nextSibling);\n                        }\n                      }\n                    }\n                  } else {\n                    if (node.textContent.replace(/\\s/g, \"\") !== outCss) {\n                      outCssArray.push(outCss);\n                    }\n                  }\n                } catch (err) {\n                  handleError(err.message, node);\n                }\n              }\n              if (isSkip) {\n                node.setAttribute(\"data-cssvars\", \"skip\");\n              }\n              if (!node.hasAttribute(\"data-cssvars-job\")) {\n                node.setAttribute(\"data-cssvars-job\", counters.job);\n              }\n            });\n            cssVarsSrcNodeCount = settings.rootElement.querySelectorAll('[data-cssvars]:not([data-cssvars=\"out\"])').length;\n            if (settings.shadowDOM) {\n              var elms = [].concat(settings.rootElement).concat([].slice.call(settings.rootElement.querySelectorAll(\"*\")));\n              for (var i = 0, elm; elm = elms[i]; ++i) {\n                if (elm.shadowRoot && elm.shadowRoot.querySelector(\"style\")) {\n                  var shadowSettings = _extends({}, settings, {\n                    rootElement: elm.shadowRoot\n                  });\n                  cssVars(shadowSettings);\n                }\n              }\n            }\n            if (settings.updateDOM && hasKeyframesWithVars) {\n              fixKeyframes(settings.rootElement);\n            }\n            cssVarsIsRunning = false;\n            settings.onComplete(outCssArray.join(\"\"), outNodeArray, JSON.parse(JSON.stringify(variableStore.job)), getTimeStamp() - settings.__benchmark);\n            handleFinally(outNodeArray.length);\n          }\n        }\n      });\n    }\n  } else {\n    document.addEventListener(\"DOMContentLoaded\", function init(evt) {\n      cssVars(options);\n      document.removeEventListener(\"DOMContentLoaded\", init);\n    });\n  }\n}\ncssVars.reset = function () {\n  counters.job = 0;\n  counters.group = 0;\n  cssVarsIsRunning = false;\n  if (cssVarsObserver) {\n    cssVarsObserver.disconnect();\n    cssVarsObserver = null;\n  }\n  cssVarsSrcNodeCount = 0;\n  debounceTimer = null;\n  isShadowDOMReady = false;\n  for (var prop in variableStore) {\n    variableStore[prop] = {};\n  }\n};\nfunction addMutationObserver(settings) {\n  function isDisabled(node) {\n    var isDisabledAttr = isLink(node) && node.hasAttribute(\"disabled\");\n    var isDisabledSheet = (node.sheet || {}).disabled;\n    return isDisabledAttr || isDisabledSheet;\n  }\n  function isLink(node) {\n    var isStylesheet = node.nodeName.toLowerCase() === \"link\" && (node.getAttribute(\"rel\") || \"\").indexOf(\"stylesheet\") !== -1;\n    return isStylesheet;\n  }\n  function isStyle(node) {\n    return node.nodeName.toLowerCase() === \"style\";\n  }\n  function isValidAttributeMutation(mutation) {\n    var isValid = false;\n    if (mutation.type === \"attributes\" && isLink(mutation.target) && !isDisabled(mutation.target)) {\n      var isEnabledMutation = mutation.attributeName === \"disabled\";\n      var isHrefMutation = mutation.attributeName === \"href\";\n      var isSkipNode = mutation.target.getAttribute(\"data-cssvars\") === \"skip\";\n      var isSrcNode = mutation.target.getAttribute(\"data-cssvars\") === \"src\";\n      if (isEnabledMutation) {\n        isValid = !isSkipNode && !isSrcNode;\n      } else if (isHrefMutation) {\n        if (isSkipNode) {\n          mutation.target.setAttribute(\"data-cssvars\", \"\");\n        } else if (isSrcNode) {\n          resetCssNodes(settings.rootElement, true);\n        }\n        isValid = true;\n      }\n    }\n    return isValid;\n  }\n  function isValidStyleTextMutation(mutation) {\n    var isValid = false;\n    if (mutation.type === \"childList\") {\n      var isStyleElm = isStyle(mutation.target);\n      var isOutNode = mutation.target.getAttribute(\"data-cssvars\") === \"out\";\n      isValid = isStyleElm && !isOutNode;\n    }\n    return isValid;\n  }\n  function isValidAddMutation(mutation) {\n    var isValid = false;\n    if (mutation.type === \"childList\") {\n      isValid = [].slice.call(mutation.addedNodes).some(function (node) {\n        var isElm = node.nodeType === 1;\n        var hasAttr = isElm && node.hasAttribute(\"data-cssvars\");\n        var isStyleWithVars = isStyle(node) && regex.cssVars.test(node.textContent);\n        var isValid = !hasAttr && (isLink(node) || isStyleWithVars);\n        return isValid && !isDisabled(node);\n      });\n    }\n    return isValid;\n  }\n  function isValidRemoveMutation(mutation) {\n    var isValid = false;\n    if (mutation.type === \"childList\") {\n      isValid = [].slice.call(mutation.removedNodes).some(function (node) {\n        var isElm = node.nodeType === 1;\n        var isOutNode = isElm && node.getAttribute(\"data-cssvars\") === \"out\";\n        var isSrcNode = isElm && node.getAttribute(\"data-cssvars\") === \"src\";\n        var isValid = isSrcNode;\n        if (isSrcNode || isOutNode) {\n          var dataGroup = node.getAttribute(\"data-cssvars-group\");\n          var orphanNode = settings.rootElement.querySelector('[data-cssvars-group=\"'.concat(dataGroup, '\"]'));\n          if (isSrcNode) {\n            resetCssNodes(settings.rootElement, true);\n          }\n          if (orphanNode) {\n            orphanNode.parentNode.removeChild(orphanNode);\n          }\n        }\n        return isValid;\n      });\n    }\n    return isValid;\n  }\n  if (!window.MutationObserver) {\n    return;\n  }\n  if (cssVarsObserver) {\n    cssVarsObserver.disconnect();\n    cssVarsObserver = null;\n  }\n  cssVarsObserver = new MutationObserver(function (mutations) {\n    var hasValidMutation = mutations.some(function (mutation) {\n      return isValidAttributeMutation(mutation) || isValidStyleTextMutation(mutation) || isValidAddMutation(mutation) || isValidRemoveMutation(mutation);\n    });\n    if (hasValidMutation) {\n      cssVars(settings);\n    }\n  });\n  cssVarsObserver.observe(document.documentElement, {\n    attributes: true,\n    attributeFilter: [\"disabled\", \"href\"],\n    childList: true,\n    subtree: true\n  });\n}\nfunction cssVarsDebounced(settings) {\n  var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n  clearTimeout(debounceTimer);\n  debounceTimer = setTimeout(function () {\n    settings.__benchmark = null;\n    cssVars(settings);\n  }, delay);\n}\nfunction fixKeyframes(rootElement) {\n  var animationNameProp = [\"animation-name\", \"-moz-animation-name\", \"-webkit-animation-name\"].filter(function (prop) {\n    return getComputedStyle(document.body)[prop];\n  })[0];\n  if (animationNameProp) {\n    var allNodes = [].slice.call(rootElement.querySelectorAll(\"*\"));\n    var keyframeNodes = [];\n    var nameMarker = \"__CSSVARSPONYFILL-KEYFRAMES__\";\n    for (var i = 0, len = allNodes.length; i < len; i++) {\n      var node = allNodes[i];\n      var animationName = getComputedStyle(node)[animationNameProp];\n      if (animationName !== \"none\") {\n        node.style[animationNameProp] += nameMarker;\n        keyframeNodes.push(node);\n      }\n    }\n    void document.body.offsetHeight;\n    for (var _i = 0, _len = keyframeNodes.length; _i < _len; _i++) {\n      var nodeStyle = keyframeNodes[_i].style;\n      nodeStyle[animationNameProp] = nodeStyle[animationNameProp].replace(nameMarker, \"\");\n    }\n  }\n}\nfunction fixRelativeCssUrls(cssText, baseUrl) {\n  var cssUrls = cssText.replace(regex.cssComments, \"\").match(regex.cssUrls) || [];\n  cssUrls.forEach(function (cssUrl) {\n    var oldUrl = cssUrl.replace(regex.cssUrls, \"$1\");\n    var newUrl = getFullUrl(oldUrl, baseUrl);\n    cssText = cssText.replace(cssUrl, cssUrl.replace(oldUrl, newUrl));\n  });\n  return cssText;\n}\nfunction fixVarNames() {\n  var varObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var reLeadingHyphens = /^-{2}/;\n  return Object.keys(varObj).reduce(function (obj, value) {\n    var key = reLeadingHyphens.test(value) ? value : \"--\".concat(value.replace(/^-+/, \"\"));\n    obj[key] = varObj[value];\n    return obj;\n  }, {});\n}\nfunction getFullUrl(url) {\n  var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : location.href;\n  var d = document.implementation.createHTMLDocument(\"\");\n  var b = d.createElement(\"base\");\n  var a = d.createElement(\"a\");\n  d.head.appendChild(b);\n  d.body.appendChild(a);\n  b.href = base;\n  a.href = url;\n  return a.href;\n}\nfunction getTimeStamp() {\n  return isBrowser && (window.performance || {}).now ? window.performance.now() : new Date().getTime();\n}\nfunction resetCssNodes(rootElement) {\n  var resetDOMVariableStore = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var resetNodes = [].slice.call(rootElement.querySelectorAll('[data-cssvars=\"skip\"],[data-cssvars=\"src\"]'));\n  resetNodes.forEach(function (node) {\n    return node.setAttribute(\"data-cssvars\", \"\");\n  });\n  if (resetDOMVariableStore) {\n    variableStore.dom = {};\n  }\n}\nexport { cssVars as default };","map":{"version":3,"mappings":"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","names":["getUrls","urls","options","settings","mimeType","onBeforeSend","Function","prototype","onSuccess","onError","onComplete","urlArray","Array","isArray","urlQueue","apply","length","map","isValidCss","text","isString","isHTML","trim","charAt","xhr","urlIndex","responseText","returnVal","indexOf","parser","document","createElement","forEach","url","i","setAttribute","href","String","isIElte9","Boolean","all","window","atob","isIElte9CORS","host","split","location","isSameProtocol","protocol","xdr","XDomainRequest","open","timeout","onprogress","ontimeout","onload","onerror","err","setTimeout","send","console","warn","XMLHttpRequest","overrideMimeType","onreadystatechange","readyState","status","balancedMatch","balanced","a","b","str","RegExp","maybeMatch","r","range","start","end","pre","slice","body","post","reg","m","match","begs","beg","left","right","result","ai","bi","push","pop","parseCss","css","defaults","preserveStatic","removeComments","_extends","errors","error","msg","Error","re","exec","close","whitespace","comment","type","comments","cmnts","c","selector","selectorItems","hasComment","test","replace","hasCommaInQuotes","hasMultipleSelectors","s","declaration","at_rule","comment_regexp","prop","val","ret","property","value","declarations","d","decls","concat","keyframe","vals","values","at_keyframes","vendor","name","frame","frames","keyframes","at_page","sel","selectors","at_page_margin_box","at_fontface","at_supports","supports","rules","at_host","at_media","media","at_custom_m","at_document","at_x","hasVarFunc","some","decl","arr","obj","rule","hasVarDecl","filter","core","node","stylesheet","parseVars","cssData","parseHost","store","onWarning","reVarDeclSelectors","stringifyCss","tree","delim","cb","arguments","renderMethods","charset","visit","import","join","namespace","page","nodes","buf","n","txt","walkCss","fn","VAR_PROP_IDENTIFIER","VAR_FUNC_IDENTIFIER","transformCss","preserveVars","variables","splice","resolvedValue","resolveValue","fixNestedCalc","reCalcVal","newVal","__recursiveFallback","valueData","resolveFunc","fallback","Object","hasOwnProperty","call","undefined","replacement","unresolvedFallback","isEmptyVarFunc","isBrowser","isNativeSupport","CSS","counters","group","job","rootElement","shadowDOM","include","exclude","onlyLegacy","silent","updateDOM","updateURLs","watch","onFinally","regex","cssComments","cssKeyframes","cssMediaQueries","cssUrls","cssVarDeclRules","cssVarDecls","cssVarFunc","cssVars","variableStore","dom","user","cssVarsIsRunning","cssVarsObserver","cssVarsSrcNodeCount","debounceTimer","isShadowDOMReady","msgPrefix","handleError","message","sourceNode","handleWarning","handleFinally","hasChanged","getTimeStamp","__benchmark","addMutationObserver","disconnect","cssVarsDebounced","srcNodes","querySelectorAll","fixVarNames","hasStyleCache","srcNode","nodeName","toLowerCase","__cssVars","hasStyleChanged","textContent","sheet","disabled","outNodes","dataGroup","outNode","getAttribute","querySelector","parentNode","removeChild","hasVarChange","targetElm","documentElement","keys","varValue","key","getComputedStyle","getPropertyValue","style","setProperty","shadowRoot","getCssData","skipDisabled","cssText","isUserDisabled","cssArray","nodeArray","responseUrl","responseURL","getFullUrl","statusText","errorMsg","isLink","isStyleImport","fixRelativeCssUrls","currentVars","nodeCSS","cssTree","resetCssNodes","outCssArray","outNodeArray","hasKeyframesWithVars","isSkip","outCss","hasCSSVarFunc","outCssNoSpaces","hasAttribute","removeAttribute","insertBefore","nextSibling","elms","elm","shadowSettings","fixKeyframes","JSON","parse","stringify","addEventListener","init","evt","removeEventListener","reset","isDisabled","isDisabledAttr","isDisabledSheet","isStylesheet","isStyle","isValidAttributeMutation","mutation","isValid","target","isEnabledMutation","attributeName","isHrefMutation","isSkipNode","isSrcNode","isValidStyleTextMutation","isStyleElm","isOutNode","isValidAddMutation","addedNodes","isElm","nodeType","hasAttr","isStyleWithVars","isValidRemoveMutation","removedNodes","orphanNode","MutationObserver","mutations","hasValidMutation","observe","attributes","attributeFilter","childList","subtree","delay","clearTimeout","animationNameProp","allNodes","keyframeNodes","nameMarker","len","animationName","offsetHeight","nodeStyle","baseUrl","oldUrl","cssUrl","newUrl","varObj","reLeadingHyphens","reduce","base","implementation","createHTMLDocument","head","appendChild","performance","now","Date","getTime","resetDOMVariableStore","resetNodes"],"sources":["C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\css-vars-ponyfill\\node_modules\\get-css-data\\dist\\get-css-data.esm.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\css-vars-ponyfill\\node_modules\\balanced-match\\index.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\css-vars-ponyfill\\src\\parse-css.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\css-vars-ponyfill\\src\\parse-vars.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\css-vars-ponyfill\\src\\stringify-css.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\css-vars-ponyfill\\src\\walk-css.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\css-vars-ponyfill\\src\\transform-css.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\css-vars-ponyfill\\src\\index.js"],"sourcesContent":["/*!\n * get-css-data\n * v2.1.0\n * https://github.com/jhildenbiddle/get-css-data\n * (c) 2018-2022 John Hildenbiddle <http://hildenbiddle.com>\n * MIT license\n */\nfunction getUrls(urls) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var settings = {\n        mimeType: options.mimeType || null,\n        onBeforeSend: options.onBeforeSend || Function.prototype,\n        onSuccess: options.onSuccess || Function.prototype,\n        onError: options.onError || Function.prototype,\n        onComplete: options.onComplete || Function.prototype\n    };\n    var urlArray = Array.isArray(urls) ? urls : [ urls ];\n    var urlQueue = Array.apply(null, Array(urlArray.length)).map((function(x) {\n        return null;\n    }));\n    function isValidCss(text) {\n        var isString = typeof text === \"string\";\n        var isHTML = isString && text.trim().charAt(0) === \"<\";\n        return isString && !isHTML;\n    }\n    function onError(xhr, urlIndex) {\n        settings.onError(xhr, urlArray[urlIndex], urlIndex);\n    }\n    function onSuccess(responseText, urlIndex) {\n        var returnVal = settings.onSuccess(responseText, urlArray[urlIndex], urlIndex);\n        responseText = returnVal === false ? \"\" : returnVal || responseText;\n        urlQueue[urlIndex] = responseText;\n        if (urlQueue.indexOf(null) === -1) {\n            settings.onComplete(urlQueue);\n        }\n    }\n    var parser = document.createElement(\"a\");\n    urlArray.forEach((function(url, i) {\n        parser.setAttribute(\"href\", url);\n        parser.href = String(parser.href);\n        var isIElte9 = Boolean(document.all && !window.atob);\n        var isIElte9CORS = isIElte9 && parser.host.split(\":\")[0] !== location.host.split(\":\")[0];\n        if (isIElte9CORS) {\n            var isSameProtocol = parser.protocol === location.protocol;\n            if (isSameProtocol) {\n                var xdr = new XDomainRequest;\n                xdr.open(\"GET\", url);\n                xdr.timeout = 0;\n                xdr.onprogress = Function.prototype;\n                xdr.ontimeout = Function.prototype;\n                xdr.onload = function() {\n                    var text = xdr.responseText;\n                    if (isValidCss(text)) {\n                        onSuccess(text, i);\n                    } else {\n                        onError(xdr, i);\n                    }\n                };\n                xdr.onerror = function(err) {\n                    onError(xdr, i);\n                };\n                setTimeout((function() {\n                    xdr.send();\n                }), 0);\n            } else {\n                console.warn(\"Internet Explorer 9 Cross-Origin (CORS) requests must use the same protocol (\".concat(url, \")\"));\n                onError(null, i);\n            }\n        } else {\n            var xhr = new XMLHttpRequest;\n            xhr.open(\"GET\", url);\n            if (settings.mimeType && xhr.overrideMimeType) {\n                xhr.overrideMimeType(settings.mimeType);\n            }\n            settings.onBeforeSend(xhr, url, i);\n            xhr.onreadystatechange = function() {\n                if (xhr.readyState === 4) {\n                    var text = xhr.responseText;\n                    if (xhr.status < 400 && isValidCss(text)) {\n                        onSuccess(text, i);\n                    } else if (xhr.status === 0 && isValidCss(text)) {\n                        onSuccess(text, i);\n                    } else {\n                        onError(xhr, i);\n                    }\n                }\n            };\n            xhr.send();\n        }\n    }));\n}\n\n/**\n * Gets CSS data from <style> and <link> nodes (including @imports), then\n * returns data in order processed by DOM. Allows specifying nodes to\n * include/exclude and filtering CSS data using RegEx.\n *\n * @preserve\n * @param {object}   [options] The options object\n * @param {object}   [options.rootElement=document] Root element to traverse for\n *                   <link> and <style> nodes.\n * @param {string}   [options.include] CSS selector matching <link> and <style>\n *                   nodes to include\n * @param {string}   [options.exclude] CSS selector matching <link> and <style>\n *                   nodes to exclude\n * @param {object}   [options.filter] Regular expression used to filter node CSS\n *                   data. Each block of CSS data is tested against the filter,\n *                   and only matching data is included.\n * @param {boolean}  [options.skipDisabled=true] Determines if disabled\n *                   stylesheets will be skipped while collecting CSS data.\n * @param {boolean}  [options.useCSSOM=false] Determines if CSS data will be\n *                   collected from a stylesheet's runtime values instead of its\n *                   text content. This is required to get accurate CSS data\n *                   when a stylesheet has been modified using the deleteRule()\n *                   or insertRule() methods because these modifications will\n *                   not be reflected in the stylesheet's text content.\n * @param {function} [options.onBeforeSend] Callback before XHR is sent. Passes\n *                   1) the XHR object, 2) source node reference, and 3) the\n *                   source URL as arguments.\n * @param {function} [options.onSuccess] Callback on each CSS node read. Passes\n *                   1) CSS text, 2) source node reference, and 3) the source\n *                   URL as arguments.\n * @param {function} [options.onError] Callback on each error. Passes 1) the XHR\n *                   object for inspection, 2) soure node reference, and 3) the\n *                   source URL that failed (either a <link> href or an @import)\n *                   as arguments\n * @param {function} [options.onComplete] Callback after all nodes have been\n *                   processed. Passes 1) concatenated CSS text, 2) an array of\n *                   CSS text in DOM order, and 3) an array of nodes in DOM\n *                   order as arguments.\n *\n * @example\n *\n *   getCssData({\n *     rootElement : document,\n *     include     : 'style,link[rel=\"stylesheet\"]',\n *     exclude     : '[href=\"skip.css\"]',\n *     filter      : /red/,\n *     skipDisabled: true,\n *     useCSSOM    : false,\n *     onBeforeSend(xhr, node, url) {\n *       // ...\n *     }\n *     onSuccess(cssText, node, url) {\n *       // ...\n *     }\n *     onError(xhr, node, url) {\n *       // ...\n *     },\n *     onComplete(cssText, cssArray, nodeArray) {\n *       // ...\n *     }\n *   });\n */ function getCssData(options) {\n    var regex = {\n        cssComments: /\\/\\*[\\s\\S]+?\\*\\//g,\n        cssImports: /(?:@import\\s*)(?:url\\(\\s*)?(?:['\"])([^'\"]*)(?:['\"])(?:\\s*\\))?(?:[^;]*;)/g\n    };\n    var settings = {\n        rootElement: options.rootElement || document,\n        include: options.include || 'style,link[rel=\"stylesheet\"]',\n        exclude: options.exclude || null,\n        filter: options.filter || null,\n        skipDisabled: options.skipDisabled !== false,\n        useCSSOM: options.useCSSOM || false,\n        onBeforeSend: options.onBeforeSend || Function.prototype,\n        onSuccess: options.onSuccess || Function.prototype,\n        onError: options.onError || Function.prototype,\n        onComplete: options.onComplete || Function.prototype\n    };\n    var sourceNodes = Array.apply(null, settings.rootElement.querySelectorAll(settings.include)).filter((function(node) {\n        return !matchesSelector(node, settings.exclude);\n    }));\n    var cssArray = Array.apply(null, Array(sourceNodes.length)).map((function(x) {\n        return null;\n    }));\n    function handleComplete() {\n        var isComplete = cssArray.indexOf(null) === -1;\n        if (isComplete) {\n            cssArray.reduce((function(skipIndices, value, i) {\n                if (value === \"\") {\n                    skipIndices.push(i);\n                }\n                return skipIndices;\n            }), []).reverse().forEach((function(skipIndex) {\n                return [ sourceNodes, cssArray ].forEach((function(arr) {\n                    return arr.splice(skipIndex, 1);\n                }));\n            }));\n            var cssText = cssArray.join(\"\");\n            settings.onComplete(cssText, cssArray, sourceNodes);\n        }\n    }\n    function handleSuccess(cssText, cssIndex, node, sourceUrl) {\n        var returnVal = settings.onSuccess(cssText, node, sourceUrl);\n        cssText = returnVal !== undefined && Boolean(returnVal) === false ? \"\" : returnVal || cssText;\n        resolveImports(cssText, node, sourceUrl, (function(resolvedCssText, errorData) {\n            if (cssArray[cssIndex] === null) {\n                errorData.forEach((function(data) {\n                    return settings.onError(data.xhr, node, data.url);\n                }));\n                if (!settings.filter || settings.filter.test(resolvedCssText)) {\n                    cssArray[cssIndex] = resolvedCssText;\n                } else {\n                    cssArray[cssIndex] = \"\";\n                }\n                handleComplete();\n            }\n        }));\n    }\n    function parseImportData(cssText, baseUrl) {\n        var ignoreRules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n        var importData = {};\n        importData.rules = (cssText.replace(regex.cssComments, \"\").match(regex.cssImports) || []).filter((function(rule) {\n            return ignoreRules.indexOf(rule) === -1;\n        }));\n        importData.urls = importData.rules.map((function(rule) {\n            return rule.replace(regex.cssImports, \"$1\");\n        }));\n        importData.absoluteUrls = importData.urls.map((function(url) {\n            return getFullUrl(url, baseUrl);\n        }));\n        importData.absoluteRules = importData.rules.map((function(rule, i) {\n            var oldUrl = importData.urls[i];\n            var newUrl = getFullUrl(importData.absoluteUrls[i], baseUrl);\n            return rule.replace(oldUrl, newUrl);\n        }));\n        return importData;\n    }\n    function resolveImports(cssText, node, baseUrl, callbackFn) {\n        var __errorData = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n        var __errorRules = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n        var importData = parseImportData(cssText, baseUrl, __errorRules);\n        if (importData.rules.length) {\n            getUrls(importData.absoluteUrls, {\n                onBeforeSend: function onBeforeSend(xhr, url, urlIndex) {\n                    settings.onBeforeSend(xhr, node, url);\n                },\n                onSuccess: function onSuccess(cssText, url, urlIndex) {\n                    var returnVal = settings.onSuccess(cssText, node, url);\n                    cssText = returnVal === false ? \"\" : returnVal || cssText;\n                    var responseImportData = parseImportData(cssText, url, __errorRules);\n                    responseImportData.rules.forEach((function(rule, i) {\n                        cssText = cssText.replace(rule, responseImportData.absoluteRules[i]);\n                    }));\n                    return cssText;\n                },\n                onError: function onError(xhr, url, urlIndex) {\n                    __errorData.push({\n                        xhr: xhr,\n                        url: url\n                    });\n                    __errorRules.push(importData.rules[urlIndex]);\n                    resolveImports(cssText, node, baseUrl, callbackFn, __errorData, __errorRules);\n                },\n                onComplete: function onComplete(responseArray) {\n                    responseArray.forEach((function(importText, i) {\n                        cssText = cssText.replace(importData.rules[i], importText);\n                    }));\n                    resolveImports(cssText, node, baseUrl, callbackFn, __errorData, __errorRules);\n                }\n            });\n        } else {\n            callbackFn(cssText, __errorData);\n        }\n    }\n    if (sourceNodes.length) {\n        sourceNodes.forEach((function(node, i) {\n            var linkHref = node.getAttribute(\"href\");\n            var linkRel = node.getAttribute(\"rel\");\n            var isLink = node.nodeName.toLowerCase() === \"link\" && linkHref && linkRel && linkRel.toLowerCase().indexOf(\"stylesheet\") !== -1;\n            var isSkip = settings.skipDisabled === false ? false : node.disabled;\n            var isStyle = node.nodeName.toLowerCase() === \"style\";\n            if (isLink && !isSkip) {\n                var isURIScheme = linkHref.indexOf(\"data:text/css\") !== -1;\n                if (isURIScheme) {\n                    var cssText = decodeURIComponent(linkHref.substring(linkHref.indexOf(\",\") + 1));\n                    if (settings.useCSSOM) {\n                        cssText = Array.apply(null, node.sheet.cssRules).map((function(rule) {\n                            return rule.cssText;\n                        })).join(\"\");\n                    }\n                    handleSuccess(cssText, i, node, location.href);\n                } else {\n                    getUrls(linkHref, {\n                        mimeType: \"text/css\",\n                        onBeforeSend: function onBeforeSend(xhr, url, urlIndex) {\n                            settings.onBeforeSend(xhr, node, url);\n                        },\n                        onSuccess: function onSuccess(cssText, url, urlIndex) {\n                            var sourceUrl = getFullUrl(linkHref);\n                            handleSuccess(cssText, i, node, sourceUrl);\n                        },\n                        onError: function onError(xhr, url, urlIndex) {\n                            cssArray[i] = \"\";\n                            settings.onError(xhr, node, url);\n                            handleComplete();\n                        }\n                    });\n                }\n            } else if (isStyle && !isSkip) {\n                var _cssText = node.textContent;\n                if (settings.useCSSOM) {\n                    _cssText = Array.apply(null, node.sheet.cssRules).map((function(rule) {\n                        return rule.cssText;\n                    })).join(\"\");\n                }\n                handleSuccess(_cssText, i, node, location.href);\n            } else {\n                cssArray[i] = \"\";\n                handleComplete();\n            }\n        }));\n    } else {\n        settings.onComplete(\"\", []);\n    }\n}\n\nfunction getFullUrl(url, base) {\n    var d = document.implementation.createHTMLDocument(\"\");\n    var b = d.createElement(\"base\");\n    var a = d.createElement(\"a\");\n    d.head.appendChild(b);\n    d.body.appendChild(a);\n    b.href = base || document.baseURI || (document.querySelector(\"base\") || {}).href || location.href;\n    a.href = url;\n    return a.href;\n}\n\nfunction matchesSelector(elm, selector) {\n    var matches = elm.matches || elm.matchesSelector || elm.webkitMatchesSelector || elm.mozMatchesSelector || elm.msMatchesSelector || elm.oMatchesSelector;\n    return matches.call(elm, selector);\n}\n\nexport { getCssData as default };\n//# sourceMappingURL=get-css-data.esm.js.map\n","'use strict';\nmodule.exports = balanced;\nfunction balanced(a, b, str) {\n  if (a instanceof RegExp) a = maybeMatch(a, str);\n  if (b instanceof RegExp) b = maybeMatch(b, str);\n\n  var r = range(a, b, str);\n\n  return r && {\n    start: r[0],\n    end: r[1],\n    pre: str.slice(0, r[0]),\n    body: str.slice(r[0] + a.length, r[1]),\n    post: str.slice(r[1] + b.length)\n  };\n}\n\nfunction maybeMatch(reg, str) {\n  var m = str.match(reg);\n  return m ? m[0] : null;\n}\n\nbalanced.range = range;\nfunction range(a, b, str) {\n  var begs, beg, left, right, result;\n  var ai = str.indexOf(a);\n  var bi = str.indexOf(b, ai + 1);\n  var i = ai;\n\n  if (ai >= 0 && bi > 0) {\n    if(a===b) {\n      return [ai, bi];\n    }\n    begs = [];\n    left = str.length;\n\n    while (i >= 0 && !result) {\n      if (i == ai) {\n        begs.push(i);\n        ai = str.indexOf(a, i + 1);\n      } else if (begs.length == 1) {\n        result = [ begs.pop(), bi ];\n      } else {\n        beg = begs.pop();\n        if (beg < left) {\n          left = beg;\n          right = bi;\n        }\n\n        bi = str.indexOf(b, i + 1);\n      }\n\n      i = ai < bi && ai >= 0 ? ai : bi;\n    }\n\n    if (begs.length) {\n      result = [ left, right ];\n    }\n  }\n\n  return result;\n}\n","/**\n * Based on css parser/compiler by NxChg\n * https://github.com/NxtChg/pieces/tree/master/js/css_parser\n */\n\n\n// Dependencies\n// =============================================================================\nimport balanced from 'balanced-match';\n\n\n// Functions\n// =============================================================================\n/**\n * Parses CSS string and generates AST object\n *\n * @param {string}  css The CSS string to be converted to an AST\n * @param {object}  [options] Options object\n * @param {boolean} [options.preserveStatic=true] Determines if CSS\n *                  declarations that do not reference a custom property will\n *                  be preserved in the transformed CSS\n * @param {boolean} [options.removeComments=false] Remove comments from returned\n *                  object\n * @returns {object}\n */\nfunction parseCss(css, options = {}) {\n    const defaults = {\n        preserveStatic: true,\n        removeComments: false\n    };\n    const settings = Object.assign({}, defaults, options);\n    const errors   = [];\n\n    // Errors\n    // -------------------------------------------------------------------------\n    function error(msg) {\n        throw new Error(`CSS parse error: ${msg}`);\n    }\n\n    // RegEx\n    // -------------------------------------------------------------------------\n    // Match regexp and return captures\n    function match(re) {\n        const m = re.exec(css);\n\n        if (m) {\n            css = css.slice(m[0].length);\n\n            return m;\n        }\n    }\n\n    function open() {\n        return match(/^{\\s*/);\n    }\n\n    function close() {\n        return match(/^}/);\n    }\n\n    function whitespace() {\n        match(/^\\s*/);\n    }\n\n    // Comments\n    // -------------------------------------------------------------------------\n    function comment() {\n        whitespace();\n\n        if (css[0] !== '/' || css[1] !== '*') {\n            return;\n        }\n\n        let i = 2;\n\n        while (css[i] && (css[i] !== '*' || css[i + 1] !== '/')) {\n            i++;\n        }\n\n        if (!css[i]) {\n            return error('end of comment is missing');\n        }\n\n        const str = css.slice(2, i);\n\n        css = css.slice(i + 2);\n\n        return {\n            type   : 'comment',\n            comment: str\n        };\n    }\n\n    function comments() {\n        const cmnts = [];\n        let c;\n\n        while ((c = comment())) {\n            cmnts.push(c);\n        }\n\n        return settings.removeComments ? [] : cmnts;\n    }\n\n    // Selector\n    // -------------------------------------------------------------------------\n    function selector() {\n        whitespace();\n\n        while (css[0] === '}') {\n            error('extra closing bracket');\n        }\n\n        // Match selector\n        const m = match(/^((\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'|[^{])+)/);\n\n        if (m) {\n            let selector = m[0].trim();\n            let selectorItems;\n\n            const hasComment = /\\/\\*/.test(selector);\n\n            if (hasComment) {\n                // Remove comments\n                selector = selector.replace(/\\/\\*([^*]|[\\r\\n]|(\\*+([^*/]|[\\r\\n])))*\\*\\/+/g, '');\n            }\n\n            const hasCommaInQuotes = /[\"']\\w*,\\w*[\"']/.test(selector);\n\n            if (hasCommaInQuotes) {\n                // Replace comma in comma-separated lists with marker\n                selector = selector.replace(/\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'/g, function(m) {\n                    return m.replace(/,/g, '\\u200C');\n                });\n            }\n\n            const hasMultipleSelectors = /,/.test(selector);\n\n            // Create array of selectors\n            if (hasMultipleSelectors) {\n                // From comma-separated list\n                selectorItems = selector.split(/\\s*(?![^(]*\\)),\\s*/);\n            }\n            else {\n                selectorItems = [selector];\n            }\n\n            if (hasCommaInQuotes) {\n                // Restore comma in comma-separated lists\n                selectorItems = selectorItems.map(function(s) {\n                    return s.replace(/\\u200C/g, ',');\n                });\n            }\n\n            return selectorItems;\n        }\n    }\n\n    // Declarations\n    // -------------------------------------------------------------------------\n    function declaration() {\n        // Nested @ rule(s)\n        if (css[0] === '@') {\n            return at_rule();\n        }\n\n        match(/^([;\\s]*)+/); // ignore empty declarations + whitespace\n\n        const comment_regexp = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n        let prop = match(/^(\\*?[-#/*\\\\\\w.]+(\\[[0-9a-z_-]+\\])?)\\s*/);\n\n        if (!prop) {\n            return;\n        }\n\n        prop = prop[0].trim();\n\n        if (!match(/^:\\s*/)) {\n            return error('property missing \\':\\'');\n        }\n\n        // Quotes regex repeats verbatim inside and outside parentheses\n        const val = match(/^((?:\\/\\*.*?\\*\\/|'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\((\\s*'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|[^)]*?)\\s*\\)|[^};])+)/);\n        const ret = {\n            type    : 'declaration',\n            property: prop.replace(comment_regexp, ''),\n            value   : val ? val[0].replace(comment_regexp, '').trim() : ''\n        };\n\n        match(/^[;\\s]*/);\n\n        return ret;\n    }\n\n    function declarations() {\n        if (!open()) {\n            return error('missing \\'{\\'');\n        }\n\n        let d;\n        let decls = comments();\n\n        while ((d = declaration())) {\n            decls.push(d);\n            decls = decls.concat(comments());\n        }\n\n        if (!close()) {\n            return error('missing \\'}\\'');\n        }\n\n        return decls;\n    }\n\n    // Keyframes\n    // -------------------------------------------------------------------------\n    function keyframe() {\n        whitespace();\n\n        const vals = [];\n        let m;\n\n        while ((m = match(/^((\\d+\\.\\d+|\\.\\d+|\\d+)%?|[a-z]+)\\s*/))) {\n            vals.push(m[1]);\n            match(/^,\\s*/);\n        }\n\n        if (vals.length) {\n            return {\n                type        : 'keyframe',\n                values      : vals,\n                declarations: declarations()\n            };\n        }\n    }\n\n    function at_keyframes() {\n        let m = match(/^@([-\\w]+)?keyframes\\s*/);\n\n        if (!m) {\n            return;\n        }\n\n        const vendor = m[1];\n\n        m = match(/^([-\\w]+)\\s*/);\n\n        if (!m) {\n            return error('@keyframes missing name');\n        }\n\n        const name = m[1];\n\n        if (!open()) {\n            return error('@keyframes missing \\'{\\'');\n        }\n\n        let frame;\n        let frames = comments();\n\n        while ((frame = keyframe())) {\n            frames.push(frame);\n            frames = frames.concat(comments());\n        }\n\n        if (!close()) {\n            return error('@keyframes missing \\'}\\'');\n        }\n\n        return {\n            type     : 'keyframes',\n            name     : name,\n            vendor   : vendor,\n            keyframes: frames\n        };\n    }\n\n    // @ Rules\n    // -------------------------------------------------------------------------\n    function at_page() {\n        const m = match(/^@page */);\n        if (m) {\n            const sel = selector() || [];\n            return { type: 'page', selectors: sel, declarations: declarations() };\n        }\n    }\n    function at_page_margin_box() {\n        const m = match(/@(top|bottom|left|right)-(left|center|right|top|middle|bottom)-?(corner)?\\s*/);\n        if (m) {\n            const name = `${m[1]}-${m[2]}` + (m[3] ? `-${m[3]}` : '');\n            return { type: 'page-margin-box', name, declarations: declarations() };\n        }\n    }\n    function at_fontface() {\n        const m = match(/^@font-face\\s*/);\n        if (m) { return { type: 'font-face', declarations: declarations() }; }\n    }\n    function at_supports() {\n        const m = match(/^@supports *([^{]+)/);\n        if (m) { return { type: 'supports', supports: m[1].trim(), rules: rules() }; }\n    }\n    function at_host() {\n        const m = match(/^@host\\s*/);\n        if (m) { return { type: 'host', rules: rules() }; }\n    }\n    function at_media() {\n        const m = match(/^@media([^{]+)*/);\n        if (m) { return { type: 'media', media: (m[1] || '').trim(), rules: rules() }; }\n    }\n    function at_custom_m() {\n        const m = match(/^@custom-media\\s+(--[^\\s]+)\\s*([^{;]+);/);\n        if (m) { return { type: 'custom-media', name: m[1].trim(), media: m[2].trim() }; }\n    }\n    function at_document() {\n        const m = match(/^@([-\\w]+)?document *([^{]+)/);\n        if (m) { return { type: 'document', document: m[2].trim(), vendor: m[1] ? m[1].trim() : null, rules: rules() }; }\n    }\n    function at_x() {\n        const m = match(/^@(import|charset|namespace)\\s*([^;]+);/);\n        if (m) { return { type: m[1], name: m[2].trim() }; }\n    }\n    function at_rule() {\n        whitespace();\n\n        if (css[0] === '@') {\n            const ret =\n                at_x() ||\n                at_fontface() ||\n                at_media() ||\n                at_keyframes() ||\n                at_supports() ||\n                at_document() ||\n                at_custom_m() ||\n                at_host() ||\n                at_page() ||\n                at_page_margin_box(); // Must be last\n\n            if (ret && !settings.preserveStatic) {\n                let hasVarFunc = false;\n\n                // @page, @font-face\n                if (ret.declarations) {\n                    hasVarFunc = ret.declarations.some(decl => /var\\(/.test(decl.value));\n                }\n                // @keyframes, @media, @supports, etc.\n                else {\n                    const arr = ret.keyframes || ret.rules || [];\n\n                    hasVarFunc = arr.some(obj => (obj.declarations || []).some(decl => /var\\(/.test(decl.value)));\n                }\n\n                return hasVarFunc ? ret : {};\n            }\n\n            return ret;\n        }\n    }\n\n    // Rules\n    // -------------------------------------------------------------------------\n    function rule() {\n        if (!settings.preserveStatic) {\n            const balancedMatch = balanced('{', '}', css);\n\n            // Skip rulset if it does not contain a root/host variable\n            // declaration or a variable function value\n            if (balancedMatch) {\n                const hasVarDecl = /:(?:root|host)(?![.:#(])/.test(balancedMatch.pre) && /--\\S*\\s*:/.test(balancedMatch.body);\n                const hasVarFunc = /var\\(/.test(balancedMatch.body);\n\n                if (!hasVarDecl && !hasVarFunc) {\n                    css = css.slice(balancedMatch.end + 1);\n\n                    return {};\n                }\n            }\n        }\n\n        const sel   = selector() || [];\n        const decls = settings.preserveStatic ? declarations() : declarations().filter(decl => {\n            const hasVarDecl = sel.some(s => /:(?:root|host)(?![.:#(])/.test(s)) && /^--\\S/.test(decl.property);\n            const hasVarFunc = /var\\(/.test(decl.value);\n\n            return hasVarDecl || hasVarFunc;\n        });\n\n        if (!sel.length) {\n            error('selector missing');\n        }\n\n        return {\n            type        : 'rule',\n            selectors   : sel,\n            declarations: decls\n        };\n    }\n\n    function rules(core) {\n        if (!core && !open()) {\n            return error('missing \\'{\\'');\n        }\n\n        let node;\n        let rules = comments();\n\n        while (css.length && (core || css[0] !== '}') && (node = at_rule() || rule())) {\n            if (node.type) {\n                rules.push(node);\n            }\n\n            rules = rules.concat(comments());\n        }\n\n        if (!core && !close()) {\n            return error('missing \\'}\\'');\n        }\n\n        return rules;\n    }\n\n    return {\n        type: 'stylesheet',\n        stylesheet: {\n            rules: rules(true),\n            errors: errors\n        }\n    };\n}\n\n\n// Exports\n// =============================================================================\nexport default parseCss;\n","// Dependencies\n// =============================================================================\nimport parseCss from './parse-css';\n\n\n// Functions\n// =============================================================================\n/**\n * Description\n *\n * @param {object|string} cssData CSS data to parse\n * @param {object} [options] Options object\n * @param {object} [options.store={}] CSS variable definitions to include during\n *     transformation. Can be used to add new override exisitng definitions.\n * @param {function} [options.onWarning] Callback on each transformation\n *     warning. Passes 1) warningMessage as an argument.\n * @returns {object}\n */\nfunction parseVars(cssData, options = {}) {\n    const defaults = {\n        parseHost: false,\n        store    : {},\n        onWarning() {}\n    };\n    const settings           = Object.assign({}, defaults, options);\n    const reVarDeclSelectors = new RegExp(`:${ settings.parseHost ? 'host' : 'root' }$`);\n\n    // Convert CSS string to AST\n    if (typeof cssData === 'string') {\n        cssData = parseCss(cssData, settings);\n    }\n\n    // Define variables\n    cssData.stylesheet.rules.forEach(function(rule) {\n        const varNameIndices = [];\n\n        if (rule.type !== 'rule' || !rule.selectors.some(s => reVarDeclSelectors.test(s))) {\n            return;\n        }\n\n        rule.declarations.forEach(function(decl, i) {\n            const prop  = decl.property;\n            const value = decl.value;\n\n            if (prop && prop.indexOf('--') === 0) {\n                settings.store[prop] = value;\n                varNameIndices.push(i);\n            }\n        });\n    });\n\n    // Return variable store\n    return settings.store;\n}\n\n\n// Exports\n// =============================================================================\nexport default parseVars;\n","/**\n * Based on css parser/compiler by NxChg\n * https://github.com/NxtChg/pieces/tree/master/js/css_parser\n */\n\n\n// Functions\n// =============================================================================\n/**\n * Compiles CSS AST to string\n *\n * @param {object}   tree CSS AST object\n * @param {string}   [delim=''] CSS rule delimiter\n * @param {function} cb Function to be called before each node is processed\n * @returns {string}\n */\nfunction stringifyCss(tree, delim = '', cb) {\n    const renderMethods = {\n        charset(node) {\n            return '@charset ' + node.name + ';';\n        },\n        comment(node) {\n            // Preserve ponyfill marker comments\n            return node.comment.indexOf('__CSSVARSPONYFILL') === 0 ? '/*' + node.comment + '*/' : '';\n        },\n        'custom-media'(node) {\n            return '@custom-media ' + node.name + ' ' + node.media + ';';\n        },\n        declaration(node) {\n            return node.property + ':' + node.value + ';';\n        },\n        document(node) {\n            return '@' + (node.vendor || '') + 'document ' + node.document + '{' + visit(node.rules) + '}';\n        },\n        'font-face'(node) {\n            return '@font-face' + '{' + visit(node.declarations) + '}';\n        },\n        host(node) {\n            return '@host' + '{' + visit(node.rules) + '}';\n        },\n        import(node) {\n            // FIXED\n            return '@import ' + node.name + ';';\n        },\n        keyframe(node) {\n            return node.values.join(',') + '{' + visit(node.declarations) + '}';\n        },\n        keyframes(node) {\n            return '@' + (node.vendor || '') + 'keyframes ' + node.name + '{' + visit(node.keyframes) + '}';\n        },\n        media(node) {\n            return '@media ' + node.media + '{' + visit(node.rules) + '}';\n        },\n        namespace(node) {\n            return '@namespace ' + node.name + ';';\n        },\n        page(node) {\n            return '@page ' + (node.selectors.length ? node.selectors.join(', ') : '') + '{' + visit(node.declarations) + '}';\n        },\n        'page-margin-box'(node) {\n            return '@' + node.name + '{' + visit(node.declarations) + '}';\n        },\n        rule(node) {\n            const decls = node.declarations;\n\n            if (decls.length) {\n                return node.selectors.join(',') + '{' + visit(decls) + '}';\n            }\n        },\n        supports(node) {\n            // FIXED\n            return '@supports ' + node.supports + '{' + visit(node.rules) + '}';\n        }\n    };\n\n    function visit(nodes) {\n        let buf = '';\n\n        for (let i = 0; i < nodes.length; i++) {\n            const n = nodes[i];\n\n            if (cb) {\n                cb(n);\n            }\n\n            const txt = renderMethods[n.type](n);\n\n            if (txt) {\n                buf += txt;\n\n                if (txt.length && n.selectors) {\n                    buf += delim;\n                }\n            }\n        }\n\n        return buf;\n    }\n\n    return visit(tree.stylesheet.rules);\n}\n\n\n// Exports\n// =============================================================================\nexport default stringifyCss;\n","/**\n * Based on rework-visit by reworkcss\n * https://github.com/reworkcss/rework-visit\n */\n\n\n// Functions\n// =============================================================================\n/**\n * Visit `node` declarations recursively and invoke `fn(declarations, node)`.\n *\n * @param {object} node\n * @param {function} fn\n */\nfunction walkCss(node, fn){\n    node.rules.forEach(function(rule){\n        // @media etc\n        if (rule.rules) {\n            walkCss(rule, fn);\n\n            return;\n        }\n\n        // keyframes\n        if (rule.keyframes) {\n            rule.keyframes.forEach(function(keyframe){\n                if (keyframe.type === 'keyframe') {\n                    fn(keyframe.declarations, rule);\n                }\n            });\n\n            return;\n        }\n\n        // @charset, @import etc\n        if (!rule.declarations) {\n            return;\n        }\n\n        fn(rule.declarations, node);\n    });\n}\n\n\n// Exports\n// =============================================================================\nexport default walkCss;\n","/**\n * Based on rework-vars by reworkcss\n * https://github.com/reworkcss/rework-vars\n */\n\n\n// Dependencies\n// =============================================================================\nimport balanced     from 'balanced-match';\nimport parseCss     from './parse-css';\nimport stringifyCss from './stringify-css';\nimport walkCss      from './walk-css';\n\n\n// Constants & Variables\n// =============================================================================\nconst VAR_PROP_IDENTIFIER = '--';\nconst VAR_FUNC_IDENTIFIER = 'var';\n\n\n// Functions\n// =============================================================================\n/**\n * Transforms W3C-style CSS variables to static values and returns an updated\n * CSS string.\n *\n * @param {object}   cssData CSS text or AST\n * @param {object}   [options] Options object\n * @param {boolean}  [options.preserveStatic=true] Determines if CSS\n *                   declarations that do not reference a custom property will\n *                   be preserved in the transformed CSS\n * @param {boolean}  [options.preserveVars=false] Determines if CSS custom\n *                   property declarations will be preserved in the transformed\n *                   CSS\n * @param {object}   [options.variables={}] CSS variable definitions to include\n *                   during transformation. Can be used to add new override\n *                   exisitng definitions.\n * @param {function} [options.onWarning] Callback on each transformation\n *                   warning. Passes 1) warningMessage as an argument.\n * @returns {string}\n */\nfunction transformCss(cssData, options = {}) {\n    const defaults = {\n        preserveStatic: true,\n        preserveVars  : false,\n        variables     : {},\n        onWarning() {}\n    };\n    const settings = Object.assign({}, defaults, options);\n\n    // Convert CSS string to AST\n    if (typeof cssData === 'string') {\n        cssData = parseCss(cssData, settings);\n    }\n\n    // Resolve variables\n    walkCss(cssData.stylesheet, function(declarations, node) {\n        for (let i = 0; i < declarations.length; i++) {\n            const decl  = declarations[i];\n            const type  = decl.type;\n            const prop  = decl.property;\n            const value = decl.value;\n\n            // Skip comments\n            if (type !== 'declaration') {\n                continue;\n            }\n\n            // Remove custom property declarations\n            if (!settings.preserveVars && prop && prop.indexOf(VAR_PROP_IDENTIFIER) === 0) {\n                declarations.splice(i, 1);\n                i--;\n                continue;\n            }\n\n            // Transform custom property functions\n            if (value.indexOf(VAR_FUNC_IDENTIFIER + '(') !== -1) {\n                let resolvedValue = resolveValue(value, settings);\n\n                if (resolvedValue !== decl.value) {\n                    // Fix nested calc\n                    resolvedValue = fixNestedCalc(resolvedValue);\n\n                    // Overwrite value\n                    if (!settings.preserveVars) {\n                        decl.value = resolvedValue;\n                    }\n                    // Insert new rule with resolved value\n                    else {\n                        declarations.splice(i, 0, {\n                            type    : type,\n                            property: prop,\n                            value   : resolvedValue\n                        });\n\n                        // Skip ahead of preserved declaration\n                        i++;\n                    }\n                }\n            }\n        }\n    });\n\n    // Return CSS string\n    return stringifyCss(cssData);\n}\n\n\n// Functions (Private)\n// =============================================================================\n/**\n * Removes nested calc keywords for legacy browser compatibility.\n * Example: calc(1 + calc(2 + calc(3 + 3))) => calc(1 + (2 + (3 + 3)))\n *\n * @param {value} string\n */\nfunction fixNestedCalc(value) {\n    const reCalcVal = /calc\\(([^)]+)\\)/g;\n\n    (value.match(reCalcVal) || []).forEach(match => {\n        const newVal = `calc${match.split('calc').join('')}`;\n        value = value.replace(match, newVal);\n    });\n\n    return value;\n}\n\n/**\n * Resolves CSS var() function(s) with `settings.variables` or fallback\n * value(s). Returns original `value` if unable to resolve.\n *\n * @param {string} value String containing CSS var() functions to resolve\n * @param {object} settings Settings object passed from transformCss()\n * @param {string} [__recursiveFallback] Fallback when unable to resolve CSS\n *                 var() function to a `settings.variables` or fallback value.\n *                 Allows restoring original var() function from recursive\n *                 resolveValue() calls.\n * @return {string} CSS value with var() function(s) resolved to\n *                  `settings.variables` or fallback value.\n *\n * @example\n *\n *   resolveValue('10px var(--x) 30px', {'--x':'20px'}, {...settings});\n *   // => '10px 20px 30px'\n *\n *   resolveValue('10px', {}, {...settings});\n *   // => '10px'\n */\nfunction resolveValue(value, settings = {}, __recursiveFallback) {\n    if (value.indexOf('var(') === -1) {\n        return value;\n    }\n\n    const valueData = balanced('(', ')', value);\n\n    /**\n     * Resolves contents of CSS custom property function\n     *\n     * @param {string} value String containing contents of CSS var() function\n     * @returns {string}\n     *\n     * @example\n     *\n     *   resolveFunc('--x, var(--y, green)')\n     *   // => obj['--x'] or obj['--y'] or 'green'\n     *\n     *   resolveFunc('--fail')\n     *   // => 'var(--fail)' when obj['--fail'] does not exist\n     */\n    function resolveFunc(value) {\n        const name               = value.split(',')[0].replace(/[\\s\\n\\t]/g, '');\n        const fallback           = (value.match(/(?:\\s*,\\s*){1}(.*)?/) || [])[1];\n        const match              = Object.prototype.hasOwnProperty.call(settings.variables, name) ? String(settings.variables[name]) : undefined;\n        const replacement        = match || (fallback ? String(fallback) : undefined);\n        const unresolvedFallback = __recursiveFallback || value;\n\n        if (!match) {\n            settings.onWarning(`variable \"${name}\" is undefined`);\n        }\n\n        if (replacement && replacement !== 'undefined' && replacement.length > 0) {\n            return resolveValue(replacement, settings, unresolvedFallback);\n        }\n        else {\n            return `var(${unresolvedFallback})`;\n        }\n    }\n\n    // No balanced brace data\n    if (!valueData) {\n        if (value.indexOf('var(') !== -1) {\n            settings.onWarning(`missing closing \")\" in the value \"${value}\"`);\n        }\n\n        return value;\n    }\n    // Balanced brace data is var() function\n    else if (valueData.pre.slice(-3) === 'var') {\n        const isEmptyVarFunc = valueData.body.trim().length === 0;\n\n        if (isEmptyVarFunc) {\n            settings.onWarning('var() must contain a non-whitespace string');\n\n            return value;\n        }\n        else {\n            return (\n                valueData.pre.slice(0,-3)\n                + resolveFunc(valueData.body)\n                + resolveValue(valueData.post, settings)\n            );\n        }\n    }\n    // Balanced brace data is NOT var() function\n    else {\n        return (\n            valueData.pre\n            + `(${resolveValue(valueData.body, settings)})`\n            + resolveValue(valueData.post, settings)\n        );\n    }\n}\n\n\n// Exports\n// =============================================================================\nexport default transformCss;\n","// Dependencies\n// =============================================================================\nimport getCssData   from 'get-css-data';\nimport parseCss     from './parse-css';\nimport parseVars    from './parse-vars';\nimport stringifyCss from './stringify-css';\nimport transformCss from './transform-css';\n\n\n// Constants & Variables\n// =============================================================================\nconst isBrowser       = typeof window !== 'undefined';\nconst isNativeSupport = isBrowser && window.CSS && window.CSS.supports && window.CSS.supports('(--a: 0)');\n\nconst counters = {\n    group: 0,\n    job  : 0\n};\nconst defaults = {\n    // Targets\n    rootElement   : isBrowser ? document : null,\n    shadowDOM     : false,\n    // Sources\n    include       : 'style,link[rel=stylesheet]',\n    exclude       : '',\n    variables     : {},    // cssVars, transformCss\n    // Options\n    onlyLegacy    : true,  // cssVars\n    preserveStatic: true,  // parseCSS\n    preserveVars  : false, // transformCss\n    silent        : false, // cssVars\n    updateDOM     : true,  // cssVars\n    updateURLs    : true,  // cssVars\n    watch         : null,  // cssVars\n    // Callbacks\n    onBeforeSend() {},     // cssVars\n    onError() {},          // cssVars\n    onWarning() {},        // transformCss\n    onSuccess() {},        // cssVars\n    onComplete() {},       // cssVars\n    onFinally() {}         // cssVars\n};\nconst regex = {\n    // CSS comments\n    cssComments: /\\/\\*[\\s\\S]+?\\*\\//g,\n    // CSS keyframes\n    // Ex: @keyframes & @-VENDOR-keyframes\n    cssKeyframes: /@(?:-\\w*-)?keyframes/,\n    // CSS media queries\n    // Ex: @media (min-width: 640px) { ... }\n    cssMediaQueries: /@media[^{]+\\{([\\s\\S]+?})\\s*}/g,\n    // CSS Urls\n    // Ex: url('path/to/file')\n    cssUrls: /url\\((?!['\"]?(?:data|http|\\/\\/):)['\"]?([^'\")]*)['\"]?\\)/g,\n    // CSS root/host rules\n    // Ex: :root { ... } or :host { ... }\n    cssVarDeclRules: /(?::(?:root|host)(?![.:#(])[\\s,]*[^{]*{\\s*[^}]*})/g,\n    // CSS variable declarations (e.g. --color: red;)\n    cssVarDecls: /(?:[\\s;]*)(-{2}\\w[\\w-]*)(?:\\s*:\\s*)([^;]*);/g,\n    // CSS variable function (e.g. var(--color))\n    cssVarFunc: /var\\(\\s*--[\\w-]/,\n    // CSS variable root/host declarations and var() function values\n    cssVars: /(?:(?::(?:root|host)(?![.:#(])[\\s,]*[^{]*{\\s*[^;]*;*\\s*)|(?:var\\(\\s*))(--[^:)]+)(?:\\s*[:)])/\n};\nconst variableStore = {\n    // Parsed DOM values (from <link> and <style> nodes)\n    dom : {},\n    // Temporary storage for each job\n    job : {},\n    // Persisted options.variables values\n    user: {}\n};\n\n// Flag used to prevent successive ponyfill calls from stacking\nlet cssVarsIsRunning = false;\n\n// Mutation observer reference created via options.watch\nlet cssVarsObserver = null;\n\n// Count used to detect manual removal of [data-cssvars=\"src\"] nodes\nlet cssVarsSrcNodeCount = 0;\n\n// Debounce timer used with options.watch\nlet debounceTimer = null;\n\n// Flag used to indicate if document-level custom property values have been\n// parsed, stored, and ready for use with options.shadowDOM\nlet isShadowDOMReady = false;\n\n\n// Functions\n// =============================================================================\n/**\n * Fetches, parses, and transforms CSS custom properties from specified\n * <style> and <link> elements into static values, then appends a new <style>\n * element with static values to the DOM to provide CSS custom property\n * compatibility for legacy browsers. Also provides a single interface for\n * live updates of runtime values in both modern and legacy browsers.\n *\n * @preserve\n * @param {object}   [options] Options object\n * @param {object}   [options.rootElement=document] Root element to traverse for\n *                   <link> and <style> nodes\n * @param {boolean}  [options.shadowDOM=false] Determines if shadow DOM <link>\n *                   and <style> nodes will be processed.\n * @param {string}   [options.include=\"style,link[rel=stylesheet]\"] CSS selector\n *                   matching <link re=\"stylesheet\"> and <style> nodes to\n *                   process\n * @param {string}   [options.exclude] CSS selector matching <link\n *                   rel=\"stylehseet\"> and <style> nodes to exclude from those\n *                   matches by options.include\n * @param {object}   [options.variables] A map of custom property name/value\n *                   pairs. Property names can omit or include the leading\n *                   double-hyphen (—), and values specified will override\n *                   previous values\n * @param {boolean}  [options.onlyLegacy=true] Determines if the ponyfill will\n *                   only generate legacy-compatible CSS in browsers that lack\n *                   native support (i.e., legacy browsers)\n * @param {boolean}  [options.preserveStatic=true] Determines if CSS\n *                   declarations that do not reference a custom property will\n *                   be preserved in the transformed CSS\n * @param {boolean}  [options.preserveVars=false] Determines if CSS custom\n *                   property declarations will be preserved in the transformed\n *                   CSS\n * @param {boolean}  [options.silent=false] Determines if warning and error\n *                   messages will be displayed on the console\n * @param {boolean}  [options.updateDOM=true] Determines if the ponyfill will\n *                   update the DOM after processing CSS custom properties\n * @param {boolean}  [options.updateURLs=true] Determines if relative url()\n *                   paths will be converted to absolute urls in external CSS\n * @param {boolean}  [options.watch=false] Determines if a MutationObserver will\n *                   be created that will execute the ponyfill when a <link> or\n *                   <style> DOM mutation is observed\n * @param {function} [options.onBeforeSend] Callback before XHR is sent. Passes\n *                   1) the XHR object, 2) source node reference, and 3) the\n *                   source URL as arguments\n * @param {function} [options.onError] Callback after a CSS parsing error has\n *                   occurred or an XHR request has failed. Passes 1) an error\n *                   message, and 2) source node reference, 3) xhr, and 4 url as\n *                   arguments.\n * @param {function} [options.onWarning] Callback after each CSS parsing warning\n *                   has occurred. Passes 1) a warning message as an argument.\n * @param {function} [options.onSuccess] Callback after CSS data has been\n *                   collected from each node and before CSS custom properties\n *                   have been transformed. Allows modifying the CSS data before\n *                   it is transformed by returning any string value (or false\n *                   to skip). Passes 1) CSS text, 2) source node reference, and\n *                   3) the source URL as arguments.\n * @param {function} [options.onComplete] Callback after all CSS has been\n *                   processed, legacy-compatible CSS has been generated, and\n *                   (optionally) the DOM has been updated. Passes 1) a CSS\n *                   string with CSS variable values resolved, 2) an array of\n *                   output <style> node references that have been appended to\n *                   the DOM, 3) an object containing all custom properies names\n *                   and values, and 4) the ponyfill execution time in\n *                   milliseconds.\n * @param {function} [options.onFinally] Callback in modern and legacy browsers\n *                   after the ponyfill has finished all tasks. Passes 1) a\n *                   boolean indicating if the last ponyfill call resulted in a\n *                   style change, 2) a boolean indicating if the current\n *                   browser provides native support for CSS custom properties,\n *                   and 3) the ponyfill execution time in milliseconds.\n * @example\n *\n *   cssVars({\n *     rootElement   : document,\n *     shadowDOM     : false,\n *     include       : 'style,link[rel=\"stylesheet\"]',\n *     exclude       : '',\n *     variables     : {},\n *     onlyLegacy    : true,\n *     preserveStatic: true,\n *     preserveVars  : false,\n *     silent        : false,\n *     updateDOM     : true,\n *     updateURLs    : true,\n *     watch         : false,\n *     onBeforeSend(xhr, node, url) {},\n *     onError(message, node, xhr, url) {},\n *     onWarning(message) {},\n *     onSuccess(cssText, node, url) {},\n *     onComplete(cssText, styleNode, cssVariables, benchmark) {},\n *     onFinally(hasChanged, hasNativeSupport, benchmark)\n *   });\n */\nfunction cssVars(options = {}) {\n    const msgPrefix = 'cssVars(): ';\n    const settings  = Object.assign({}, defaults, options);\n\n    function handleError(message, sourceNode, xhr, url) {\n        /* istanbul ignore next */\n        if (!settings.silent && window.console) {\n            // eslint-disable-next-line\n            console.error(`${msgPrefix}${message}\\n`, sourceNode);\n        }\n\n        settings.onError(message, sourceNode, xhr, url);\n    }\n\n    function handleWarning(message) {\n        /* istanbul ignore next */\n        if (!settings.silent && window.console) {\n            // eslint-disable-next-line\n            console.warn(`${msgPrefix}${message}`);\n        }\n\n        settings.onWarning(message);\n    }\n\n    function handleFinally(hasChanged) {\n        settings.onFinally(\n            Boolean(hasChanged),\n            isNativeSupport,\n            getTimeStamp() - settings.__benchmark\n        );\n    }\n\n    // Exit if non-browser environment (e.g. Node)\n    if (!isBrowser) {\n        return;\n    }\n\n    // Add / recreate MutationObserver\n    if (settings.watch) {\n        settings.watch = defaults.watch;\n        addMutationObserver(settings);\n        cssVars(settings);\n        return;\n    }\n    // Disconnect existing MutationObserver\n    else if (settings.watch === false && cssVarsObserver) {\n        cssVarsObserver.disconnect();\n        cssVarsObserver = null;\n    }\n\n    // If benchmark key is not availalbe, this is a non-recursive call\n    if (!settings.__benchmark) {\n        // Check flag and debounce to prevent successive call from stacking\n        if (cssVarsIsRunning === settings.rootElement) {\n            cssVarsDebounced(options);\n            return;\n        }\n\n        const srcNodes = [].slice.call(settings.rootElement.querySelectorAll('[data-cssvars]:not([data-cssvars=\"out\"])'));\n\n        // Store benchmark start time\n        settings.__benchmark = getTimeStamp();\n\n        // Exclude previously processed elements\n        settings.exclude = [\n            // 1. When the ponyfill is called by the MutationObserver, all\n            //    previously processed nodes are exluded except those that have\n            //    had their out/skip/src values cleared by the MutationObserver.\n            // 2. When the ponyfill is called directly, only output nodes are\n            //    excluded. This allows the ponyfill to update skip/src nodes\n            //    after a previously processed link/style node has been removed.\n            cssVarsObserver ? '[data-cssvars]:not([data-cssvars=\"\"])' : '[data-cssvars=\"out\"]',\n            'link[disabled]:not([data-cssvars])',\n            settings.exclude\n        ].filter(selector => selector).join(',');\n\n        // Fix malformed custom property names (e.g. \"color\" or \"-color\")\n        settings.variables = fixVarNames(settings.variables);\n\n        // Reset previously processed <style> nodes if textContent has changed\n        srcNodes.forEach(srcNode => {\n            const hasStyleCache = srcNode.nodeName.toLowerCase() === 'style' && srcNode.__cssVars.text;\n            const hasStyleChanged = hasStyleCache && srcNode.textContent !== srcNode.__cssVars.text;\n\n            if (hasStyleCache && hasStyleChanged) {\n                srcNode.sheet && (srcNode.sheet.disabled = false);\n                srcNode.setAttribute('data-cssvars', '');\n            }\n        });\n\n        // Direct call preparation (i.e. non-MutationObserver call)\n        if (!cssVarsObserver) {\n            const outNodes = [].slice.call(settings.rootElement.querySelectorAll('[data-cssvars=\"out\"]'));\n\n            // Remove orphaned output nodes\n            outNodes.forEach(outNode => {\n                const dataGroup = outNode.getAttribute('data-cssvars-group');\n                const srcNode   = dataGroup ? settings.rootElement.querySelector(`[data-cssvars=\"src\"][data-cssvars-group=\"${dataGroup}\"]`) : null;\n\n                if (!srcNode) {\n                    outNode.parentNode.removeChild(outNode);\n                }\n            });\n\n            // Handle removed source nodes\n            if (cssVarsSrcNodeCount && (srcNodes.length < cssVarsSrcNodeCount)) {\n                // Update source node count\n                cssVarsSrcNodeCount = srcNodes.length;\n\n                // Reset variableStore\n                variableStore.dom = {};\n            }\n        }\n    }\n\n    // Verify readyState to ensure all <link> and <style> nodes are available\n    if (document.readyState !== 'loading') {\n        // Native support\n        if (isNativeSupport && settings.onlyLegacy) {\n            let hasVarChange = false;\n\n            // Apply settings.variables\n            if (settings.updateDOM) {\n                const targetElm = settings.rootElement.host || (settings.rootElement === document ? document.documentElement : settings.rootElement);\n\n                // Set variables using native methods\n                Object.keys(settings.variables).forEach(key => {\n                    const varValue = settings.variables[key];\n\n                    hasVarChange = hasVarChange || varValue !== getComputedStyle(targetElm).getPropertyValue(key);\n                    targetElm.style.setProperty(key, varValue);\n                });\n            }\n\n            handleFinally(hasVarChange);\n        }\n        // Ponyfill: Handle rootElement set to a shadow host or root\n        else if (!isShadowDOMReady && (settings.shadowDOM || settings.rootElement.shadowRoot || settings.rootElement.host)) {\n            // Get all document-level CSS\n            getCssData({\n                rootElement : defaults.rootElement,\n                include     : defaults.include,\n                exclude     : settings.exclude,\n                skipDisabled: false,\n                onSuccess(cssText, node, url) {\n                    const isUserDisabled = (node.sheet || {}).disabled && !node.__cssVars;\n\n                    if (isUserDisabled) {\n                        return false;\n                    }\n\n                    cssText = cssText\n                        .replace(regex.cssComments, '')\n                        .replace(regex.cssMediaQueries, '');\n\n                    cssText = (cssText.match(regex.cssVarDeclRules) || []).join('');\n\n                    // Return only matching :root {...} blocks\n                    return cssText || false;\n                },\n                onComplete(cssText, cssArray, nodeArray) {\n                    // Parse variables and store in variableStore. This step\n                    // ensures that variableStore contains all document-level\n                    // custom property values for subsequent ponyfill calls.\n                    parseVars(cssText, {\n                        store    : variableStore.dom,\n                        onWarning: handleWarning\n                    });\n\n                    isShadowDOMReady = true;\n\n                    // Call the ponyfill again to process the rootElement\n                    // initially specified. Values stored in variableStore will\n                    // be used to transform values in shadow host/root elements.\n                    cssVars(settings);\n                }\n            });\n        }\n        // Ponyfill: Process CSS\n        else {\n            // Set flag to prevent successive call from stacking. Using the\n            // rootElement insead of `true` allows simultaneous ponyfill calls\n            // using different rootElement values (e.g. document and one-or-more\n            // shadowDOM nodes).\n            cssVarsIsRunning = settings.rootElement;\n\n            getCssData({\n                rootElement : settings.rootElement,\n                include     : settings.include,\n                exclude     : settings.exclude,\n                skipDisabled: false,\n                onBeforeSend: settings.onBeforeSend,\n                onError(xhr, node, url) {\n                    const responseUrl = xhr.responseURL || getFullUrl(url, location.href);\n                    const statusText  = xhr.statusText ? `(${xhr.statusText})` : 'Unspecified Error' + (xhr.status === 0 ? ' (possibly CORS related)' : '');\n                    const errorMsg    = `CSS XHR Error: ${responseUrl} ${xhr.status} ${statusText}`;\n\n                    handleError(errorMsg, node, xhr, responseUrl);\n                },\n                onSuccess(cssText, node, url) {\n                    const isUserDisabled = (node.sheet || {}).disabled && !node.__cssVars;\n\n                    if (isUserDisabled) {\n                        return false;\n                    }\n\n                    const isLink        = node.nodeName.toLowerCase() === 'link';\n                    const isStyleImport = node.nodeName.toLowerCase() === 'style' && cssText !== node.textContent;\n                    const returnVal     = settings.onSuccess(cssText, node, url);\n\n                    // Use callback return value if provided (skip CSS if false)\n                    cssText = returnVal !== undefined && Boolean(returnVal) === false ? '' : returnVal || cssText;\n\n                    // Convert relative url(...) values to absolute\n                    if (settings.updateURLs && (isLink || isStyleImport)) {\n                        cssText = fixRelativeCssUrls(cssText, url);\n                    }\n\n                    return cssText;\n                },\n                onComplete(cssText, cssArray, nodeArray = []) {\n                    const currentVars = Object.assign({}, variableStore.dom, variableStore.user);\n\n                    let hasVarChange = false;\n\n                    // Reset temporary variable store\n                    variableStore.job = {};\n\n                    // Parse CSS and variables\n                    nodeArray.forEach((node, i) => {\n                        const nodeCSS = cssArray[i];\n\n                        // Node data cache\n                        node.__cssVars = node.__cssVars || {};\n                        node.__cssVars.text = nodeCSS;\n\n                        // Only process CSS contains a custom property\n                        // declarations or function\n                        if (regex.cssVars.test(nodeCSS)) {\n                            try {\n                                const cssTree = parseCss(nodeCSS, {\n                                    preserveStatic: settings.preserveStatic,\n                                    removeComments: true\n                                });\n\n                                // Parse variables\n                                parseVars(cssTree, {\n                                    parseHost: Boolean(settings.rootElement.host),\n                                    store    : variableStore.dom,\n                                    onWarning: handleWarning\n                                });\n\n                                // Cache data\n                                node.__cssVars.tree = cssTree;\n                            }\n                            catch(err) {\n                                handleError(err.message, node);\n                            }\n                        }\n                    });\n\n                    // Merge DOM values with job values\n                    Object.assign(variableStore.job, variableStore.dom);\n\n                    if (settings.updateDOM) {\n                        // Persist user values\n                        Object.assign(variableStore.user, settings.variables);\n\n                        // Merge persisted user values with job values\n                        Object.assign(variableStore.job, variableStore.user);\n                    }\n                    else {\n                        // Merge persisted and non-persisted user values with job values\n                        Object.assign(variableStore.job, variableStore.user, settings.variables);\n\n                        // Update currentVars with non-persisted user values\n                        Object.assign(currentVars, settings.variables);\n                    }\n\n                    // Detect new variable declaration or changed value\n                    hasVarChange =\n                        // Ponyfill has been called before with updateDOM\n                        counters.job > 0 &&\n                        // New/Change\n                        Boolean(\n                            // New declaration\n                            (Object.keys(variableStore.job).length > Object.keys(currentVars).length) ||\n                            // Changed declaration value\n                            Boolean(\n                                // Previous declarations exist\n                                Object.keys(currentVars).length &&\n                                // At least one job value does has changed\n                                Object.keys(variableStore.job).some(key => variableStore.job[key] !== currentVars[key])\n                            )\n                        );\n\n                    // New variable declaration or modified value detected\n                    if (hasVarChange) {\n                        resetCssNodes(settings.rootElement);\n                        cssVars(settings);\n                    }\n                    // No variable changes detected\n                    else {\n                        const outCssArray  = [];\n                        const outNodeArray = [];\n\n                        let hasKeyframesWithVars = false;\n\n                        // Increment job\n                        if (settings.updateDOM) {\n                            counters.job++;\n                        }\n\n                        nodeArray.forEach((node, i) => {\n                            let isSkip = !node.__cssVars.tree;\n\n                            if (node.__cssVars.tree) {\n                                try {\n                                    transformCss(node.__cssVars.tree, Object.assign({}, settings, {\n                                        variables: variableStore.job,\n                                        onWarning: handleWarning\n                                    }));\n\n                                    const outCss = stringifyCss(node.__cssVars.tree);\n\n                                    if (settings.updateDOM) {\n                                        const nodeCSS       = cssArray[i];\n                                        const hasCSSVarFunc = regex.cssVarFunc.test(nodeCSS);\n\n                                        if (!node.getAttribute('data-cssvars')) {\n                                            node.setAttribute('data-cssvars', 'src');\n                                        }\n\n                                        if (outCss.length && hasCSSVarFunc) {\n                                            const dataGroup      = node.getAttribute('data-cssvars-group') || ++counters.group;\n                                            const outCssNoSpaces = outCss.replace(/\\s/g,'');\n                                            const outNode        = settings.rootElement.querySelector(`[data-cssvars=\"out\"][data-cssvars-group=\"${dataGroup}\"]`) || document.createElement('style');\n\n                                            hasKeyframesWithVars = hasKeyframesWithVars || regex.cssKeyframes.test(outCss);\n\n                                            // Disable source stylesheet\n                                            if (settings.preserveStatic) {\n                                                node.sheet && (node.sheet.disabled = true);\n                                            }\n\n                                            if (!outNode.hasAttribute('data-cssvars')) {\n                                                outNode.setAttribute('data-cssvars', 'out');\n                                            }\n\n                                            // Non-transformed CSS\n                                            if (outCssNoSpaces === node.textContent.replace(/\\s/g,'')) {\n                                                isSkip = true;\n\n                                                if (outNode && outNode.parentNode) {\n                                                    node.removeAttribute('data-cssvars-group');\n                                                    outNode.parentNode.removeChild(outNode);\n                                                }\n                                            }\n                                            // Transformed CSS\n                                            else if (outCssNoSpaces !== outNode.textContent.replace(/\\s/g,'')) {\n                                                [node, outNode].forEach(n => {\n                                                    n.setAttribute('data-cssvars-job', counters.job);\n                                                    n.setAttribute('data-cssvars-group', dataGroup);\n                                                });\n                                                outNode.textContent = outCss;\n                                                outCssArray.push(outCss);\n                                                outNodeArray.push(outNode);\n\n                                                if (!outNode.parentNode) {\n                                                    node.parentNode.insertBefore(outNode, node.nextSibling);\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (node.textContent.replace(/\\s/g,'') !== outCss) {\n                                            outCssArray.push(outCss);\n                                        }\n                                    }\n                                }\n                                catch(err) {\n                                    handleError(err.message, node);\n                                }\n                            }\n\n                            if (isSkip) {\n                                node.setAttribute('data-cssvars', 'skip');\n                            }\n\n                            if (!node.hasAttribute('data-cssvars-job')) {\n                                node.setAttribute('data-cssvars-job', counters.job);\n                            }\n                        });\n\n                        // Update source node count\n                        cssVarsSrcNodeCount = settings.rootElement.querySelectorAll('[data-cssvars]:not([data-cssvars=\"out\"])').length;\n\n                        // Process shadow DOM\n                        if (settings.shadowDOM) {\n                            const elms = []\n                                .concat(settings.rootElement)\n                                .concat([].slice.call(settings.rootElement.querySelectorAll('*')));\n\n                            // Iterates over all elements in rootElement and calls\n                            // cssVars on each shadowRoot, passing document-level\n                            // custom properties as options.variables.\n                            for (let i = 0, elm; (elm = elms[i]); ++i) {\n                                if (elm.shadowRoot && elm.shadowRoot.querySelector('style')) {\n                                    const shadowSettings = Object.assign({}, settings, {\n                                        rootElement: elm.shadowRoot\n                                    });\n\n                                    cssVars(shadowSettings);\n                                }\n                            }\n                        }\n\n                        // Fix keyframes\n                        if (settings.updateDOM && hasKeyframesWithVars) {\n                            fixKeyframes(settings.rootElement);\n                        }\n\n                        // Reset running flag. Must be done before onComplete\n                        // callback to avoid a callback error preventing the\n                        // flag from being reset after the callback.\n                        cssVarsIsRunning = false;\n\n                        // Callbacks\n                        settings.onComplete(\n                            outCssArray.join(''),\n                            outNodeArray,\n                            JSON.parse(JSON.stringify(variableStore.job)),\n                            getTimeStamp() - settings.__benchmark\n                        );\n\n                        handleFinally(outNodeArray.length);\n                    }\n                }\n            });\n        }\n    }\n    // Delay function until DOMContentLoaded event is fired\n    /* istanbul ignore next */\n    else {\n        document.addEventListener('DOMContentLoaded', function init(evt) {\n            cssVars(options);\n\n            document.removeEventListener('DOMContentLoaded', init);\n        });\n    }\n}\n\n// Ponyfill reset\ncssVars.reset = function() {\n    // Reset counters\n    counters.job = 0;\n    counters.group = 0;\n\n    // Reset running flag\n    cssVarsIsRunning = false;\n\n    // Disconnect MutationObserver\n    if (cssVarsObserver) {\n        cssVarsObserver.disconnect();\n        cssVarsObserver = null;\n    }\n\n    // Reset source node count\n    cssVarsSrcNodeCount = 0;\n\n    // Reset debounce timer\n    debounceTimer = null;\n\n    // Reset shadowDOM ready flag\n    isShadowDOMReady = false;\n\n    // Reset variable storage\n    for (const prop in variableStore) {\n        variableStore[prop] = {};\n    }\n};\n\n\n// Functions (Private)\n// =============================================================================\n/**\n * Creates mutation observer that executes the ponyfill when a <link> or <style>\n * DOM mutation is observed.\n *\n * @param {object} settings\n */\nfunction addMutationObserver(settings) {\n    function isDisabled(node) {\n        const isDisabledAttr  = isLink(node) && node.hasAttribute('disabled');\n        const isDisabledSheet = (node.sheet || {}).disabled;\n\n        return isDisabledAttr || isDisabledSheet;\n    }\n    function isLink(node) {\n        const isStylesheet = node.nodeName.toLowerCase() === 'link' && (node.getAttribute('rel') || '').indexOf('stylesheet') !== -1;\n\n        return isStylesheet;\n    }\n    function isStyle(node) {\n        return node.nodeName.toLowerCase() === 'style';\n    }\n    function isValidAttributeMutation(mutation) {\n        let isValid = false;\n\n        if (mutation.type === 'attributes' && isLink(mutation.target) && !isDisabled(mutation.target)) {\n            const isEnabledMutation = mutation.attributeName === 'disabled';\n            const isHrefMutation = mutation.attributeName === 'href';\n            const isSkipNode = mutation.target.getAttribute('data-cssvars') === 'skip';\n            const isSrcNode = mutation.target.getAttribute('data-cssvars') === 'src';\n\n            // Enabled\n            if (isEnabledMutation) {\n                isValid = !isSkipNode && !isSrcNode;\n            }\n            // Href\n            else if (isHrefMutation) {\n                if (isSkipNode) {\n                    mutation.target.setAttribute('data-cssvars', '');\n                }\n                else if (isSrcNode) {\n                    resetCssNodes(settings.rootElement, true);\n                }\n\n                isValid = true;\n            }\n        }\n\n        return isValid;\n    }\n    function isValidStyleTextMutation(mutation) {\n        let isValid = false;\n\n        if (mutation.type === 'childList') {\n            const isStyleElm = isStyle(mutation.target);\n            const isOutNode = mutation.target.getAttribute('data-cssvars') === 'out';\n\n            isValid = isStyleElm && !isOutNode;\n        }\n\n        return isValid;\n    }\n    function isValidAddMutation(mutation) {\n        let isValid = false;\n\n        if (mutation.type === 'childList') {\n            isValid = [].slice.call(mutation.addedNodes).some(node => {\n                const isElm           = node.nodeType === 1;\n                const hasAttr         = isElm && node.hasAttribute('data-cssvars');\n                const isStyleWithVars = isStyle(node) && regex.cssVars.test(node.textContent);\n                const isValid         = !hasAttr && (isLink(node) || isStyleWithVars);\n\n                return isValid && !isDisabled(node);\n            });\n        }\n\n        return isValid;\n    }\n    function isValidRemoveMutation(mutation) {\n        let isValid = false;\n\n        if (mutation.type === 'childList') {\n            isValid = [].slice.call(mutation.removedNodes).some(node => {\n                const isElm     = node.nodeType === 1;\n                const isOutNode = isElm && node.getAttribute('data-cssvars') === 'out';\n                const isSrcNode = isElm && node.getAttribute('data-cssvars') === 'src';\n                const isValid   = isSrcNode;\n\n                if (isSrcNode || isOutNode) {\n                    const dataGroup  = node.getAttribute('data-cssvars-group');\n                    const orphanNode = settings.rootElement.querySelector(`[data-cssvars-group=\"${dataGroup}\"]`);\n\n                    if (isSrcNode) {\n                        resetCssNodes(settings.rootElement, true);\n                    }\n\n                    if (orphanNode) {\n                        orphanNode.parentNode.removeChild(orphanNode);\n                    }\n                }\n\n                return isValid;\n            });\n        }\n\n        return isValid;\n    }\n\n    if (!window.MutationObserver) {\n        return;\n    }\n\n    if (cssVarsObserver) {\n        cssVarsObserver.disconnect();\n        cssVarsObserver = null;\n    }\n\n    cssVarsObserver = new MutationObserver(function(mutations) {\n        const hasValidMutation = mutations.some((mutation) => {\n            return (\n                isValidAttributeMutation(mutation) ||\n                isValidStyleTextMutation(mutation) ||\n                isValidAddMutation(mutation) ||\n                isValidRemoveMutation(mutation)\n            );\n        });\n\n        if (hasValidMutation) {\n            cssVars(settings);\n        }\n    });\n\n    cssVarsObserver.observe(document.documentElement, {\n        attributes     : true,\n        attributeFilter: ['disabled', 'href'],\n        childList      : true,\n        subtree        : true\n    });\n}\n\n/**\n * Debounces cssVars() calls\n *\n * @param {object} settings\n */\nfunction cssVarsDebounced(settings, delay = 100) {\n    clearTimeout(debounceTimer);\n    debounceTimer = setTimeout(function() {\n        settings.__benchmark = null;\n        cssVars(settings);\n    }, delay);\n}\n\n/**\n * Fixes issue with keyframe properties set using CSS custom property not being\n * applied properly in some legacy (IE) and modern (Safari) browsers.\n *\n * @param {object} rootElement\n */\nfunction fixKeyframes(rootElement) {\n    const animationNameProp = [\n        'animation-name',\n        '-moz-animation-name',\n        '-webkit-animation-name'\n    ].filter(prop => getComputedStyle(document.body)[prop])[0];\n\n    if (animationNameProp) {\n        const allNodes      = [].slice.call(rootElement.querySelectorAll('*'));\n        const keyframeNodes = [];\n        const nameMarker    = '__CSSVARSPONYFILL-KEYFRAMES__';\n\n        // Modify animation name\n        for (let i = 0, len = allNodes.length; i < len; i++) {\n            const node          = allNodes[i];\n            const animationName = getComputedStyle(node)[animationNameProp];\n\n            if (animationName !== 'none') {\n                node.style[animationNameProp] += nameMarker;\n                keyframeNodes.push(node);\n            }\n        }\n\n        // Force reflow\n        void document.body.offsetHeight;\n\n        // Restore animation name\n        for (let i = 0, len = keyframeNodes.length; i < len; i++) {\n            const nodeStyle = keyframeNodes[i].style;\n\n            nodeStyle[animationNameProp] = nodeStyle[animationNameProp].replace(nameMarker, '');\n        }\n    }\n}\n\n/**\n * Convert relative CSS url(...) values to absolute based on baseUrl\n *\n * @param {string} cssText\n * @param {string} baseUrl\n * @returns {string}\n */\nfunction fixRelativeCssUrls(cssText, baseUrl) {\n    const cssUrls = cssText\n        // Remove comments\n        .replace(regex.cssComments, '')\n        // Match url(...) values\n        .match(regex.cssUrls) || [];\n\n    cssUrls.forEach(cssUrl => {\n        const oldUrl = cssUrl.replace(regex.cssUrls, '$1');\n        const newUrl = getFullUrl(oldUrl, baseUrl);\n\n        cssText = cssText.replace(cssUrl, cssUrl.replace(oldUrl, newUrl));\n    });\n\n    return cssText;\n}\n\n/**\n * Converts all object property names to leading '--' style\n *\n * @param {object} varObj Object containing CSS custom property name:value pairs\n * @returns {object}\n */\nfunction fixVarNames(varObj = {}) {\n    const reLeadingHyphens = /^-{2}/;\n\n    return Object.keys(varObj).reduce((obj, value) => {\n        const key = reLeadingHyphens.test(value) ? value : `--${value.replace(/^-+/, '')}`;\n\n        obj[key] = varObj[value];\n\n        return obj;\n    }, {});\n}\n\n/**\n * Returns fully qualified URL from relative URL and (optional) base URL\n *\n * @param   {string} url\n * @param   {string} [base=location.href]\n * @returns {string}\n */\nfunction getFullUrl(url, base = location.href) {\n    const d = document.implementation.createHTMLDocument('');\n    const b = d.createElement('base');\n    const a = d.createElement('a');\n\n    d.head.appendChild(b);\n    d.body.appendChild(a);\n    b.href = base;\n    a.href = url;\n\n    return a.href;\n}\n\n/**\n * Returns a time stamp in milliseconds\n *\n * @returns {number}\n */\nfunction getTimeStamp() {\n    return isBrowser && (window.performance || {}).now ? window.performance.now() : new Date().getTime();\n}\n\nfunction resetCssNodes(rootElement, resetDOMVariableStore = false) {\n    const resetNodes = [].slice.call(rootElement.querySelectorAll('[data-cssvars=\"skip\"],[data-cssvars=\"src\"]'));\n\n    resetNodes.forEach(node => node.setAttribute('data-cssvars', ''));\n\n    if (resetDOMVariableStore) {\n        variableStore.dom = {};\n    }\n}\n\n\n// Export\n// =============================================================================\nexport default cssVars;\n"]},"metadata":{},"sourceType":"module"}