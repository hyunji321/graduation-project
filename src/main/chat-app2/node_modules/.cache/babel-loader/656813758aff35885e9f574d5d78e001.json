{"ast":null,"code":"import _classCallCheck from \"C:/Users/\\uC774\\uACBD\\uBBFC/IdeaProjects/sendbird-uikit-whatsapp-sample/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/\\uC774\\uACBD\\uBBFC/IdeaProjects/sendbird-uikit-whatsapp-sample/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { a as _defineProperty } from './_rollupPluginBabelHelpers-6bb0305c.js';\nimport { P as PUBSUB_TOPICS } from './topics-b2b77fb9.js';\nimport { n as noop } from './utils-4bbbca2c.js';\n\n/**\n * 1. UIKit Instances\n *    a. getSdk\n *    b. getPubSub\n * 2. Chat & Connection\n *    a. getConnect\n *    b. getDisconnect\n *    c. getUpdateUserInfo\n * 3. Channel\n *    a. getCreateGroupChannel\n *    b. getCreateOpenChannel\n *    c. getGetGroupChannel\n *    d. getGetOpenChannel\n *    e. getLeaveGroupChannel\n *    f. getEnterOpenChannel\n *    g. getExitOpenChannel\n *    h. getFreezeChannel\n *    i. getUnfreezeChannel\n * 4. Message\n *    a. getSendUserMessage\n *    b. getSendFileMessage\n *    c. getUpdateUserMessage\n *    d. x - getUpdateFileMessage\n *    e. getDeleteMessage\n *    f. getResendUserMessage\n *    g. getResendFileMessage\n */\n\n/**\n * import useSendbirdStateContext from '@sendbird-uikit/useSendbirdStateContext'\n * import selectors from '@sendbird-uikit/send'\n * const state = useSendbirdStateContext();\n */\n\n// 1. UIKit Instances\n\n/**\n * const sdk = selectors.getSdk(state);\n */\nvar getSdk = function getSdk(state) {\n  var _state$stores = state.stores,\n    stores = _state$stores === void 0 ? {} : _state$stores;\n  var _stores$sdkStore = stores.sdkStore,\n    sdkStore = _stores$sdkStore === void 0 ? {} : _stores$sdkStore;\n  var sdk = sdkStore.sdk;\n  return sdk;\n};\n\n/**\n * const pubSub = selectors.getPubSub(state);\n */\nvar getPubSub = function getPubSub(state) {\n  var _state$config = state.config,\n    config = _state$config === void 0 ? {} : _state$config;\n  var pubSub = config.pubSub;\n  return pubSub;\n};\n\n// 2. Chat & Connection\n\n/**\n * const connect = selectors.getConnect(state);\n * connect('user-id-sendbirdian', 'access-token-0000')\n *  .then((user) => {})\n *  .catch((error) => {})\n */\nvar getConnect = function getConnect(state) {\n  return function (userId, accessToken) {\n    return new Promise(function (resolve, reject) {\n      var sdk = getSdk(state);\n      if (!sdk) {\n        reject(new Error('Sdk not found'));\n      }\n      if (!(sdk !== null && sdk !== void 0 && sdk.connect && typeof sdk.connect === 'function')) {\n        reject(new Error('Not found the function \"connect'));\n      }\n      if (!accessToken) {\n        sdk.connect(userId).then(function (res) {\n          return resolve(res);\n        }).catch(function (err) {\n          return reject(err);\n        });\n      } else {\n        sdk.connect(userId, accessToken).then(function (res) {\n          return resolve(res);\n        }).catch(function (err) {\n          return reject(err);\n        });\n      }\n    });\n  };\n};\n\n/**\n * const disconnect = selectors.getDisconnect(state);\n * disconnect()\n *  .then(() => {})\n *  .catch((error) => {})\n */\nvar getDisconnect = function getDisconnect(state) {\n  return function () {\n    return new Promise(function (resolve, reject) {\n      var sdk = getSdk(state);\n      if (!sdk) {\n        reject(new Error('Sdk not found'));\n      }\n      if (!(sdk.disconnect && typeof sdk.disconnect === 'function')) {\n        reject(new Error('Not found the function \"disconnect'));\n      }\n      sdk.disconnect().then(function (res) {\n        return resolve(res);\n      }).catch(function (err) {\n        return reject(err);\n      });\n    });\n  };\n};\n\n/**\n * const updateUserInfo = selectors.getUpdateUserInfo(state);\n * updateUserInfo('new-nickname', 'new-profile-url')\n *  .then((user) => {})\n *  .catch((error) => {})\n */\nvar getUpdateUserInfo = function getUpdateUserInfo(state) {\n  return function (nickname, profileUrl) {\n    return new Promise(function (resolve, reject) {\n      var sdk = getSdk(state);\n      if (!sdk) {\n        reject(new Error('Sdk not found'));\n      }\n      if (!(sdk.updateCurrentUserInfo && typeof sdk.updateCurrentUserInfo === 'function')) {\n        reject(new Error('Not found the function \"updateCurrentUserInfo\"'));\n      }\n      var userParams = {\n        nickname: nickname\n      };\n      if (profileUrl) {\n        userParams.profileUrl = profileUrl;\n      }\n      sdk.updateCurrentUserInfo(userParams).then(function (res) {\n        return resolve(res);\n      }).catch(function (err) {\n        return reject(err);\n      });\n    });\n  };\n};\n\n// 3. Channel\n\n/**\n * const createGroupChannel = selectors.getCreateGroupChannel(state);\n * createGroupChannel(channelParams: GroupChannelCreateParams)\n *  .then((channel) => {})\n *  .catch((error) => {})\n */\nvar getCreateGroupChannel = function getCreateGroupChannel(state) {\n  return function (params) {\n    return new Promise(function (resolve, reject) {\n      var sdk = getSdk(state);\n      var pubSub = getPubSub(state);\n      if (!sdk) {\n        reject(new Error('Sdk not found'));\n      }\n      if (!sdk.groupChannel) {\n        reject(new Error('Not found GroupChannelModule'));\n      }\n      if (!(sdk.groupChannel.createChannel && typeof sdk.groupChannel.createChannel === 'function')) {\n        reject(new Error('Not found the function \"createChannel\"'));\n      }\n      sdk.groupChannel.createChannel(params).then(function (channel) {\n        resolve(channel);\n        pubSub.publish(PUBSUB_TOPICS.CREATE_CHANNEL, {\n          channel: channel\n        });\n      }).catch(reject);\n    });\n  };\n};\n\n/**\n * const createOpenChannel = selectors.getCreateOpenChannel(state);\n * createOpenChannel(channelParams: OpenChannelCreateParams)\n *  .then((channel) => {})\n *  .catch((error) => {})\n */\nvar getCreateOpenChannel = function getCreateOpenChannel(state) {\n  return function (params) {\n    return new Promise(function (resolve, reject) {\n      var sdk = getSdk(state);\n      // const pubSub = getPubSub(state);\n      if (!sdk) {\n        reject(new Error('Sdk not found'));\n      }\n      if (!sdk.openChannel) {\n        reject(new Error('Not found OpenChannelModule'));\n      }\n      if (!(sdk.openChannel.createChannel && typeof sdk.openChannel.createChannel === 'function')) {\n        reject(new Error('Not found the function \"createChannel\"'));\n      }\n      sdk.openChannel.createChannel(params).then(function (channel) {\n        resolve(channel);\n        // Consider pubSub process\n      }).catch(reject);\n    });\n  };\n};\n\n/**\n * const getGroupChannel = selectors.getGetGroupChannel(state);\n * getGroupChannel('channel-url-1234', isSelected)\n *  .then((channel) => {\n *    // groupChannel = channel;\n *    // or\n *    // setCurrentChannel(channel);\n *  })\n *  .catch((error) => {})\n */\nvar getGetGroupChannel = function getGetGroupChannel(state) {\n  return function (channelUrl) {\n    return new Promise(function (resolve, reject) {\n      var sdk = getSdk(state);\n      // const pubSub = getPubSub(state);\n      if (!sdk) {\n        reject(new Error('Sdk not found'));\n      }\n      if (!sdk.groupChannel) {\n        reject(new Error('Not found GroupChannelModule'));\n      }\n      if (!(sdk.groupChannel.getChannel && typeof sdk.groupChannel.getChannel === 'function')) {\n        reject(new Error('Not found the function \"getChannel\"'));\n      }\n      sdk.groupChannel.getChannel(channelUrl).then(function (channel) {\n        resolve(channel);\n        // Add pubSub with isSelected\n      }).catch(reject);\n    });\n  };\n};\n\n/**\n * const getOpenChannel = selectors.getGetOpenChannel(state);\n * getOpenChannel('channel-url-12345')\n *  .then((channel) => {\n *    // openChannel = channel;\n *    // or\n *    // setCurrentChannel(channel);\n *  })\n *  .catch((error) => {})\n */\nvar getGetOpenChannel = function getGetOpenChannel(state) {\n  return function (channelUrl) {\n    return new Promise(function (resolve, reject) {\n      var sdk = getSdk(state);\n      // const pubSub = getPubSub(state);\n      if (!sdk) {\n        reject(new Error('Sdk not found'));\n      }\n      if (!sdk.openChannel) {\n        reject(new Error('Not found OpenChannelModule'));\n      }\n      if (!(sdk.openChannel.getChannel && typeof sdk.openChannel.getChannel === 'function')) {\n        reject(new Error('Not found the function \"getChannel\"'));\n      }\n      sdk.openChannel.getChannel(channelUrl).then(function (channel) {\n        resolve(channel);\n        // Add pubSub with isSelected\n      }).catch(reject);\n    });\n  };\n};\n\n/**\n * const leaveChannel = selectors.getLeaveGroupChannel(state);\n * leaveChannel('group-channel-url')\n *  .then((channel) => {})\n *  .catch((error) => {})\n */\nvar getLeaveGroupChannel = function getLeaveGroupChannel(state) {\n  return function (channelUrl) {\n    return new Promise(function (resolve, reject) {\n      var _getGetGroupChannel;\n      (_getGetGroupChannel = getGetGroupChannel(state)) === null || _getGetGroupChannel === void 0 ? void 0 : _getGetGroupChannel(channelUrl).then(function (channel) {\n        channel.leave().then(function () {\n          resolve();\n          // Add pubSub process\n        }).catch(reject);\n      }).catch(reject);\n    });\n  };\n};\n\n/**\n * const enterChannel = selectors.getEnterOpenChannel(state);\n * enterChannel('open-channel-url')\n *  .then((channel) => {})\n *  .catch((error) => {})\n */\nvar getEnterOpenChannel = function getEnterOpenChannel(state) {\n  return function (channelUrl) {\n    return new Promise(function (resolve, reject) {\n      var _getGetOpenChannel;\n      (_getGetOpenChannel = getGetOpenChannel(state)) === null || _getGetOpenChannel === void 0 ? void 0 : _getGetOpenChannel(channelUrl).then(function (channel) {\n        channel.enter().then(function () {\n          resolve(channel);\n          // Add pubSub process\n        }).catch(reject);\n      }).catch(reject);\n    });\n  };\n};\n\n/**\n * const exitChannel = selectors.getExitOpenChannel(state);\n * exitChannel('open-channel-url')\n *  .then((channel) => {})\n *  .catch((error) => {})\n */\nvar getExitOpenChannel = function getExitOpenChannel(state) {\n  return function (channelUrl) {\n    return new Promise(function (resolve, reject) {\n      var _getGetOpenChannel2;\n      (_getGetOpenChannel2 = getGetOpenChannel(state)) === null || _getGetOpenChannel2 === void 0 ? void 0 : _getGetOpenChannel2(channelUrl).then(function (channel) {\n        channel.exit().then(function () {\n          resolve(channel);\n          // Add pubSub process\n        }).catch(reject);\n      }).catch(reject);\n    });\n  };\n};\n\n/**\n * const freezeChannel = selectors.getFreezeChannel(currentChannel);\n * freezeChannel()\n *  .then(() => {})\n *  .catch((error) => {})\n */\nvar getFreezeChannel = function getFreezeChannel() {\n  return function (channel) {\n    return new Promise(function (resolve, reject) {\n      if (!(channel.freeze && typeof (channel === null || channel === void 0 ? void 0 : channel.freeze) === 'function')) {\n        reject(new Error('Not found the function \"freeze\"'));\n      }\n      channel.freeze().then(function () {\n        resolve();\n        // Add pubSub process\n        /**\n         * consider divide the logic to\n         * _freezeGroupChannel and _freezeOpenChannel\n         */\n      }).catch(reject);\n    });\n  };\n};\n\n/**\n * const unfreezeChannel = selectors.getUnfreezeChannel(currentChannel);\n * unfreezeChannel()\n *  .then((channel) => {})\n *  .catch((error) => {})\n */\nvar getUnfreezeChannel = function getUnfreezeChannel() {\n  return function (channel) {\n    return new Promise(function (resolve, reject) {\n      if (!(channel.unfreeze && typeof (channel === null || channel === void 0 ? void 0 : channel.unfreeze) === 'function')) {\n        reject(new Error('Not found the function \"unfreeze\"'));\n      }\n      channel.unfreeze().then(function () {\n        resolve();\n        // Add pubSub process\n        /**\n         * consider divide the logic to\n         * _unfreezeGroupChannel and _unfreezeOpenChannel\n         */\n      }).catch(reject);\n    });\n  };\n};\n\n// 4. Message\nvar UikitMessageHandler = /*#__PURE__*/function () {\n  function UikitMessageHandler() {\n    _classCallCheck(this, UikitMessageHandler);\n    _defineProperty(this, \"_onPending\", noop);\n    _defineProperty(this, \"_onFailed\", noop);\n    _defineProperty(this, \"_onSucceeded\", noop);\n  }\n  _createClass(UikitMessageHandler, [{\n    key: \"triggerPending\",\n    value: function triggerPending(message) {\n      this._onPending(message);\n    }\n  }, {\n    key: \"triggerFailed\",\n    value: function triggerFailed(error, message) {\n      this._onFailed(error, message.isResendable ? message : null);\n    }\n  }, {\n    key: \"triggerSucceeded\",\n    value: function triggerSucceeded(message) {\n      this._onSucceeded(message);\n    }\n  }, {\n    key: \"onPending\",\n    value: function onPending(handler) {\n      if (typeof handler === 'function') {\n        this._onPending = handler;\n      }\n      return this;\n    }\n  }, {\n    key: \"onFailed\",\n    value: function onFailed(handler) {\n      if (typeof handler === 'function') {\n        this._onFailed = handler;\n      }\n      return this;\n    }\n  }, {\n    key: \"onSucceeded\",\n    value: function onSucceeded(handler) {\n      if (typeof handler === 'function') {\n        this._onSucceeded = handler;\n      }\n      return this;\n    }\n  }]);\n  return UikitMessageHandler;\n}(); /**\n      * const sendUserMessage = selectors.getSendUserMessage(state);\n      * sendUserMessage(\n      *  channel: GroupChannel | OpenChannel,\n      *  params: UserMessageCreateParams,\n      * )\n      *  .onPending((message) => {})\n      *  .onFailed((error, message) => {})\n      *  .onSucceeded((message) => {})\n      */\nvar getSendUserMessage = function getSendUserMessage(state) {\n  return function (channel, params) {\n    var handler = new UikitMessageHandler();\n    var pubSub = getPubSub(state);\n    channel.sendUserMessage(params).onFailed(function (error, message) {\n      return handler.triggerFailed(error, message);\n    }).onPending(function (message) {\n      pubSub.publish(PUBSUB_TOPICS.SEND_MESSAGE_START, {\n        message: message,\n        channel: channel\n      });\n      handler.triggerPending(message);\n    }).onSucceeded(function (message) {\n      pubSub.publish(PUBSUB_TOPICS.SEND_USER_MESSAGE, {\n        message: message,\n        channel: channel\n      });\n      handler.triggerSucceeded(message);\n    });\n    return handler;\n  };\n};\n\n/**\n * const sendFileMessage = selectors.getSendFileMessage(state);\n * sendFileMessage(\n *  channel: GroupChannel | OpenChannel,\n *  params: FileMessageCreateParams,\n * )\n *  .onPending((message) => {})\n *  .onFailed((error, message) => {})\n *  .onSucceeded((message) => {})\n */\nvar getSendFileMessage = function getSendFileMessage(state) {\n  return function (channel, params) {\n    var handler = new UikitMessageHandler();\n    var pubSub = getPubSub(state);\n    channel.sendFileMessage(params).onFailed(function (error, message) {\n      return handler.triggerFailed(error, message);\n    }).onPending(function (message) {\n      pubSub.publish(PUBSUB_TOPICS.SEND_MESSAGE_START, {\n        message: message,\n        channel: channel\n      });\n      handler.triggerPending(message);\n    }).onSucceeded(function (message) {\n      pubSub.publish(PUBSUB_TOPICS.SEND_FILE_MESSAGE, {\n        message: message,\n        channel: channel\n      });\n      handler.triggerSucceeded(message);\n    });\n    return handler;\n  };\n};\n\n/**\n * const updateUserMessage = selectors.getUpdateUserMessage(state);\n * updateUserMessage(\n *  channel: GroupChannel | OpenChannel,\n *  messageId: number,\n *  messageParams: UserMessageUpdateParams,\n * )\n *  .then((message) => {})\n *  .catch((error) => {})\n */\nvar getUpdateUserMessage = function getUpdateUserMessage(state) {\n  return function (channel, messageId, params) {\n    return new Promise(function (resolve, reject) {\n      var pubSub = getPubSub(state);\n      channel.updateUserMessage(messageId, params).then(function (message) {\n        pubSub.publish(PUBSUB_TOPICS.UPDATE_USER_MESSAGE, {\n          message: message,\n          channel: channel,\n          fromSelector: true\n        });\n        resolve(message);\n      }).catch(reject);\n    });\n  };\n};\n\n// TODO: We will provie this function in the future\n/**\n * const updateFileMessage = selectors.getUpdateFileMessage(state);\n * updateFileMessage(\n *  channel: GroupChannel | OpenChannel,\n *  messageId: number,\n *  params: FileMessageUpdateParams,\n * )\n *  .then((message) => {})\n *  .catch((error) => {})\n */\n// const getUpdateFileMessage = (state: SendBirdState) => (\n//   (channel: GroupChannel | OpenChannel, messageId: number, params: FileMessageUpdateParams) => (\n//     new Promise((resolve, reject) => {\n//       const pubSub = getPubSub(state);\n//       channel.updateFileMessage(messageId, params)\n//         .then((message) => {\n//           pubSub.publish(\n//             topics.UPDATE_USER_MESSAGE,\n//             { message, channel, fromSelector: true },\n//           );\n//           resolve(message);\n//         })\n//         .catch(reject);\n//     })\n//   )\n// );\n\n/**\n * const deleteMessage = selectors.getDeleteMessage(state);\n * deleteMessage(\n *  channel: GroupChannel | OpenChannel,\n *  message: SendableMessage,\n * )\n *  .then((deletedMessage) => {})\n *  .catch((error) => {})\n */\nvar getDeleteMessage = function getDeleteMessage(state) {\n  return function (channel, message) {\n    return new Promise(function (resolve, reject) {\n      var pubSub = getPubSub(state);\n      var messageId = message.messageId;\n      channel.deleteMessage(message).then(function () {\n        pubSub.publish(PUBSUB_TOPICS.DELETE_MESSAGE, {\n          messageId: messageId,\n          channel: channel\n        });\n        resolve(message);\n      }).catch(reject);\n    });\n  };\n};\n\n/**\n * const resendUserMessage = selectors.getResendUserMessage(state);\n * resendUserMessage(\n *  channel: GroupChannel | OpenChannel,\n *  failedMessage: UserMessage,\n * )\n *  .then(() => {})\n *  .catch((error) => {})\n */\nvar getResendUserMessage = function getResendUserMessage(state) {\n  return function (channel, failedMessage) {\n    return new Promise(function (resolve, reject) {\n      var pubSub = getPubSub(state);\n      channel.resendUserMessage(failedMessage).then(function (message) {\n        pubSub.publish(PUBSUB_TOPICS.SEND_USER_MESSAGE, {\n          message: message,\n          channel: channel\n        });\n        resolve(message);\n      }).catch(reject);\n    });\n  };\n};\n\n/**\n * const resendFileMessage = selectors.getResendFileMessage(state);\n * resendFileMessage(\n *  channel: GroupChannel | OpenChannel,\n *  failedMessage: FileMessage,\n *  blob: Blob,\n * )\n *  .then(() => {})\n *  .catch((error) => {})\n */\nvar getResendFileMessage = function getResendFileMessage(state) {\n  return function (channel, failedMessage, blob) {\n    return new Promise(function (resolve, reject) {\n      var pubSub = getPubSub(state);\n      channel.resendFileMessage(failedMessage, blob).then(function (message) {\n        pubSub.publish(PUBSUB_TOPICS.SEND_FILE_MESSAGE, {\n          message: message,\n          channel: channel\n        });\n        resolve(message);\n      }).catch(reject);\n    });\n  };\n};\nvar sendbirdSelectors = {\n  getSdk: getSdk,\n  getPubSub: getPubSub,\n  getConnect: getConnect,\n  getDisconnect: getDisconnect,\n  getUpdateUserInfo: getUpdateUserInfo,\n  getCreateGroupChannel: getCreateGroupChannel,\n  getCreateOpenChannel: getCreateOpenChannel,\n  getGetGroupChannel: getGetGroupChannel,\n  getGetOpenChannel: getGetOpenChannel,\n  getLeaveGroupChannel: getLeaveGroupChannel,\n  getEnterOpenChannel: getEnterOpenChannel,\n  getExitOpenChannel: getExitOpenChannel,\n  getFreezeChannel: getFreezeChannel,\n  getUnfreezeChannel: getUnfreezeChannel,\n  getSendUserMessage: getSendUserMessage,\n  getSendFileMessage: getSendFileMessage,\n  getUpdateUserMessage: getUpdateUserMessage,\n  getDeleteMessage: getDeleteMessage,\n  getResendUserMessage: getResendUserMessage,\n  getResendFileMessage: getResendFileMessage\n};\nexport { UikitMessageHandler, sendbirdSelectors as default, getConnect, getCreateGroupChannel, getCreateOpenChannel, getDeleteMessage, getDisconnect, getEnterOpenChannel, getExitOpenChannel, getFreezeChannel, getGetGroupChannel, getGetOpenChannel, getLeaveGroupChannel, getPubSub, getResendFileMessage, getResendUserMessage, getSdk, getSendFileMessage, getSendUserMessage, getUnfreezeChannel, getUpdateUserInfo, getUpdateUserMessage };","map":{"version":3,"mappings":"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","names":["getSdk","state","stores","sdkStore","sdk","getPubSub","config","pubSub","getConnect","userId","accessToken","Promise","resolve","reject","Error","connect","then","res","catch","err","getDisconnect","disconnect","getUpdateUserInfo","nickname","profileUrl","updateCurrentUserInfo","userParams","getCreateGroupChannel","params","groupChannel","createChannel","channel","publish","topics","CREATE_CHANNEL","getCreateOpenChannel","openChannel","getGetGroupChannel","channelUrl","getChannel","getGetOpenChannel","getLeaveGroupChannel","_getGetGroupChannel","leave","getEnterOpenChannel","_getGetOpenChannel","enter","getExitOpenChannel","_getGetOpenChannel2","exit","getFreezeChannel","freeze","getUnfreezeChannel","unfreeze","UikitMessageHandler","constructor","_defineProperty","noop","triggerPending","message","_onPending","triggerFailed","error","_onFailed","isResendable","triggerSucceeded","_onSucceeded","onPending","handler","onFailed","onSucceeded","getSendUserMessage","sendUserMessage","SEND_MESSAGE_START","SEND_USER_MESSAGE","getSendFileMessage","sendFileMessage","SEND_FILE_MESSAGE","getUpdateUserMessage","messageId","updateUserMessage","UPDATE_USER_MESSAGE","fromSelector","getDeleteMessage","deleteMessage","DELETE_MESSAGE","getResendUserMessage","failedMessage","resendUserMessage","getResendFileMessage","blob","resendFileMessage","sendbirdSelectors"],"sources":["C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\lib\\selectors.ts"],"sourcesContent":["import topics from './pubSub/topics';\nimport type {\n  User,\n  UserUpdateParams,\n} from '@sendbird/chat';\n\nimport { FailedMessageHandler, MessageHandler, UserMessage, UserMessageCreateParams } from '@sendbird/chat/message';\nimport { GroupChannel, GroupChannelCreateParams, SendbirdGroupChat } from '@sendbird/chat/groupChannel';\nimport { OpenChannel, OpenChannelCreateParams, SendbirdOpenChat } from '@sendbird/chat/openChannel';\nimport { FileMessage, FileMessageCreateParams, SendableMessage, UserMessageUpdateParams } from '@sendbird/chat/lib/__definition';\n\nimport {\n  SdkStore,\n  SendBirdState,\n  SendBirdStateConfig,\n  SendBirdStateStore,\n} from './types';\nimport { noop } from '../utils/utils';\n\n/**\n * 1. UIKit Instances\n *    a. getSdk\n *    b. getPubSub\n * 2. Chat & Connection\n *    a. getConnect\n *    b. getDisconnect\n *    c. getUpdateUserInfo\n * 3. Channel\n *    a. getCreateGroupChannel\n *    b. getCreateOpenChannel\n *    c. getGetGroupChannel\n *    d. getGetOpenChannel\n *    e. getLeaveGroupChannel\n *    f. getEnterOpenChannel\n *    g. getExitOpenChannel\n *    h. getFreezeChannel\n *    i. getUnfreezeChannel\n * 4. Message\n *    a. getSendUserMessage\n *    b. getSendFileMessage\n *    c. getUpdateUserMessage\n *    d. x - getUpdateFileMessage\n *    e. getDeleteMessage\n *    f. getResendUserMessage\n *    g. getResendFileMessage\n */\n\n/**\n * import useSendbirdStateContext from '@sendbird-uikit/useSendbirdStateContext'\n * import selectors from '@sendbird-uikit/send'\n * const state = useSendbirdStateContext();\n */\n\n// 1. UIKit Instances\n\n/**\n * const sdk = selectors.getSdk(state);\n */\nexport const getSdk = (state: SendBirdState): SendbirdGroupChat & SendbirdOpenChat => {\n  const { stores = {} } = state;\n  const { sdkStore = {} } = stores as SendBirdStateStore;\n  const { sdk } = sdkStore as SdkStore;\n  return sdk;\n};\n\n/**\n * const pubSub = selectors.getPubSub(state);\n */\nexport const getPubSub = (state: SendBirdState): any => {\n  const { config = {} } = state;\n  const { pubSub } = config as SendBirdStateConfig;\n  return pubSub;\n};\n\n// 2. Chat & Connection\n\n/**\n * const connect = selectors.getConnect(state);\n * connect('user-id-sendbirdian', 'access-token-0000')\n *  .then((user) => {})\n *  .catch((error) => {})\n */\nexport const getConnect = (state: SendBirdState) => (\n  (userId: string, accessToken?: string): Promise<User> => (\n    new Promise((resolve, reject) => {\n      const sdk = getSdk(state);\n      if (!sdk) {\n        reject(new Error('Sdk not found'));\n      }\n      if (!(sdk?.connect && typeof sdk.connect === 'function')) {\n        reject(new Error('Not found the function \"connect'));\n      }\n      if (!accessToken) {\n        sdk.connect(userId)\n          .then((res) => resolve(res))\n          .catch((err) => reject(err));\n      } else {\n        sdk.connect(userId, accessToken)\n          .then((res) => resolve(res))\n          .catch((err) => reject(err));\n      }\n    })\n  )\n);\n\n/**\n * const disconnect = selectors.getDisconnect(state);\n * disconnect()\n *  .then(() => {})\n *  .catch((error) => {})\n */\nexport const getDisconnect = (state: SendBirdState) => (\n  (): Promise<void> => (\n    new Promise((resolve, reject) => {\n      const sdk = getSdk(state);\n      if (!sdk) {\n        reject(new Error('Sdk not found'));\n      }\n      if (!(sdk.disconnect && typeof sdk.disconnect === 'function')) {\n        reject(new Error('Not found the function \"disconnect'));\n      }\n      sdk.disconnect()\n        .then((res) => resolve(res))\n        .catch((err) => reject(err));\n    })\n  )\n);\n\n/**\n * const updateUserInfo = selectors.getUpdateUserInfo(state);\n * updateUserInfo('new-nickname', 'new-profile-url')\n *  .then((user) => {})\n *  .catch((error) => {})\n */\nexport const getUpdateUserInfo = (state: SendBirdState) => (\n  (nickname: string, profileUrl?: string): Promise<User> => (\n    new Promise((resolve, reject) => {\n      const sdk = getSdk(state);\n      if (!sdk) {\n        reject(new Error('Sdk not found'));\n      }\n      if (!(sdk.updateCurrentUserInfo && typeof sdk.updateCurrentUserInfo === 'function')) {\n        reject(new Error('Not found the function \"updateCurrentUserInfo\"'));\n      }\n      const userParams: UserUpdateParams = { nickname };\n      if (profileUrl) {\n        userParams.profileUrl = profileUrl;\n      }\n      sdk.updateCurrentUserInfo(userParams)\n        .then((res) => resolve(res))\n        .catch((err) => reject(err));\n    })\n  )\n);\n\n// 3. Channel\n\n/**\n * const createGroupChannel = selectors.getCreateGroupChannel(state);\n * createGroupChannel(channelParams: GroupChannelCreateParams)\n *  .then((channel) => {})\n *  .catch((error) => {})\n */\nexport const getCreateGroupChannel = (state: SendBirdState) => (\n  (params: GroupChannelCreateParams): Promise<GroupChannel> => (\n    new Promise((resolve, reject) => {\n      const sdk = getSdk(state);\n      const pubSub = getPubSub(state);\n      if (!sdk) {\n        reject(new Error('Sdk not found'));\n      }\n      if (!sdk.groupChannel) {\n        reject(new Error('Not found GroupChannelModule'));\n      }\n      if (!(sdk.groupChannel.createChannel && typeof sdk.groupChannel.createChannel === 'function')) {\n        reject(new Error('Not found the function \"createChannel\"'));\n      }\n      sdk.groupChannel.createChannel(params)\n        .then((channel) => {\n          resolve(channel);\n          pubSub.publish(\n            topics.CREATE_CHANNEL,\n            { channel },\n          );\n        })\n        .catch(reject);\n    })\n  )\n);\n\n/**\n * const createOpenChannel = selectors.getCreateOpenChannel(state);\n * createOpenChannel(channelParams: OpenChannelCreateParams)\n *  .then((channel) => {})\n *  .catch((error) => {})\n */\nexport const getCreateOpenChannel = (state: SendBirdState) => (\n  (params: OpenChannelCreateParams): Promise<OpenChannel> => (\n    new Promise((resolve, reject) => {\n      const sdk = getSdk(state);\n      // const pubSub = getPubSub(state);\n      if (!sdk) {\n        reject(new Error('Sdk not found'));\n      }\n      if (!sdk.openChannel) {\n        reject(new Error('Not found OpenChannelModule'));\n      }\n      if (!(sdk.openChannel.createChannel && typeof sdk.openChannel.createChannel === 'function')) {\n        reject(new Error('Not found the function \"createChannel\"'));\n      }\n      sdk.openChannel.createChannel(params)\n        .then((channel) => {\n          resolve(channel);\n          // Consider pubSub process\n        })\n        .catch(reject);\n    })\n  )\n);\n\n/**\n * const getGroupChannel = selectors.getGetGroupChannel(state);\n * getGroupChannel('channel-url-1234', isSelected)\n *  .then((channel) => {\n *    // groupChannel = channel;\n *    // or\n *    // setCurrentChannel(channel);\n *  })\n *  .catch((error) => {})\n */\nexport const getGetGroupChannel = (state: SendBirdState) => (\n  (channelUrl: string): Promise<GroupChannel> => (\n    new Promise((resolve, reject) => {\n      const sdk = getSdk(state);\n      // const pubSub = getPubSub(state);\n      if (!sdk) {\n        reject(new Error('Sdk not found'));\n      }\n      if (!sdk.groupChannel) {\n        reject(new Error('Not found GroupChannelModule'));\n      }\n      if (!(sdk.groupChannel.getChannel && typeof sdk.groupChannel.getChannel === 'function')) {\n        reject(new Error('Not found the function \"getChannel\"'));\n      }\n      sdk.groupChannel.getChannel(channelUrl)\n        .then((channel) => {\n          resolve(channel);\n          // Add pubSub with isSelected\n        })\n        .catch(reject);\n    })\n  )\n);\n\n/**\n * const getOpenChannel = selectors.getGetOpenChannel(state);\n * getOpenChannel('channel-url-12345')\n *  .then((channel) => {\n *    // openChannel = channel;\n *    // or\n *    // setCurrentChannel(channel);\n *  })\n *  .catch((error) => {})\n */\nexport const getGetOpenChannel = (state: SendBirdState) => (\n  (channelUrl: string): Promise<OpenChannel> => (\n    new Promise((resolve, reject) => {\n      const sdk = getSdk(state);\n      // const pubSub = getPubSub(state);\n      if (!sdk) {\n        reject(new Error('Sdk not found'));\n      }\n      if (!sdk.openChannel) {\n        reject(new Error('Not found OpenChannelModule'));\n      }\n      if (!(sdk.openChannel.getChannel && typeof sdk.openChannel.getChannel === 'function')) {\n        reject(new Error('Not found the function \"getChannel\"'));\n      }\n      sdk.openChannel.getChannel(channelUrl)\n        .then((channel) => {\n          resolve(channel);\n          // Add pubSub with isSelected\n        })\n        .catch(reject);\n    })\n  )\n);\n\n/**\n * const leaveChannel = selectors.getLeaveGroupChannel(state);\n * leaveChannel('group-channel-url')\n *  .then((channel) => {})\n *  .catch((error) => {})\n */\nexport const getLeaveGroupChannel = (state: SendBirdState) => (\n  (channelUrl: string): Promise<void> => (\n    new Promise((resolve, reject) => {\n      getGetGroupChannel(state)?.(channelUrl)\n        .then((channel) => {\n          channel.leave()\n            .then(() => {\n              resolve();\n              // Add pubSub process\n            })\n            .catch(reject);\n        })\n        .catch(reject);\n    })\n  )\n);\n\n/**\n * const enterChannel = selectors.getEnterOpenChannel(state);\n * enterChannel('open-channel-url')\n *  .then((channel) => {})\n *  .catch((error) => {})\n */\nexport const getEnterOpenChannel = (state: SendBirdState) => (\n  (channelUrl: string): Promise<OpenChannel> => (\n    new Promise((resolve, reject) => {\n      getGetOpenChannel(state)?.(channelUrl)\n        .then((channel) => {\n          channel.enter()\n            .then(() => {\n              resolve(channel);\n              // Add pubSub process\n            })\n            .catch(reject);\n        })\n        .catch(reject);\n    })\n  )\n);\n\n/**\n * const exitChannel = selectors.getExitOpenChannel(state);\n * exitChannel('open-channel-url')\n *  .then((channel) => {})\n *  .catch((error) => {})\n */\nexport const getExitOpenChannel = (state: SendBirdState) => (\n  (channelUrl: string): Promise<OpenChannel> => (\n    new Promise((resolve, reject) => {\n      getGetOpenChannel(state)?.(channelUrl)\n        .then((channel) => {\n          channel.exit()\n            .then(() => {\n              resolve(channel);\n              // Add pubSub process\n            })\n            .catch(reject);\n        })\n        .catch(reject);\n    })\n  )\n);\n\n/**\n * const freezeChannel = selectors.getFreezeChannel(currentChannel);\n * freezeChannel()\n *  .then(() => {})\n *  .catch((error) => {})\n */\nexport const getFreezeChannel = () => (\n  (channel: GroupChannel | OpenChannel): Promise<void> => (\n    new Promise((resolve, reject) => {\n      if (!(channel.freeze && typeof channel?.freeze === 'function')) {\n        reject(new Error('Not found the function \"freeze\"'));\n      }\n      channel.freeze()\n        .then(() => {\n          resolve();\n          // Add pubSub process\n          /**\n           * consider divide the logic to\n           * _freezeGroupChannel and _freezeOpenChannel\n           */\n        })\n        .catch(reject);\n    })\n  )\n);\n\n/**\n * const unfreezeChannel = selectors.getUnfreezeChannel(currentChannel);\n * unfreezeChannel()\n *  .then((channel) => {})\n *  .catch((error) => {})\n */\nexport const getUnfreezeChannel = () => (\n  (channel: GroupChannel | OpenChannel): Promise<void> => (\n    new Promise((resolve, reject) => {\n      if (!(channel.unfreeze && typeof channel?.unfreeze === 'function')) {\n        reject(new Error('Not found the function \"unfreeze\"'));\n      }\n      channel.unfreeze()\n        .then(() => {\n          resolve();\n          // Add pubSub process\n          /**\n           * consider divide the logic to\n           * _unfreezeGroupChannel and _unfreezeOpenChannel\n           */\n        })\n        .catch(reject);\n    })\n  )\n);\n\n// 4. Message\nexport class UikitMessageHandler {\n  private _onPending: MessageHandler = noop;\n\n  private _onFailed: FailedMessageHandler = noop;\n\n  private _onSucceeded: MessageHandler = noop;\n\n  public triggerPending(message: SendableMessage): void {\n    this._onPending(message);\n  }\n\n  public triggerFailed(error: Error, message: SendableMessage): void {\n    this._onFailed(error, message.isResendable ? message : null);\n  }\n\n  public triggerSucceeded(message: SendableMessage): void {\n    this._onSucceeded(message);\n  }\n\n  public onPending(handler: MessageHandler): UikitMessageHandler {\n    if (typeof handler === 'function') {\n      this._onPending = handler;\n    }\n    return this;\n  }\n\n  public onFailed(handler: FailedMessageHandler): UikitMessageHandler {\n    if (typeof handler === 'function') {\n      this._onFailed = handler;\n    }\n    return this;\n  }\n\n  public onSucceeded(handler: MessageHandler): UikitMessageHandler {\n    if (typeof handler === 'function') {\n      this._onSucceeded = handler;\n    }\n    return this;\n  }\n}\n\n/**\n * const sendUserMessage = selectors.getSendUserMessage(state);\n * sendUserMessage(\n *  channel: GroupChannel | OpenChannel,\n *  params: UserMessageCreateParams,\n * )\n *  .onPending((message) => {})\n *  .onFailed((error, message) => {})\n *  .onSucceeded((message) => {})\n */\n\nexport const getSendUserMessage = (state: SendBirdState) => (\n  (channel: GroupChannel | OpenChannel, params: UserMessageCreateParams): UikitMessageHandler => {\n    const handler = new UikitMessageHandler();\n    const pubSub = getPubSub(state);\n    channel.sendUserMessage(params)\n      .onFailed((error, message) => handler.triggerFailed(error, message))\n      .onPending((message) => {\n        pubSub.publish(\n          topics.SEND_MESSAGE_START,\n          { message, channel },\n        );\n        handler.triggerPending(message);\n      })\n      .onSucceeded((message) => {\n        pubSub.publish(\n          topics.SEND_USER_MESSAGE,\n          { message, channel },\n        );\n        handler.triggerSucceeded(message);\n      });\n    return handler;\n  }\n);\n\n/**\n * const sendFileMessage = selectors.getSendFileMessage(state);\n * sendFileMessage(\n *  channel: GroupChannel | OpenChannel,\n *  params: FileMessageCreateParams,\n * )\n *  .onPending((message) => {})\n *  .onFailed((error, message) => {})\n *  .onSucceeded((message) => {})\n */\nexport const getSendFileMessage = (state: SendBirdState) => (\n  (channel: GroupChannel | OpenChannel, params: FileMessageCreateParams): UikitMessageHandler => {\n    const handler = new UikitMessageHandler();\n    const pubSub = getPubSub(state);\n    channel.sendFileMessage(params)\n      .onFailed((error, message) => handler.triggerFailed(error, message))\n      .onPending((message) => {\n        pubSub.publish(\n          topics.SEND_MESSAGE_START,\n          { message, channel },\n        );\n        handler.triggerPending(message);\n      })\n      .onSucceeded((message) => {\n        pubSub.publish(\n          topics.SEND_FILE_MESSAGE,\n          { message, channel },\n        );\n        handler.triggerSucceeded(message);\n      });\n    return handler;\n  }\n);\n\n/**\n * const updateUserMessage = selectors.getUpdateUserMessage(state);\n * updateUserMessage(\n *  channel: GroupChannel | OpenChannel,\n *  messageId: number,\n *  messageParams: UserMessageUpdateParams,\n * )\n *  .then((message) => {})\n *  .catch((error) => {})\n */\nexport const getUpdateUserMessage = (state: SendBirdState) => (\n  (channel: GroupChannel | OpenChannel, messageId: number, params: UserMessageUpdateParams): Promise<UserMessage> => (\n    new Promise((resolve, reject) => {\n      const pubSub = getPubSub(state);\n      channel.updateUserMessage(messageId, params)\n        .then((message) => {\n          pubSub.publish(\n            topics.UPDATE_USER_MESSAGE,\n            { message, channel, fromSelector: true },\n          );\n          resolve(message);\n        })\n        .catch(reject);\n    })\n  )\n);\n\n// TODO: We will provie this function in the future\n/**\n * const updateFileMessage = selectors.getUpdateFileMessage(state);\n * updateFileMessage(\n *  channel: GroupChannel | OpenChannel,\n *  messageId: number,\n *  params: FileMessageUpdateParams,\n * )\n *  .then((message) => {})\n *  .catch((error) => {})\n */\n// const getUpdateFileMessage = (state: SendBirdState) => (\n//   (channel: GroupChannel | OpenChannel, messageId: number, params: FileMessageUpdateParams) => (\n//     new Promise((resolve, reject) => {\n//       const pubSub = getPubSub(state);\n//       channel.updateFileMessage(messageId, params)\n//         .then((message) => {\n//           pubSub.publish(\n//             topics.UPDATE_USER_MESSAGE,\n//             { message, channel, fromSelector: true },\n//           );\n//           resolve(message);\n//         })\n//         .catch(reject);\n//     })\n//   )\n// );\n\n/**\n * const deleteMessage = selectors.getDeleteMessage(state);\n * deleteMessage(\n *  channel: GroupChannel | OpenChannel,\n *  message: SendableMessage,\n * )\n *  .then((deletedMessage) => {})\n *  .catch((error) => {})\n */\nexport const getDeleteMessage = (state: SendBirdState) => (\n  (channel: GroupChannel | OpenChannel, message: UserMessage | FileMessage): Promise<UserMessage | FileMessage> => (\n    new Promise((resolve, reject) => {\n      const pubSub = getPubSub(state);\n      const { messageId } = message;\n      channel.deleteMessage(message)\n        .then(() => {\n          pubSub.publish(\n            topics.DELETE_MESSAGE,\n            { messageId, channel },\n          );\n          resolve(message);\n        })\n        .catch(reject);\n    })\n  )\n);\n\n/**\n * const resendUserMessage = selectors.getResendUserMessage(state);\n * resendUserMessage(\n *  channel: GroupChannel | OpenChannel,\n *  failedMessage: UserMessage,\n * )\n *  .then(() => {})\n *  .catch((error) => {})\n */\nexport const getResendUserMessage = (state: SendBirdState) => (\n  (channel: GroupChannel | OpenChannel, failedMessage: UserMessage): Promise<UserMessage> => (\n    new Promise((resolve, reject) => {\n      const pubSub = getPubSub(state);\n      channel.resendUserMessage(failedMessage)\n        .then((message) => {\n          pubSub.publish(\n            topics.SEND_USER_MESSAGE,\n            { message, channel },\n          );\n          resolve(message);\n        })\n        .catch(reject);\n    })\n  )\n);\n\n/**\n * const resendFileMessage = selectors.getResendFileMessage(state);\n * resendFileMessage(\n *  channel: GroupChannel | OpenChannel,\n *  failedMessage: FileMessage,\n *  blob: Blob,\n * )\n *  .then(() => {})\n *  .catch((error) => {})\n */\nexport const getResendFileMessage = (state: SendBirdState) => (\n  (channel: GroupChannel | OpenChannel, failedMessage: FileMessage, blob: Blob): Promise<FileMessage> => (\n    new Promise((resolve, reject) => {\n      const pubSub = getPubSub(state);\n      channel.resendFileMessage(failedMessage, blob)\n        .then((message) => {\n          pubSub.publish(\n            topics.SEND_FILE_MESSAGE,\n            { message, channel },\n          );\n          resolve(message);\n        })\n        .catch(reject);\n    })\n  )\n);\n\nconst sendbirdSelectors = {\n  getSdk,\n  getPubSub,\n  getConnect,\n  getDisconnect,\n  getUpdateUserInfo,\n  getCreateGroupChannel,\n  getCreateOpenChannel,\n  getGetGroupChannel,\n  getGetOpenChannel,\n  getLeaveGroupChannel,\n  getEnterOpenChannel,\n  getExitOpenChannel,\n  getFreezeChannel,\n  getUnfreezeChannel,\n  getSendUserMessage,\n  getSendFileMessage,\n  getUpdateUserMessage,\n  getDeleteMessage,\n  getResendUserMessage,\n  getResendFileMessage,\n};\n\nexport default sendbirdSelectors;\n"]},"metadata":{},"sourceType":"module"}