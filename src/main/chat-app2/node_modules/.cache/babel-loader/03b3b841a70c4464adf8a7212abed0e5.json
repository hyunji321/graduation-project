{"ast":null,"code":"import { a as _defineProperty } from './_rollupPluginBabelHelpers-6bb0305c.js';\nimport { P as PUBSUB_TOPICS } from './topics-b2b77fb9.js';\nimport { n as noop } from './utils-4bbbca2c.js';\n\n/**\n * 1. UIKit Instances\n *    a. getSdk\n *    b. getPubSub\n * 2. Chat & Connection\n *    a. getConnect\n *    b. getDisconnect\n *    c. getUpdateUserInfo\n * 3. Channel\n *    a. getCreateGroupChannel\n *    b. getCreateOpenChannel\n *    c. getGetGroupChannel\n *    d. getGetOpenChannel\n *    e. getLeaveGroupChannel\n *    f. getEnterOpenChannel\n *    g. getExitOpenChannel\n *    h. getFreezeChannel\n *    i. getUnfreezeChannel\n * 4. Message\n *    a. getSendUserMessage\n *    b. getSendFileMessage\n *    c. getUpdateUserMessage\n *    d. x - getUpdateFileMessage\n *    e. getDeleteMessage\n *    f. getResendUserMessage\n *    g. getResendFileMessage\n */\n\n/**\n * import useSendbirdStateContext from '@sendbird-uikit/useSendbirdStateContext'\n * import selectors from '@sendbird-uikit/send'\n * const state = useSendbirdStateContext();\n */\n\n// 1. UIKit Instances\n\n/**\n * const sdk = selectors.getSdk(state);\n */\nconst getSdk = state => {\n  const {\n    stores = {}\n  } = state;\n  const {\n    sdkStore = {}\n  } = stores;\n  const {\n    sdk\n  } = sdkStore;\n  return sdk;\n};\n\n/**\n * const pubSub = selectors.getPubSub(state);\n */\nconst getPubSub = state => {\n  const {\n    config = {}\n  } = state;\n  const {\n    pubSub\n  } = config;\n  return pubSub;\n};\n\n// 2. Chat & Connection\n\n/**\n * const connect = selectors.getConnect(state);\n * connect('user-id-sendbirdian', 'access-token-0000')\n *  .then((user) => {})\n *  .catch((error) => {})\n */\nconst getConnect = state => (userId, accessToken) => new Promise((resolve, reject) => {\n  const sdk = getSdk(state);\n  if (!sdk) {\n    reject(new Error('Sdk not found'));\n  }\n  if (!(sdk !== null && sdk !== void 0 && sdk.connect && typeof sdk.connect === 'function')) {\n    reject(new Error('Not found the function \"connect'));\n  }\n  if (!accessToken) {\n    sdk.connect(userId).then(res => resolve(res)).catch(err => reject(err));\n  } else {\n    sdk.connect(userId, accessToken).then(res => resolve(res)).catch(err => reject(err));\n  }\n});\n\n/**\n * const disconnect = selectors.getDisconnect(state);\n * disconnect()\n *  .then(() => {})\n *  .catch((error) => {})\n */\nconst getDisconnect = state => () => new Promise((resolve, reject) => {\n  const sdk = getSdk(state);\n  if (!sdk) {\n    reject(new Error('Sdk not found'));\n  }\n  if (!(sdk.disconnect && typeof sdk.disconnect === 'function')) {\n    reject(new Error('Not found the function \"disconnect'));\n  }\n  sdk.disconnect().then(res => resolve(res)).catch(err => reject(err));\n});\n\n/**\n * const updateUserInfo = selectors.getUpdateUserInfo(state);\n * updateUserInfo('new-nickname', 'new-profile-url')\n *  .then((user) => {})\n *  .catch((error) => {})\n */\nconst getUpdateUserInfo = state => (nickname, profileUrl) => new Promise((resolve, reject) => {\n  const sdk = getSdk(state);\n  if (!sdk) {\n    reject(new Error('Sdk not found'));\n  }\n  if (!(sdk.updateCurrentUserInfo && typeof sdk.updateCurrentUserInfo === 'function')) {\n    reject(new Error('Not found the function \"updateCurrentUserInfo\"'));\n  }\n  const userParams = {\n    nickname\n  };\n  if (profileUrl) {\n    userParams.profileUrl = profileUrl;\n  }\n  sdk.updateCurrentUserInfo(userParams).then(res => resolve(res)).catch(err => reject(err));\n});\n\n// 3. Channel\n\n/**\n * const createGroupChannel = selectors.getCreateGroupChannel(state);\n * createGroupChannel(channelParams: GroupChannelCreateParams)\n *  .then((channel) => {})\n *  .catch((error) => {})\n */\nconst getCreateGroupChannel = state => params => new Promise((resolve, reject) => {\n  const sdk = getSdk(state);\n  const pubSub = getPubSub(state);\n  if (!sdk) {\n    reject(new Error('Sdk not found'));\n  }\n  if (!sdk.groupChannel) {\n    reject(new Error('Not found GroupChannelModule'));\n  }\n  if (!(sdk.groupChannel.createChannel && typeof sdk.groupChannel.createChannel === 'function')) {\n    reject(new Error('Not found the function \"createChannel\"'));\n  }\n  sdk.groupChannel.createChannel(params).then(channel => {\n    resolve(channel);\n    pubSub.publish(PUBSUB_TOPICS.CREATE_CHANNEL, {\n      channel\n    });\n  }).catch(reject);\n});\n\n/**\n * const createOpenChannel = selectors.getCreateOpenChannel(state);\n * createOpenChannel(channelParams: OpenChannelCreateParams)\n *  .then((channel) => {})\n *  .catch((error) => {})\n */\nconst getCreateOpenChannel = state => params => new Promise((resolve, reject) => {\n  const sdk = getSdk(state);\n  // const pubSub = getPubSub(state);\n  if (!sdk) {\n    reject(new Error('Sdk not found'));\n  }\n  if (!sdk.openChannel) {\n    reject(new Error('Not found OpenChannelModule'));\n  }\n  if (!(sdk.openChannel.createChannel && typeof sdk.openChannel.createChannel === 'function')) {\n    reject(new Error('Not found the function \"createChannel\"'));\n  }\n  sdk.openChannel.createChannel(params).then(channel => {\n    resolve(channel);\n    // Consider pubSub process\n  }).catch(reject);\n});\n\n/**\n * const getGroupChannel = selectors.getGetGroupChannel(state);\n * getGroupChannel('channel-url-1234', isSelected)\n *  .then((channel) => {\n *    // groupChannel = channel;\n *    // or\n *    // setCurrentChannel(channel);\n *  })\n *  .catch((error) => {})\n */\nconst getGetGroupChannel = state => channelUrl => new Promise((resolve, reject) => {\n  const sdk = getSdk(state);\n  // const pubSub = getPubSub(state);\n  if (!sdk) {\n    reject(new Error('Sdk not found'));\n  }\n  if (!sdk.groupChannel) {\n    reject(new Error('Not found GroupChannelModule'));\n  }\n  if (!(sdk.groupChannel.getChannel && typeof sdk.groupChannel.getChannel === 'function')) {\n    reject(new Error('Not found the function \"getChannel\"'));\n  }\n  sdk.groupChannel.getChannel(channelUrl).then(channel => {\n    resolve(channel);\n    // Add pubSub with isSelected\n  }).catch(reject);\n});\n\n/**\n * const getOpenChannel = selectors.getGetOpenChannel(state);\n * getOpenChannel('channel-url-12345')\n *  .then((channel) => {\n *    // openChannel = channel;\n *    // or\n *    // setCurrentChannel(channel);\n *  })\n *  .catch((error) => {})\n */\nconst getGetOpenChannel = state => channelUrl => new Promise((resolve, reject) => {\n  const sdk = getSdk(state);\n  // const pubSub = getPubSub(state);\n  if (!sdk) {\n    reject(new Error('Sdk not found'));\n  }\n  if (!sdk.openChannel) {\n    reject(new Error('Not found OpenChannelModule'));\n  }\n  if (!(sdk.openChannel.getChannel && typeof sdk.openChannel.getChannel === 'function')) {\n    reject(new Error('Not found the function \"getChannel\"'));\n  }\n  sdk.openChannel.getChannel(channelUrl).then(channel => {\n    resolve(channel);\n    // Add pubSub with isSelected\n  }).catch(reject);\n});\n\n/**\n * const leaveChannel = selectors.getLeaveGroupChannel(state);\n * leaveChannel('group-channel-url')\n *  .then((channel) => {})\n *  .catch((error) => {})\n */\nconst getLeaveGroupChannel = state => channelUrl => new Promise((resolve, reject) => {\n  var _getGetGroupChannel;\n  (_getGetGroupChannel = getGetGroupChannel(state)) === null || _getGetGroupChannel === void 0 ? void 0 : _getGetGroupChannel(channelUrl).then(channel => {\n    channel.leave().then(() => {\n      resolve();\n      // Add pubSub process\n    }).catch(reject);\n  }).catch(reject);\n});\n\n/**\n * const enterChannel = selectors.getEnterOpenChannel(state);\n * enterChannel('open-channel-url')\n *  .then((channel) => {})\n *  .catch((error) => {})\n */\nconst getEnterOpenChannel = state => channelUrl => new Promise((resolve, reject) => {\n  var _getGetOpenChannel;\n  (_getGetOpenChannel = getGetOpenChannel(state)) === null || _getGetOpenChannel === void 0 ? void 0 : _getGetOpenChannel(channelUrl).then(channel => {\n    channel.enter().then(() => {\n      resolve(channel);\n      // Add pubSub process\n    }).catch(reject);\n  }).catch(reject);\n});\n\n/**\n * const exitChannel = selectors.getExitOpenChannel(state);\n * exitChannel('open-channel-url')\n *  .then((channel) => {})\n *  .catch((error) => {})\n */\nconst getExitOpenChannel = state => channelUrl => new Promise((resolve, reject) => {\n  var _getGetOpenChannel2;\n  (_getGetOpenChannel2 = getGetOpenChannel(state)) === null || _getGetOpenChannel2 === void 0 ? void 0 : _getGetOpenChannel2(channelUrl).then(channel => {\n    channel.exit().then(() => {\n      resolve(channel);\n      // Add pubSub process\n    }).catch(reject);\n  }).catch(reject);\n});\n\n/**\n * const freezeChannel = selectors.getFreezeChannel(currentChannel);\n * freezeChannel()\n *  .then(() => {})\n *  .catch((error) => {})\n */\nconst getFreezeChannel = () => channel => new Promise((resolve, reject) => {\n  if (!(channel.freeze && typeof (channel === null || channel === void 0 ? void 0 : channel.freeze) === 'function')) {\n    reject(new Error('Not found the function \"freeze\"'));\n  }\n  channel.freeze().then(() => {\n    resolve();\n    // Add pubSub process\n    /**\n     * consider divide the logic to\n     * _freezeGroupChannel and _freezeOpenChannel\n     */\n  }).catch(reject);\n});\n\n/**\n * const unfreezeChannel = selectors.getUnfreezeChannel(currentChannel);\n * unfreezeChannel()\n *  .then((channel) => {})\n *  .catch((error) => {})\n */\nconst getUnfreezeChannel = () => channel => new Promise((resolve, reject) => {\n  if (!(channel.unfreeze && typeof (channel === null || channel === void 0 ? void 0 : channel.unfreeze) === 'function')) {\n    reject(new Error('Not found the function \"unfreeze\"'));\n  }\n  channel.unfreeze().then(() => {\n    resolve();\n    // Add pubSub process\n    /**\n     * consider divide the logic to\n     * _unfreezeGroupChannel and _unfreezeOpenChannel\n     */\n  }).catch(reject);\n});\n\n// 4. Message\nclass UikitMessageHandler {\n  constructor() {\n    _defineProperty(this, \"_onPending\", noop);\n    _defineProperty(this, \"_onFailed\", noop);\n    _defineProperty(this, \"_onSucceeded\", noop);\n  }\n  triggerPending(message) {\n    this._onPending(message);\n  }\n  triggerFailed(error, message) {\n    this._onFailed(error, message.isResendable ? message : null);\n  }\n  triggerSucceeded(message) {\n    this._onSucceeded(message);\n  }\n  onPending(handler) {\n    if (typeof handler === 'function') {\n      this._onPending = handler;\n    }\n    return this;\n  }\n  onFailed(handler) {\n    if (typeof handler === 'function') {\n      this._onFailed = handler;\n    }\n    return this;\n  }\n  onSucceeded(handler) {\n    if (typeof handler === 'function') {\n      this._onSucceeded = handler;\n    }\n    return this;\n  }\n}\n\n/**\n * const sendUserMessage = selectors.getSendUserMessage(state);\n * sendUserMessage(\n *  channel: GroupChannel | OpenChannel,\n *  params: UserMessageCreateParams,\n * )\n *  .onPending((message) => {})\n *  .onFailed((error, message) => {})\n *  .onSucceeded((message) => {})\n */\n\nconst getSendUserMessage = state => (channel, params) => {\n  const handler = new UikitMessageHandler();\n  const pubSub = getPubSub(state);\n  channel.sendUserMessage(params).onFailed((error, message) => handler.triggerFailed(error, message)).onPending(message => {\n    pubSub.publish(PUBSUB_TOPICS.SEND_MESSAGE_START, {\n      message,\n      channel\n    });\n    handler.triggerPending(message);\n  }).onSucceeded(message => {\n    pubSub.publish(PUBSUB_TOPICS.SEND_USER_MESSAGE, {\n      message,\n      channel\n    });\n    handler.triggerSucceeded(message);\n  });\n  return handler;\n};\n\n/**\n * const sendFileMessage = selectors.getSendFileMessage(state);\n * sendFileMessage(\n *  channel: GroupChannel | OpenChannel,\n *  params: FileMessageCreateParams,\n * )\n *  .onPending((message) => {})\n *  .onFailed((error, message) => {})\n *  .onSucceeded((message) => {})\n */\nconst getSendFileMessage = state => (channel, params) => {\n  const handler = new UikitMessageHandler();\n  const pubSub = getPubSub(state);\n  channel.sendFileMessage(params).onFailed((error, message) => handler.triggerFailed(error, message)).onPending(message => {\n    pubSub.publish(PUBSUB_TOPICS.SEND_MESSAGE_START, {\n      message,\n      channel\n    });\n    handler.triggerPending(message);\n  }).onSucceeded(message => {\n    pubSub.publish(PUBSUB_TOPICS.SEND_FILE_MESSAGE, {\n      message,\n      channel\n    });\n    handler.triggerSucceeded(message);\n  });\n  return handler;\n};\n\n/**\n * const updateUserMessage = selectors.getUpdateUserMessage(state);\n * updateUserMessage(\n *  channel: GroupChannel | OpenChannel,\n *  messageId: number,\n *  messageParams: UserMessageUpdateParams,\n * )\n *  .then((message) => {})\n *  .catch((error) => {})\n */\nconst getUpdateUserMessage = state => (channel, messageId, params) => new Promise((resolve, reject) => {\n  const pubSub = getPubSub(state);\n  channel.updateUserMessage(messageId, params).then(message => {\n    pubSub.publish(PUBSUB_TOPICS.UPDATE_USER_MESSAGE, {\n      message,\n      channel,\n      fromSelector: true\n    });\n    resolve(message);\n  }).catch(reject);\n});\n\n// TODO: We will provie this function in the future\n/**\n * const updateFileMessage = selectors.getUpdateFileMessage(state);\n * updateFileMessage(\n *  channel: GroupChannel | OpenChannel,\n *  messageId: number,\n *  params: FileMessageUpdateParams,\n * )\n *  .then((message) => {})\n *  .catch((error) => {})\n */\n// const getUpdateFileMessage = (state: SendBirdState) => (\n//   (channel: GroupChannel | OpenChannel, messageId: number, params: FileMessageUpdateParams) => (\n//     new Promise((resolve, reject) => {\n//       const pubSub = getPubSub(state);\n//       channel.updateFileMessage(messageId, params)\n//         .then((message) => {\n//           pubSub.publish(\n//             topics.UPDATE_USER_MESSAGE,\n//             { message, channel, fromSelector: true },\n//           );\n//           resolve(message);\n//         })\n//         .catch(reject);\n//     })\n//   )\n// );\n\n/**\n * const deleteMessage = selectors.getDeleteMessage(state);\n * deleteMessage(\n *  channel: GroupChannel | OpenChannel,\n *  message: SendableMessage,\n * )\n *  .then((deletedMessage) => {})\n *  .catch((error) => {})\n */\nconst getDeleteMessage = state => (channel, message) => new Promise((resolve, reject) => {\n  const pubSub = getPubSub(state);\n  const {\n    messageId\n  } = message;\n  channel.deleteMessage(message).then(() => {\n    pubSub.publish(PUBSUB_TOPICS.DELETE_MESSAGE, {\n      messageId,\n      channel\n    });\n    resolve(message);\n  }).catch(reject);\n});\n\n/**\n * const resendUserMessage = selectors.getResendUserMessage(state);\n * resendUserMessage(\n *  channel: GroupChannel | OpenChannel,\n *  failedMessage: UserMessage,\n * )\n *  .then(() => {})\n *  .catch((error) => {})\n */\nconst getResendUserMessage = state => (channel, failedMessage) => new Promise((resolve, reject) => {\n  const pubSub = getPubSub(state);\n  channel.resendUserMessage(failedMessage).then(message => {\n    pubSub.publish(PUBSUB_TOPICS.SEND_USER_MESSAGE, {\n      message,\n      channel\n    });\n    resolve(message);\n  }).catch(reject);\n});\n\n/**\n * const resendFileMessage = selectors.getResendFileMessage(state);\n * resendFileMessage(\n *  channel: GroupChannel | OpenChannel,\n *  failedMessage: FileMessage,\n *  blob: Blob,\n * )\n *  .then(() => {})\n *  .catch((error) => {})\n */\nconst getResendFileMessage = state => (channel, failedMessage, blob) => new Promise((resolve, reject) => {\n  const pubSub = getPubSub(state);\n  channel.resendFileMessage(failedMessage, blob).then(message => {\n    pubSub.publish(PUBSUB_TOPICS.SEND_FILE_MESSAGE, {\n      message,\n      channel\n    });\n    resolve(message);\n  }).catch(reject);\n});\nconst sendbirdSelectors = {\n  getSdk,\n  getPubSub,\n  getConnect,\n  getDisconnect,\n  getUpdateUserInfo,\n  getCreateGroupChannel,\n  getCreateOpenChannel,\n  getGetGroupChannel,\n  getGetOpenChannel,\n  getLeaveGroupChannel,\n  getEnterOpenChannel,\n  getExitOpenChannel,\n  getFreezeChannel,\n  getUnfreezeChannel,\n  getSendUserMessage,\n  getSendFileMessage,\n  getUpdateUserMessage,\n  getDeleteMessage,\n  getResendUserMessage,\n  getResendFileMessage\n};\nexport { UikitMessageHandler, sendbirdSelectors as default, getConnect, getCreateGroupChannel, getCreateOpenChannel, getDeleteMessage, getDisconnect, getEnterOpenChannel, getExitOpenChannel, getFreezeChannel, getGetGroupChannel, getGetOpenChannel, getLeaveGroupChannel, getPubSub, getResendFileMessage, getResendUserMessage, getSdk, getSendFileMessage, getSendUserMessage, getUnfreezeChannel, getUpdateUserInfo, getUpdateUserMessage };","map":{"version":3,"mappings":"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","names":["getSdk","state","stores","sdkStore","sdk","getPubSub","config","pubSub","getConnect","userId","accessToken","Promise","resolve","reject","Error","connect","then","res","catch","err","getDisconnect","disconnect","getUpdateUserInfo","nickname","profileUrl","updateCurrentUserInfo","userParams","getCreateGroupChannel","params","groupChannel","createChannel","channel","publish","topics","CREATE_CHANNEL","getCreateOpenChannel","openChannel","getGetGroupChannel","channelUrl","getChannel","getGetOpenChannel","getLeaveGroupChannel","_getGetGroupChannel","leave","getEnterOpenChannel","_getGetOpenChannel","enter","getExitOpenChannel","_getGetOpenChannel2","exit","getFreezeChannel","freeze","getUnfreezeChannel","unfreeze","UikitMessageHandler","constructor","_defineProperty","noop","triggerPending","message","_onPending","triggerFailed","error","_onFailed","isResendable","triggerSucceeded","_onSucceeded","onPending","handler","onFailed","onSucceeded","getSendUserMessage","sendUserMessage","SEND_MESSAGE_START","SEND_USER_MESSAGE","getSendFileMessage","sendFileMessage","SEND_FILE_MESSAGE","getUpdateUserMessage","messageId","updateUserMessage","UPDATE_USER_MESSAGE","fromSelector","getDeleteMessage","deleteMessage","DELETE_MESSAGE","getResendUserMessage","failedMessage","resendUserMessage","getResendFileMessage","blob","resendFileMessage","sendbirdSelectors"],"sources":["C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\lib\\selectors.ts"],"sourcesContent":["import topics from './pubSub/topics';\nimport type {\n  User,\n  UserUpdateParams,\n} from '@sendbird/chat';\n\nimport { FailedMessageHandler, MessageHandler, UserMessage, UserMessageCreateParams } from '@sendbird/chat/message';\nimport { GroupChannel, GroupChannelCreateParams, SendbirdGroupChat } from '@sendbird/chat/groupChannel';\nimport { OpenChannel, OpenChannelCreateParams, SendbirdOpenChat } from '@sendbird/chat/openChannel';\nimport { FileMessage, FileMessageCreateParams, SendableMessage, UserMessageUpdateParams } from '@sendbird/chat/lib/__definition';\n\nimport {\n  SdkStore,\n  SendBirdState,\n  SendBirdStateConfig,\n  SendBirdStateStore,\n} from './types';\nimport { noop } from '../utils/utils';\n\n/**\n * 1. UIKit Instances\n *    a. getSdk\n *    b. getPubSub\n * 2. Chat & Connection\n *    a. getConnect\n *    b. getDisconnect\n *    c. getUpdateUserInfo\n * 3. Channel\n *    a. getCreateGroupChannel\n *    b. getCreateOpenChannel\n *    c. getGetGroupChannel\n *    d. getGetOpenChannel\n *    e. getLeaveGroupChannel\n *    f. getEnterOpenChannel\n *    g. getExitOpenChannel\n *    h. getFreezeChannel\n *    i. getUnfreezeChannel\n * 4. Message\n *    a. getSendUserMessage\n *    b. getSendFileMessage\n *    c. getUpdateUserMessage\n *    d. x - getUpdateFileMessage\n *    e. getDeleteMessage\n *    f. getResendUserMessage\n *    g. getResendFileMessage\n */\n\n/**\n * import useSendbirdStateContext from '@sendbird-uikit/useSendbirdStateContext'\n * import selectors from '@sendbird-uikit/send'\n * const state = useSendbirdStateContext();\n */\n\n// 1. UIKit Instances\n\n/**\n * const sdk = selectors.getSdk(state);\n */\nexport const getSdk = (state: SendBirdState): SendbirdGroupChat & SendbirdOpenChat => {\n  const { stores = {} } = state;\n  const { sdkStore = {} } = stores as SendBirdStateStore;\n  const { sdk } = sdkStore as SdkStore;\n  return sdk;\n};\n\n/**\n * const pubSub = selectors.getPubSub(state);\n */\nexport const getPubSub = (state: SendBirdState): any => {\n  const { config = {} } = state;\n  const { pubSub } = config as SendBirdStateConfig;\n  return pubSub;\n};\n\n// 2. Chat & Connection\n\n/**\n * const connect = selectors.getConnect(state);\n * connect('user-id-sendbirdian', 'access-token-0000')\n *  .then((user) => {})\n *  .catch((error) => {})\n */\nexport const getConnect = (state: SendBirdState) => (\n  (userId: string, accessToken?: string): Promise<User> => (\n    new Promise((resolve, reject) => {\n      const sdk = getSdk(state);\n      if (!sdk) {\n        reject(new Error('Sdk not found'));\n      }\n      if (!(sdk?.connect && typeof sdk.connect === 'function')) {\n        reject(new Error('Not found the function \"connect'));\n      }\n      if (!accessToken) {\n        sdk.connect(userId)\n          .then((res) => resolve(res))\n          .catch((err) => reject(err));\n      } else {\n        sdk.connect(userId, accessToken)\n          .then((res) => resolve(res))\n          .catch((err) => reject(err));\n      }\n    })\n  )\n);\n\n/**\n * const disconnect = selectors.getDisconnect(state);\n * disconnect()\n *  .then(() => {})\n *  .catch((error) => {})\n */\nexport const getDisconnect = (state: SendBirdState) => (\n  (): Promise<void> => (\n    new Promise((resolve, reject) => {\n      const sdk = getSdk(state);\n      if (!sdk) {\n        reject(new Error('Sdk not found'));\n      }\n      if (!(sdk.disconnect && typeof sdk.disconnect === 'function')) {\n        reject(new Error('Not found the function \"disconnect'));\n      }\n      sdk.disconnect()\n        .then((res) => resolve(res))\n        .catch((err) => reject(err));\n    })\n  )\n);\n\n/**\n * const updateUserInfo = selectors.getUpdateUserInfo(state);\n * updateUserInfo('new-nickname', 'new-profile-url')\n *  .then((user) => {})\n *  .catch((error) => {})\n */\nexport const getUpdateUserInfo = (state: SendBirdState) => (\n  (nickname: string, profileUrl?: string): Promise<User> => (\n    new Promise((resolve, reject) => {\n      const sdk = getSdk(state);\n      if (!sdk) {\n        reject(new Error('Sdk not found'));\n      }\n      if (!(sdk.updateCurrentUserInfo && typeof sdk.updateCurrentUserInfo === 'function')) {\n        reject(new Error('Not found the function \"updateCurrentUserInfo\"'));\n      }\n      const userParams: UserUpdateParams = { nickname };\n      if (profileUrl) {\n        userParams.profileUrl = profileUrl;\n      }\n      sdk.updateCurrentUserInfo(userParams)\n        .then((res) => resolve(res))\n        .catch((err) => reject(err));\n    })\n  )\n);\n\n// 3. Channel\n\n/**\n * const createGroupChannel = selectors.getCreateGroupChannel(state);\n * createGroupChannel(channelParams: GroupChannelCreateParams)\n *  .then((channel) => {})\n *  .catch((error) => {})\n */\nexport const getCreateGroupChannel = (state: SendBirdState) => (\n  (params: GroupChannelCreateParams): Promise<GroupChannel> => (\n    new Promise((resolve, reject) => {\n      const sdk = getSdk(state);\n      const pubSub = getPubSub(state);\n      if (!sdk) {\n        reject(new Error('Sdk not found'));\n      }\n      if (!sdk.groupChannel) {\n        reject(new Error('Not found GroupChannelModule'));\n      }\n      if (!(sdk.groupChannel.createChannel && typeof sdk.groupChannel.createChannel === 'function')) {\n        reject(new Error('Not found the function \"createChannel\"'));\n      }\n      sdk.groupChannel.createChannel(params)\n        .then((channel) => {\n          resolve(channel);\n          pubSub.publish(\n            topics.CREATE_CHANNEL,\n            { channel },\n          );\n        })\n        .catch(reject);\n    })\n  )\n);\n\n/**\n * const createOpenChannel = selectors.getCreateOpenChannel(state);\n * createOpenChannel(channelParams: OpenChannelCreateParams)\n *  .then((channel) => {})\n *  .catch((error) => {})\n */\nexport const getCreateOpenChannel = (state: SendBirdState) => (\n  (params: OpenChannelCreateParams): Promise<OpenChannel> => (\n    new Promise((resolve, reject) => {\n      const sdk = getSdk(state);\n      // const pubSub = getPubSub(state);\n      if (!sdk) {\n        reject(new Error('Sdk not found'));\n      }\n      if (!sdk.openChannel) {\n        reject(new Error('Not found OpenChannelModule'));\n      }\n      if (!(sdk.openChannel.createChannel && typeof sdk.openChannel.createChannel === 'function')) {\n        reject(new Error('Not found the function \"createChannel\"'));\n      }\n      sdk.openChannel.createChannel(params)\n        .then((channel) => {\n          resolve(channel);\n          // Consider pubSub process\n        })\n        .catch(reject);\n    })\n  )\n);\n\n/**\n * const getGroupChannel = selectors.getGetGroupChannel(state);\n * getGroupChannel('channel-url-1234', isSelected)\n *  .then((channel) => {\n *    // groupChannel = channel;\n *    // or\n *    // setCurrentChannel(channel);\n *  })\n *  .catch((error) => {})\n */\nexport const getGetGroupChannel = (state: SendBirdState) => (\n  (channelUrl: string): Promise<GroupChannel> => (\n    new Promise((resolve, reject) => {\n      const sdk = getSdk(state);\n      // const pubSub = getPubSub(state);\n      if (!sdk) {\n        reject(new Error('Sdk not found'));\n      }\n      if (!sdk.groupChannel) {\n        reject(new Error('Not found GroupChannelModule'));\n      }\n      if (!(sdk.groupChannel.getChannel && typeof sdk.groupChannel.getChannel === 'function')) {\n        reject(new Error('Not found the function \"getChannel\"'));\n      }\n      sdk.groupChannel.getChannel(channelUrl)\n        .then((channel) => {\n          resolve(channel);\n          // Add pubSub with isSelected\n        })\n        .catch(reject);\n    })\n  )\n);\n\n/**\n * const getOpenChannel = selectors.getGetOpenChannel(state);\n * getOpenChannel('channel-url-12345')\n *  .then((channel) => {\n *    // openChannel = channel;\n *    // or\n *    // setCurrentChannel(channel);\n *  })\n *  .catch((error) => {})\n */\nexport const getGetOpenChannel = (state: SendBirdState) => (\n  (channelUrl: string): Promise<OpenChannel> => (\n    new Promise((resolve, reject) => {\n      const sdk = getSdk(state);\n      // const pubSub = getPubSub(state);\n      if (!sdk) {\n        reject(new Error('Sdk not found'));\n      }\n      if (!sdk.openChannel) {\n        reject(new Error('Not found OpenChannelModule'));\n      }\n      if (!(sdk.openChannel.getChannel && typeof sdk.openChannel.getChannel === 'function')) {\n        reject(new Error('Not found the function \"getChannel\"'));\n      }\n      sdk.openChannel.getChannel(channelUrl)\n        .then((channel) => {\n          resolve(channel);\n          // Add pubSub with isSelected\n        })\n        .catch(reject);\n    })\n  )\n);\n\n/**\n * const leaveChannel = selectors.getLeaveGroupChannel(state);\n * leaveChannel('group-channel-url')\n *  .then((channel) => {})\n *  .catch((error) => {})\n */\nexport const getLeaveGroupChannel = (state: SendBirdState) => (\n  (channelUrl: string): Promise<void> => (\n    new Promise((resolve, reject) => {\n      getGetGroupChannel(state)?.(channelUrl)\n        .then((channel) => {\n          channel.leave()\n            .then(() => {\n              resolve();\n              // Add pubSub process\n            })\n            .catch(reject);\n        })\n        .catch(reject);\n    })\n  )\n);\n\n/**\n * const enterChannel = selectors.getEnterOpenChannel(state);\n * enterChannel('open-channel-url')\n *  .then((channel) => {})\n *  .catch((error) => {})\n */\nexport const getEnterOpenChannel = (state: SendBirdState) => (\n  (channelUrl: string): Promise<OpenChannel> => (\n    new Promise((resolve, reject) => {\n      getGetOpenChannel(state)?.(channelUrl)\n        .then((channel) => {\n          channel.enter()\n            .then(() => {\n              resolve(channel);\n              // Add pubSub process\n            })\n            .catch(reject);\n        })\n        .catch(reject);\n    })\n  )\n);\n\n/**\n * const exitChannel = selectors.getExitOpenChannel(state);\n * exitChannel('open-channel-url')\n *  .then((channel) => {})\n *  .catch((error) => {})\n */\nexport const getExitOpenChannel = (state: SendBirdState) => (\n  (channelUrl: string): Promise<OpenChannel> => (\n    new Promise((resolve, reject) => {\n      getGetOpenChannel(state)?.(channelUrl)\n        .then((channel) => {\n          channel.exit()\n            .then(() => {\n              resolve(channel);\n              // Add pubSub process\n            })\n            .catch(reject);\n        })\n        .catch(reject);\n    })\n  )\n);\n\n/**\n * const freezeChannel = selectors.getFreezeChannel(currentChannel);\n * freezeChannel()\n *  .then(() => {})\n *  .catch((error) => {})\n */\nexport const getFreezeChannel = () => (\n  (channel: GroupChannel | OpenChannel): Promise<void> => (\n    new Promise((resolve, reject) => {\n      if (!(channel.freeze && typeof channel?.freeze === 'function')) {\n        reject(new Error('Not found the function \"freeze\"'));\n      }\n      channel.freeze()\n        .then(() => {\n          resolve();\n          // Add pubSub process\n          /**\n           * consider divide the logic to\n           * _freezeGroupChannel and _freezeOpenChannel\n           */\n        })\n        .catch(reject);\n    })\n  )\n);\n\n/**\n * const unfreezeChannel = selectors.getUnfreezeChannel(currentChannel);\n * unfreezeChannel()\n *  .then((channel) => {})\n *  .catch((error) => {})\n */\nexport const getUnfreezeChannel = () => (\n  (channel: GroupChannel | OpenChannel): Promise<void> => (\n    new Promise((resolve, reject) => {\n      if (!(channel.unfreeze && typeof channel?.unfreeze === 'function')) {\n        reject(new Error('Not found the function \"unfreeze\"'));\n      }\n      channel.unfreeze()\n        .then(() => {\n          resolve();\n          // Add pubSub process\n          /**\n           * consider divide the logic to\n           * _unfreezeGroupChannel and _unfreezeOpenChannel\n           */\n        })\n        .catch(reject);\n    })\n  )\n);\n\n// 4. Message\nexport class UikitMessageHandler {\n  private _onPending: MessageHandler = noop;\n\n  private _onFailed: FailedMessageHandler = noop;\n\n  private _onSucceeded: MessageHandler = noop;\n\n  public triggerPending(message: SendableMessage): void {\n    this._onPending(message);\n  }\n\n  public triggerFailed(error: Error, message: SendableMessage): void {\n    this._onFailed(error, message.isResendable ? message : null);\n  }\n\n  public triggerSucceeded(message: SendableMessage): void {\n    this._onSucceeded(message);\n  }\n\n  public onPending(handler: MessageHandler): UikitMessageHandler {\n    if (typeof handler === 'function') {\n      this._onPending = handler;\n    }\n    return this;\n  }\n\n  public onFailed(handler: FailedMessageHandler): UikitMessageHandler {\n    if (typeof handler === 'function') {\n      this._onFailed = handler;\n    }\n    return this;\n  }\n\n  public onSucceeded(handler: MessageHandler): UikitMessageHandler {\n    if (typeof handler === 'function') {\n      this._onSucceeded = handler;\n    }\n    return this;\n  }\n}\n\n/**\n * const sendUserMessage = selectors.getSendUserMessage(state);\n * sendUserMessage(\n *  channel: GroupChannel | OpenChannel,\n *  params: UserMessageCreateParams,\n * )\n *  .onPending((message) => {})\n *  .onFailed((error, message) => {})\n *  .onSucceeded((message) => {})\n */\n\nexport const getSendUserMessage = (state: SendBirdState) => (\n  (channel: GroupChannel | OpenChannel, params: UserMessageCreateParams): UikitMessageHandler => {\n    const handler = new UikitMessageHandler();\n    const pubSub = getPubSub(state);\n    channel.sendUserMessage(params)\n      .onFailed((error, message) => handler.triggerFailed(error, message))\n      .onPending((message) => {\n        pubSub.publish(\n          topics.SEND_MESSAGE_START,\n          { message, channel },\n        );\n        handler.triggerPending(message);\n      })\n      .onSucceeded((message) => {\n        pubSub.publish(\n          topics.SEND_USER_MESSAGE,\n          { message, channel },\n        );\n        handler.triggerSucceeded(message);\n      });\n    return handler;\n  }\n);\n\n/**\n * const sendFileMessage = selectors.getSendFileMessage(state);\n * sendFileMessage(\n *  channel: GroupChannel | OpenChannel,\n *  params: FileMessageCreateParams,\n * )\n *  .onPending((message) => {})\n *  .onFailed((error, message) => {})\n *  .onSucceeded((message) => {})\n */\nexport const getSendFileMessage = (state: SendBirdState) => (\n  (channel: GroupChannel | OpenChannel, params: FileMessageCreateParams): UikitMessageHandler => {\n    const handler = new UikitMessageHandler();\n    const pubSub = getPubSub(state);\n    channel.sendFileMessage(params)\n      .onFailed((error, message) => handler.triggerFailed(error, message))\n      .onPending((message) => {\n        pubSub.publish(\n          topics.SEND_MESSAGE_START,\n          { message, channel },\n        );\n        handler.triggerPending(message);\n      })\n      .onSucceeded((message) => {\n        pubSub.publish(\n          topics.SEND_FILE_MESSAGE,\n          { message, channel },\n        );\n        handler.triggerSucceeded(message);\n      });\n    return handler;\n  }\n);\n\n/**\n * const updateUserMessage = selectors.getUpdateUserMessage(state);\n * updateUserMessage(\n *  channel: GroupChannel | OpenChannel,\n *  messageId: number,\n *  messageParams: UserMessageUpdateParams,\n * )\n *  .then((message) => {})\n *  .catch((error) => {})\n */\nexport const getUpdateUserMessage = (state: SendBirdState) => (\n  (channel: GroupChannel | OpenChannel, messageId: number, params: UserMessageUpdateParams): Promise<UserMessage> => (\n    new Promise((resolve, reject) => {\n      const pubSub = getPubSub(state);\n      channel.updateUserMessage(messageId, params)\n        .then((message) => {\n          pubSub.publish(\n            topics.UPDATE_USER_MESSAGE,\n            { message, channel, fromSelector: true },\n          );\n          resolve(message);\n        })\n        .catch(reject);\n    })\n  )\n);\n\n// TODO: We will provie this function in the future\n/**\n * const updateFileMessage = selectors.getUpdateFileMessage(state);\n * updateFileMessage(\n *  channel: GroupChannel | OpenChannel,\n *  messageId: number,\n *  params: FileMessageUpdateParams,\n * )\n *  .then((message) => {})\n *  .catch((error) => {})\n */\n// const getUpdateFileMessage = (state: SendBirdState) => (\n//   (channel: GroupChannel | OpenChannel, messageId: number, params: FileMessageUpdateParams) => (\n//     new Promise((resolve, reject) => {\n//       const pubSub = getPubSub(state);\n//       channel.updateFileMessage(messageId, params)\n//         .then((message) => {\n//           pubSub.publish(\n//             topics.UPDATE_USER_MESSAGE,\n//             { message, channel, fromSelector: true },\n//           );\n//           resolve(message);\n//         })\n//         .catch(reject);\n//     })\n//   )\n// );\n\n/**\n * const deleteMessage = selectors.getDeleteMessage(state);\n * deleteMessage(\n *  channel: GroupChannel | OpenChannel,\n *  message: SendableMessage,\n * )\n *  .then((deletedMessage) => {})\n *  .catch((error) => {})\n */\nexport const getDeleteMessage = (state: SendBirdState) => (\n  (channel: GroupChannel | OpenChannel, message: UserMessage | FileMessage): Promise<UserMessage | FileMessage> => (\n    new Promise((resolve, reject) => {\n      const pubSub = getPubSub(state);\n      const { messageId } = message;\n      channel.deleteMessage(message)\n        .then(() => {\n          pubSub.publish(\n            topics.DELETE_MESSAGE,\n            { messageId, channel },\n          );\n          resolve(message);\n        })\n        .catch(reject);\n    })\n  )\n);\n\n/**\n * const resendUserMessage = selectors.getResendUserMessage(state);\n * resendUserMessage(\n *  channel: GroupChannel | OpenChannel,\n *  failedMessage: UserMessage,\n * )\n *  .then(() => {})\n *  .catch((error) => {})\n */\nexport const getResendUserMessage = (state: SendBirdState) => (\n  (channel: GroupChannel | OpenChannel, failedMessage: UserMessage): Promise<UserMessage> => (\n    new Promise((resolve, reject) => {\n      const pubSub = getPubSub(state);\n      channel.resendUserMessage(failedMessage)\n        .then((message) => {\n          pubSub.publish(\n            topics.SEND_USER_MESSAGE,\n            { message, channel },\n          );\n          resolve(message);\n        })\n        .catch(reject);\n    })\n  )\n);\n\n/**\n * const resendFileMessage = selectors.getResendFileMessage(state);\n * resendFileMessage(\n *  channel: GroupChannel | OpenChannel,\n *  failedMessage: FileMessage,\n *  blob: Blob,\n * )\n *  .then(() => {})\n *  .catch((error) => {})\n */\nexport const getResendFileMessage = (state: SendBirdState) => (\n  (channel: GroupChannel | OpenChannel, failedMessage: FileMessage, blob: Blob): Promise<FileMessage> => (\n    new Promise((resolve, reject) => {\n      const pubSub = getPubSub(state);\n      channel.resendFileMessage(failedMessage, blob)\n        .then((message) => {\n          pubSub.publish(\n            topics.SEND_FILE_MESSAGE,\n            { message, channel },\n          );\n          resolve(message);\n        })\n        .catch(reject);\n    })\n  )\n);\n\nconst sendbirdSelectors = {\n  getSdk,\n  getPubSub,\n  getConnect,\n  getDisconnect,\n  getUpdateUserInfo,\n  getCreateGroupChannel,\n  getCreateOpenChannel,\n  getGetGroupChannel,\n  getGetOpenChannel,\n  getLeaveGroupChannel,\n  getEnterOpenChannel,\n  getExitOpenChannel,\n  getFreezeChannel,\n  getUnfreezeChannel,\n  getSendUserMessage,\n  getSendFileMessage,\n  getUpdateUserMessage,\n  getDeleteMessage,\n  getResendUserMessage,\n  getResendFileMessage,\n};\n\nexport default sendbirdSelectors;\n"]},"metadata":{},"sourceType":"module"}