{"ast":null,"code":"import React__default, { useReducer, useContext, createContext } from 'react';\nimport { _ as _objectSpread2 } from './_rollupPluginBabelHelpers-6bb0305c.js';\nimport { f as VOICE_PLAYER_ROOT_ID, g as VOICE_PLAYER_AUDIO_ID, b as VOICE_MESSAGE_FILE_NAME, c as VOICE_MESSAGE_MIME_TYPE } from './consts-95d8566e.js';\nimport useSendbirdStateContext from './useSendbirdStateContext.js';\nconst INITIALIZE_AUDIO_UNIT = 'INITIALIZE_AUDIO_UNIT';\nconst SET_CURRENT_PLAYER = 'SET_CURRENT_PLAYER';\nconst ON_VOICE_PLAYER_PLAY = 'ON_VOICE_PLAYER_PLAY';\nconst ON_VOICE_PLAYER_PAUSE = 'ON_VOICE_PLAYER_PAUSE';\nconst ON_CURRENT_TIME_UPDATE = 'ON_CURRENT_TIME_UPDATE';\nconst VOICE_PLAYER_STATUS = {\n  IDLE: 'IDLE',\n  PREPARING: 'PREPARING',\n  PLAYING: 'PLAYING',\n  PAUSED: 'PAUSED',\n  COMPLETED: 'COMPLETED'\n};\nconst AudioUnitDefaultValue = () => ({\n  audioFile: null,\n  playbackTime: 0,\n  duration: 1000,\n  playingStatus: VOICE_PLAYER_STATUS.IDLE\n});\nconst voicePlayerInitialState = {\n  currentPlayer: null,\n  currentGroupKey: '',\n  audioStorage: {}\n};\nfunction voicePlayerReducer(state, action) {\n  switch (action.type) {\n    case INITIALIZE_AUDIO_UNIT:\n      {\n        var _state$audioStorage;\n        const {\n          groupKey\n        } = action.payload;\n        const audioUnit = (_state$audioStorage = state.audioStorage) !== null && _state$audioStorage !== void 0 && _state$audioStorage[groupKey] ? state.audioStorage[groupKey] : AudioUnitDefaultValue();\n        audioUnit.playingStatus = VOICE_PLAYER_STATUS.PREPARING;\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          audioStorage: _objectSpread2(_objectSpread2({}, state.audioStorage), {}, {\n            [groupKey]: audioUnit\n          })\n        });\n      }\n    case SET_CURRENT_PLAYER:\n      {\n        const {\n          audioPlayer,\n          groupKey\n        } = action.payload;\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          currentPlayer: audioPlayer,\n          currentGroupKey: groupKey\n        });\n      }\n    case ON_VOICE_PLAYER_PLAY:\n      {\n        var _state$audioStorage2;\n        const {\n          groupKey,\n          audioFile\n        } = action.payload;\n        const audioUnit = (_state$audioStorage2 = state.audioStorage) !== null && _state$audioStorage2 !== void 0 && _state$audioStorage2[groupKey] ? state.audioStorage[groupKey] : AudioUnitDefaultValue();\n        audioUnit.audioFile = audioFile;\n        audioUnit.playingStatus = VOICE_PLAYER_STATUS.PLAYING;\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          audioStorage: _objectSpread2(_objectSpread2({}, state.audioStorage), {}, {\n            [groupKey]: audioUnit\n          })\n        });\n      }\n    case ON_VOICE_PLAYER_PAUSE:\n      {\n        var _state$audioStorage3;\n        const {\n          groupKey\n        } = action.payload;\n        const audioUnit = (_state$audioStorage3 = state.audioStorage) !== null && _state$audioStorage3 !== void 0 && _state$audioStorage3[groupKey] ? state.audioStorage[groupKey] : AudioUnitDefaultValue();\n        audioUnit.playingStatus = VOICE_PLAYER_STATUS.PAUSED;\n        const {\n          currentTime,\n          duration\n        } = state.currentPlayer;\n        if (audioUnit.playbackTime === audioUnit.duration) {\n          audioUnit.playbackTime = 0;\n        } else if (currentTime > 0 && duration > 0) {\n          audioUnit.playbackTime = currentTime;\n          audioUnit.duration = duration;\n        }\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          audioStorage: _objectSpread2(_objectSpread2({}, state.audioStorage), {}, {\n            [groupKey]: audioUnit\n          })\n        });\n      }\n    case ON_CURRENT_TIME_UPDATE:\n      {\n        var _state$audioStorage4;\n        const {\n          groupKey\n        } = action.payload;\n        const {\n          currentTime,\n          duration\n        } = state.currentPlayer;\n        const audioUnit = (_state$audioStorage4 = state.audioStorage) !== null && _state$audioStorage4 !== void 0 && _state$audioStorage4[groupKey] ? state.audioStorage[groupKey] : AudioUnitDefaultValue();\n        if (currentTime > 0 && duration > 0) {\n          audioUnit.playbackTime = currentTime;\n          audioUnit.duration = duration;\n        }\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          audioStorage: _objectSpread2(_objectSpread2({}, state.audioStorage), {}, {\n            [groupKey]: audioUnit\n          })\n        });\n      }\n    default:\n      return state;\n  }\n}\n\n// VoicePlayerProvider interface\n\nconst noop = () => {/* noop */};\nconst VoicePlayerStoreDefaultValue = {\n  currentGroupKey: '',\n  currentPlayer: null,\n  audioStorage: {}\n};\nconst Context = /*#__PURE__*/createContext({\n  play: noop,\n  pause: noop,\n  stop: noop,\n  voicePlayerStore: VoicePlayerStoreDefaultValue\n});\nconst VoicePlayerProvider = _ref => {\n  let {\n    children\n  } = _ref;\n  const [voicePlayerStore, voicePlayerDispatcher] = useReducer(voicePlayerReducer, voicePlayerInitialState);\n  const {\n    currentGroupKey,\n    currentPlayer,\n    audioStorage\n  } = voicePlayerStore;\n  const {\n    config\n  } = useSendbirdStateContext();\n  const {\n    logger\n  } = config;\n  const stop = function () {\n    let text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    if (currentGroupKey.includes(text)) {\n      logger.info('VoicePlayer: Pause playing(by text).');\n      pause(currentGroupKey);\n    }\n  };\n  const pause = groupKey => {\n    if (currentGroupKey === groupKey && currentPlayer !== null) {\n      logger.info('VoicePlayer: Pause playing(by group key).');\n      currentPlayer === null || currentPlayer === void 0 ? void 0 : currentPlayer.pause();\n    }\n  };\n  const play = _ref2 => {\n    let {\n      groupKey,\n      audioFile = null,\n      audioFileUrl = ''\n    } = _ref2;\n    if (groupKey !== currentGroupKey) {\n      pause(currentGroupKey);\n    }\n\n    // Clear the previous AudioPlayer element\n    const voicePlayerRoot = document.getElementById(VOICE_PLAYER_ROOT_ID);\n    const voicePlayerAudioElement = document.getElementById(VOICE_PLAYER_AUDIO_ID);\n    if (voicePlayerAudioElement) {\n      voicePlayerRoot.removeChild(voicePlayerAudioElement);\n    }\n    logger.info('VoicePlayer: Start getting audio file.');\n    new Promise(resolve => {\n      var _audioStorage$groupKe;\n      if (audioFile) {\n        resolve(audioFile);\n        logger.info('VoicePlayer: Use the audioFile instance.');\n      }\n      if (audioStorage !== null && audioStorage !== void 0 && (_audioStorage$groupKe = audioStorage[groupKey]) !== null && _audioStorage$groupKe !== void 0 && _audioStorage$groupKe.audioFile) {\n        resolve(audioStorage[groupKey].audioFile);\n        logger.info('VoicePlayer: Get from the audioStorage.');\n      }\n      voicePlayerDispatcher({\n        type: INITIALIZE_AUDIO_UNIT,\n        payload: {\n          groupKey\n        }\n      });\n      fetch(audioFileUrl).then(res => res.blob()).then(blob => {\n        const audioFile = new File([blob], VOICE_MESSAGE_FILE_NAME, {\n          lastModified: new Date().getTime(),\n          type: VOICE_MESSAGE_MIME_TYPE\n        });\n        resolve(audioFile);\n        logger.info('VoicePlayer: Get the audioFile from URL.');\n      });\n    }).then(audioFile => {\n      var _URL, _URL$createObjectURL;\n      logger.info('VoicePlayer: Succeeded getting audio file.', audioFile);\n      const currentAudioUnit = audioStorage[groupKey] || AudioUnitDefaultValue();\n      const audioPlayer = new Audio((_URL = URL) === null || _URL === void 0 ? void 0 : (_URL$createObjectURL = _URL.createObjectURL) === null || _URL$createObjectURL === void 0 ? void 0 : _URL$createObjectURL.call(_URL, audioFile));\n      audioPlayer.id = VOICE_PLAYER_AUDIO_ID;\n      audioPlayer.currentTime = currentAudioUnit.playbackTime;\n      audioPlayer.volume = 1;\n      audioPlayer.loop = false;\n      audioPlayer.onplaying = () => {\n        logger.info('VoicePlayer: OnPlaying event is called from audioPlayer', {\n          groupKey,\n          audioPlayer\n        });\n        voicePlayerDispatcher({\n          type: ON_VOICE_PLAYER_PLAY,\n          payload: {\n            groupKey,\n            audioFile\n          }\n        });\n      };\n      audioPlayer.onpause = () => {\n        logger.info('VoicePlayer: OnPause event is called from audioPlayer', {\n          groupKey,\n          audioPlayer\n        });\n        voicePlayerDispatcher({\n          type: ON_VOICE_PLAYER_PAUSE,\n          payload: {\n            groupKey\n          }\n        });\n      };\n      audioPlayer.ontimeupdate = () => {\n        voicePlayerDispatcher({\n          type: ON_CURRENT_TIME_UPDATE,\n          payload: {\n            groupKey\n          }\n        });\n      };\n      audioPlayer === null || audioPlayer === void 0 ? void 0 : audioPlayer.play();\n      const voicePlayerRoot = document.getElementById(VOICE_PLAYER_ROOT_ID);\n      voicePlayerRoot.appendChild(audioPlayer);\n      voicePlayerDispatcher({\n        type: SET_CURRENT_PLAYER,\n        payload: {\n          groupKey,\n          audioPlayer\n        }\n      });\n      logger.info('VoicePlayer: Succeeded playing audio player.', {\n        groupKey,\n        audioPlayer\n      });\n    });\n  };\n  return /*#__PURE__*/React__default.createElement(Context.Provider, {\n    value: {\n      play,\n      pause,\n      stop,\n      voicePlayerStore\n    }\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    id: VOICE_PLAYER_ROOT_ID,\n    style: {\n      display: 'none'\n    }\n  }), children);\n};\nconst useVoicePlayerContext = () => useContext(Context);\nexport { AudioUnitDefaultValue as A, VoicePlayerProvider as V, VOICE_PLAYER_STATUS as a, useVoicePlayerContext as u };","map":{"version":3,"mappings":"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","names":["INITIALIZE_AUDIO_UNIT","SET_CURRENT_PLAYER","ON_VOICE_PLAYER_PLAY","ON_VOICE_PLAYER_PAUSE","ON_CURRENT_TIME_UPDATE","VOICE_PLAYER_STATUS","IDLE","PREPARING","PLAYING","PAUSED","COMPLETED","AudioUnitDefaultValue","audioFile","playbackTime","duration","playingStatus","voicePlayerInitialState","currentPlayer","currentGroupKey","audioStorage","voicePlayerReducer","state","action","type","groupKey","payload","audioUnit","_state$audioStorage","audioPlayer","_state$audioStorage2","_state$audioStorage3","currentTime","_state$audioStorage4","noop","VoicePlayerStoreDefaultValue","Context","createContext","play","pause","stop","voicePlayerStore","VoicePlayerProvider","_ref","children","voicePlayerDispatcher","useReducer","config","useSendbirdStateContext","logger","text","includes","info","_ref2","audioFileUrl","voicePlayerRoot","document","getElementById","VOICE_PLAYER_ROOT_ID","voicePlayerAudioElement","VOICE_PLAYER_AUDIO_ID","removeChild","Promise","resolve","_audioStorage$groupKe","fetch","then","res","blob","File","VOICE_MESSAGE_FILE_NAME","lastModified","Date","getTime","VOICE_MESSAGE_MIME_TYPE","currentAudioUnit","Audio","URL","_URL","createObjectURL","_URL$createObjectURL","id","volume","loop","onplaying","onpause","ontimeupdate","appendChild","React","Provider","value","style","display","useVoicePlayerContext","useContext"],"sources":["C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\hooks\\VoicePlayer\\dux\\actionTypes.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\hooks\\VoicePlayer\\dux\\initialState.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\hooks\\VoicePlayer\\dux\\reducer.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\hooks\\VoicePlayer\\index.tsx"],"sourcesContent":["import { ObjectValues } from '../../../utils/typeHelpers/objectValues';\n\nexport const actionTypes = {\n  INITIALIZE_AUDIO_UNIT: 'INITIALIZE_AUDIO_UNIT',\n  SET_CURRENT_PLAYER: 'SET_CURRENT_PLAYER',\n  ON_VOICE_PLAYER_PLAY: 'ON_VOICE_PLAYER_PLAY',\n  ON_VOICE_PLAYER_PAUSE: 'ON_VOICE_PLAYER_PAUSE',\n  ON_CURRENT_TIME_UPDATE: 'ON_CURRENT_TIME_UPDATE',\n} as const;\n\nexport type VoicePlayerActionType = ObjectValues<typeof actionTypes>;\n\nexport const INITIALIZE_AUDIO_UNIT: VoicePlayerActionType = 'INITIALIZE_AUDIO_UNIT';\nexport const SET_CURRENT_PLAYER: VoicePlayerActionType = 'SET_CURRENT_PLAYER';\nexport const ON_VOICE_PLAYER_PLAY: VoicePlayerActionType = 'ON_VOICE_PLAYER_PLAY';\nexport const ON_VOICE_PLAYER_PAUSE: VoicePlayerActionType = 'ON_VOICE_PLAYER_PAUSE';\nexport const ON_CURRENT_TIME_UPDATE: VoicePlayerActionType = 'ON_CURRENT_TIME_UPDATE';\n","import { ObjectValues } from '../../../utils/typeHelpers/objectValues';\nimport { GroupKey } from '../utils';\n\nexport const VOICE_PLAYER_STATUS = {\n  IDLE: 'IDLE',\n  PREPARING: 'PREPARING',\n  PLAYING: 'PLAYING',\n  PAUSED: 'PAUSED',\n  COMPLETED: 'COMPLETED',\n} as const;\n// VoicePlayerStatus should be deprecated / It's left for backward legacy\nexport const VoicePlayerStatus = VOICE_PLAYER_STATUS;\nexport type VoicePlayerStatusType = ObjectValues<typeof VOICE_PLAYER_STATUS>;\n\nexport type AudioStorageUnit = {\n  playingStatus: VoicePlayerStatusType;\n  audioFile: null | File;\n  playbackTime: number;\n  duration: number;\n};\nexport const AudioUnitDefaultValue = (): AudioStorageUnit => ({\n  audioFile: null,\n  playbackTime: 0,\n  duration: 1000,\n  playingStatus: VOICE_PLAYER_STATUS.IDLE,\n});\n\nexport interface VoicePlayerInitialState {\n  currentPlayer: null | HTMLAudioElement;\n  currentGroupKey: string;\n  audioStorage: Record<GroupKey, AudioStorageUnit>;\n}\n\nexport const voicePlayerInitialState: VoicePlayerInitialState = {\n  currentPlayer: null,\n  currentGroupKey: '',\n  audioStorage: {},\n};\n","import {\n  INITIALIZE_AUDIO_UNIT,\n  ON_CURRENT_TIME_UPDATE,\n  ON_VOICE_PLAYER_PAUSE,\n  ON_VOICE_PLAYER_PLAY,\n  SET_CURRENT_PLAYER,\n} from './actionTypes';\nimport {\n  AudioStorageUnit,\n  AudioUnitDefaultValue,\n  VoicePlayerInitialState,\n  VOICE_PLAYER_STATUS,\n} from './initialState';\n\ntype InitializeAudioUnitPayload = { groupKey: string };\ntype SetCurrentPlayerPayload = { audioPlayer: HTMLAudioElement, groupKey: string };\ntype OnVoicePlayerPlayPayload = { groupKey: string, audioFile: File };\ntype OnVoicePlayerPausePayload = { groupKey: string };\ntype OnCurrentTimeUpdatePayload = { groupKey: string };\ntype PayloadType = (\n  InitializeAudioUnitPayload\n  | SetCurrentPlayerPayload\n  | OnVoicePlayerPlayPayload\n  | OnVoicePlayerPausePayload\n  | OnCurrentTimeUpdatePayload\n);\ntype ActionType = {\n  type: string;\n  payload: PayloadType;\n};\n\nexport default function voicePlayerReducer(\n  state: VoicePlayerInitialState,\n  action: ActionType,\n): VoicePlayerInitialState {\n  switch (action.type) {\n    case INITIALIZE_AUDIO_UNIT: {\n      const { groupKey } = action.payload as InitializeAudioUnitPayload;\n      const audioUnit = (state.audioStorage?.[groupKey] ? state.audioStorage[groupKey] : AudioUnitDefaultValue()) as AudioStorageUnit;\n      audioUnit.playingStatus = VOICE_PLAYER_STATUS.PREPARING;\n      return {\n        ...state,\n        audioStorage: {\n          ...state.audioStorage,\n          [groupKey]: audioUnit,\n        },\n      };\n    }\n    case SET_CURRENT_PLAYER: {\n      const { audioPlayer, groupKey } = action.payload as SetCurrentPlayerPayload;\n      return {\n        ...state,\n        currentPlayer: audioPlayer,\n        currentGroupKey: groupKey,\n      };\n    }\n    case ON_VOICE_PLAYER_PLAY: {\n      const { groupKey, audioFile } = action.payload as OnVoicePlayerPlayPayload;\n      const audioUnit = (state.audioStorage?.[groupKey] ? state.audioStorage[groupKey] : AudioUnitDefaultValue()) as AudioStorageUnit;\n      audioUnit.audioFile = audioFile;\n      audioUnit.playingStatus = VOICE_PLAYER_STATUS.PLAYING;\n      return {\n        ...state,\n        audioStorage: {\n          ...state.audioStorage,\n          [groupKey]: audioUnit,\n        },\n      };\n    }\n    case ON_VOICE_PLAYER_PAUSE: {\n      const { groupKey } = action.payload as OnVoicePlayerPausePayload;\n      const audioUnit = (state.audioStorage?.[groupKey] ? state.audioStorage[groupKey] : AudioUnitDefaultValue()) as AudioStorageUnit;\n      audioUnit.playingStatus = VOICE_PLAYER_STATUS.PAUSED;\n      const { currentTime, duration } = state.currentPlayer as HTMLAudioElement;\n      if (audioUnit.playbackTime === audioUnit.duration) {\n        audioUnit.playbackTime = 0;\n      } else if (currentTime > 0 && duration > 0) {\n        audioUnit.playbackTime = currentTime;\n        audioUnit.duration = duration;\n      }\n      return {\n        ...state,\n        audioStorage: {\n          ...state.audioStorage,\n          [groupKey]: audioUnit,\n        },\n      };\n    }\n    case ON_CURRENT_TIME_UPDATE: {\n      const { groupKey } = action.payload as OnCurrentTimeUpdatePayload;\n      const { currentTime, duration } = state.currentPlayer as HTMLAudioElement;\n      const audioUnit = (state.audioStorage?.[groupKey] ? state.audioStorage[groupKey] : AudioUnitDefaultValue()) as AudioStorageUnit;\n      if (currentTime > 0 && duration > 0) {\n        audioUnit.playbackTime = currentTime;\n        audioUnit.duration = duration;\n      }\n      return {\n        ...state,\n        audioStorage: {\n          ...state.audioStorage,\n          [groupKey]: audioUnit,\n        },\n      };\n    }\n    default:\n      return state;\n  }\n}\n","import React, { createContext, useContext, useReducer } from 'react';\nimport voicePlayerReducer from './dux/reducer';\nimport {\n  AudioStorageUnit,\n  AudioUnitDefaultValue,\n  VoicePlayerInitialState,\n  voicePlayerInitialState,\n} from './dux/initialState';\nimport {\n  INITIALIZE_AUDIO_UNIT,\n  ON_CURRENT_TIME_UPDATE,\n  ON_VOICE_PLAYER_PAUSE,\n  ON_VOICE_PLAYER_PLAY,\n  SET_CURRENT_PLAYER,\n} from './dux/actionTypes';\nimport {\n  VOICE_MESSAGE_FILE_NAME,\n  VOICE_MESSAGE_MIME_TYPE,\n  VOICE_PLAYER_AUDIO_ID,\n  VOICE_PLAYER_ROOT_ID,\n} from '../../utils/consts';\nimport useSendbirdStateContext from '../useSendbirdStateContext';\n\n// VoicePlayerProvider interface\nexport interface VoicePlayerProps {\n  children: React.ReactElement;\n}\nexport interface VoicePlayerPlayProps {\n  groupKey: string;\n  audioFile?: File;\n  audioFileUrl?: string;\n}\nexport interface VoicePlayerContext {\n  play: (props: VoicePlayerPlayProps) => void;\n  pause: (groupKey?: string) => void;\n  stop: (text?: string) => void;\n  voicePlayerStore: VoicePlayerInitialState;\n}\n\nconst noop = () => { /* noop */ };\nconst VoicePlayerStoreDefaultValue = {\n  currentGroupKey: '',\n  currentPlayer: null,\n  audioStorage: {},\n};\n\nconst Context = createContext<VoicePlayerContext>({\n  play: noop,\n  pause: noop,\n  stop: noop,\n  voicePlayerStore: VoicePlayerStoreDefaultValue,\n});\n\nexport const VoicePlayerProvider = ({\n  children,\n}: VoicePlayerProps): React.ReactElement => {\n  const [voicePlayerStore, voicePlayerDispatcher] = useReducer(voicePlayerReducer, voicePlayerInitialState);\n  const {\n    currentGroupKey,\n    currentPlayer,\n    audioStorage,\n  } = voicePlayerStore;\n  const { config } = useSendbirdStateContext();\n  const { logger } = config;\n\n  const stop = (text = '') => {\n    if (currentGroupKey.includes(text)) {\n      logger.info('VoicePlayer: Pause playing(by text).');\n      pause(currentGroupKey);\n    }\n  };\n\n  const pause = (groupKey: string) => {\n    if (currentGroupKey === groupKey && currentPlayer !== null) {\n      logger.info('VoicePlayer: Pause playing(by group key).');\n      currentPlayer?.pause();\n    }\n  };\n\n  const play = ({\n    groupKey,\n    audioFile = null,\n    audioFileUrl = '',\n  }: VoicePlayerPlayProps): void => {\n    if (groupKey !== currentGroupKey) {\n      pause(currentGroupKey);\n    }\n\n    // Clear the previous AudioPlayer element\n    const voicePlayerRoot = document.getElementById(VOICE_PLAYER_ROOT_ID);\n    const voicePlayerAudioElement = document.getElementById(VOICE_PLAYER_AUDIO_ID);\n    if (voicePlayerAudioElement) {\n      voicePlayerRoot.removeChild(voicePlayerAudioElement);\n    }\n\n    logger.info('VoicePlayer: Start getting audio file.');\n    new Promise((resolve) => {\n      if (audioFile) {\n        resolve(audioFile);\n        logger.info('VoicePlayer: Use the audioFile instance.');\n      }\n      if (audioStorage?.[groupKey]?.audioFile) {\n        resolve(audioStorage[groupKey].audioFile);\n        logger.info('VoicePlayer: Get from the audioStorage.');\n      }\n      voicePlayerDispatcher({\n        type: INITIALIZE_AUDIO_UNIT,\n        payload: { groupKey },\n      });\n      fetch(audioFileUrl)\n        .then((res) => res.blob())\n        .then((blob) => {\n          const audioFile = new File([blob], VOICE_MESSAGE_FILE_NAME, {\n            lastModified: new Date().getTime(),\n            type: VOICE_MESSAGE_MIME_TYPE,\n          });\n          resolve(audioFile);\n          logger.info('VoicePlayer: Get the audioFile from URL.');\n        });\n    }).then((audioFile: File) => {\n      logger.info('VoicePlayer: Succeeded getting audio file.', audioFile);\n      const currentAudioUnit = audioStorage[groupKey] || AudioUnitDefaultValue() as AudioStorageUnit;\n      const audioPlayer = new Audio(URL?.createObjectURL?.(audioFile));\n      audioPlayer.id = VOICE_PLAYER_AUDIO_ID;\n      audioPlayer.currentTime = currentAudioUnit.playbackTime;\n      audioPlayer.volume = 1;\n      audioPlayer.loop = false;\n      audioPlayer.onplaying = () => {\n        logger.info('VoicePlayer: OnPlaying event is called from audioPlayer', { groupKey, audioPlayer });\n        voicePlayerDispatcher({\n          type: ON_VOICE_PLAYER_PLAY,\n          payload: { groupKey, audioFile },\n        });\n      };\n      audioPlayer.onpause = () => {\n        logger.info('VoicePlayer: OnPause event is called from audioPlayer', { groupKey, audioPlayer });\n        voicePlayerDispatcher({\n          type: ON_VOICE_PLAYER_PAUSE,\n          payload: { groupKey },\n        });\n      };\n      audioPlayer.ontimeupdate = () => {\n        voicePlayerDispatcher({\n          type: ON_CURRENT_TIME_UPDATE,\n          payload: { groupKey },\n        });\n      };\n      audioPlayer?.play();\n      const voicePlayerRoot = document.getElementById(VOICE_PLAYER_ROOT_ID);\n      voicePlayerRoot.appendChild(audioPlayer);\n      voicePlayerDispatcher({\n        type: SET_CURRENT_PLAYER,\n        payload: { groupKey, audioPlayer },\n      });\n      logger.info('VoicePlayer: Succeeded playing audio player.', { groupKey, audioPlayer });\n    });\n  };\n\n  return (\n    <Context.Provider value={{\n      play,\n      pause,\n      stop,\n      voicePlayerStore,\n    }}>\n      <div id={VOICE_PLAYER_ROOT_ID} style={{ display: 'none' }} />\n      {children}\n    </Context.Provider>\n  );\n};\n\nexport const useVoicePlayerContext = (): VoicePlayerContext => useContext(Context);\n"]},"metadata":{},"sourceType":"module"}