{"ast":null,"code":"import _slicedToArray from \"C:/Users/\\uC774\\uACBD\\uBBFC/IdeaProjects/sendbird-uikit-whatsapp-sample/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport React__default, { useState } from 'react';\nimport { c as compareMessagesForGrouping, u as useChannelContext, i as isAboutSame } from '../../ChannelProvider-910bbc1f.js';\nimport { P as PlaceHolder, a as PlaceHolderTypes } from '../../index-cef1cfff.js';\nimport Icon, { IconTypes, IconColors } from '../../ui/Icon.js';\nimport Message from './Message.js';\nimport { i as isSameDay } from '../../index-fe932783.js';\nimport UnreadCount from './UnreadCount.js';\nimport FrozenNotification from './FrozenNotification.js';\nimport { S as SCROLL_BUFFER } from '../../consts-95d8566e.js';\nimport useSendbirdStateContext from '../../useSendbirdStateContext.js';\nimport { MessageProvider } from '../../Message/context.js';\nimport { u as useDebounce, a as useHandleOnScrollCallback } from '../../index-9e49ffe3.js';\nimport '../../UserProfileContext-9cfbab4d.js';\nimport 'prop-types';\nimport '../../index-7cdd58b8.js';\nimport '../../index-99aabd9e.js';\nimport '../../topics-b2b77fb9.js';\nimport '../../index-7eb65acf.js';\nimport '../../_rollupPluginBabelHelpers-6bb0305c.js';\nimport '../../utils/message/getOutgoingMessageState.js';\nimport '../../compareIds-defe2bb3.js';\nimport '../../const-b3f02313.js';\nimport '@sendbird/chat/groupChannel';\nimport '../../uuid-1adedf62.js';\nimport '@sendbird/chat/message';\nimport '../../LocalizationContext-076d6d2e.js';\nimport '../../stringSet-13bbd4a2.js';\nimport '../../index-63949de5.js';\nimport '../../ui/Loader.js';\nimport './SuggestedMentionList.js';\nimport '../../ui/Avatar.js';\nimport '../../ui/ImageRenderer.js';\nimport '../../const-221c6a89.js';\nimport '../../ThreadProvider-3a4a4db0.js';\nimport '../../Thread/context/types.js';\nimport '@sendbird/chat';\nimport '../../ui/DateSeparator.js';\nimport '../../color-879cc347.js';\nimport '../../ui/MessageInput.js';\nimport '../../ui/IconButton.js';\nimport '../../ui/Button.js';\nimport 'dompurify';\nimport '../../consts-ff014656.js';\nimport '../../consts-c41580ae.js';\nimport '../../consts-81544e52.js';\nimport '../../tokenize-c40f2b57.js';\nimport '../../ui/MessageContent.js';\nimport '../../ui/UserProfile.js';\nimport '../../sendbirdSelectors.js';\nimport '../../utils-4bbbca2c.js';\nimport '../../index-5c1b672d.js';\nimport '../../index-306bc4ab.js';\nimport '../../ui/MessageItemMenu.js';\nimport '../../ui/ContextMenu.js';\nimport 'react-dom';\nimport '../../ui/SortByRow.js';\nimport '../../types-4ff4177c.js';\nimport '../../ui/MessageItemReactionMenu.js';\nimport '../../ui/ReactionButton.js';\nimport '../../useLongPress-1303953d.js';\nimport '../../MediaQueryContext-11f0e43f.js';\nimport '../../ui/EmojiReactions.js';\nimport '../../ui/ReactionBadge.js';\nimport '../../ui/BottomSheet.js';\nimport '../../index-38e61c64.js';\nimport '../../ui/UserListItem.js';\nimport '../../ui/MutedAvatarOverlay.js';\nimport '../../ui/Checkbox.js';\nimport '../../ui/Tooltip.js';\nimport '../../ui/TooltipWrapper.js';\nimport '../../ui/AdminMessage.js';\nimport '../../ui/TextMessageItemBody.js';\nimport '../../index-2c3e11ea.js';\nimport '../../index.module-54d57ec3.js';\nimport '../../ui/MentionLabel.js';\nimport '../../ui/LinkLabel.js';\nimport '../../ui/FileMessageItemBody.js';\nimport '../../ui/TextButton.js';\nimport '../../ui/ThumbnailMessageItemBody.js';\nimport '../../ui/OGMessageItemBody.js';\nimport '../../ui/UnknownMessageItemBody.js';\nimport '../../ui/QuoteMessage.js';\nimport '../../index-aca30408.js';\nimport '../../ui/ThreadReplies.js';\nimport '../../ui/VoiceMessageItemBody.js';\nimport '../../ui/ProgressBar.js';\nimport '../../VoicePlayer/useVoicePlayer.js';\nimport '../../index-5c985608.js';\nimport '../../VoiceRecorder/context.js';\nimport '../../withSendbird.js';\nimport '../../ui/PlaybackTime.js';\nimport './FileViewer.js';\nimport './RemoveMessageModal.js';\nimport '../../ui/Modal.js';\nimport '../../useDirtyGetMentions-aa730e2c.js';\nvar getMessagePartsInfo = function getMessagePartsInfo(_ref) {\n  var _ref$allMessages = _ref.allMessages,\n    allMessages = _ref$allMessages === void 0 ? [] : _ref$allMessages,\n    _ref$isMessageGroupin = _ref.isMessageGroupingEnabled,\n    isMessageGroupingEnabled = _ref$isMessageGroupin === void 0 ? true : _ref$isMessageGroupin,\n    _ref$currentIndex = _ref.currentIndex,\n    currentIndex = _ref$currentIndex === void 0 ? 0 : _ref$currentIndex,\n    _ref$currentMessage = _ref.currentMessage,\n    currentMessage = _ref$currentMessage === void 0 ? null : _ref$currentMessage,\n    _ref$currentChannel = _ref.currentChannel,\n    currentChannel = _ref$currentChannel === void 0 ? null : _ref$currentChannel,\n    _ref$replyType = _ref.replyType,\n    replyType = _ref$replyType === void 0 ? '' : _ref$replyType;\n  var previousMessage = allMessages[currentIndex - 1];\n  var nextMessage = allMessages[currentIndex + 1];\n  var _ref3 = isMessageGroupingEnabled ? compareMessagesForGrouping(previousMessage, currentMessage, nextMessage, currentChannel, replyType) : [false, false],\n    _ref4 = _slicedToArray(_ref3, 2),\n    chainTop = _ref4[0],\n    chainBottom = _ref4[1];\n  var previousMessageCreatedAt = previousMessage === null || previousMessage === void 0 ? void 0 : previousMessage.createdAt;\n  var currentCreatedAt = currentMessage.createdAt;\n  // https://stackoverflow.com/a/41855608\n  var hasSeparator = !(previousMessageCreatedAt && isSameDay(currentCreatedAt, previousMessageCreatedAt));\n  return {\n    chainTop: chainTop,\n    chainBottom: chainBottom,\n    hasSeparator: hasSeparator\n  };\n};\nvar DELAY = 500;\nfunction useSetScrollToBottom() {\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    scrollBottom = _useState2[0],\n    setScrollBottom = _useState2[1];\n  var scrollCb = function scrollCb(e) {\n    var element = e.target;\n    try {\n      setScrollBottom(element.scrollHeight - element.scrollTop - element.offsetHeight);\n    } catch (_unused) {\n      //\n    }\n  };\n  return {\n    scrollBottom: scrollBottom,\n    scrollToBottomHandler: useDebounce(scrollCb, DELAY)\n  };\n}\nvar SCROLL_BOTTOM_PADDING = 50;\nvar MessageList = function MessageList(_ref) {\n  var _ref$className = _ref.className,\n    className = _ref$className === void 0 ? '' : _ref$className,\n    renderMessage = _ref.renderMessage,\n    renderPlaceholderEmpty = _ref.renderPlaceholderEmpty,\n    renderCustomSeparator = _ref.renderCustomSeparator,\n    renderPlaceholderLoader = _ref.renderPlaceholderLoader;\n  var _useChannelContext = useChannelContext(),\n    allMessages = _useChannelContext.allMessages,\n    hasMorePrev = _useChannelContext.hasMorePrev,\n    hasMoreNext = _useChannelContext.hasMoreNext,\n    setInitialTimeStamp = _useChannelContext.setInitialTimeStamp,\n    setAnimatedMessageId = _useChannelContext.setAnimatedMessageId,\n    setHighLightedMessageId = _useChannelContext.setHighLightedMessageId,\n    isMessageGroupingEnabled = _useChannelContext.isMessageGroupingEnabled,\n    scrollRef = _useChannelContext.scrollRef,\n    onScrollCallback = _useChannelContext.onScrollCallback,\n    onScrollDownCallback = _useChannelContext.onScrollDownCallback,\n    messagesDispatcher = _useChannelContext.messagesDispatcher,\n    messageActionTypes = _useChannelContext.messageActionTypes,\n    currentGroupChannel = _useChannelContext.currentGroupChannel,\n    disableMarkAsRead = _useChannelContext.disableMarkAsRead,\n    filterMessageList = _useChannelContext.filterMessageList,\n    replyType = _useChannelContext.replyType,\n    loading = _useChannelContext.loading,\n    unreadSince = _useChannelContext.unreadSince;\n  var store = useSendbirdStateContext();\n  var allMessagesFiltered = typeof filterMessageList === 'function' ? allMessages.filter(filterMessageList) : allMessages;\n  var markAsReadScheduler = store.config.markAsReadScheduler;\n  var onScroll = function onScroll() {\n    var element = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current;\n    if (element == null) {\n      return;\n    }\n    var scrollTop = element.scrollTop,\n      clientHeight = element.clientHeight,\n      scrollHeight = element.scrollHeight;\n    if (isAboutSame(scrollTop, 0, SCROLL_BUFFER)) {\n      onScrollCallback(function (messages) {});\n    }\n    if (isAboutSame(clientHeight + scrollTop, scrollHeight, SCROLL_BUFFER) && hasMoreNext) {\n      onScrollDownCallback(function (_ref2) {});\n    }\n    if (!disableMarkAsRead && isAboutSame(clientHeight + scrollTop, scrollHeight, SCROLL_BUFFER) && !!currentGroupChannel) {\n      messagesDispatcher({\n        type: messageActionTypes.MARK_AS_READ,\n        payload: {\n          channel: currentGroupChannel\n        }\n      });\n      markAsReadScheduler.push(currentGroupChannel);\n    }\n  };\n  var onClickScrollBot = function onClickScrollBot() {\n    var _scrollRef$current;\n    setInitialTimeStamp === null || setInitialTimeStamp === void 0 ? void 0 : setInitialTimeStamp(null);\n    setAnimatedMessageId === null || setAnimatedMessageId === void 0 ? void 0 : setAnimatedMessageId(null);\n    setHighLightedMessageId === null || setHighLightedMessageId === void 0 ? void 0 : setHighLightedMessageId(null);\n    if ((scrollRef === null || scrollRef === void 0 ? void 0 : (_scrollRef$current = scrollRef.current) === null || _scrollRef$current === void 0 ? void 0 : _scrollRef$current.scrollTop) > -1) {\n      var _scrollRef$current$sc, _scrollRef$current2, _scrollRef$current$of, _scrollRef$current3;\n      scrollRef.current.scrollTop = ((_scrollRef$current$sc = scrollRef === null || scrollRef === void 0 ? void 0 : (_scrollRef$current2 = scrollRef.current) === null || _scrollRef$current2 === void 0 ? void 0 : _scrollRef$current2.scrollHeight) !== null && _scrollRef$current$sc !== void 0 ? _scrollRef$current$sc : 0) - ((_scrollRef$current$of = scrollRef === null || scrollRef === void 0 ? void 0 : (_scrollRef$current3 = scrollRef.current) === null || _scrollRef$current3 === void 0 ? void 0 : _scrollRef$current3.offsetHeight) !== null && _scrollRef$current$of !== void 0 ? _scrollRef$current$of : 0);\n    }\n  };\n\n  // Move the messsage list scroll when the last message's height is changed by reactions\n  var handleMessageHeightChange = function handleMessageHeightChange() {\n    var current = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current;\n    if (current) {\n      var bottom = current.scrollHeight - current.scrollTop - current.offsetHeight;\n      if (scrollBottom < bottom && scrollBottom <= SCROLL_BUFFER) {\n        current.scrollTop += bottom - scrollBottom;\n      }\n    }\n  };\n  // Keep the scrollBottom value after fetching new message list\n  var handleMessageListHeightChange = function handleMessageListHeightChange() {\n    var current = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current;\n    if (current) {\n      var bottom = current.scrollHeight - current.scrollTop - current.offsetHeight;\n      if (scrollBottom < bottom) {\n        current.scrollTop += bottom - scrollBottom;\n      }\n    }\n  };\n  var handleOnScroll = useHandleOnScrollCallback({\n    hasMore: hasMorePrev,\n    hasNext: hasMoreNext,\n    onScroll: onScroll,\n    scrollRef: scrollRef\n  });\n  var _useSetScrollToBottom = useSetScrollToBottom(),\n    scrollToBottomHandler = _useSetScrollToBottom.scrollToBottomHandler,\n    scrollBottom = _useSetScrollToBottom.scrollBottom;\n  if (loading) {\n    return typeof renderPlaceholderLoader === 'function' ? renderPlaceholderLoader() : /*#__PURE__*/React__default.createElement(PlaceHolder, {\n      type: PlaceHolderTypes.LOADING\n    });\n  }\n  if (allMessagesFiltered.length < 1) {\n    if (renderPlaceholderEmpty && typeof renderPlaceholderEmpty === 'function') {\n      return renderPlaceholderEmpty();\n    }\n    return /*#__PURE__*/React__default.createElement(PlaceHolder, {\n      className: \"sendbird-conversation__no-messages\",\n      type: PlaceHolderTypes.NO_MESSAGES\n    });\n  }\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-conversation__messages \".concat(className)\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-conversation__scroll-container\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-conversation__padding\"\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-conversation__messages-padding\",\n    ref: scrollRef,\n    onScroll: function onScroll(e) {\n      handleOnScroll();\n      scrollToBottomHandler(e);\n    }\n  }, allMessagesFiltered.map(function (m, idx) {\n    var _sender, _store$config;\n    var _getMessagePartsInfo = getMessagePartsInfo({\n        allMessages: allMessagesFiltered,\n        replyType: replyType,\n        isMessageGroupingEnabled: isMessageGroupingEnabled,\n        currentIndex: idx,\n        currentMessage: m,\n        currentChannel: currentGroupChannel\n      }),\n      chainTop = _getMessagePartsInfo.chainTop,\n      chainBottom = _getMessagePartsInfo.chainBottom,\n      hasSeparator = _getMessagePartsInfo.hasSeparator;\n    var isByMe = (m === null || m === void 0 ? void 0 : (_sender = m.sender) === null || _sender === void 0 ? void 0 : _sender.userId) === (store === null || store === void 0 ? void 0 : (_store$config = store.config) === null || _store$config === void 0 ? void 0 : _store$config.userId);\n    return /*#__PURE__*/React__default.createElement(MessageProvider, {\n      message: m,\n      key: m === null || m === void 0 ? void 0 : m.messageId,\n      isByMe: isByMe\n    }, /*#__PURE__*/React__default.createElement(Message, {\n      handleScroll: handleMessageHeightChange,\n      handleMessageListHeightChange: handleMessageListHeightChange,\n      renderMessage: renderMessage,\n      message: m,\n      hasSeparator: hasSeparator,\n      chainTop: chainTop,\n      chainBottom: chainBottom,\n      renderCustomSeparator: renderCustomSeparator\n    }));\n  }))), (currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.isFrozen) && /*#__PURE__*/React__default.createElement(FrozenNotification, {\n    className: \"sendbird-conversation__messages__notification\"\n  }), /*#__PURE__*/React__default.createElement(UnreadCount, {\n    className: \"sendbird-conversation__messages__notification\",\n    count: currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.unreadMessageCount,\n    time: unreadSince,\n    onClick: function onClick() {\n      var _scrollRef$current4;\n      if (scrollRef !== null && scrollRef !== void 0 && (_scrollRef$current4 = scrollRef.current) !== null && _scrollRef$current4 !== void 0 && _scrollRef$current4.scrollTop) {\n        var _scrollRef$current$sc2, _scrollRef$current5, _scrollRef$current$of2, _scrollRef$current6;\n        scrollRef.current.scrollTop = ((_scrollRef$current$sc2 = scrollRef === null || scrollRef === void 0 ? void 0 : (_scrollRef$current5 = scrollRef.current) === null || _scrollRef$current5 === void 0 ? void 0 : _scrollRef$current5.scrollHeight) !== null && _scrollRef$current$sc2 !== void 0 ? _scrollRef$current$sc2 : 0) - ((_scrollRef$current$of2 = scrollRef === null || scrollRef === void 0 ? void 0 : (_scrollRef$current6 = scrollRef.current) === null || _scrollRef$current6 === void 0 ? void 0 : _scrollRef$current6.offsetHeight) !== null && _scrollRef$current$of2 !== void 0 ? _scrollRef$current$of2 : 0);\n      }\n      if (!disableMarkAsRead && !!currentGroupChannel) {\n        markAsReadScheduler.push(currentGroupChannel);\n        messagesDispatcher({\n          type: messageActionTypes.MARK_AS_READ,\n          payload: {\n            channel: currentGroupChannel\n          }\n        });\n      }\n      setInitialTimeStamp(null);\n      setAnimatedMessageId(null);\n      setHighLightedMessageId(null);\n    }\n  }),\n  // This flag is an unmatched variable\n  scrollBottom > SCROLL_BOTTOM_PADDING && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-conversation__scroll-bottom-button\",\n    onClick: onClickScrollBot,\n    onKeyDown: onClickScrollBot,\n    tabIndex: 0,\n    role: \"button\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    width: \"24px\",\n    height: \"24px\",\n    type: IconTypes.CHEVRON_DOWN,\n    fillColor: IconColors.PRIMARY\n  })));\n};\nexport { MessageList as default };","map":{"version":3,"mappings":"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","names":["getMessagePartsInfo","_ref","allMessages","isMessageGroupingEnabled","currentIndex","currentMessage","currentChannel","replyType","previousMessage","nextMessage","compareMessagesForGrouping","chainTop","chainBottom","previousMessageCreatedAt","createdAt","currentCreatedAt","hasSeparator","isSameDay","DELAY","useSetScrollToBottom","useState","scrollBottom","setScrollBottom","scrollCb","e","element","target","scrollHeight","scrollTop","offsetHeight","scrollToBottomHandler","useDebounce","SCROLL_BOTTOM_PADDING","MessageList","className","renderMessage","renderPlaceholderEmpty","renderCustomSeparator","renderPlaceholderLoader","useChannelContext","hasMorePrev","hasMoreNext","setInitialTimeStamp","setAnimatedMessageId","setHighLightedMessageId","scrollRef","onScrollCallback","onScrollDownCallback","messagesDispatcher","messageActionTypes","currentGroupChannel","disableMarkAsRead","filterMessageList","loading","unreadSince","store","useSendbirdStateContext","allMessagesFiltered","filter","markAsReadScheduler","config","onScroll","current","clientHeight","isAboutSame","SCROLL_BUFFER","messages","_ref2","type","MARK_AS_READ","payload","channel","push","onClickScrollBot","_scrollRef$current","_scrollRef$current2","_scrollRef$current3","handleMessageHeightChange","bottom","handleMessageListHeightChange","handleOnScroll","useHandleOnScrollCallback","hasMore","hasNext","React","PlaceHolder","PlaceHolderTypes","LOADING","length","NO_MESSAGES","ref","map","m","idx","isByMe","sender","_sender","userId","_store$config","MessageProvider","message","key","messageId","Message","handleScroll","isFrozen","FrozenNotification","UnreadCount","count","unreadMessageCount","time","onClick","_scrollRef$current4","_scrollRef$current5","_scrollRef$current6","onKeyDown","tabIndex","role","Icon","width","height","IconTypes","CHEVRON_DOWN","fillColor","IconColors","PRIMARY"],"sources":["C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Channel\\components\\MessageList\\getMessagePartsInfo.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Channel\\components\\MessageList\\hooks\\useSetScrollToBottom.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Channel\\components\\MessageList\\index.tsx"],"sourcesContent":["import { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { AdminMessage, FileMessage, UserMessage } from '@sendbird/chat/message';\nimport isSameDay from 'date-fns/isSameDay';\n\nimport { compareMessagesForGrouping } from '../../context/utils';\n\nexport interface GetMessagePartsInfoProps {\n  allMessages: Array<UserMessage | FileMessage | AdminMessage>;\n  isMessageGroupingEnabled: boolean;\n  currentIndex: number;\n  currentMessage: UserMessage | FileMessage | AdminMessage;\n  currentChannel: GroupChannel;\n  replyType: string;\n}\n\ninterface OutPuts {\n  chainTop: boolean,\n  chainBottom: boolean,\n  hasSeparator: boolean,\n}\n\nexport const getMessagePartsInfo = ({\n  allMessages = [],\n  isMessageGroupingEnabled = true,\n  currentIndex = 0,\n  currentMessage = null,\n  currentChannel = null,\n  replyType = '',\n}: GetMessagePartsInfoProps): OutPuts => {\n  const previousMessage = allMessages[currentIndex - 1];\n  const nextMessage = allMessages[currentIndex + 1];\n  const [chainTop, chainBottom] = isMessageGroupingEnabled\n    ? compareMessagesForGrouping(previousMessage, currentMessage, nextMessage, currentChannel, replyType)\n    : [false, false];\n  const previousMessageCreatedAt = previousMessage?.createdAt;\n  const currentCreatedAt = currentMessage.createdAt;\n  // https://stackoverflow.com/a/41855608\n  const hasSeparator = !(previousMessageCreatedAt && (\n    isSameDay(currentCreatedAt, previousMessageCreatedAt)\n  ));\n  return {\n    chainTop,\n    chainBottom,\n    hasSeparator,\n  };\n};\n","import React, { useState } from 'react';\nimport { useDebounce } from '../../../../../hooks/useDebounce';\n\nconst DELAY = 500;\n\nexport function useSetScrollToBottom(): ({\n  scrollBottom: number;\n  scrollToBottomHandler: (e: React.UIEvent<HTMLDivElement, UIEvent>) => void;\n}) {\n  const [scrollBottom, setScrollBottom] = useState(0);\n  const scrollCb = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\n    const element = e.target as HTMLDivElement;\n    try {\n      setScrollBottom(element.scrollHeight - element.scrollTop - element.offsetHeight);\n    } catch {\n      //\n    }\n  };\n  return {\n    scrollBottom,\n    scrollToBottomHandler: useDebounce(scrollCb, DELAY),\n  };\n}\n","import './message-list.scss';\n\nimport React from 'react';\n\nimport { useChannelContext } from '../../context/ChannelProvider';\nimport PlaceHolder, { PlaceHolderTypes } from '../../../../ui/PlaceHolder';\nimport Icon, { IconTypes, IconColors } from '../../../../ui/Icon';\nimport Message from '../Message';\nimport { EveryMessage, RenderCustomSeparatorProps, RenderMessageProps } from '../../../../types';\nimport { isAboutSame } from '../../context/utils';\nimport { getMessagePartsInfo } from './getMessagePartsInfo';\nimport UnreadCount from '../UnreadCount';\nimport FrozenNotification from '../FrozenNotification';\nimport { SCROLL_BUFFER } from '../../../../utils/consts';\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\nimport { UserMessage } from '@sendbird/chat/message';\nimport { MessageProvider } from '../../../Message/context/MessageProvider';\nimport { useHandleOnScrollCallback } from '../../../../hooks/useHandleOnScrollCallback';\nimport { useSetScrollToBottom } from './hooks/useSetScrollToBottom';\n\nconst SCROLL_BOTTOM_PADDING = 50;\n\nexport interface MessageListProps {\n  className?: string;\n  renderMessage?: (props: RenderMessageProps) => React.ReactElement;\n  renderPlaceholderEmpty?: () => React.ReactElement;\n  renderCustomSeparator?: (props: RenderCustomSeparatorProps) => React.ReactElement;\n  renderPlaceholderLoader?: () => React.ReactElement;\n}\n\nconst MessageList: React.FC<MessageListProps> = ({\n  className = '',\n  renderMessage,\n  renderPlaceholderEmpty,\n  renderCustomSeparator,\n  renderPlaceholderLoader,\n}) => {\n  const {\n    allMessages,\n    hasMorePrev,\n    hasMoreNext,\n    setInitialTimeStamp,\n    setAnimatedMessageId,\n    setHighLightedMessageId,\n    isMessageGroupingEnabled,\n    scrollRef,\n    onScrollCallback,\n    onScrollDownCallback,\n    messagesDispatcher,\n    messageActionTypes,\n    currentGroupChannel,\n    disableMarkAsRead,\n    filterMessageList,\n    replyType,\n    loading,\n    unreadSince,\n  } = useChannelContext();\n  const store = useSendbirdStateContext();\n  const allMessagesFiltered = (typeof filterMessageList === 'function')\n    ? allMessages.filter((filterMessageList as (message: EveryMessage) => boolean))\n    : allMessages;\n  const markAsReadScheduler = store.config.markAsReadScheduler;\n\n  const onScroll = () => {\n    const element = scrollRef?.current;\n    if (element == null) {\n      return;\n    }\n\n    const {\n      scrollTop,\n      clientHeight,\n      scrollHeight,\n    } = element;\n\n    if (isAboutSame(scrollTop, 0, SCROLL_BUFFER)) {\n      onScrollCallback((messages) => {\n        if (messages) {\n          try {\n            //\n          } catch (error) {\n            //\n          }\n        }\n      });\n    }\n\n    if (isAboutSame(clientHeight + scrollTop, scrollHeight, SCROLL_BUFFER) && hasMoreNext) {\n      onScrollDownCallback(([messages]) => {\n        if (messages) {\n          try {\n            // element.scrollTop = scrollHeight - clientHeight;\n            // scrollRef.current.scrollTop = scrollHeight - clientHeight;\n          } catch (error) {\n            //\n          }\n        }\n      });\n    }\n\n    if (!disableMarkAsRead\n      && isAboutSame(clientHeight + scrollTop, scrollHeight, SCROLL_BUFFER)\n      && !!currentGroupChannel\n    ) {\n      messagesDispatcher({\n        type: messageActionTypes.MARK_AS_READ,\n        payload: { channel: currentGroupChannel },\n      });\n      markAsReadScheduler.push(currentGroupChannel);\n    }\n  };\n\n  const onClickScrollBot = () => {\n    setInitialTimeStamp?.(null);\n    setAnimatedMessageId?.(null);\n    setHighLightedMessageId?.(null);\n    if (scrollRef?.current?.scrollTop > -1) {\n      scrollRef.current.scrollTop = (scrollRef?.current?.scrollHeight ?? 0) - (scrollRef?.current?.offsetHeight ?? 0);\n    }\n  };\n\n  // Move the messsage list scroll when the last message's height is changed by reactions\n  const handleMessageHeightChange = () => {\n    const current = scrollRef?.current;\n    if (current) {\n      const bottom = current.scrollHeight - current.scrollTop - current.offsetHeight;\n      if (scrollBottom < bottom && scrollBottom <= SCROLL_BUFFER) {\n        current.scrollTop += bottom - scrollBottom;\n      }\n    }\n  };\n  // Keep the scrollBottom value after fetching new message list\n  const handleMessageListHeightChange = () => {\n    const current = scrollRef?.current;\n    if (current) {\n      const bottom = current.scrollHeight - current.scrollTop - current.offsetHeight;\n      if (scrollBottom < bottom) {\n        current.scrollTop += bottom - scrollBottom;\n      }\n    }\n  };\n\n  const handleOnScroll = useHandleOnScrollCallback({\n    hasMore: hasMorePrev,\n    hasNext: hasMoreNext,\n    onScroll,\n    scrollRef,\n  });\n\n  const { scrollToBottomHandler, scrollBottom } = useSetScrollToBottom();\n\n  if (loading) {\n    return (typeof renderPlaceholderLoader === 'function')\n      ? renderPlaceholderLoader()\n      : <PlaceHolder type={PlaceHolderTypes.LOADING} />;\n  }\n  if (allMessagesFiltered.length < 1) {\n    if (renderPlaceholderEmpty && typeof renderPlaceholderEmpty === 'function') {\n      return renderPlaceholderEmpty();\n    }\n    return <PlaceHolder className=\"sendbird-conversation__no-messages\" type={PlaceHolderTypes.NO_MESSAGES} />;\n  }\n  return (\n    <div className={`sendbird-conversation__messages ${className}`}>\n      <div className=\"sendbird-conversation__scroll-container\">\n        <div className=\"sendbird-conversation__padding\" />\n        <div\n          className=\"sendbird-conversation__messages-padding\"\n          ref={scrollRef}\n          onScroll={(e) => {\n            handleOnScroll();\n            scrollToBottomHandler(e);\n          }}\n        >\n          {allMessagesFiltered.map((m, idx) => {\n            const {\n              chainTop,\n              chainBottom,\n              hasSeparator,\n            } = getMessagePartsInfo({\n              allMessages: allMessagesFiltered,\n              replyType,\n              isMessageGroupingEnabled,\n              currentIndex: idx,\n              currentMessage: m,\n              currentChannel: currentGroupChannel,\n            });\n            const isByMe = (m as UserMessage)?.sender?.userId === store?.config?.userId;\n            return (\n              <MessageProvider message={m} key={m?.messageId} isByMe={isByMe}>\n                <Message\n                  handleScroll={handleMessageHeightChange}\n                  handleMessageListHeightChange={handleMessageListHeightChange}\n                  renderMessage={renderMessage}\n                  message={m}\n                  hasSeparator={hasSeparator}\n                  chainTop={chainTop}\n                  chainBottom={chainBottom}\n                  renderCustomSeparator={renderCustomSeparator}\n                />\n              </MessageProvider>\n            );\n          })}\n          {/* show frozen notifications */}\n          {/* show new message notifications */}\n        </div>\n      </div>\n      {currentGroupChannel?.isFrozen && (\n        <FrozenNotification className=\"sendbird-conversation__messages__notification\" />\n      )}\n      <UnreadCount\n        className=\"sendbird-conversation__messages__notification\"\n        count={currentGroupChannel?.unreadMessageCount}\n        time={unreadSince}\n        onClick={() => {\n          if (scrollRef?.current?.scrollTop) {\n            scrollRef.current.scrollTop = (scrollRef?.current?.scrollHeight ?? 0) - (scrollRef?.current?.offsetHeight ?? 0);\n          }\n          if (!disableMarkAsRead && !!currentGroupChannel) {\n            markAsReadScheduler.push(currentGroupChannel);\n            messagesDispatcher({\n              type: messageActionTypes.MARK_AS_READ,\n              payload: { channel: currentGroupChannel },\n            });\n          }\n          setInitialTimeStamp(null);\n          setAnimatedMessageId(null);\n          setHighLightedMessageId(null);\n        }}\n      />\n      {\n        // This flag is an unmatched variable\n        scrollBottom > SCROLL_BOTTOM_PADDING && (\n          <div\n            className=\"sendbird-conversation__scroll-bottom-button\"\n            onClick={onClickScrollBot}\n            onKeyDown={onClickScrollBot}\n            tabIndex={0}\n            role=\"button\"\n          >\n            <Icon\n              width=\"24px\"\n              height=\"24px\"\n              type={IconTypes.CHEVRON_DOWN}\n              fillColor={IconColors.PRIMARY}\n            />\n          </div>\n        )\n      }\n    </div>\n  );\n};\n\nexport default MessageList;\n"]},"metadata":{},"sourceType":"module"}