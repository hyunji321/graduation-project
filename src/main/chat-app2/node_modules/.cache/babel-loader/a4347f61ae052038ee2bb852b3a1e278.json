{"ast":null,"code":"import _slicedToArray from \"C:/Users/\\uC774\\uACBD\\uBBFC/IdeaProjects/sendbird-uikit-whatsapp-sample/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport React__default, { useState } from 'react';\nimport { getCreateGroupChannel } from './sendbirdSelectors.js';\nimport useSendbirdStateContext from './useSendbirdStateContext.js';\nvar CHANNEL_TYPE = /*#__PURE__*/function (CHANNEL_TYPE) {\n  CHANNEL_TYPE[\"GROUP\"] = \"group\";\n  CHANNEL_TYPE[\"SUPERGROUP\"] = \"supergroup\";\n  CHANNEL_TYPE[\"BROADCAST\"] = \"broadcast\";\n  return CHANNEL_TYPE;\n}({});\nvar CreateChannelContext = /*#__PURE__*/React__default.createContext(undefined);\nvar CreateChannelProvider = function CreateChannelProvider(props) {\n  var _store$config;\n  var children = props.children,\n    onCreateChannel = props.onCreateChannel,\n    onBeforeCreateChannel = props.onBeforeCreateChannel,\n    overrideInviteUser = props.overrideInviteUser,\n    userListQuery = props.userListQuery;\n  var store = useSendbirdStateContext();\n  var userListQuery_ = store === null || store === void 0 ? void 0 : (_store$config = store.config) === null || _store$config === void 0 ? void 0 : _store$config.userListQuery;\n  var createChannel = getCreateGroupChannel(store);\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    step = _useState2[0],\n    setStep = _useState2[1];\n  var _useState3 = useState(CHANNEL_TYPE.GROUP),\n    _useState4 = _slicedToArray(_useState3, 2),\n    type = _useState4[0],\n    setType = _useState4[1];\n  return /*#__PURE__*/React__default.createElement(CreateChannelContext.Provider, {\n    value: {\n      onBeforeCreateChannel: onBeforeCreateChannel,\n      createChannel: createChannel,\n      onCreateChannel: onCreateChannel,\n      overrideInviteUser: overrideInviteUser,\n      userListQuery: userListQuery || userListQuery_,\n      step: step,\n      setStep: setStep,\n      type: type,\n      setType: setType\n    }\n  }, children);\n};\nvar useCreateChannelContext = function useCreateChannelContext() {\n  return React__default.useContext(CreateChannelContext);\n};\nexport { CreateChannelProvider as C, CHANNEL_TYPE as a, useCreateChannelContext as u };","map":{"version":3,"mappings":";;;;AAAYA,gBAAY,0BAAZA,YAAY;EAAZA,YAAY;EAAZA,YAAY;EAAZA,YAAY;EAAA,OAAZA,YAAY;AAAA;ACYxB,IAAMC,oBAAoB,gBAAGC,cAAK,CAACC,aAAa,CAACC,SAAS,CAAC;AAoCrDC,yBAA2D,GAAIC,SAA/DD,qBAA2D,CAAIC,KAAiC,EAAK;EAAA;EACzG,IACEC,QAAQ,GAKND,KAAK,CALPC,QAAQ;IACRC,eAAe,GAIbF,KAAK,CAJPE,eAAe;IACfC,qBAAqB,GAGnBH,KAAK,CAHPG,qBAAqB;IACrBC,kBAAkB,GAEhBJ,KAAK,CAFPI,kBAAkB;IAClBC,gBACEL,KAAK,CADPK;EAGF,IAAMC,KAAK,GAAGC,uBAAuB,EAAE;EACvC,IAAMC,cAAc,GAAGF,KAAK,KAALA,aAAK,wCAALA,KAAK,CAAEG,MAAM,gCAAbC,gCAAeL,aAAa;EACnD,IAAMM,aACoB,GAAGC,qBAAqB,CAACN,KAAK,CAAC;EAEzD,gBAAwBO,QAAQ,CAAC,CAAC,CAAC;IAAA;IAA5BC,IAAI;IAAEC,OAAO;EACpB,iBAAwBF,QAAQ,CAACnB,YAAY,CAACsB,KAAK,CAAC;IAAA;IAA7CC,IAAI;IAAEC,OAAO;EAEpB,oBACEtB,6BAACD,oBAAoB,CAACwB,QAAQ;IAACC,KAAK,EAAE;MACpCjB,qBAAqB,EAArBA,qBAAqB;MACrBQ,aAAa,EAAbA,aAAa;MACbT,eAAe,EAAfA,eAAe;MACfE,kBAAkB,EAAlBA,kBAAkB;MAClBC,aAAa,EAAEA,aAAa,IAAIG,cAAc;MAC9CM,IAAI,EAAJA,IAAI;MACJC,OAAO,EAAPA,OAAO;MACPE,IAAI,EAAJA,IAAI;MACJC;IACF;EAAE,GACCjB,QAAQ,CACqB;AAEpC;AAEMoB,2BAAuB,GAAGA,SAA1BA,uBAAuB;EAAA,OAC3BzB,cAAK,CAAC0B,UAAU,CAAC3B,oBAAoB;AAAA","names":["CHANNEL_TYPE","CreateChannelContext","React","createContext","undefined","CreateChannelProvider","props","children","onCreateChannel","onBeforeCreateChannel","overrideInviteUser","userListQuery","store","useSendbirdStateContext","userListQuery_","config","_store$config","createChannel","getCreateGroupChannel","useState","step","setStep","GROUP","type","setType","Provider","value","useCreateChannelContext","useContext"],"sources":["C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\CreateChannel\\types.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\CreateChannel\\context\\CreateChannelProvider.tsx"],"sourcesContent":["export enum CHANNEL_TYPE {\n  GROUP = 'group',\n  SUPERGROUP = 'supergroup',\n  BROADCAST = 'broadcast',\n}\n","import React, { useState } from 'react';\nimport { User } from '@sendbird/chat';\nimport type {\n  GroupChannel,\n  GroupChannelCreateParams,\n  SendbirdGroupChat,\n} from '@sendbird/chat/groupChannel';\n\nimport { getCreateGroupChannel } from '../../../lib/selectors';\nimport useSendbirdStateContext from '../../../hooks/useSendbirdStateContext';\nimport { CHANNEL_TYPE } from '../types';\n\nconst CreateChannelContext = React.createContext(undefined);\n\nexport interface UserListQuery {\n  hasNext?: boolean;\n  next(): Promise<Array<User>>;\n}\n\ntype OverrideInviteUserType = {\n  users: Array<string>;\n  onClose: () => void;\n  channelType: CHANNEL_TYPE;\n};\n\nexport interface CreateChannelProviderProps {\n  children?: React.ReactElement;\n  onCreateChannel(channel: GroupChannel): void;\n  overrideInviteUser?(params: OverrideInviteUserType): void;\n  onBeforeCreateChannel?(users: Array<string>): GroupChannelCreateParams;\n  userListQuery?(): UserListQuery;\n}\n\ntype CreateChannel = (channelParams: GroupChannelCreateParams) => Promise<GroupChannel>;\n\nexport interface CreateChannelContextInterface {\n  onBeforeCreateChannel?(users: Array<string>): GroupChannelCreateParams;\n  createChannel: CreateChannel;\n  sdk: SendbirdGroupChat;\n  userListQuery?(): UserListQuery;\n  overrideInviteUser?(params: OverrideInviteUserType): void;\n  onCreateChannel?(channel: GroupChannel): void;\n  step: number,\n  setStep: React.Dispatch<React.SetStateAction<number>>,\n  type: CHANNEL_TYPE,\n  setType: React.Dispatch<React.SetStateAction<CHANNEL_TYPE>>,\n}\n\nconst CreateChannelProvider: React.FC<CreateChannelProviderProps> = (props: CreateChannelProviderProps) => {\n  const {\n    children,\n    onCreateChannel,\n    onBeforeCreateChannel,\n    overrideInviteUser,\n    userListQuery,\n  } = props;\n\n  const store = useSendbirdStateContext();\n  const userListQuery_ = store?.config?.userListQuery;\n  const createChannel: (channelParams: GroupChannelCreateParams)\n    => Promise<GroupChannel> = getCreateGroupChannel(store);\n\n  const [step, setStep] = useState(0);\n  const [type, setType] = useState(CHANNEL_TYPE.GROUP);\n\n  return (\n    <CreateChannelContext.Provider value={{\n      onBeforeCreateChannel,\n      createChannel,\n      onCreateChannel,\n      overrideInviteUser,\n      userListQuery: userListQuery || userListQuery_,\n      step,\n      setStep,\n      type,\n      setType,\n    }}>\n      {children}\n    </CreateChannelContext.Provider>\n  );\n};\n\nconst useCreateChannelContext = (): CreateChannelContextInterface => (\n  React.useContext(CreateChannelContext)\n);\n\nexport {\n  CreateChannelProvider,\n  useCreateChannelContext,\n};\n"]},"metadata":{},"sourceType":"module"}