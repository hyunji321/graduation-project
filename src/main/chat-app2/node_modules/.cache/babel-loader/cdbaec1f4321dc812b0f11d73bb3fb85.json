{"ast":null,"code":"import { _ as _objectSpread2 } from '../_rollupPluginBabelHelpers-6bb0305c.js';\nimport React__default, { useCallback, useContext, useRef, useState, useMemo, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { N as NodeTypes, M as MessageInputKeys, a as NodeNames } from '../const-221c6a89.js';\nimport { U as USER_MENTION_TEMP_CHAR } from '../const-b3f02313.js';\nimport IconButton from './IconButton.js';\nimport Button, { ButtonTypes, ButtonSizes } from './Button.js';\nimport DOMPurify from 'dompurify';\nimport { M as MENTION_USER_LABEL_CLASSNAME } from '../consts-ff014656.js';\nimport Icon, { IconTypes, IconColors } from './Icon.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../index-63949de5.js';\nimport { a as LocalizationContext } from '../LocalizationContext-076d6d2e.js';\nimport { j as arrayEqual, h as getClassName } from '../index-7eb65acf.js';\nimport { T as TEXT_MESSAGE_BODY_CLASSNAME } from '../consts-c41580ae.js';\nimport { O as OG_MESSAGE_BODY_CLASSNAME } from '../consts-81544e52.js';\nimport { t as tokenizeMessage, T as TOKEN_TYPES, U as USER_MENTION_PREFIX } from '../tokenize-c40f2b57.js';\nimport '../stringSet-13bbd4a2.js';\nimport '../index-99aabd9e.js';\nimport '../utils/message/getOutgoingMessageState.js';\n\n// cretes a sanitized string from a mention user label\nfunction renderToString(_ref) {\n  let {\n    userId,\n    nickname\n  } = _ref;\n  // donot change this template, it wont work\n  const el = `<span data-userid=\"${userId}\" data-sb-mention=\"true\" class=\"${MENTION_USER_LABEL_CLASSNAME}\">${nickname}</span>`;\n  const purifier = DOMPurify(window);\n  const sanitized_ = purifier.sanitize(el);\n  const token = sanitized_.split(' ');\n  const [spanTag, ...rest] = token;\n  // we do this because DOMPurify removes the contenteditable attribute\n  const sanitized = [spanTag, 'contenteditable=\"false\"', ...rest].join(' ');\n  return sanitized;\n}\n\n// https://davidwalsh.name/javascript-debounce-function\n\n// Sanitize that special characters of HTML tags cause XSS issue\nconst sanitizeString = str => str === null || str === void 0 ? void 0 : str.replace(/[\\u00A0-\\u9999<>]/gim, i => ''.concat('&#', i.charCodeAt(0), ';'));\n\n/**\n * NodeList cannot be used with Array methods\n * @param {childNodes} NodeList\n * @returns Array of child nodes\n */\nconst nodeListToArray = childNodes => {\n  try {\n    return Array.from(childNodes);\n  } catch (error) {\n    return [];\n  }\n};\nfunction inserTemplateToDOM(templateList) {\n  const nodes = templateList.map(template => {\n    const {\n      text,\n      userId\n    } = template;\n    if (userId) {\n      return renderToString({\n        userId,\n        nickname: text\n      });\n    }\n    return sanitizeString(text);\n  }).join(' ')\n  // add a space at the end of the mention, else cursor/caret wont work\n  .concat(' ');\n  document.execCommand('insertHTML', false, nodes);\n}\nconst PASTE_NODE = 'sendbird-uikit__paste-node';\nconst TEXT_MESSAGE_CLASS = 'sendbird-word';\nconst MENTION_CLASS = 'sendbird-word__mention';\nconst MENTION_CLASS_IN_INPUT = 'sendbird-mention-user-label';\nconst MENTION_CLASS_COMBINED_QUERY = `.${MENTION_CLASS}, .${MENTION_CLASS_IN_INPUT}`;\nfunction querySelectorIncludingSelf(master, selector) {\n  const result = [master, ...Array.from(master.querySelectorAll(selector))].find(el => el.matches(selector));\n  return result;\n}\n\n// Pasted dom node can be OG_MESSAGE or partial message or full message\n// full messsage would have TEXT_MESSAGE_BODY_CLASSNAME and have childNodes\n// partial message would not have TEXT_MESSAGE_BODY_CLASSNAME\nfunction getLeafNodes(master) {\n  // og message\n  const ogMessage = querySelectorIncludingSelf(master, `.${OG_MESSAGE_BODY_CLASSNAME}`);\n  if (ogMessage) {\n    return nodeListToArray(ogMessage.childNodes);\n  }\n  const textMessageBody = querySelectorIncludingSelf(master, `.${TEXT_MESSAGE_BODY_CLASSNAME}`);\n  if (textMessageBody) {\n    return nodeListToArray(textMessageBody.childNodes);\n  }\n  return nodeListToArray(master.childNodes);\n}\nfunction createPasteNode() {\n  const pasteNode = document.body.querySelector(`#${PASTE_NODE}`);\n  // remove existing paste node\n  if (pasteNode) {\n    pasteNode === null || pasteNode === void 0 ? void 0 : pasteNode.remove();\n  }\n\n  // create new paste node and return\n  const node = document.createElement('div');\n  node.id = PASTE_NODE;\n  node.style.display = 'none';\n  return node;\n}\nfunction hasMention(parent) {\n  return parent !== null && parent !== void 0 && parent.querySelector(MENTION_CLASS_COMBINED_QUERY) ? true : false;\n}\nconst extractTextFromNodes = nodes => {\n  let text = '';\n  nodes.forEach(node => {\n    // to preserve space between words\n    const textNodes = node.querySelectorAll(`.${TEXT_MESSAGE_CLASS}`);\n    if (textNodes.length > 0) {\n      text += extractTextFromNodes(Array.from(textNodes)) + ' ';\n    }\n    text += node.innerText + ' ';\n  });\n  return text;\n};\nfunction domToMessageTemplate(nodeArray) {\n  const templates = nodeArray === null || nodeArray === void 0 ? void 0 : nodeArray.reduce((accumulator, currentValue) => {\n    // currentValue can be node(from messageBody or messageInput) or text\n    let mentionNode;\n    // this looks awkward, but it is a fallback to set default text\n    let text = currentValue === null || currentValue === void 0 ? void 0 : currentValue.innerText;\n\n    // if text node, set text\n    if (currentValue instanceof Text) {\n      mentionNode = false;\n      text = currentValue.textContent;\n    }\n    if (currentValue instanceof HTMLElement) {\n      mentionNode = currentValue.classList.contains(MENTION_CLASS) || currentValue.classList.contains(MENTION_CLASS_IN_INPUT) ? currentValue : currentValue.querySelector(MENTION_CLASS_COMBINED_QUERY);\n    }\n\n    // if mentionNode is not null, it is a mention\n    if (mentionNode) {\n      var _mentionNode$dataset;\n      const text = currentValue === null || currentValue === void 0 ? void 0 : currentValue.innerText;\n      const userId = (_mentionNode$dataset = mentionNode.dataset) === null || _mentionNode$dataset === void 0 ? void 0 : _mentionNode$dataset.userid;\n      return [...accumulator, {\n        text,\n        userId\n      }];\n    }\n    return [...accumulator, {\n      text\n    }];\n  }, []);\n  return templates;\n}\nfunction getUsersFromWords(templates, channel) {\n  const userMap = {};\n  const users = channel.members;\n  templates.forEach(template => {\n    if (template.userId) {\n      const mentionedMember = users.find(user => user.userId === template.userId);\n      // Object.values would return array-> [undefined] if the user is not in the channel\n      if (mentionedMember) {\n        userMap[template.userId] = mentionedMember;\n      }\n    }\n  });\n  return Object.values(userMap);\n}\n\n// conditions to test:\n// 1. paste simple text\n// 2. paste text with mention\n// 3. paste text with mention and text\n// 4. paste text with mention and text and paste again before and after\n// 5. copy message with mention(only one mention, no other text) and paste\n// 6. copy message with mention from input and paste(before and after)\nfunction usePaste(_ref) {\n  let {\n    ref,\n    setIsInput,\n    setHeight,\n    channel,\n    setMentionedUsers\n  } = _ref;\n  return useCallback(e => {\n    e.preventDefault();\n    const html = e === null || e === void 0 ? void 0 : e.clipboardData.getData('text/html');\n    // simple text, continue as normal\n    if (!html) {\n      const text = e === null || e === void 0 ? void 0 : e.clipboardData.getData('text');\n      document.execCommand('insertHTML', false, sanitizeString(text));\n      setIsInput(true);\n      setHeight();\n      return;\n    }\n\n    // has html, check if there are mentions, sanitize and insert\n    const purifier = DOMPurify(window);\n    const clean = purifier.sanitize(html);\n    const pasteNode = createPasteNode();\n    pasteNode.innerHTML = clean;\n    // does not have mention, continue as normal\n    if (!hasMention(pasteNode)) {\n      // to preserve space between words\n      const text = extractTextFromNodes(Array.from(pasteNode.children));\n      document.execCommand('insertHTML', false, sanitizeString(text));\n      pasteNode.remove();\n      setIsInput(true);\n      setHeight();\n      return;\n    }\n\n    // has mention, collect leaf nodes and parse words\n    const leafNodes = getLeafNodes(pasteNode);\n    const words = domToMessageTemplate(leafNodes);\n    const mentionedUsers = getUsersFromWords(words, channel);\n\n    // side effects\n    setMentionedUsers(mentionedUsers);\n    inserTemplateToDOM(words);\n    pasteNode.remove();\n    setIsInput(true);\n    setHeight();\n  }, [ref, setIsInput, setHeight, channel, setMentionedUsers]);\n}\nconst TEXT_FIELD_ID = 'sendbird-message-input-text-field';\nconst LINE_HEIGHT = 76;\nconst noop = () => {};\nconst handleUploadFile = callback => event => {\n  if (event.target.files && event.target.files[0]) {\n    callback(event.target.files[0]);\n  }\n  // eslint-disable-next-line no-param-reassign\n  event.target.value = '';\n};\nconst displayCaret = (element, position) => {\n  const range = document.createRange();\n  const sel = window.getSelection();\n  range.setStart(element.childNodes[0], position);\n  range.collapse(true);\n  sel.removeAllRanges();\n  sel.addRange(range);\n  element.focus();\n};\nconst resetInput = ref => {\n  try {\n    /* eslint-disable no-param-reassign */\n    ref.current.innerHTML = '';\n  } catch (_unused) {\n    //\n  }\n};\nconst initialTargetStringInfo = {\n  targetString: '',\n  startNodeIndex: null,\n  startOffsetIndex: null,\n  endNodeIndex: null,\n  endOffsetIndex: null\n};\nconst MessageInput = /*#__PURE__*/React__default.forwardRef((props, ref) => {\n  var _ref$current, _ref$current$textCont, _textField$innerText;\n  const {\n    className,\n    messageFieldId,\n    isEdit,\n    isMentionEnabled,\n    isVoiceMessageEnabled,\n    disabled,\n    message,\n    placeholder,\n    maxLength,\n    onFileUpload,\n    onSendMessage,\n    onUpdateMessage,\n    onCancelEdit,\n    onStartTyping,\n    channelUrl,\n    channel,\n    mentionSelectedUser,\n    onUserMentioned,\n    onMentionStringChange,\n    onMentionedUserIdsUpdated,\n    onVoiceMessageIconClick,\n    onKeyUp,\n    onKeyDown,\n    renderFileUploadIcon,\n    renderVoiceMessageIcon,\n    renderSendMessageIcon,\n    setMentionedUsers\n  } = props;\n  const textFieldId = messageFieldId || TEXT_FIELD_ID;\n  const {\n    stringSet\n  } = useContext(LocalizationContext);\n  const fileInputRef = useRef(null);\n  const [isInput, setIsInput] = useState(false);\n  const [mentionedUserIds, setMentionedUserIds] = useState([]);\n  const [targetStringInfo, setTargetStringInfo] = useState(_objectSpread2({}, initialTargetStringInfo));\n  const setHeight = useMemo(() => () => {\n    try {\n      const elem = ref === null || ref === void 0 ? void 0 : ref.current;\n      const MAX_HEIGHT = window.document.body.offsetHeight * 0.6;\n      if (elem && elem.scrollHeight >= LINE_HEIGHT) {\n        if (MAX_HEIGHT < elem.scrollHeight) {\n          elem.style.height = 'auto';\n          elem.style.height = `${MAX_HEIGHT}px`;\n        } else {\n          elem.style.height = 'auto';\n          elem.style.height = `${elem.scrollHeight}px`;\n        }\n      } else {\n        elem.style.height = '';\n      }\n    } catch (error) {\n      // error\n    }\n  }, []);\n\n  // #Edit mode\n  // for easilly initialize input value from outside, but\n  // useEffect(_, [channelUrl]) erase it\n  const initialValue = props === null || props === void 0 ? void 0 : props.value;\n  useEffect(() => {\n    var _textField$textConten;\n    const textField = ref === null || ref === void 0 ? void 0 : ref.current;\n    try {\n      textField.innerHTML = initialValue;\n      displayCaret(textField, initialValue === null || initialValue === void 0 ? void 0 : initialValue.length);\n    } catch (_unused2) {\n      //\n    }\n    setMentionedUserIds([]);\n    setIsInput((textField === null || textField === void 0 ? void 0 : (_textField$textConten = textField.textContent) === null || _textField$textConten === void 0 ? void 0 : _textField$textConten.trim().length) > 0);\n    setHeight();\n  }, [initialValue]);\n\n  // #Mention | Clear input value when channel changes\n  useEffect(() => {\n    if (!isEdit) {\n      setIsInput(false);\n      resetInput(ref);\n    }\n  }, [channelUrl]);\n\n  // #Mention & #Edit | Fill message input values\n  useEffect(() => {\n    if (isEdit && message !== null && message !== void 0 && message.messageId) {\n      var _message$mentionedUse, _message$mentionedMes, _textField$textConten2;\n      // const textField = document.getElementById(textFieldId);\n      const textField = ref === null || ref === void 0 ? void 0 : ref.current;\n      if (isMentionEnabled && (message === null || message === void 0 ? void 0 : (_message$mentionedUse = message.mentionedUsers) === null || _message$mentionedUse === void 0 ? void 0 : _message$mentionedUse.length) > 0 && (message === null || message === void 0 ? void 0 : (_message$mentionedMes = message.mentionedMessageTemplate) === null || _message$mentionedMes === void 0 ? void 0 : _message$mentionedMes.length) > 0) {\n        /* mention enabled */\n        const {\n          mentionedUsers = []\n        } = message;\n        const tokens = tokenizeMessage({\n          messageText: message === null || message === void 0 ? void 0 : message.mentionedMessageTemplate,\n          mentionedUsers\n        });\n        textField.innerHTML = tokens.map(token => {\n          if (token.type === TOKEN_TYPES.mention) {\n            const mentionedUser = mentionedUsers.find(user => user.userId === token.userId);\n            const nickname = `${USER_MENTION_PREFIX}${(mentionedUser === null || mentionedUser === void 0 ? void 0 : mentionedUser.nickname) || token.value || stringSet.MENTION_NAME__NO_NAME}`;\n            return renderToString({\n              userId: token.userId,\n              nickname\n            });\n          }\n          return sanitizeString(token.value);\n        }).join(' ');\n      } else {\n        /* mention disabled */\n        try {\n          textField.innerHTML = sanitizeString(message === null || message === void 0 ? void 0 : message.message);\n        } catch (_unused3) {\n          //\n        }\n        setMentionedUserIds([]);\n      }\n      setIsInput((textField === null || textField === void 0 ? void 0 : (_textField$textConten2 = textField.textContent) === null || _textField$textConten2 === void 0 ? void 0 : _textField$textConten2.trim().length) > 0);\n      setHeight();\n    }\n  }, [isEdit, message]);\n\n  // #Mention | Detect MentionedLabel modified\n  const useMentionedLabelDetection = useCallback(() => {\n    var _textField$textConten3;\n    const textField = ref === null || ref === void 0 ? void 0 : ref.current;\n    if (isMentionEnabled) {\n      const newMentionedUserIds = [...textField.getElementsByClassName('sendbird-mention-user-label')].map(node => {\n        var _node$dataset;\n        return node === null || node === void 0 ? void 0 : (_node$dataset = node.dataset) === null || _node$dataset === void 0 ? void 0 : _node$dataset.userid;\n      });\n      if (!arrayEqual(mentionedUserIds, newMentionedUserIds) || newMentionedUserIds.length === 0) {\n        onMentionedUserIdsUpdated(newMentionedUserIds);\n        setMentionedUserIds(newMentionedUserIds);\n      }\n    }\n    setIsInput(((_textField$textConten3 = textField.textContent) === null || _textField$textConten3 === void 0 ? void 0 : _textField$textConten3.trim().length) > 0);\n  }, [targetStringInfo, isMentionEnabled]);\n\n  // #Mention | Replace selected user nickname to the MentionedUserLabel\n  useEffect(() => {\n    if (isMentionEnabled && mentionSelectedUser) {\n      const {\n        targetString,\n        startNodeIndex,\n        startOffsetIndex,\n        endNodeIndex,\n        endOffsetIndex\n      } = targetStringInfo;\n      if (targetString && startNodeIndex !== null && startOffsetIndex !== null) {\n        var _document, _childNodes$startNode, _document2, _childNodes$endNodeIn;\n        // const textField = document.getElementById(textFieldId);\n        const textField = ref === null || ref === void 0 ? void 0 : ref.current;\n        const childNodes = nodeListToArray(textField === null || textField === void 0 ? void 0 : textField.childNodes);\n        const frontTextNode = (_document = document) === null || _document === void 0 ? void 0 : _document.createTextNode((_childNodes$startNode = childNodes[startNodeIndex]) === null || _childNodes$startNode === void 0 ? void 0 : _childNodes$startNode.textContent.slice(0, startOffsetIndex));\n        const backTextNode = (_document2 = document) === null || _document2 === void 0 ? void 0 : _document2.createTextNode(`\\u00A0${(_childNodes$endNodeIn = childNodes[endNodeIndex]) === null || _childNodes$endNodeIn === void 0 ? void 0 : _childNodes$endNodeIn.textContent.slice(endOffsetIndex)}`);\n        const mentionLabel = renderToString({\n          userId: mentionSelectedUser === null || mentionSelectedUser === void 0 ? void 0 : mentionSelectedUser.userId,\n          nickname: `${USER_MENTION_TEMP_CHAR}${(mentionSelectedUser === null || mentionSelectedUser === void 0 ? void 0 : mentionSelectedUser.nickname) || stringSet.MENTION_NAME__NO_NAME}`\n        });\n        const div = document.createElement('div');\n        div.innerHTML = mentionLabel;\n        const newNodes = [...childNodes.slice(0, startNodeIndex), frontTextNode, div.childNodes[0], backTextNode, ...childNodes.slice(endNodeIndex + 1)];\n        textField.innerHTML = '';\n        newNodes.forEach(newNode => {\n          textField.appendChild(newNode);\n        });\n        onUserMentioned(mentionSelectedUser);\n        if (window.getSelection || document.getSelection) {\n          // set caret postion\n          const selection = window.getSelection() || document.getSelection();\n          selection.removeAllRanges();\n          const range = new Range();\n          range.selectNodeContents(textField);\n          range.setStart(textField.childNodes[startNodeIndex + 2], 1);\n          range.setEnd(textField.childNodes[startNodeIndex + 2], 1);\n          range.collapse(false);\n          selection.addRange(range);\n          textField.focus();\n        }\n        setTargetStringInfo(_objectSpread2({}, initialTargetStringInfo));\n        setHeight();\n        useMentionedLabelDetection();\n      }\n    }\n  }, [mentionSelectedUser, isMentionEnabled]);\n\n  // #Mention | Detect mentioning user nickname\n  const useMentionInputDetection = useCallback(() => {\n    var _window, _window$getSelection, _document3, _document3$getSelecti;\n    const selection = ((_window = window) === null || _window === void 0 ? void 0 : (_window$getSelection = _window.getSelection) === null || _window$getSelection === void 0 ? void 0 : _window$getSelection.call(_window)) || ((_document3 = document) === null || _document3 === void 0 ? void 0 : (_document3$getSelecti = _document3.getSelection) === null || _document3$getSelecti === void 0 ? void 0 : _document3$getSelecti.call(_document3));\n    const textField = ref === null || ref === void 0 ? void 0 : ref.current;\n    if (selection.anchorNode === textField) {\n      onMentionStringChange('');\n    }\n    if (isMentionEnabled && selection && selection.anchorNode === selection.focusNode && selection.anchorOffset === selection.focusOffset) {\n      let textStack = '';\n      let startNodeIndex = null;\n      let startOffsetIndex = null;\n      for (let index = 0; index < textField.childNodes.length; index += 1) {\n        const currentNode = textField.childNodes[index];\n        if (currentNode.nodeType === NodeTypes.TextNode) {\n          /* text node */\n          const textContent = currentNode === selection.anchorNode ? (currentNode === null || currentNode === void 0 ? void 0 : currentNode.textContent.slice(0, selection.anchorOffset)) || '' : (currentNode === null || currentNode === void 0 ? void 0 : currentNode.textContent) || '';\n          if (textStack.length > 0) {\n            textStack += textContent;\n          } else {\n            let charLastIndex = textContent.lastIndexOf(USER_MENTION_TEMP_CHAR);\n            for (let i = charLastIndex - 1; i > -1; i -= 1) {\n              if (textContent[i] === USER_MENTION_TEMP_CHAR) {\n                charLastIndex = i;\n              } else {\n                break;\n              }\n            }\n            if (charLastIndex > -1) {\n              textStack = textContent;\n              startNodeIndex = index;\n              startOffsetIndex = charLastIndex;\n            }\n          }\n        } else {\n          /* other nodes */\n          textStack = '';\n          startNodeIndex = null;\n          startOffsetIndex = null;\n        }\n        if (currentNode === selection.anchorNode) {\n          /**\n           * targetString could be ''\n           * startNodeIndex and startOffsetIndex could be null\n           */\n          const targetString = textStack ? textStack.slice(startOffsetIndex) : ''; // include template character\n          setTargetStringInfo({\n            targetString,\n            startNodeIndex,\n            startOffsetIndex,\n            endNodeIndex: index,\n            endOffsetIndex: selection.anchorOffset\n          });\n          onMentionStringChange(targetString);\n          return;\n        }\n      }\n    }\n  }, [isMentionEnabled]);\n  const sendMessage = () => {\n    const textField = ref === null || ref === void 0 ? void 0 : ref.current;\n    if (!isEdit && textField !== null && textField !== void 0 && textField.textContent) {\n      let messageText = '';\n      let mentionTemplate = '';\n      textField.childNodes.forEach(node => {\n        if (node.nodeType === NodeTypes.ElementNode && node.nodeName === NodeNames.Span) {\n          const {\n            innerText,\n            dataset = {}\n          } = node;\n          const {\n            userid = ''\n          } = dataset;\n          messageText += innerText;\n          mentionTemplate += `${USER_MENTION_TEMP_CHAR}{${userid}}`;\n        } else if (node.nodeType === NodeTypes.ElementNode && node.nodeName === NodeNames.Br) {\n          messageText += '\\n';\n          mentionTemplate += '\\n';\n        } else if ((node === null || node === void 0 ? void 0 : node.nodeType) === NodeTypes.ElementNode && (node === null || node === void 0 ? void 0 : node.nodeName) === NodeNames.Div) {\n          // handles newline in safari\n          const {\n            textContent = ''\n          } = node;\n          messageText += `\\n${textContent}`;\n          mentionTemplate += `\\n${textContent}`;\n        } else {\n          // other nodes including text node\n          const {\n            textContent = ''\n          } = node;\n          messageText += textContent;\n          mentionTemplate += textContent;\n        }\n      });\n      const params = {\n        message: messageText,\n        mentionTemplate\n      };\n      onSendMessage(params);\n      resetInput(ref);\n      setIsInput(false);\n      setHeight();\n    }\n  };\n  const isEditDisabled = !(ref !== null && ref !== void 0 && (_ref$current = ref.current) !== null && _ref$current !== void 0 && (_ref$current$textCont = _ref$current.textContent) !== null && _ref$current$textCont !== void 0 && _ref$current$textCont.trim());\n  const editMessage = () => {\n    const textField = ref === null || ref === void 0 ? void 0 : ref.current;\n    const messageId = message === null || message === void 0 ? void 0 : message.messageId;\n    if (isEdit && messageId) {\n      let messageText = '';\n      let mentionTemplate = '';\n      textField.childNodes.forEach(node => {\n        if (node.nodeType === NodeTypes.ElementNode && node.nodeName === NodeNames.Span) {\n          const {\n            innerText,\n            dataset = {}\n          } = node;\n          const {\n            userid = ''\n          } = dataset;\n          messageText += innerText;\n          mentionTemplate += `${USER_MENTION_TEMP_CHAR}{${userid}}`;\n          messageText += '\\n';\n          mentionTemplate += '\\n';\n        } else {\n          // other nodes including text node\n          const {\n            textContent = ''\n          } = node;\n          messageText += textContent;\n          mentionTemplate += textContent;\n        }\n      });\n      const params = {\n        messageId,\n        message: messageText,\n        mentionTemplate\n      };\n      onUpdateMessage(params);\n      resetInput(ref);\n    }\n  };\n  const onPaste = usePaste({\n    ref,\n    setMentionedUserIds,\n    setMentionedUsers,\n    channel,\n    setIsInput,\n    setHeight\n  });\n  const textField = ref === null || ref === void 0 ? void 0 : ref.current;\n  return /*#__PURE__*/React__default.createElement(\"form\", {\n    className: getClassName([className, isEdit ? 'sendbird-message-input__edit' : '', disabled ? 'sendbird-message-input-form__disabled' : ''])\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName(['sendbird-message-input', disabled ? 'sendbird-message-input__disabled' : ''])\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    id: `${textFieldId}${isEdit ? message === null || message === void 0 ? void 0 : message.messageId : ''}`,\n    className: `sendbird-message-input--textarea ${textFieldId}`,\n    contentEditable: !disabled,\n    role: \"textbox\",\n    \"aria-label\": \"Text Input\",\n    disabled: disabled,\n    ref: ref,\n    maxLength: maxLength,\n    onKeyDown: e => {\n      const preventEvent = onKeyDown(e);\n      if (preventEvent) {\n        e.preventDefault();\n      } else {\n        var _textField$textConten4, _e$nativeEvent, _ref$current2, _ref$current2$childNo, _ref$current3, _ref$current3$childNo, _ref$current3$childNo2, _ref$current$childNod, _ref$current$childNod2;\n        if (!e.shiftKey && e.key === MessageInputKeys.Enter && (textField === null || textField === void 0 ? void 0 : (_textField$textConten4 = textField.textContent) === null || _textField$textConten4 === void 0 ? void 0 : _textField$textConten4.trim().length) > 0 && (e === null || e === void 0 ? void 0 : (_e$nativeEvent = e.nativeEvent) === null || _e$nativeEvent === void 0 ? void 0 : _e$nativeEvent.isComposing) !== true) {\n          e.preventDefault();\n          sendMessage();\n        }\n        if (e.key === MessageInputKeys.Backspace && (ref === null || ref === void 0 ? void 0 : (_ref$current2 = ref.current) === null || _ref$current2 === void 0 ? void 0 : (_ref$current2$childNo = _ref$current2.childNodes) === null || _ref$current2$childNo === void 0 ? void 0 : _ref$current2$childNo.length) === 2 && !(ref !== null && ref !== void 0 && (_ref$current3 = ref.current) !== null && _ref$current3 !== void 0 && (_ref$current3$childNo = _ref$current3.childNodes) !== null && _ref$current3$childNo !== void 0 && (_ref$current3$childNo2 = _ref$current3$childNo[0]) !== null && _ref$current3$childNo2 !== void 0 && _ref$current3$childNo2.textContent) && (ref === null || ref === void 0 ? void 0 : (_ref$current$childNod = ref.current.childNodes) === null || _ref$current$childNod === void 0 ? void 0 : (_ref$current$childNod2 = _ref$current$childNod[1]) === null || _ref$current$childNod2 === void 0 ? void 0 : _ref$current$childNod2.nodeType) === NodeTypes.ElementNode) {\n          ref === null || ref === void 0 ? void 0 : ref.current.removeChild(ref === null || ref === void 0 ? void 0 : ref.current.childNodes[1]);\n        }\n      }\n    },\n    onKeyUp: e => {\n      const preventEvent = onKeyUp(e);\n      if (preventEvent) {\n        e.preventDefault();\n      } else {\n        useMentionInputDetection();\n      }\n    },\n    onClick: () => {\n      useMentionInputDetection();\n    },\n    onInput: () => {\n      var _textField$textConten5;\n      setHeight();\n      onStartTyping();\n      setIsInput((textField === null || textField === void 0 ? void 0 : (_textField$textConten5 = textField.textContent) === null || _textField$textConten5 === void 0 ? void 0 : _textField$textConten5.trim().length) > 0);\n      useMentionedLabelDetection();\n    },\n    onPaste: onPaste\n  }), (textField === null || textField === void 0 ? void 0 : (_textField$innerText = textField.innerText) === null || _textField$innerText === void 0 ? void 0 : _textField$innerText.length) === 0 && /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-message-input--placeholder\",\n    type: LabelTypography.BODY_1,\n    color: disabled ? LabelColors.ONBACKGROUND_4 : LabelColors.ONBACKGROUND_3\n  }, placeholder || stringSet.MESSAGE_INPUT__PLACE_HOLDER), !isEdit && isInput && /*#__PURE__*/React__default.createElement(IconButton, {\n    className: \"sendbird-message-input--send\",\n    height: \"32px\",\n    width: \"32px\",\n    onClick: () => sendMessage()\n  }, (renderSendMessageIcon === null || renderSendMessageIcon === void 0 ? void 0 : renderSendMessageIcon()) || /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.SEND,\n    fillColor: disabled ? IconColors.ON_BACKGROUND_4 : IconColors.PRIMARY,\n    width: \"20px\",\n    height: \"20px\"\n  })), !isEdit && !isInput && ((renderFileUploadIcon === null || renderFileUploadIcon === void 0 ? void 0 : renderFileUploadIcon()) || /*#__PURE__*/React__default.createElement(IconButton, {\n    className: `sendbird-message-input--attach ${isVoiceMessageEnabled ? 'is-voice-message-enabled' : ''}`,\n    height: \"32px\",\n    width: \"32px\",\n    onClick: () => {\n      var _fileInputRef$current, _fileInputRef$current2;\n      // todo: clear previous input\n      fileInputRef === null || fileInputRef === void 0 ? void 0 : (_fileInputRef$current = fileInputRef.current) === null || _fileInputRef$current === void 0 ? void 0 : (_fileInputRef$current2 = _fileInputRef$current.click) === null || _fileInputRef$current2 === void 0 ? void 0 : _fileInputRef$current2.call(_fileInputRef$current);\n    }\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.ATTACH,\n    fillColor: disabled ? IconColors.ON_BACKGROUND_4 : IconColors.CONTENT_INVERSE,\n    width: \"20px\",\n    height: \"20px\"\n  }), /*#__PURE__*/React__default.createElement(\"input\", {\n    className: \"sendbird-message-input--attach-input\",\n    type: \"file\",\n    ref: fileInputRef,\n    onChange: handleUploadFile(onFileUpload)\n  }))), isVoiceMessageEnabled && !isEdit && !isInput && /*#__PURE__*/React__default.createElement(IconButton, {\n    className: \"sendbird-message-input--voice-message\",\n    width: \"32px\",\n    height: \"32px\",\n    onClick: onVoiceMessageIconClick\n  }, (renderVoiceMessageIcon === null || renderVoiceMessageIcon === void 0 ? void 0 : renderVoiceMessageIcon()) || /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.AUDIO_ON_LINED,\n    fillColor: disabled ? IconColors.ON_BACKGROUND_4 : IconColors.CONTENT_INVERSE,\n    width: \"20px\",\n    height: \"20px\"\n  }))), isEdit && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message-input--edit-action\"\n  }, /*#__PURE__*/React__default.createElement(Button, {\n    className: \"sendbird-message-input--edit-action__cancel\",\n    type: ButtonTypes.SECONDARY,\n    size: ButtonSizes.SMALL,\n    onClick: onCancelEdit\n  }, stringSet.BUTTON__CANCEL), /*#__PURE__*/React__default.createElement(Button, {\n    className: \"sendbird-message-input--edit-action__save\",\n    type: ButtonTypes.PRIMARY,\n    size: ButtonSizes.SMALL,\n    disabled: isEditDisabled,\n    onClick: () => editMessage()\n  }, stringSet.BUTTON__SAVE)));\n});\nMessageInput.propTypes = {\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  messageFieldId: PropTypes.string,\n  placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  value: PropTypes.string,\n  isEdit: PropTypes.bool,\n  isMentionEnabled: PropTypes.bool,\n  isVoiceMessageEnabled: PropTypes.bool,\n  onVoiceMessageIconClick: PropTypes.func,\n  message: PropTypes.shape({\n    messageId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    message: PropTypes.string,\n    mentionedMessageTemplate: PropTypes.string,\n    mentionedUsers: PropTypes.arrayOf(PropTypes.shape({}))\n  }),\n  disabled: PropTypes.bool,\n  maxLength: PropTypes.number,\n  onFileUpload: PropTypes.func,\n  onSendMessage: PropTypes.func,\n  onUpdateMessage: PropTypes.func,\n  onStartTyping: PropTypes.func,\n  onCancelEdit: PropTypes.func,\n  channelUrl: PropTypes.string,\n  mentionSelectedUser: PropTypes.shape({\n    userId: PropTypes.string,\n    nickname: PropTypes.string\n  }),\n  setMentionedUsers: PropTypes.func,\n  onUserMentioned: PropTypes.func,\n  onMentionStringChange: PropTypes.func,\n  onMentionedUserIdsUpdated: PropTypes.func,\n  onKeyUp: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  renderVoiceMessageIcon: PropTypes.func,\n  renderSendMessageIcon: PropTypes.func,\n  renderFileUploadIcon: PropTypes.func,\n  channel: PropTypes.shape({})\n};\nMessageInput.defaultProps = {\n  className: '',\n  messageFieldId: '',\n  channelUrl: '',\n  onSendMessage: noop,\n  onUpdateMessage: noop,\n  value: null,\n  message: null,\n  isEdit: false,\n  isMentionEnabled: false,\n  isVoiceMessageEnabled: true,\n  onVoiceMessageIconClick: noop,\n  disabled: false,\n  placeholder: '',\n  maxLength: 5000,\n  onFileUpload: noop,\n  onCancelEdit: noop,\n  onStartTyping: noop,\n  mentionSelectedUser: null,\n  onUserMentioned: noop,\n  onMentionStringChange: noop,\n  onMentionedUserIdsUpdated: noop,\n  onKeyUp: noop,\n  onKeyDown: noop,\n  setMentionedUsers: noop,\n  renderVoiceMessageIcon: noop,\n  renderFileUploadIcon: noop,\n  renderSendMessageIcon: noop,\n  channel: {}\n};\nexport { MessageInput as default };","map":{"version":3,"mappings":"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","names":["renderToString","userId","nickname","el","MENTION_USER_LABEL_CLASSNAME","purifier","DOMPurify","window","sanitized_","sanitize","token","split","spanTag","rest","sanitized","join","sanitizeString","str","replace","i","concat","charCodeAt","nodeListToArray","childNodes","Array","from","error","inserTemplateToDOM","templateList","nodes","map","template","text","renderMentionLabelToString","document","execCommand","PASTE_NODE","TEXT_MESSAGE_CLASS","MENTION_CLASS","MENTION_CLASS_IN_INPUT","MENTION_CLASS_COMBINED_QUERY","querySelectorIncludingSelf","master","selector","result","querySelectorAll","find","matches","getLeafNodes","ogMessage","OG_MESSAGE_BODY_CLASSNAME","textMessageBody","TEXT_MESSAGE_BODY_CLASSNAME","createPasteNode","pasteNode","body","querySelector","remove","node","createElement","id","style","display","hasMention","parent","extractTextFromNodes","forEach","textNodes","length","innerText","domToMessageTemplate","nodeArray","templates","reduce","accumulator","currentValue","mentionNode","Text","textContent","HTMLElement","classList","contains","dataset","_mentionNode$dataset","userid","getUsersFromWords","channel","userMap","users","members","mentionedMember","user","Object","values","usePaste","ref","setIsInput","setHeight","setMentionedUsers","useCallback","e","preventDefault","html","clipboardData","getData","clean","innerHTML","children","leafNodes","words","mentionedUsers","TEXT_FIELD_ID","LINE_HEIGHT","noop","handleUploadFile","callback","event","target","files","value","displayCaret","element","position","range","createRange","sel","getSelection","setStart","collapse","removeAllRanges","addRange","focus","resetInput","current","initialTargetStringInfo","targetString","startNodeIndex","startOffsetIndex","endNodeIndex","endOffsetIndex","MessageInput","React","forwardRef","props","className","messageFieldId","isEdit","isMentionEnabled","isVoiceMessageEnabled","disabled","message","placeholder","maxLength","onFileUpload","onSendMessage","onUpdateMessage","onCancelEdit","onStartTyping","channelUrl","mentionSelectedUser","onUserMentioned","onMentionStringChange","onMentionedUserIdsUpdated","onVoiceMessageIconClick","onKeyUp","onKeyDown","renderFileUploadIcon","renderVoiceMessageIcon","renderSendMessageIcon","textFieldId","stringSet","useContext","LocalizationContext","fileInputRef","useRef","isInput","useState","mentionedUserIds","setMentionedUserIds","targetStringInfo","setTargetStringInfo","useMemo","elem","MAX_HEIGHT","offsetHeight","scrollHeight","height","initialValue","useEffect","textField","_textField$textConten","trim","messageId","_message$mentionedUse","mentionedMessageTemplate","_message$mentionedMes","tokens","tokenizeMessage","messageText","type","TOKEN_TYPES","mention","mentionedUser","USER_MENTION_PREFIX","MENTION_NAME__NO_NAME","_textField$textConten2","useMentionedLabelDetection","newMentionedUserIds","getElementsByClassName","_node$dataset","arrayEqual","_textField$textConten3","frontTextNode","_document","createTextNode","_childNodes$startNode","slice","backTextNode","_document2","_childNodes$endNodeIn","mentionLabel","USER_MENTION_TEMP_CHAR","div","newNodes","newNode","appendChild","selection","Range","selectNodeContents","setEnd","useMentionInputDetection","_window","_window$getSelection","_document3","_document3$getSelecti","anchorNode","focusNode","anchorOffset","focusOffset","textStack","index","currentNode","nodeType","NodeTypes","TextNode","charLastIndex","lastIndexOf","sendMessage","mentionTemplate","ElementNode","nodeName","NodeNames","Span","Br","Div","params","isEditDisabled","_ref$current","_ref$current$textCont","editMessage","onPaste","getClassName","contentEditable","role","preventEvent","shiftKey","key","MessageInputKeys","Enter","_textField$textConten4","nativeEvent","_e$nativeEvent","isComposing","Backspace","_ref$current2","_ref$current2$childNo","_ref$current3","_ref$current3$childNo","_ref$current3$childNo2","_ref$current$childNod","_ref$current$childNod2","removeChild","onClick","onInput","_textField$textConten5","_textField$innerText","Label","LabelTypography","BODY_1","color","LabelColors","ONBACKGROUND_4","ONBACKGROUND_3","MESSAGE_INPUT__PLACE_HOLDER","IconButton","width","Icon","IconTypes","SEND","fillColor","IconColors","ON_BACKGROUND_4","PRIMARY","_fileInputRef$current","click","_fileInputRef$current2","ATTACH","CONTENT_INVERSE","onChange","AUDIO_ON_LINED","Button","ButtonTypes","SECONDARY","size","ButtonSizes","SMALL","BUTTON__CANCEL","BUTTON__SAVE","propTypes","PropTypes","oneOfType","string","arrayOf","bool","func","shape","number","defaultProps"],"sources":["C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\ui\\MentionUserLabel\\renderToString.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\ui\\MessageInput\\utils.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\ui\\MessageInput\\hooks\\usePaste\\insertTemplate.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\ui\\MessageInput\\hooks\\usePaste\\consts.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\ui\\MessageInput\\hooks\\usePaste\\utils.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\ui\\MessageInput\\hooks\\usePaste\\index.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\ui\\MessageInput\\index.jsx"],"sourcesContent":["// cretes a sanitized string from a mention user label\nimport DOMPurify from 'dompurify';\nimport { MENTION_USER_LABEL_CLASSNAME } from './consts';\n\ntype renderToStringParams = {\n  userId: string;\n  nickname: string;\n};\n\nexport default function renderToString({ userId, nickname }: renderToStringParams): string {\n  // donot change this template, it wont work\n  const el = `<span data-userid=\"${userId}\" data-sb-mention=\"true\" class=\"${MENTION_USER_LABEL_CLASSNAME}\">${nickname}</span>`;\n  const purifier = DOMPurify(window);\n  const sanitized_ = purifier.sanitize(el);\n  const token = sanitized_.split(' ');\n  const [spanTag, ...rest] = token;\n  // we do this because DOMPurify removes the contenteditable attribute\n  const sanitized = [spanTag, 'contenteditable=\"false\"', ...rest].join(' ');\n  return sanitized;\n}\n","// https://davidwalsh.name/javascript-debounce-function\n// Returns a function, that, as long as it continues to be invoked, will not\n// be triggered. The function will be called after it stops being called for\n// N milliseconds. If `immediate` is passed, trigger the function on the\n// leading edge, instead of the trailing.\nexport function debounce(func, wait, immediate) {\n  let timeout;\n  return function _debounce() {\n    const context = this;\n    // eslint-disable-next-line prefer-rest-params\n    const args = arguments;\n    const later = () => {\n      timeout = null;\n      if (!immediate) func.apply(context, args);\n    };\n    const callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) func.apply(context, args);\n  };\n}\n\n// Sanitize that special characters of HTML tags cause XSS issue\nexport const sanitizeString = (str) => (\n  str?.replace(/[\\u00A0-\\u9999<>]/gim, (i) => ''.concat('&#', i.charCodeAt(0), ';'))\n);\n\n/**\n * NodeList cannot be used with Array methods\n * @param {childNodes} NodeList\n * @returns Array of child nodes\n */\nexport const nodeListToArray = (childNodes) => {\n  try {\n    return Array.from(childNodes);\n  } catch (error) {\n    return [];\n  }\n};\n\nexport default debounce;\n","import { Word } from './types';\nimport { sanitizeString } from '../../utils';\nimport renderMentionLabelToString from '../../../MentionUserLabel/renderToString';\n\nexport function inserTemplateToDOM(templateList: Word[]): void {\n  const nodes = templateList.map((template) => {\n    const { text, userId } = template;\n    if (userId) {\n      return renderMentionLabelToString({ userId, nickname: text });\n    }\n    return sanitizeString(text);\n  })\n    .join(' ')\n  // add a space at the end of the mention, else cursor/caret wont work\n    .concat(' ');\n  document.execCommand('insertHTML', false, nodes);\n}\n","export const PASTE_NODE = 'sendbird-uikit__paste-node';\nexport const TEXT_MESSAGE_CLASS = 'sendbird-word';\nexport const MENTION_CLASS = 'sendbird-word__mention';\nexport const MENTION_CLASS_IN_INPUT = 'sendbird-mention-user-label';\nexport const MENTION_CLASS_COMBINED_QUERY = `.${MENTION_CLASS}, .${MENTION_CLASS_IN_INPUT}`;\n","import { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { User } from '@sendbird/chat';\n\nimport {\n  PASTE_NODE,\n  MENTION_CLASS,\n  TEXT_MESSAGE_CLASS,\n  MENTION_CLASS_COMBINED_QUERY,\n  MENTION_CLASS_IN_INPUT,\n} from './consts';\nimport { Word } from './types';\nimport { TEXT_MESSAGE_BODY_CLASSNAME } from '../../../TextMessageItemBody/consts';\nimport { OG_MESSAGE_BODY_CLASSNAME } from '../../../OGMessageItemBody/consts';\nimport { nodeListToArray } from '../../utils';\n\nexport function querySelectorIncludingSelf(\n  master: HTMLElement,\n  selector: string,\n): HTMLElement | null {\n  const result = [\n    master,\n    ...Array.from(master.querySelectorAll(selector)),\n  ].find((el) => el.matches(selector)) as HTMLElement | null;\n  return result;\n}\n\n// Pasted dom node can be OG_MESSAGE or partial message or full message\n// full messsage would have TEXT_MESSAGE_BODY_CLASSNAME and have childNodes\n// partial message would not have TEXT_MESSAGE_BODY_CLASSNAME\nexport function getLeafNodes(master: HTMLElement): ChildNode[] {\n  // og message\n  const ogMessage = querySelectorIncludingSelf(master, `.${OG_MESSAGE_BODY_CLASSNAME}`);\n  if (ogMessage) {\n    return nodeListToArray(ogMessage.childNodes);\n  }\n\n  const textMessageBody = querySelectorIncludingSelf(master, `.${TEXT_MESSAGE_BODY_CLASSNAME}`);\n  if (textMessageBody) {\n    return nodeListToArray(textMessageBody.childNodes);\n  }\n\n  return nodeListToArray(master.childNodes);\n}\n\nexport function createPasteNode(): HTMLDivElement | null {\n  const pasteNode = document.body.querySelector(`#${PASTE_NODE}`);\n  // remove existing paste node\n  if (pasteNode) {\n    pasteNode?.remove();\n  }\n\n  // create new paste node and return\n  const node = document.createElement('div');\n  node.id = PASTE_NODE;\n  node.style.display = 'none';\n  return node;\n}\n\nexport function hasMention(parent: HTMLDivElement): boolean {\n  return parent?.querySelector(MENTION_CLASS_COMBINED_QUERY) ? true : false;\n}\n\nexport const extractTextFromNodes = (nodes: HTMLSpanElement[]): string => {\n  let text = '';\n  nodes.forEach((node) => {\n    // to preserve space between words\n    const textNodes = node.querySelectorAll(`.${TEXT_MESSAGE_CLASS}`);\n    if (textNodes.length > 0) {\n      text += ((extractTextFromNodes(Array.from(textNodes) as HTMLSpanElement[])) + ' ');\n    }\n    text += (node.innerText + ' ');\n  });\n  return text;\n};\n\nexport function domToMessageTemplate(nodeArray: ChildNode[]): Word[] {\n  const templates: Word[] = nodeArray?.reduce((accumulator, currentValue) => {\n    // currentValue can be node(from messageBody or messageInput) or text\n    let mentionNode;\n    // this looks awkward, but it is a fallback to set default text\n    let text = (currentValue as HTMLSpanElement)?.innerText;\n\n    // if text node, set text\n    if (currentValue instanceof Text) {\n      mentionNode = false;\n      text = currentValue.textContent;\n    }\n\n    if (currentValue instanceof HTMLElement) {\n      mentionNode = (currentValue.classList.contains(MENTION_CLASS) || currentValue.classList.contains(MENTION_CLASS_IN_INPUT))\n        ? currentValue\n        : currentValue.querySelector(MENTION_CLASS_COMBINED_QUERY);\n    }\n\n    // if mentionNode is not null, it is a mention\n    if (mentionNode) {\n      const text = (currentValue as HTMLSpanElement)?.innerText;\n      const userId = mentionNode.dataset?.userid;\n      return [\n        ...accumulator,\n        {\n          text,\n          userId,\n        },\n      ];\n    }\n\n    return [\n      ...accumulator,\n      {\n        text,\n      },\n    ];\n  }, [] as Word[]);\n  return templates;\n}\n\nexport function getUsersFromWords(templates: Word[], channel: GroupChannel): User[] {\n  const userMap = {};\n  const users = channel.members;\n  templates.forEach((template) => {\n    if (template.userId) {\n      const mentionedMember = users.find((user) => user.userId === template.userId);\n      // Object.values would return array-> [undefined] if the user is not in the channel\n      if (mentionedMember) {\n        userMap[template.userId] = mentionedMember;\n      }\n    }\n  });\n  return Object.values(userMap);\n}\n","import { useCallback } from 'react';\nimport DOMPurify from 'dompurify';\n\nimport { inserTemplateToDOM } from './insertTemplate';\nimport { sanitizeString } from '../../utils';\nimport { DynamicProps } from './types';\nimport {\n  createPasteNode,\n  hasMention,\n  domToMessageTemplate,\n  getUsersFromWords,\n  extractTextFromNodes,\n  getLeafNodes,\n} from './utils';\n\n// conditions to test:\n// 1. paste simple text\n// 2. paste text with mention\n// 3. paste text with mention and text\n// 4. paste text with mention and text and paste again before and after\n// 5. copy message with mention(only one mention, no other text) and paste\n// 6. copy message with mention from input and paste(before and after)\nexport default function usePaste({\n  ref,\n  setIsInput,\n  setHeight,\n  channel,\n  setMentionedUsers,\n}: DynamicProps): (e: React.ClipboardEvent<HTMLDivElement>) => void {\n  return useCallback((e) => {\n    e.preventDefault();\n    const html = e?.clipboardData.getData('text/html');\n    // simple text, continue as normal\n    if (!html) {\n      const text = e?.clipboardData.getData('text');\n      document.execCommand('insertHTML', false, sanitizeString(text));\n      setIsInput(true);\n      setHeight();\n      return;\n    }\n\n    // has html, check if there are mentions, sanitize and insert\n    const purifier = DOMPurify(window);\n    const clean = purifier.sanitize(html);\n    const pasteNode = createPasteNode();\n    pasteNode.innerHTML = clean;\n    // does not have mention, continue as normal\n    if (!hasMention(pasteNode)) {\n      // to preserve space between words\n      const text = extractTextFromNodes(Array.from(pasteNode.children) as HTMLSpanElement[]);\n      document.execCommand('insertHTML', false, sanitizeString(text));\n      pasteNode.remove();\n      setIsInput(true);\n      setHeight();\n      return;\n    }\n\n    // has mention, collect leaf nodes and parse words\n    const leafNodes = getLeafNodes(pasteNode);\n    const words = domToMessageTemplate(leafNodes);\n    const mentionedUsers = getUsersFromWords(words, channel);\n\n    // side effects\n    setMentionedUsers(mentionedUsers);\n    inserTemplateToDOM(words);\n    pasteNode.remove();\n    setIsInput(true);\n    setHeight();\n  }, [ref, setIsInput, setHeight, channel, setMentionedUsers]);\n}\n","import React, {\n  useRef,\n  useMemo,\n  useState,\n  useEffect,\n  useCallback,\n  useContext,\n} from 'react';\nimport PropTypes from 'prop-types';\n\nimport './index.scss';\nimport { MessageInputKeys, NodeNames, NodeTypes } from './const';\n\nimport { USER_MENTION_TEMP_CHAR } from '../../modules/Channel/context/const';\nimport IconButton from '../IconButton';\nimport Button, { ButtonTypes, ButtonSizes } from '../Button';\nimport renderMentionLabelToString from '../MentionUserLabel/renderToString';\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport Label, { LabelTypography, LabelColors } from '../Label';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport { nodeListToArray, sanitizeString } from './utils';\nimport {\n  arrayEqual,\n  getClassName,\n} from '../../utils';\nimport usePaste from './hooks/usePaste';\nimport { tokenizeMessage } from '../../modules/Message/utils/tokens/tokenize';\nimport { USER_MENTION_PREFIX } from '../../modules/Message/consts';\nimport { TOKEN_TYPES } from '../../modules/Message/utils/tokens/types';\n\nconst TEXT_FIELD_ID = 'sendbird-message-input-text-field';\nconst LINE_HEIGHT = 76;\nconst noop = () => { };\nconst handleUploadFile = (callback) => (event) => {\n  if (event.target.files && event.target.files[0]) {\n    callback(event.target.files[0]);\n  }\n  // eslint-disable-next-line no-param-reassign\n  event.target.value = '';\n};\n\nconst displayCaret = (element, position) => {\n  const range = document.createRange();\n  const sel = window.getSelection();\n  range.setStart(element.childNodes[0], position);\n  range.collapse(true);\n  sel.removeAllRanges();\n  sel.addRange(range);\n  element.focus();\n};\n\nconst resetInput = (ref) => {\n  try {\n    /* eslint-disable no-param-reassign */\n    ref.current.innerHTML = '';\n  } catch {\n    //\n  }\n};\n\nconst initialTargetStringInfo = {\n  targetString: '',\n  startNodeIndex: null,\n  startOffsetIndex: null,\n  endNodeIndex: null,\n  endOffsetIndex: null,\n};\n\nconst MessageInput = React.forwardRef((props, ref) => {\n  const {\n    className,\n    messageFieldId,\n    isEdit,\n    isMentionEnabled,\n    isVoiceMessageEnabled,\n    disabled,\n    message,\n    placeholder,\n    maxLength,\n    onFileUpload,\n    onSendMessage,\n    onUpdateMessage,\n    onCancelEdit,\n    onStartTyping,\n    channelUrl,\n    channel,\n    mentionSelectedUser,\n    onUserMentioned,\n    onMentionStringChange,\n    onMentionedUserIdsUpdated,\n    onVoiceMessageIconClick,\n    onKeyUp,\n    onKeyDown,\n    renderFileUploadIcon,\n    renderVoiceMessageIcon,\n    renderSendMessageIcon,\n    setMentionedUsers,\n  } = props;\n  const textFieldId = messageFieldId || TEXT_FIELD_ID;\n  const { stringSet } = useContext(LocalizationContext);\n  const fileInputRef = useRef(null);\n  const [isInput, setIsInput] = useState(false);\n  const [mentionedUserIds, setMentionedUserIds] = useState([]);\n  const [targetStringInfo, setTargetStringInfo] = useState({ ...initialTargetStringInfo });\n  const setHeight = useMemo(() => (\n    () => {\n      try {\n        const elem = ref?.current;\n        const MAX_HEIGHT = window.document.body.offsetHeight * 0.6;\n        if (elem && elem.scrollHeight >= LINE_HEIGHT) {\n          if (MAX_HEIGHT < elem.scrollHeight) {\n            elem.style.height = 'auto';\n            elem.style.height = `${MAX_HEIGHT}px`;\n          } else {\n            elem.style.height = 'auto';\n            elem.style.height = `${elem.scrollHeight}px`;\n          }\n        } else {\n          elem.style.height = '';\n        }\n      } catch (error) {\n        // error\n      }\n    }\n  ), []);\n\n  // #Edit mode\n  // for easilly initialize input value from outside, but\n  // useEffect(_, [channelUrl]) erase it\n  const initialValue = props?.value;\n  useEffect(() => {\n    const textField = ref?.current;\n    try {\n      textField.innerHTML = initialValue;\n      displayCaret(textField, initialValue?.length);\n    } catch {\n      //\n    }\n    setMentionedUserIds([]);\n    setIsInput(textField?.textContent?.trim().length > 0);\n    setHeight();\n  }, [initialValue]);\n\n  // #Mention | Clear input value when channel changes\n  useEffect(() => {\n    if (!isEdit) {\n      setIsInput(false);\n      resetInput(ref);\n    }\n  }, [channelUrl]);\n\n  // #Mention & #Edit | Fill message input values\n  useEffect(() => {\n    if (isEdit && message?.messageId) {\n      // const textField = document.getElementById(textFieldId);\n      const textField = ref?.current;\n      if (isMentionEnabled\n        && message?.mentionedUsers?.length > 0\n        && message?.mentionedMessageTemplate?.length > 0\n      ) {\n        /* mention enabled */\n        const { mentionedUsers = [] } = message;\n        const tokens = tokenizeMessage({\n          messageText: message?.mentionedMessageTemplate,\n          mentionedUsers,\n        });\n        textField.innerHTML = tokens.map((token) => {\n          if (token.type === TOKEN_TYPES.mention) {\n            const mentionedUser = mentionedUsers.find((user) => user.userId === token.userId);\n            const nickname = `${USER_MENTION_PREFIX}${mentionedUser?.nickname || token.value || stringSet.MENTION_NAME__NO_NAME}`;\n            return renderMentionLabelToString({\n              userId: token.userId,\n              nickname,\n            });\n          }\n          return sanitizeString(token.value);\n        }).join(' ');\n      } else {\n        /* mention disabled */\n        try {\n          textField.innerHTML = sanitizeString(message?.message);\n        } catch {\n          //\n        }\n        setMentionedUserIds([]);\n      }\n      setIsInput(textField?.textContent?.trim().length > 0);\n      setHeight();\n    }\n  }, [isEdit, message]);\n\n  // #Mention | Detect MentionedLabel modified\n  const useMentionedLabelDetection = useCallback(() => {\n    const textField = ref?.current;\n    if (isMentionEnabled) {\n      const newMentionedUserIds = [...textField.getElementsByClassName('sendbird-mention-user-label')].map((node) => node?.dataset?.userid);\n      if (!arrayEqual(mentionedUserIds, newMentionedUserIds) || newMentionedUserIds.length === 0) {\n        onMentionedUserIdsUpdated(newMentionedUserIds);\n        setMentionedUserIds(newMentionedUserIds);\n      }\n    }\n    setIsInput(textField.textContent?.trim().length > 0);\n  }, [targetStringInfo, isMentionEnabled]);\n\n  // #Mention | Replace selected user nickname to the MentionedUserLabel\n  useEffect(() => {\n    if (isMentionEnabled && mentionSelectedUser) {\n      const {\n        targetString,\n        startNodeIndex,\n        startOffsetIndex,\n        endNodeIndex,\n        endOffsetIndex,\n      } = targetStringInfo;\n      if (targetString && startNodeIndex !== null && startOffsetIndex !== null) {\n        // const textField = document.getElementById(textFieldId);\n        const textField = ref?.current;\n        const childNodes = nodeListToArray(textField?.childNodes);\n        const frontTextNode = document?.createTextNode(\n          childNodes[startNodeIndex]?.textContent.slice(0, startOffsetIndex),\n        );\n        const backTextNode = document?.createTextNode(\n          `\\u00A0${childNodes[endNodeIndex]?.textContent.slice(endOffsetIndex)}`,\n        );\n        const mentionLabel = renderMentionLabelToString({\n          userId: mentionSelectedUser?.userId,\n          nickname: `${USER_MENTION_TEMP_CHAR}${mentionSelectedUser?.nickname || stringSet.MENTION_NAME__NO_NAME}`,\n        });\n        const div = document.createElement('div');\n        div.innerHTML = mentionLabel;\n        const newNodes = [\n          ...childNodes.slice(0, startNodeIndex),\n          frontTextNode,\n          div.childNodes[0],\n          backTextNode,\n          ...childNodes.slice(endNodeIndex + 1),\n        ];\n        textField.innerHTML = '';\n        newNodes.forEach((newNode) => {\n          textField.appendChild(newNode);\n        });\n        onUserMentioned(mentionSelectedUser);\n        if (window.getSelection || document.getSelection) {\n          // set caret postion\n          const selection = window.getSelection() || document.getSelection();\n          selection.removeAllRanges();\n          const range = new Range();\n          range.selectNodeContents(textField);\n          range.setStart(textField.childNodes[startNodeIndex + 2], 1);\n          range.setEnd(textField.childNodes[startNodeIndex + 2], 1);\n          range.collapse(false);\n          selection.addRange(range);\n          textField.focus();\n        }\n        setTargetStringInfo({ ...initialTargetStringInfo });\n        setHeight();\n        useMentionedLabelDetection();\n      }\n    }\n  }, [mentionSelectedUser, isMentionEnabled]);\n\n  // #Mention | Detect mentioning user nickname\n  const useMentionInputDetection = useCallback(() => {\n    const selection = window?.getSelection?.() || document?.getSelection?.();\n    const textField = ref?.current;\n    if (selection.anchorNode === textField) {\n      onMentionStringChange('');\n    }\n    if (isMentionEnabled && selection\n      && selection.anchorNode === selection.focusNode\n      && selection.anchorOffset === selection.focusOffset\n    ) {\n      let textStack = '';\n      let startNodeIndex = null;\n      let startOffsetIndex = null;\n      for (let index = 0; index < textField.childNodes.length; index += 1) {\n        const currentNode = textField.childNodes[index];\n        if (currentNode.nodeType === NodeTypes.TextNode) {\n          /* text node */\n          const textContent = (currentNode === selection.anchorNode)\n            ? currentNode?.textContent.slice(0, selection.anchorOffset) || ''\n            : currentNode?.textContent || '';\n          if (textStack.length > 0) {\n            textStack += textContent;\n          } else {\n            let charLastIndex = textContent.lastIndexOf(USER_MENTION_TEMP_CHAR);\n            for (let i = charLastIndex - 1; i > -1; i -= 1) {\n              if (textContent[i] === USER_MENTION_TEMP_CHAR) {\n                charLastIndex = i;\n              } else {\n                break;\n              }\n            }\n            if (charLastIndex > -1) {\n              textStack = textContent;\n              startNodeIndex = index;\n              startOffsetIndex = charLastIndex;\n            }\n          }\n        } else {\n          /* other nodes */\n          textStack = '';\n          startNodeIndex = null;\n          startOffsetIndex = null;\n        }\n        if (currentNode === selection.anchorNode) {\n          /**\n           * targetString could be ''\n           * startNodeIndex and startOffsetIndex could be null\n           */\n          const targetString = textStack ? textStack.slice(startOffsetIndex) : '';// include template character\n          setTargetStringInfo({\n            targetString,\n            startNodeIndex,\n            startOffsetIndex,\n            endNodeIndex: index,\n            endOffsetIndex: selection.anchorOffset,\n          });\n          onMentionStringChange(targetString);\n          return;\n        }\n      }\n    }\n  }, [isMentionEnabled]);\n\n  const sendMessage = () => {\n    const textField = ref?.current;\n    if (!isEdit && textField?.textContent) {\n      let messageText = '';\n      let mentionTemplate = '';\n      textField.childNodes.forEach((node) => {\n        if (node.nodeType === NodeTypes.ElementNode && node.nodeName === NodeNames.Span) {\n          const { innerText, dataset = {} } = node;\n          const { userid = '' } = dataset;\n          messageText += innerText;\n          mentionTemplate += `${USER_MENTION_TEMP_CHAR}{${userid}}`;\n        } else if (node.nodeType === NodeTypes.ElementNode && node.nodeName === NodeNames.Br) {\n          messageText += '\\n';\n          mentionTemplate += '\\n';\n        } else if (node?.nodeType === NodeTypes.ElementNode && node?.nodeName === NodeNames.Div) {\n          // handles newline in safari\n          const { textContent = '' } = node;\n          messageText += `\\n${textContent}`;\n          mentionTemplate += `\\n${textContent}`;\n        } else { // other nodes including text node\n          const { textContent = '' } = node;\n          messageText += textContent;\n          mentionTemplate += textContent;\n        }\n      });\n      const params = { message: messageText, mentionTemplate };\n      onSendMessage(params);\n      resetInput(ref);\n      setIsInput(false);\n      setHeight();\n    }\n  };\n  const isEditDisabled = !(ref?.current?.textContent?.trim());\n  const editMessage = () => {\n    const textField = ref?.current;\n    const messageId = message?.messageId;\n    if (isEdit && messageId) {\n      let messageText = '';\n      let mentionTemplate = '';\n      textField.childNodes.forEach((node) => {\n        if (node.nodeType === NodeTypes.ElementNode && node.nodeName === NodeNames.Span) {\n          const { innerText, dataset = {} } = node;\n          const { userid = '' } = dataset;\n          messageText += innerText;\n          mentionTemplate += `${USER_MENTION_TEMP_CHAR}{${userid}}`;\n          messageText += '\\n';\n          mentionTemplate += '\\n';\n        } else { // other nodes including text node\n          const { textContent = '' } = node;\n          messageText += textContent;\n          mentionTemplate += textContent;\n        }\n      });\n      const params = { messageId, message: messageText, mentionTemplate };\n      onUpdateMessage(params);\n      resetInput(ref);\n    }\n  };\n  const onPaste = usePaste({\n    ref,\n    setMentionedUserIds,\n    setMentionedUsers,\n    channel,\n    setIsInput,\n    setHeight,\n  });\n\n  const textField = ref?.current;\n  return (\n    <form\n      className={getClassName([\n        className,\n        isEdit ? 'sendbird-message-input__edit' : '',\n        disabled ? 'sendbird-message-input-form__disabled' : '',\n      ])}\n    >\n      <div\n        className={getClassName([\n          'sendbird-message-input',\n          disabled ? 'sendbird-message-input__disabled' : '',\n        ])}\n      >\n        <div\n          id={`${textFieldId}${isEdit ? message?.messageId : ''}`}\n          className={`sendbird-message-input--textarea ${textFieldId}`}\n          contentEditable={!disabled}\n          role=\"textbox\"\n          aria-label=\"Text Input\"\n          disabled={disabled}\n          ref={ref}\n          maxLength={maxLength}\n          onKeyDown={(e) => {\n            const preventEvent = onKeyDown(e);\n            if (preventEvent) {\n              e.preventDefault();\n            } else {\n              if (!e.shiftKey && e.key === MessageInputKeys.Enter\n                && textField?.textContent?.trim().length > 0\n                && e?.nativeEvent?.isComposing !== true\n              ) {\n                e.preventDefault();\n                sendMessage();\n              }\n              if (e.key === MessageInputKeys.Backspace\n                && ref?.current?.childNodes?.length === 2\n                && !ref?.current?.childNodes?.[0]?.textContent\n                && ref?.current.childNodes?.[1]?.nodeType === NodeTypes.ElementNode\n              ) {\n                ref?.current.removeChild(ref?.current.childNodes[1]);\n              }\n            }\n          }}\n          onKeyUp={(e) => {\n            const preventEvent = onKeyUp(e);\n            if (preventEvent) {\n              e.preventDefault();\n            } else {\n              useMentionInputDetection();\n            }\n          }}\n          onClick={() => {\n            useMentionInputDetection();\n          }}\n          onInput={() => {\n            setHeight();\n            onStartTyping();\n            setIsInput(textField?.textContent?.trim().length > 0);\n            useMentionedLabelDetection();\n          }}\n          onPaste={onPaste}\n        />\n        {/* placeholder */}\n        {textField?.innerText?.length === 0 && (\n          <Label\n            className=\"sendbird-message-input--placeholder\"\n            type={LabelTypography.BODY_1}\n            color={disabled ? LabelColors.ONBACKGROUND_4 : LabelColors.ONBACKGROUND_3}\n          >\n            {placeholder || stringSet.MESSAGE_INPUT__PLACE_HOLDER}\n          </Label>\n        )}\n        {/* send icon */}\n        {\n          (!isEdit && isInput) && (\n            <IconButton\n              className=\"sendbird-message-input--send\"\n              height=\"32px\"\n              width=\"32px\"\n              onClick={() => sendMessage()}\n            >\n              {\n                renderSendMessageIcon?.() || (\n                  <Icon\n                    type={IconTypes.SEND}\n                    fillColor={disabled ? IconColors.ON_BACKGROUND_4 : IconColors.PRIMARY}\n                    width=\"20px\"\n                    height=\"20px\"\n                  />\n                )\n              }\n            </IconButton>\n          )\n        }\n        {/* file upload icon */}\n        {\n          (!isEdit && !isInput) && (\n            (renderFileUploadIcon?.() || (\n              <IconButton\n                className={`sendbird-message-input--attach ${isVoiceMessageEnabled ? 'is-voice-message-enabled' : ''}`}\n                height=\"32px\"\n                width=\"32px\"\n                onClick={() => {\n                  // todo: clear previous input\n                  fileInputRef?.current?.click?.();\n                }}\n              >\n                <Icon\n                  type={IconTypes.ATTACH}\n                  fillColor={disabled ? IconColors.ON_BACKGROUND_4 : IconColors.CONTENT_INVERSE}\n                  width=\"20px\"\n                  height=\"20px\"\n                />\n                <input\n                  className=\"sendbird-message-input--attach-input\"\n                  type=\"file\"\n                  ref={fileInputRef}\n                  onChange={handleUploadFile(onFileUpload)}\n                />\n              </IconButton>\n            ))\n          )\n        }\n        {/* voice message input trigger */}\n        {(isVoiceMessageEnabled && !isEdit && !isInput) && (\n          <IconButton\n            className=\"sendbird-message-input--voice-message\"\n            width=\"32px\"\n            height=\"32px\"\n            onClick={onVoiceMessageIconClick}\n          >\n            {\n              renderVoiceMessageIcon?.() || (\n                <Icon\n                  type={IconTypes.AUDIO_ON_LINED}\n                  fillColor={disabled ? IconColors.ON_BACKGROUND_4 : IconColors.CONTENT_INVERSE}\n                  width=\"20px\"\n                  height=\"20px\"\n                />\n              )\n            }\n          </IconButton>\n        )}\n      </div>\n      {/* Edit */}\n      {\n        isEdit && (\n          <div className=\"sendbird-message-input--edit-action\">\n            <Button\n              className=\"sendbird-message-input--edit-action__cancel\"\n              type={ButtonTypes.SECONDARY}\n              size={ButtonSizes.SMALL}\n              onClick={onCancelEdit}\n            >\n              {stringSet.BUTTON__CANCEL}\n            </Button>\n            <Button\n              className=\"sendbird-message-input--edit-action__save\"\n              type={ButtonTypes.PRIMARY}\n              size={ButtonSizes.SMALL}\n              disabled={isEditDisabled}\n              onClick={() => editMessage()}\n            >\n              {stringSet.BUTTON__SAVE}\n            </Button>\n          </div>\n        )\n      }\n    </form>\n  );\n});\n\nMessageInput.propTypes = {\n  className: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.string),\n  ]),\n  messageFieldId: PropTypes.string,\n  placeholder: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.bool,\n  ]),\n  value: PropTypes.string,\n  isEdit: PropTypes.bool,\n  isMentionEnabled: PropTypes.bool,\n  isVoiceMessageEnabled: PropTypes.bool,\n  onVoiceMessageIconClick: PropTypes.func,\n  message: PropTypes.shape({\n    messageId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    message: PropTypes.string,\n    mentionedMessageTemplate: PropTypes.string,\n    mentionedUsers: PropTypes.arrayOf(PropTypes.shape({})),\n  }),\n  disabled: PropTypes.bool,\n  maxLength: PropTypes.number,\n  onFileUpload: PropTypes.func,\n  onSendMessage: PropTypes.func,\n  onUpdateMessage: PropTypes.func,\n  onStartTyping: PropTypes.func,\n  onCancelEdit: PropTypes.func,\n  channelUrl: PropTypes.string,\n  mentionSelectedUser: PropTypes.shape({\n    userId: PropTypes.string,\n    nickname: PropTypes.string,\n  }),\n  setMentionedUsers: PropTypes.func,\n  onUserMentioned: PropTypes.func,\n  onMentionStringChange: PropTypes.func,\n  onMentionedUserIdsUpdated: PropTypes.func,\n  onKeyUp: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  renderVoiceMessageIcon: PropTypes.func,\n  renderSendMessageIcon: PropTypes.func,\n  renderFileUploadIcon: PropTypes.func,\n  channel: PropTypes.shape({}),\n};\n\nMessageInput.defaultProps = {\n  className: '',\n  messageFieldId: '',\n  channelUrl: '',\n  onSendMessage: noop,\n  onUpdateMessage: noop,\n  value: null,\n  message: null,\n  isEdit: false,\n  isMentionEnabled: false,\n  isVoiceMessageEnabled: true,\n  onVoiceMessageIconClick: noop,\n  disabled: false,\n  placeholder: '',\n  maxLength: 5000,\n  onFileUpload: noop,\n  onCancelEdit: noop,\n  onStartTyping: noop,\n  mentionSelectedUser: null,\n  onUserMentioned: noop,\n  onMentionStringChange: noop,\n  onMentionedUserIdsUpdated: noop,\n  onKeyUp: noop,\n  onKeyDown: noop,\n  setMentionedUsers: noop,\n  renderVoiceMessageIcon: noop,\n  renderFileUploadIcon: noop,\n  renderSendMessageIcon: noop,\n  channel: {},\n};\n\nexport default MessageInput;\n"]},"metadata":{},"sourceType":"module"}