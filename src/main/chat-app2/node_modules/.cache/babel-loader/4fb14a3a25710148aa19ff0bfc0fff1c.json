{"ast":null,"code":"import _slicedToArray from \"C:/Users/\\uC774\\uACBD\\uBBFC/IdeaProjects/sendbird-uikit-whatsapp-sample/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport React__default, { useState, useEffect } from 'react';\nimport useSendbirdStateContext from '../useSendbirdStateContext.js';\nimport { U as UserProfileProvider } from '../UserProfileContext-9cfbab4d.js';\nimport { u as uuidv4 } from '../uuid-1adedf62.js';\nimport '../withSendbird.js';\nimport '../_rollupPluginBabelHelpers-6bb0305c.js';\nimport 'prop-types';\nvar ChannelSettingsContext = /*#__PURE__*/React__default.createContext(undefined);\nvar ChannelSettingsProvider = function ChannelSettingsProvider(props) {\n  var children = props.children,\n    className = props.className,\n    channelUrl = props.channelUrl,\n    onCloseClick = props.onCloseClick,\n    onLeaveChannel = props.onLeaveChannel,\n    onChannelModified = props.onChannelModified,\n    overrideInviteUser = props.overrideInviteUser,\n    onBeforeUpdateChannel = props.onBeforeUpdateChannel,\n    queries = props.queries;\n\n  // fetch store from <SendbirdProvider />\n  var globalStore = useSendbirdStateContext();\n  var config = globalStore.config,\n    stores = globalStore.stores;\n  var sdkStore = stores.sdkStore;\n  var logger = config.logger,\n    onUserProfileMessage = config.onUserProfileMessage;\n  var initialized = sdkStore.initialized;\n  var sdk = sdkStore === null || sdkStore === void 0 ? void 0 : sdkStore.sdk;\n\n  // hack to keep track of channel updates by triggering useEffect\n  var _useState = useState(uuidv4()),\n    _useState2 = _slicedToArray(_useState, 2),\n    channelUpdateId = _useState2[0],\n    setChannelUpdateId = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    channel = _useState4[0],\n    setChannel = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    invalidChannel = _useState6[0],\n    setInvalidChannel = _useState6[1];\n  var forceUpdateUI = function forceUpdateUI() {\n    setChannelUpdateId(uuidv4());\n  };\n  useEffect(function () {\n    logger.info('ChannelSettings: Setting up');\n    if (!channelUrl || !initialized || !sdk) {\n      logger.warning('ChannelSettings: Setting up failed', 'No channelUrl or sdk uninitialized');\n      setInvalidChannel(false);\n    } else {\n      if (!sdk || !sdk.groupChannel) {\n        logger.warning('ChannelSettings: No GroupChannel');\n        return;\n      }\n      sdk.groupChannel.getChannel(channelUrl).then(function (groupChannel) {\n        if (!groupChannel) {\n          logger.warning('ChannelSettings: Channel not found');\n          setInvalidChannel(true);\n        } else {\n          logger.info('ChannelSettings: Fetched group channel', groupChannel);\n          setInvalidChannel(false);\n          setChannel(groupChannel);\n        }\n      });\n    }\n  }, [channelUrl, initialized, channelUpdateId]);\n  return /*#__PURE__*/React__default.createElement(ChannelSettingsContext.Provider, {\n    value: {\n      channelUrl: channelUrl,\n      onCloseClick: onCloseClick,\n      onLeaveChannel: onLeaveChannel,\n      onChannelModified: onChannelModified,\n      onBeforeUpdateChannel: onBeforeUpdateChannel,\n      queries: queries,\n      overrideInviteUser: overrideInviteUser,\n      setChannelUpdateId: setChannelUpdateId,\n      forceUpdateUI: forceUpdateUI,\n      channel: channel,\n      invalidChannel: invalidChannel\n    }\n  }, /*#__PURE__*/React__default.createElement(UserProfileProvider, {\n    renderUserProfile: props === null || props === void 0 ? void 0 : props.renderUserProfile,\n    disableUserProfile: props === null || props === void 0 ? void 0 : props.disableUserProfile,\n    onUserProfileMessage: onUserProfileMessage\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-settings \".concat(className)\n  }, children)));\n};\nvar useChannelSettingsContext = function useChannelSettingsContext() {\n  return React__default.useContext(ChannelSettingsContext);\n};\nexport { ChannelSettingsProvider, useChannelSettingsContext };","map":{"version":3,"mappings":"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","names":["ChannelSettingsContext","React","createContext","undefined","ChannelSettingsProvider","props","children","className","channelUrl","onCloseClick","onLeaveChannel","onChannelModified","overrideInviteUser","onBeforeUpdateChannel","queries","globalStore","useSendbirdStateContext","config","stores","sdkStore","logger","onUserProfileMessage","initialized","sdk","useState","uuidv4","channelUpdateId","setChannelUpdateId","channel","setChannel","invalidChannel","setInvalidChannel","forceUpdateUI","useEffect","info","warning","groupChannel","getChannel","then","Provider","value","UserProfileProvider","renderUserProfile","disableUserProfile","useChannelSettingsContext","useContext"],"sources":["C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\ChannelSettings\\context\\ChannelSettingsProvider.tsx"],"sourcesContent":["import React, {\n  useEffect,\n  useState,\n} from 'react';\nimport {\n  GroupChannel,\n  GroupChannelUpdateParams,\n  SendbirdGroupChat,\n} from '@sendbird/chat/groupChannel';\n\nimport useSendbirdStateContext from '../../../hooks/useSendbirdStateContext';\nimport { RenderUserProfileProps } from '../../../types';\nimport { UserProfileProvider } from '../../../lib/UserProfileContext';\nimport uuidv4 from '../../../utils/uuid';\n\ninterface ApplicationUserListQuery {\n  limit?: number;\n  userIdsFilter?: Array<string>;\n  metaDataKeyFilter?: string;\n  metaDataValuesFilter?: Array<string>;\n}\n\ninterface ChannelSettingsQueries {\n  applicationUserListQuery?: ApplicationUserListQuery;\n}\n\ntype OverrideInviteUserType = {\n  users: Array<string>;\n  onClose: () => void;\n  channel: GroupChannel;\n};\n\nexport type ChannelSettingsContextProps = {\n  children?: React.ReactElement;\n  channelUrl: string;\n  className?: string;\n  onCloseClick?(): void;\n  onLeaveChannel?(): void;\n  overrideInviteUser?(params: OverrideInviteUserType): void;\n  onChannelModified?(channel: GroupChannel): void;\n  onBeforeUpdateChannel?(currentTitle: string, currentImg: File, data: string): GroupChannelUpdateParams;\n  queries?: ChannelSettingsQueries;\n  renderUserProfile?: (props: RenderUserProfileProps) => React.ReactElement;\n  disableUserProfile?: boolean;\n};\n\ninterface ChannelSettingsProviderInterface {\n  channelUrl: string;\n  onCloseClick?(): void;\n  onLeaveChannel?(): void;\n  overrideInviteUser?(params: OverrideInviteUserType): void;\n  onChannelModified?(channel: GroupChannel): void;\n  onBeforeUpdateChannel?(currentTitle: string, currentImg: File, data: string): GroupChannelUpdateParams;\n  queries?: ChannelSettingsQueries;\n  setChannelUpdateId(uniqId: string): void;\n  forceUpdateUI(): void;\n  channel: GroupChannel;\n  invalidChannel: boolean;\n}\n\nconst ChannelSettingsContext = React.createContext<ChannelSettingsProviderInterface|null>(undefined);\n\nconst ChannelSettingsProvider: React.FC<ChannelSettingsContextProps> = (props: ChannelSettingsContextProps) => {\n  const {\n    children,\n    className,\n    channelUrl,\n    onCloseClick,\n    onLeaveChannel,\n    onChannelModified,\n    overrideInviteUser,\n    onBeforeUpdateChannel,\n    queries,\n  } = props;\n\n  // fetch store from <SendbirdProvider />\n  const globalStore = useSendbirdStateContext();\n  const { config, stores } = globalStore;\n  const { sdkStore } = stores;\n  const { logger, onUserProfileMessage } = config;\n\n  const { initialized } = sdkStore;\n  const sdk = sdkStore?.sdk as SendbirdGroupChat;\n\n  // hack to keep track of channel updates by triggering useEffect\n  const [channelUpdateId, setChannelUpdateId] = useState(uuidv4());\n  const [channel, setChannel] = useState(null);\n  const [invalidChannel, setInvalidChannel] = useState(false);\n\n  const forceUpdateUI = () => {\n    setChannelUpdateId(uuidv4());\n  };\n\n  useEffect(() => {\n    logger.info('ChannelSettings: Setting up');\n    if (!channelUrl || !initialized || !sdk) {\n      logger.warning('ChannelSettings: Setting up failed', 'No channelUrl or sdk uninitialized');\n      setInvalidChannel(false);\n    } else {\n      if (!sdk || !sdk.groupChannel) {\n        logger.warning('ChannelSettings: No GroupChannel');\n        return;\n      }\n      sdk.groupChannel.getChannel(channelUrl).then((groupChannel) => {\n        if (!groupChannel) {\n          logger.warning('ChannelSettings: Channel not found');\n          setInvalidChannel(true);\n        } else {\n          logger.info('ChannelSettings: Fetched group channel', groupChannel);\n          setInvalidChannel(false);\n          setChannel(groupChannel);\n        }\n      });\n    }\n  }, [channelUrl, initialized, channelUpdateId]);\n\n  return (\n    <ChannelSettingsContext.Provider value={{\n      channelUrl,\n      onCloseClick,\n      onLeaveChannel,\n      onChannelModified,\n      onBeforeUpdateChannel,\n      queries,\n      overrideInviteUser,\n      setChannelUpdateId,\n      forceUpdateUI,\n      channel,\n      invalidChannel,\n    }}>\n      <UserProfileProvider\n        renderUserProfile={props?.renderUserProfile}\n        disableUserProfile={props?.disableUserProfile}\n        onUserProfileMessage={onUserProfileMessage}\n      >\n        <div className={`sendbird-channel-settings ${className}`}>\n          {children}\n        </div>\n      </UserProfileProvider>\n    </ChannelSettingsContext.Provider>\n  );\n};\n\nexport type UseChannelSettingsType = () => ChannelSettingsProviderInterface;\nconst useChannelSettingsContext: UseChannelSettingsType = () => React.useContext(ChannelSettingsContext);\n\nexport {\n  ChannelSettingsProvider,\n  useChannelSettingsContext,\n};\n"]},"metadata":{},"sourceType":"module"}