{"ast":null,"code":"import _slicedToArray from \"C:/Users/\\uC774\\uACBD\\uBBFC/IdeaProjects/sendbird-uikit-whatsapp-sample/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"C:/Users/\\uC774\\uACBD\\uBBFC/IdeaProjects/sendbird-uikit-whatsapp-sample/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport React__default, { useEffect, useCallback, useRef, useState, useReducer, useMemo } from 'react';\nimport { U as UserProfileProvider } from './UserProfileContext-9cfbab4d.js';\nimport useSendbirdStateContext from './useSendbirdStateContext.js';\nimport { f as format } from './index-7cdd58b8.js';\nimport { P as PUBSUB_TOPICS } from './topics-b2b77fb9.js';\nimport { a as getSendingMessageStatus, b as isReadMessage, c as filterMessageListParams } from './index-7eb65acf.js';\nimport { _ as _objectSpread2 } from './_rollupPluginBabelHelpers-6bb0305c.js';\nimport { c as compareIds } from './compareIds-defe2bb3.js';\nimport { N as NEXT_RESULT_SIZE, P as PREV_RESULT_SIZE } from './const-b3f02313.js';\nimport { GroupChannelHandler } from '@sendbird/chat/groupChannel';\nimport { u as uuidv4 } from './uuid-1adedf62.js';\nimport { ReplyType, MessageMetaArray } from '@sendbird/chat/message';\nimport { b as VOICE_MESSAGE_FILE_NAME, c as VOICE_MESSAGE_MIME_TYPE, M as META_ARRAY_VOICE_DURATION_KEY, d as META_ARRAY_MESSAGE_TYPE_KEY, e as META_ARRAY_MESSAGE_TYPE_VALUE__VOICE } from './consts-95d8566e.js';\nvar RESET_MESSAGES = 'RESET_MESSAGES';\nvar FETCH_INITIAL_MESSAGES_START = 'FETCH_INITIAL_MESSAGES_START';\nvar FETCH_INITIAL_MESSAGES_SUCCESS = 'FETCH_INITIAL_MESSAGES_SUCCESS';\nvar FETCH_INITIAL_MESSAGES_FAILURE = 'FETCH_INITIAL_MESSAGES_FAILURE';\nvar FETCH_PREV_MESSAGES_SUCCESS = 'FETCH_PREV_MESSAGES_SUCCESS';\nvar FETCH_PREV_MESSAGES_FAILURE = 'FETCH_PREV_MESSAGES_FAILURE';\nvar FETCH_NEXT_MESSAGES_SUCCESS = 'FETCH_NEXT_MESSAGES_SUCCESS';\nvar FETCH_NEXT_MESSAGES_FAILURE = 'FETCH_NEXT_MESSAGES_FAILURE';\nvar SEND_MESSAGEGE_START = 'SEND_MESSAGEGE_START';\nvar SEND_MESSAGEGE_SUCESS = 'SEND_MESSAGEGE_SUCESS';\nvar SEND_MESSAGEGE_FAILURE = 'SEND_MESSAGEGE_FAILURE';\nvar RESEND_MESSAGEGE_START = 'RESEND_MESSAGEGE_START';\nvar ON_MESSAGE_RECEIVED = 'ON_MESSAGE_RECEIVED';\nvar ON_MESSAGE_UPDATED = 'ON_MESSAGE_UPDATED';\nvar ON_MESSAGE_THREAD_INFO_UPDATED = 'ON_MESSAGE_THREAD_INFO_UPDATED';\nvar ON_MESSAGE_DELETED = 'ON_MESSAGE_DELETED';\nvar ON_MESSAGE_DELETED_BY_REQ_ID = 'ON_MESSAGE_DELETED_BY_REQ_ID';\nvar SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\nvar SET_CHANNEL_INVALID = 'SET_CHANNEL_INVALID';\nvar MARK_AS_READ = 'MARK_AS_READ';\nvar ON_REACTION_UPDATED = 'ON_REACTION_UPDATED';\nvar SET_EMOJI_CONTAINER = 'SET_EMOJI_CONTAINER';\nvar MESSAGE_LIST_PARAMS_CHANGED = 'MESSAGE_LIST_PARAMS_CHANGED';\nvar messageActionTypes = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  RESET_MESSAGES: RESET_MESSAGES,\n  FETCH_INITIAL_MESSAGES_START: FETCH_INITIAL_MESSAGES_START,\n  FETCH_INITIAL_MESSAGES_SUCCESS: FETCH_INITIAL_MESSAGES_SUCCESS,\n  FETCH_INITIAL_MESSAGES_FAILURE: FETCH_INITIAL_MESSAGES_FAILURE,\n  FETCH_PREV_MESSAGES_SUCCESS: FETCH_PREV_MESSAGES_SUCCESS,\n  FETCH_PREV_MESSAGES_FAILURE: FETCH_PREV_MESSAGES_FAILURE,\n  FETCH_NEXT_MESSAGES_SUCCESS: FETCH_NEXT_MESSAGES_SUCCESS,\n  FETCH_NEXT_MESSAGES_FAILURE: FETCH_NEXT_MESSAGES_FAILURE,\n  SEND_MESSAGEGE_START: SEND_MESSAGEGE_START,\n  SEND_MESSAGEGE_SUCESS: SEND_MESSAGEGE_SUCESS,\n  SEND_MESSAGEGE_FAILURE: SEND_MESSAGEGE_FAILURE,\n  RESEND_MESSAGEGE_START: RESEND_MESSAGEGE_START,\n  ON_MESSAGE_RECEIVED: ON_MESSAGE_RECEIVED,\n  ON_MESSAGE_UPDATED: ON_MESSAGE_UPDATED,\n  ON_MESSAGE_THREAD_INFO_UPDATED: ON_MESSAGE_THREAD_INFO_UPDATED,\n  ON_MESSAGE_DELETED: ON_MESSAGE_DELETED,\n  ON_MESSAGE_DELETED_BY_REQ_ID: ON_MESSAGE_DELETED_BY_REQ_ID,\n  SET_CURRENT_CHANNEL: SET_CURRENT_CHANNEL,\n  SET_CHANNEL_INVALID: SET_CHANNEL_INVALID,\n  MARK_AS_READ: MARK_AS_READ,\n  ON_REACTION_UPDATED: ON_REACTION_UPDATED,\n  SET_EMOJI_CONTAINER: SET_EMOJI_CONTAINER,\n  MESSAGE_LIST_PARAMS_CHANGED: MESSAGE_LIST_PARAMS_CHANGED\n});\nvar UNDEFINED = 'undefined';\nvar _getSendingMessageSta = getSendingMessageStatus(),\n  SUCCEEDED$1 = _getSendingMessageSta.SUCCEEDED,\n  FAILED = _getSendingMessageSta.FAILED,\n  PENDING = _getSendingMessageSta.PENDING;\nvar scrollToRenderedMessage = function scrollToRenderedMessage(scrollRef, initialTimeStamp) {\n  try {\n    var _container$querySelec;\n    var container = scrollRef.current;\n    // scroll into the message with initialTimeStamp\n    var element = (_container$querySelec = container.querySelectorAll(\"[data-sb-created-at=\\\"\".concat(initialTimeStamp, \"\\\"]\"))) === null || _container$querySelec === void 0 ? void 0 : _container$querySelec[0];\n    if (element) {\n      // Calculate the offset of the element from the top of the container\n      var containerHeight = container.offsetHeight;\n      var elementHeight = element.offsetHeight;\n      var elementOffset = (containerHeight - elementHeight) / 2;\n      // Set the scroll position of the container to bring the element to the middle\n      container.scrollTop = element.offsetTop - elementOffset;\n    }\n  } catch (_unused) {\n    // do nothing\n  }\n};\n\n/* eslint-disable default-param-last */\nvar scrollIntoLast = function scrollIntoLast() {\n  var initialTry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var scrollRef = arguments.length > 1 ? arguments[1] : undefined;\n  var MAX_TRIES = 10;\n  var currentTry = initialTry;\n  if (currentTry > MAX_TRIES) {\n    return;\n  }\n  try {\n    var scrollDOM = (scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current) || document.querySelector('.sendbird-conversation__messages-padding');\n    // eslint-disable-next-line no-multi-assign\n    scrollDOM.scrollTop = scrollDOM.scrollHeight;\n  } catch (error) {\n    setTimeout(function () {\n      scrollIntoLast(currentTry + 1, scrollRef);\n    }, 500 * currentTry);\n  }\n};\nvar pubSubHandleRemover = function pubSubHandleRemover(subscriber) {\n  subscriber.forEach(function (s) {\n    try {\n      s.remove();\n    } catch (_unused2) {\n      //\n    }\n  });\n};\nvar pubSubHandler = function pubSubHandler(_ref) {\n  var channelUrl = _ref.channelUrl,\n    pubSub = _ref.pubSub,\n    dispatcher = _ref.dispatcher,\n    scrollRef = _ref.scrollRef;\n  var subscriber = new Map();\n  if (!pubSub || !pubSub.subscribe) return subscriber;\n  subscriber.set(PUBSUB_TOPICS.SEND_USER_MESSAGE, pubSub.subscribe(PUBSUB_TOPICS.SEND_USER_MESSAGE, function (msg) {\n    var channel = msg.channel,\n      message = msg.message;\n    scrollIntoLast(0, scrollRef);\n    if (channelUrl === (channel === null || channel === void 0 ? void 0 : channel.url)) {\n      dispatcher({\n        type: SEND_MESSAGEGE_SUCESS,\n        payload: message\n      });\n    }\n  }));\n  subscriber.set(PUBSUB_TOPICS.SEND_MESSAGE_START, pubSub.subscribe(PUBSUB_TOPICS.SEND_MESSAGE_START, function (msg) {\n    var channel = msg.channel,\n      message = msg.message;\n    if (channelUrl === (channel === null || channel === void 0 ? void 0 : channel.url)) {\n      dispatcher({\n        type: SEND_MESSAGEGE_START,\n        payload: message\n      });\n    }\n  }));\n  subscriber.set(PUBSUB_TOPICS.SEND_FILE_MESSAGE, pubSub.subscribe(PUBSUB_TOPICS.SEND_FILE_MESSAGE, function (msg) {\n    var channel = msg.channel,\n      message = msg.message;\n    scrollIntoLast(0, scrollRef);\n    if (channelUrl === (channel === null || channel === void 0 ? void 0 : channel.url)) {\n      dispatcher({\n        type: SEND_MESSAGEGE_SUCESS,\n        payload: message\n      });\n    }\n  }));\n  subscriber.set(PUBSUB_TOPICS.UPDATE_USER_MESSAGE, pubSub.subscribe(PUBSUB_TOPICS.UPDATE_USER_MESSAGE, function (msg) {\n    var channel = msg.channel,\n      message = msg.message,\n      fromSelector = msg.fromSelector;\n    if (fromSelector && channelUrl === (channel === null || channel === void 0 ? void 0 : channel.url)) {\n      dispatcher({\n        type: ON_MESSAGE_UPDATED,\n        payload: {\n          channel: channel,\n          message: message\n        }\n      });\n    }\n  }));\n  subscriber.set(PUBSUB_TOPICS.DELETE_MESSAGE, pubSub.subscribe(PUBSUB_TOPICS.DELETE_MESSAGE, function (msg) {\n    var channel = msg.channel,\n      messageId = msg.messageId;\n    if (channelUrl === (channel === null || channel === void 0 ? void 0 : channel.url)) {\n      dispatcher({\n        type: ON_MESSAGE_DELETED,\n        payload: messageId\n      });\n    }\n  }));\n  return subscriber;\n};\nvar isOperator = function isOperator() {\n  var groupChannel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var myRole = groupChannel === null || groupChannel === void 0 ? void 0 : groupChannel.myRole;\n  return myRole === 'operator';\n};\nvar isDisabledBecauseFrozen = function isDisabledBecauseFrozen() {\n  var groupChannel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var isFrozen = groupChannel === null || groupChannel === void 0 ? void 0 : groupChannel.isFrozen;\n  return isFrozen && !isOperator(groupChannel);\n};\nvar isDisabledBecauseMuted = function isDisabledBecauseMuted() {\n  var groupChannel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var myMutedState = groupChannel === null || groupChannel === void 0 ? void 0 : groupChannel.myMutedState;\n  return myMutedState === 'muted';\n};\nvar getAllEmojisMapFromEmojiContainer = function getAllEmojisMapFromEmojiContainer() {\n  var emojiContainer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _emojiContainer$emoji = emojiContainer.emojiCategories,\n    emojiCategories = _emojiContainer$emoji === void 0 ? [] : _emojiContainer$emoji;\n  var allEmojisMap = new Map();\n  for (var categoryIndex = 0; categoryIndex < emojiCategories.length; categoryIndex += 1) {\n    var emojis = emojiCategories[categoryIndex].emojis;\n    for (var emojiIndex = 0; emojiIndex < emojis.length; emojiIndex += 1) {\n      var _emojis$emojiIndex = emojis[emojiIndex],\n        key = _emojis$emojiIndex.key,\n        url = _emojis$emojiIndex.url;\n      allEmojisMap.set(key, url);\n    }\n  }\n  return allEmojisMap;\n};\nvar getNicknamesMapFromMembers = function getNicknamesMapFromMembers() {\n  var members = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var nicknamesMap = new Map();\n  for (var memberIndex = 0; memberIndex < members.length; memberIndex += 1) {\n    var _members$memberIndex = members[memberIndex],\n      userId = _members$memberIndex.userId,\n      nickname = _members$memberIndex.nickname;\n    nicknamesMap.set(userId, nickname);\n  }\n  return nicknamesMap;\n};\nvar getUniqueListBy = function getUniqueListBy(arr, key) {\n  return _toConsumableArray(new Map(arr.map(function (item) {\n    return [item[key], item];\n  })).values());\n};\nvar getUniqueListByMessageId = function getUniqueListByMessageId(arr) {\n  return getUniqueListBy(arr, 'messageId');\n};\nvar sortByCreatedAt = function sortByCreatedAt(messages) {\n  return messages.sort(function (a, b) {\n    return a.createdAt - b.createdAt;\n  });\n};\nvar mergeAndSortMessages = function mergeAndSortMessages(oldMessages, newMessages) {\n  var lastOldMessage = oldMessages[oldMessages.length - 1];\n  var firstNewMessage = newMessages[0];\n  // If the last message of oldMessages is older than the first message of newMessages,\n  // then we can safely append newMessages to oldMessages.\n  if ((lastOldMessage === null || lastOldMessage === void 0 ? void 0 : lastOldMessage.createdAt) < (firstNewMessage === null || firstNewMessage === void 0 ? void 0 : firstNewMessage.createdAt)) {\n    return [].concat(_toConsumableArray(oldMessages), _toConsumableArray(newMessages));\n  }\n\n  // todo: optimize this\n  // If the last message of oldMessages is newer than the first message of newMessages,\n  // then we need to merge the two arrays and sort them by createdAt.\n  var mergedMessages = [].concat(_toConsumableArray(oldMessages), _toConsumableArray(newMessages));\n  var unique = getUniqueListByMessageId(mergedMessages);\n  return sortByCreatedAt(unique);\n};\nvar getMessageCreatedAt = function getMessageCreatedAt(message) {\n  return format(message.createdAt, 'p');\n};\nvar isSameGroup = function isSameGroup(message, comparingMessage, currentChannel) {\n  var _message$sender, _comparingMessage$sen, _message$sender2, _comparingMessage$sen2;\n  if (!(message && comparingMessage && message.messageType && message.messageType !== 'admin' && comparingMessage.messageType && (comparingMessage === null || comparingMessage === void 0 ? void 0 : comparingMessage.messageType) !== 'admin' && message !== null && message !== void 0 && message.sender && comparingMessage !== null && comparingMessage !== void 0 && comparingMessage.sender && message !== null && message !== void 0 && message.createdAt && comparingMessage !== null && comparingMessage !== void 0 && comparingMessage.createdAt && message !== null && message !== void 0 && (_message$sender = message.sender) !== null && _message$sender !== void 0 && _message$sender.userId && comparingMessage !== null && comparingMessage !== void 0 && (_comparingMessage$sen = comparingMessage.sender) !== null && _comparingMessage$sen !== void 0 && _comparingMessage$sen.userId)) {\n    return false;\n  }\n  return (message === null || message === void 0 ? void 0 : message.sendingStatus) === (comparingMessage === null || comparingMessage === void 0 ? void 0 : comparingMessage.sendingStatus) && (message === null || message === void 0 ? void 0 : (_message$sender2 = message.sender) === null || _message$sender2 === void 0 ? void 0 : _message$sender2.userId) === (comparingMessage === null || comparingMessage === void 0 ? void 0 : (_comparingMessage$sen2 = comparingMessage.sender) === null || _comparingMessage$sen2 === void 0 ? void 0 : _comparingMessage$sen2.userId) && getMessageCreatedAt(message) === getMessageCreatedAt(comparingMessage) && isReadMessage(currentChannel, message) === isReadMessage(currentChannel, comparingMessage);\n};\nvar compareMessagesForGrouping = function compareMessagesForGrouping(prevMessage, currMessage, nextMessage, currentChannel, replyType) {\n  if (replyType === 'THREAD' && currMessage !== null && currMessage !== void 0 && currMessage.threadInfo) {\n    return [false, false];\n  }\n  var sendingStatus = (currMessage === null || currMessage === void 0 ? void 0 : currMessage.sendingStatus) || '';\n  var isAcceptable = sendingStatus !== 'pending' && sendingStatus !== 'failed';\n  return [isSameGroup(prevMessage, currMessage, currentChannel) && isAcceptable, isSameGroup(currMessage, nextMessage, currentChannel) && isAcceptable];\n};\nvar passUnsuccessfullMessages = function passUnsuccessfullMessages(allMessages, newMessage) {\n  var _newMessage$sendingSt = newMessage.sendingStatus,\n    sendingStatus = _newMessage$sendingSt === void 0 ? UNDEFINED : _newMessage$sendingSt;\n  if (sendingStatus === SUCCEEDED$1 || sendingStatus === PENDING) {\n    var lastIndexOfSucceededMessage = allMessages.map(function (message) {\n      return message.sendingStatus || (message.isAdminMessage && message.isAdminMessage() ? SUCCEEDED$1 : UNDEFINED);\n    }).lastIndexOf(SUCCEEDED$1);\n    if (lastIndexOfSucceededMessage + 1 < allMessages.length) {\n      var messages = _toConsumableArray(allMessages);\n      messages.splice(lastIndexOfSucceededMessage + 1, 0, newMessage);\n      return messages;\n    }\n  }\n  return [].concat(_toConsumableArray(allMessages), [newMessage]);\n};\nvar pxToNumber = function pxToNumber(px) {\n  if (typeof px === 'number') {\n    return px;\n  }\n  if (typeof px === 'string') {\n    var parsed = Number.parseFloat(px);\n    if (!Number.isNaN(parsed)) {\n      return parsed;\n    }\n  }\n  return null;\n};\nvar isAboutSame = function isAboutSame(a, b, px) {\n  return Math.abs(a - b) <= px;\n};\n\n/**\n * This function helps consider the every condition\n * related to enabling emoji reaction feature.\n */\n\nfunction getIsReactionEnabled(_ref) {\n  var _ref$isBroadcast = _ref.isBroadcast,\n    isBroadcast = _ref$isBroadcast === void 0 ? false : _ref$isBroadcast,\n    _ref$isSuper = _ref.isSuper,\n    isSuper = _ref$isSuper === void 0 ? false : _ref$isSuper,\n    _ref$globalLevel = _ref.globalLevel,\n    globalLevel = _ref$globalLevel === void 0 ? true : _ref$globalLevel,\n    moduleLevel = _ref.moduleLevel;\n  return !(isBroadcast || isSuper) && (moduleLevel !== null && moduleLevel !== void 0 ? moduleLevel : globalLevel);\n}\nvar messagesInitialState = {\n  initialized: false,\n  loading: true,\n  allMessages: [],\n  currentGroupChannel: {\n    members: []\n  },\n  // for scrollup\n  hasMorePrev: false,\n  oldestMessageTimeStamp: 0,\n  // for scroll down\n  // onScrollDownCallback is added for navigation to different timestamps on messageSearch\n  // hasMorePrev, onScrollCallback -> scroll up(default behavior)\n  // hasMoreNext, onScrollDownCallback -> scroll down\n  hasMoreNext: false,\n  latestMessageTimeStamp: 0,\n  emojiContainer: {},\n  unreadSince: null,\n  isInvalid: false,\n  messageListParams: null\n};\nvar _getSendingMessageSta2 = getSendingMessageStatus(),\n  SUCCEEDED = _getSendingMessageSta2.SUCCEEDED;\nvar getOldestMessageTimeStamp = function getOldestMessageTimeStamp() {\n  var messages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var oldestMessage = messages[0];\n  return oldestMessage && oldestMessage.createdAt || null;\n};\nvar getLatestMessageTimeStamp = function getLatestMessageTimeStamp() {\n  var messages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var latestMessage = messages[messages.length - 1];\n  return latestMessage && latestMessage.createdAt || null;\n};\nfunction reducer(state, action) {\n  var _state$currentGroupCh7, _action$payload, _action$payload$chann;\n  switch (action.type) {\n    case RESET_MESSAGES:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        // when user switches channel, if the previous channel `hasMorePrev`\n        // the onScroll gets called twice, setting hasMorePrev false prevents this\n        hasMorePrev: false,\n        hasMoreNext: false,\n        allMessages: []\n      });\n    case FETCH_INITIAL_MESSAGES_START:\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          loading: true,\n          allMessages: _toConsumableArray(state.allMessages.filter(function (m) {\n            return m.sendingStatus !== SUCCEEDED;\n          }))\n        });\n      }\n    case FETCH_INITIAL_MESSAGES_SUCCESS:\n      {\n        var _state$currentGroupCh;\n        var _action$payload2 = action.payload,\n          currentGroupChannel = _action$payload2.currentGroupChannel,\n          messages = _action$payload2.messages;\n        if (!((currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.url) === ((_state$currentGroupCh = state.currentGroupChannel) === null || _state$currentGroupCh === void 0 ? void 0 : _state$currentGroupCh.url))) {\n          return state;\n        }\n        var oldestMessageTimeStamp = getOldestMessageTimeStamp(messages);\n        var latestMessageTimeStamp = getLatestMessageTimeStamp(messages);\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          loading: false,\n          initialized: true,\n          hasMorePrev: true,\n          hasMoreNext: true,\n          oldestMessageTimeStamp: oldestMessageTimeStamp,\n          latestMessageTimeStamp: latestMessageTimeStamp,\n          allMessages: _toConsumableArray(messages)\n        });\n      }\n    case FETCH_PREV_MESSAGES_SUCCESS:\n      {\n        var _state$currentGroupCh2;\n        var _action$payload3 = action.payload,\n          _currentGroupChannel = _action$payload3.currentGroupChannel,\n          _messages = _action$payload3.messages;\n        if (!((_currentGroupChannel === null || _currentGroupChannel === void 0 ? void 0 : _currentGroupChannel.url) === ((_state$currentGroupCh2 = state.currentGroupChannel) === null || _state$currentGroupCh2 === void 0 ? void 0 : _state$currentGroupCh2.url))) {\n          return state;\n        }\n        var hasMorePrev = _messages && _messages.length === PREV_RESULT_SIZE + 1;\n        var _oldestMessageTimeStamp = getOldestMessageTimeStamp(_messages);\n\n        // Remove duplicated messages\n        var duplicatedMessageIds = [];\n        var updatedOldMessages = state.allMessages.map(function (msg) {\n          var duplicatedMessage = _messages.find(function (_ref) {\n            var messageId = _ref.messageId;\n            return compareIds(messageId, msg.messageId);\n          });\n          if (!duplicatedMessage) {\n            return msg;\n          }\n          duplicatedMessageIds.push(duplicatedMessage.messageId);\n          return duplicatedMessage.updatedAt > msg.updatedAt ? duplicatedMessage : msg;\n        });\n        var filteredNewMessages = duplicatedMessageIds.length > 0 ? _messages.filter(function (msg) {\n          return !duplicatedMessageIds.find(function (messageId) {\n            return compareIds(messageId, msg.messageId);\n          });\n        }) : _messages;\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          hasMorePrev: hasMorePrev,\n          oldestMessageTimeStamp: _oldestMessageTimeStamp,\n          allMessages: [].concat(_toConsumableArray(filteredNewMessages), _toConsumableArray(updatedOldMessages))\n        });\n      }\n    case FETCH_NEXT_MESSAGES_SUCCESS:\n      {\n        var _state$currentGroupCh3;\n        var _action$payload4 = action.payload,\n          _currentGroupChannel2 = _action$payload4.currentGroupChannel,\n          _messages2 = _action$payload4.messages;\n        if (!((_currentGroupChannel2 === null || _currentGroupChannel2 === void 0 ? void 0 : _currentGroupChannel2.url) === ((_state$currentGroupCh3 = state.currentGroupChannel) === null || _state$currentGroupCh3 === void 0 ? void 0 : _state$currentGroupCh3.url))) {\n          return state;\n        }\n        var hasMoreNext = _messages2 && _messages2.length === NEXT_RESULT_SIZE + 1;\n        var _latestMessageTimeStamp = getLatestMessageTimeStamp(_messages2);\n\n        // sort ~\n        var sortedMessages = mergeAndSortMessages(state.allMessages, _messages2);\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          hasMoreNext: hasMoreNext,\n          latestMessageTimeStamp: _latestMessageTimeStamp,\n          allMessages: sortedMessages\n        });\n      }\n    case FETCH_INITIAL_MESSAGES_FAILURE:\n    case FETCH_PREV_MESSAGES_FAILURE:\n    case FETCH_NEXT_MESSAGES_FAILURE:\n      {\n        var _state$currentGroupCh4;\n        var _currentGroupChannel3 = action.payload.currentGroupChannel;\n        if ((_currentGroupChannel3 === null || _currentGroupChannel3 === void 0 ? void 0 : _currentGroupChannel3.url) !== (state === null || state === void 0 ? void 0 : (_state$currentGroupCh4 = state.currentGroupChannel) === null || _state$currentGroupCh4 === void 0 ? void 0 : _state$currentGroupCh4.url)) {\n          return state;\n        }\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          loading: false,\n          initialized: false,\n          allMessages: [],\n          hasMorePrev: false,\n          hasMoreNext: false,\n          oldestMessageTimeStamp: null,\n          latestMessageTimeStamp: null\n        });\n      }\n    case SEND_MESSAGEGE_START:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        allMessages: [].concat(_toConsumableArray(state.allMessages), [_objectSpread2({}, action.payload)])\n      });\n    case SEND_MESSAGEGE_SUCESS:\n      {\n        var message = action.payload;\n        var filteredMessages = state.allMessages.filter(function (m) {\n          return (m === null || m === void 0 ? void 0 : m.reqId) !== (message === null || message === void 0 ? void 0 : message.reqId);\n        });\n        var pendingIndex = filteredMessages.findIndex(function (msg) {\n          return (msg === null || msg === void 0 ? void 0 : msg.sendingStatus) === 'pending' || (msg === null || msg === void 0 ? void 0 : msg.sendingStatus) === 'failed';\n        });\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allMessages: pendingIndex > -1 ? [].concat(_toConsumableArray(filteredMessages.slice(0, pendingIndex)), [message], _toConsumableArray(filteredMessages.slice(pendingIndex))) : [].concat(_toConsumableArray(filteredMessages), [message])\n        });\n      }\n    case SEND_MESSAGEGE_FAILURE:\n      {\n        // eslint-disable-next-line no-param-reassign\n        action.payload.failed = true;\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allMessages: state.allMessages.map(function (m) {\n            return compareIds(m.reqId, action.payload.reqId) ? action.payload : m;\n          })\n        });\n      }\n    case SET_CURRENT_CHANNEL:\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          currentGroupChannel: action.payload,\n          isInvalid: false\n        });\n      }\n    case SET_CHANNEL_INVALID:\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          currentGroupChannel: null,\n          isInvalid: true\n        });\n      }\n    case ON_MESSAGE_RECEIVED:\n      {\n        var _action$payload5 = action.payload,\n          channel = _action$payload5.channel,\n          _message = _action$payload5.message;\n        var members = channel.members;\n        var sender = _message.sender;\n        var _state$currentGroupCh8 = state.currentGroupChannel,\n          _currentGroupChannel4 = _state$currentGroupCh8 === void 0 ? {} : _state$currentGroupCh8,\n          unreadSince = state.unreadSince;\n        var currentGroupChannelUrl = _currentGroupChannel4 === null || _currentGroupChannel4 === void 0 ? void 0 : _currentGroupChannel4.url;\n        if (!compareIds(channel === null || channel === void 0 ? void 0 : channel.url, currentGroupChannelUrl)) {\n          return state;\n        }\n        // Excluded overlapping messages\n        if (state.allMessages.some(function (msg) {\n          return msg.messageId === _message.messageId;\n        })) {\n          return state;\n        }\n        // Filter by userFilledQuery\n        if (state.messageListParams && !filterMessageListParams(state.messageListParams, _message)) {\n          return state;\n        }\n        if (_message.isAdminMessage && _message.isAdminMessage()) {\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            allMessages: passUnsuccessfullMessages(state.allMessages, _message)\n          });\n        }\n\n        // Update members when sender profileUrl, nickname, friendName has been changed\n        var senderMember = members === null || members === void 0 ? void 0 : members.find(function (m) {\n          return (m === null || m === void 0 ? void 0 : m.userId) === (sender === null || sender === void 0 ? void 0 : sender.userId);\n        });\n        if ((senderMember === null || senderMember === void 0 ? void 0 : senderMember.profileUrl) !== (sender === null || sender === void 0 ? void 0 : sender.profileUrl) || (senderMember === null || senderMember === void 0 ? void 0 : senderMember.friendName) !== (sender === null || sender === void 0 ? void 0 : sender.friendName) || (senderMember === null || senderMember === void 0 ? void 0 : senderMember.nickname) !== (sender === null || sender === void 0 ? void 0 : sender.nickname)) {\n          channel.members = members.map(function (member) {\n            if (member.userId === sender.userId) {\n              return sender;\n            }\n            return member;\n          });\n        }\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          currentGroupChannel: channel,\n          unreadSince: state !== null && state !== void 0 && state.unreadSince ? unreadSince : format(new Date(), 'p MMM dd'),\n          allMessages: passUnsuccessfullMessages(state.allMessages, _message)\n        });\n      }\n    case ON_MESSAGE_UPDATED:\n      {\n        var _state$currentGroupCh5;\n        var _action$payload6 = action.payload,\n          _channel = _action$payload6.channel,\n          _message2 = _action$payload6.message;\n        var _currentGroupChannelUrl = (state === null || state === void 0 ? void 0 : (_state$currentGroupCh5 = state.currentGroupChannel) === null || _state$currentGroupCh5 === void 0 ? void 0 : _state$currentGroupCh5.url) || '';\n        if (!compareIds(_channel === null || _channel === void 0 ? void 0 : _channel.url, _currentGroupChannelUrl)) {\n          return state; // Ignore event when it is not for the current channel\n        }\n\n        if (state.messageListParams && !filterMessageListParams(state.messageListParams, _message2)) {\n          // Delete the message if it doesn't match to the params anymore\n          return _objectSpread2(_objectSpread2({}, state), {}, {\n            allMessages: state.allMessages.filter(function (m) {\n              return !compareIds(m.messageId, _message2 === null || _message2 === void 0 ? void 0 : _message2.messageId);\n            })\n          });\n        }\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allMessages: state.allMessages.map(function (m) {\n            if (compareIds(m.messageId, _message2.messageId)) {\n              return _message2;\n            }\n            if (compareIds(m.parentMessageId, _message2.messageId)) {\n              m.parentMessage = _message2; // eslint-disable-line no-param-reassign\n            }\n\n            return m;\n          })\n        });\n      }\n    case ON_MESSAGE_THREAD_INFO_UPDATED:\n      {\n        var _state$currentGroupCh6;\n        var _action$payload7 = action.payload,\n          _channel2 = _action$payload7.channel,\n          event = _action$payload7.event;\n        var channelUrl = event.channelUrl,\n          threadInfo = event.threadInfo,\n          targetMessageId = event.targetMessageId;\n        var _currentGroupChannelUrl2 = (state === null || state === void 0 ? void 0 : (_state$currentGroupCh6 = state.currentGroupChannel) === null || _state$currentGroupCh6 === void 0 ? void 0 : _state$currentGroupCh6.url) || '';\n        if (!compareIds(_channel2 === null || _channel2 === void 0 ? void 0 : _channel2.url, _currentGroupChannelUrl2) || !compareIds(_channel2 === null || _channel2 === void 0 ? void 0 : _channel2.url, channelUrl)) {\n          return state; // Ignore event when it is not for the current channel\n        }\n\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allMessages: state.allMessages.map(function (m) {\n            if (compareIds(m.messageId, targetMessageId)) {\n              // eslint-disable-next-line no-param-reassign\n              m.threadInfo = threadInfo; // Upsert threadInfo to the target message\n            }\n\n            return m;\n          })\n        });\n      }\n    case RESEND_MESSAGEGE_START:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        allMessages: state.allMessages.map(function (m) {\n          return compareIds(m.reqId, action.payload.reqId) ? action.payload : m;\n        })\n      });\n    case MARK_AS_READ:\n      if (((_state$currentGroupCh7 = state.currentGroupChannel) === null || _state$currentGroupCh7 === void 0 ? void 0 : _state$currentGroupCh7.url) !== ((_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : (_action$payload$chann = _action$payload.channel) === null || _action$payload$chann === void 0 ? void 0 : _action$payload$chann.url)) {\n        return state;\n      }\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        unreadSince: null\n      });\n    case ON_MESSAGE_DELETED:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        allMessages: state.allMessages.filter(function (m) {\n          return !compareIds(m.messageId, action.payload);\n        })\n      });\n    case ON_MESSAGE_DELETED_BY_REQ_ID:\n      return _objectSpread2(_objectSpread2({}, state), {}, {\n        allMessages: state.allMessages.filter(function (m) {\n          return !compareIds(m.reqId, action.payload);\n        })\n      });\n    case SET_EMOJI_CONTAINER:\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          emojiContainer: action.payload\n        });\n      }\n    case ON_REACTION_UPDATED:\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          allMessages: state.allMessages.map(function (m) {\n            if (compareIds(m.messageId, action.payload.messageId)) {\n              if (m.applyReactionEvent && typeof m.applyReactionEvent === 'function') {\n                m.applyReactionEvent(action.payload);\n              }\n              return m;\n            }\n            return m;\n          })\n        });\n      }\n    case MESSAGE_LIST_PARAMS_CHANGED:\n      {\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          messageListParams: action.payload\n        });\n      }\n    default:\n      return state;\n  }\n}\n\n/**\n * Handles ChannelEvents and send values to dispatcher using messagesDispatcher\n * messagesDispatcher: Dispatcher\n * sdk: sdkInstance\n * logger: loggerInstance\n * channelUrl: string\n * sdkInit: bool\n */\n\nvar DELIVERY_RECIPT = 'delivery_receipt';\nfunction useHandleChannelEvents(_ref, _ref2) {\n  var _store$stores$sdkStor, _store$stores$sdkStor2, _store$stores$sdkStor3;\n  var sdkInit = _ref.sdkInit,\n    currentUserId = _ref.currentUserId,\n    currentGroupChannel = _ref.currentGroupChannel,\n    disableMarkAsRead = _ref.disableMarkAsRead;\n  var sdk = _ref2.sdk,\n    logger = _ref2.logger,\n    scrollRef = _ref2.scrollRef,\n    setQuoteMessage = _ref2.setQuoteMessage,\n    messagesDispatcher = _ref2.messagesDispatcher;\n  var store = useSendbirdStateContext();\n  var _store$config = store.config,\n    markAsReadScheduler = _store$config.markAsReadScheduler,\n    markAsDeliveredScheduler = _store$config.markAsDeliveredScheduler,\n    disableMarkAsDelivered = _store$config.disableMarkAsDelivered;\n  var canSetMarkAsDelivered = (_store$stores$sdkStor = store.stores.sdkStore.sdk) === null || _store$stores$sdkStor === void 0 ? void 0 : (_store$stores$sdkStor2 = _store$stores$sdkStor.appInfo) === null || _store$stores$sdkStor2 === void 0 ? void 0 : (_store$stores$sdkStor3 = _store$stores$sdkStor2.premiumFeatureList) === null || _store$stores$sdkStor3 === void 0 ? void 0 : _store$stores$sdkStor3.find(function (feature) {\n    return feature === DELIVERY_RECIPT;\n  });\n  useEffect(function () {\n    var channelUrl = currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.url;\n    var channelHandlerId = uuidv4();\n    if (channelUrl && sdkInit) {\n      var _sdk$groupChannel;\n      var channelHandler = {\n        onMessageReceived: function onMessageReceived(channel, message) {\n          if (compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl)) {\n            var _document$getElementB, _document$getElementB2;\n            var scrollToEnd = false;\n            try {\n              var current = scrollRef.current;\n              scrollToEnd = current.offsetHeight + current.scrollTop >= current.scrollHeight - 10;\n              // 10 is a buffer\n            } catch (error) {\n              //\n            }\n            logger.info('Channel | useHandleChannelEvents: onMessageReceived', message);\n            messagesDispatcher({\n              type: ON_MESSAGE_RECEIVED,\n              payload: {\n                channel: channel,\n                message: message\n              }\n            });\n            if (scrollToEnd && ((_document$getElementB = document.getElementById('sendbird-dropdown-portal')) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.childElementCount) === 0 && ((_document$getElementB2 = document.getElementById('sendbird-emoji-list-portal')) === null || _document$getElementB2 === void 0 ? void 0 : _document$getElementB2.childElementCount) === 0) {\n              // and !openContextMenu\n              try {\n                setTimeout(function () {\n                  scrollIntoLast(0, scrollRef);\n                });\n                if (!disableMarkAsRead) {\n                  markAsReadScheduler.push(currentGroupChannel);\n                }\n                if (canSetMarkAsDelivered && !disableMarkAsDelivered) {\n                  markAsDeliveredScheduler.push(currentGroupChannel);\n                }\n              } catch (error) {\n                logger.warning('Channel | onMessageReceived | scroll to end failed');\n              }\n            }\n          }\n        },\n        onUnreadMemberStatusUpdated: function onUnreadMemberStatusUpdated(channel) {\n          logger.info('Channel | useHandleChannelEvents: onUnreadMemberStatusUpdated', channel);\n          if (compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl)) {\n            messagesDispatcher({\n              type: SET_CURRENT_CHANNEL,\n              payload: channel\n            });\n          }\n        },\n        // before(onDeliveryReceiptUpdated)\n        onUndeliveredMemberStatusUpdated: function onUndeliveredMemberStatusUpdated(channel) {\n          if (compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl)) {\n            logger.info('Channel | useHandleChannelEvents: onDeliveryReceiptUpdated', channel);\n            messagesDispatcher({\n              type: SET_CURRENT_CHANNEL,\n              payload: channel\n            });\n          }\n        },\n        onMessageUpdated: function onMessageUpdated(channel, message) {\n          logger.info('Channel | useHandleChannelEvents: onMessageUpdated', message);\n          messagesDispatcher({\n            type: ON_MESSAGE_UPDATED,\n            payload: {\n              channel: channel,\n              message: message\n            }\n          });\n        },\n        onThreadInfoUpdated: function onThreadInfoUpdated(channel, threadInfoUpdateEvent) {\n          logger.info('Channel | useHandleChannelEvents: onThreadInfoUpdated', {\n            channel: channel,\n            threadInfoUpdateEvent: threadInfoUpdateEvent\n          });\n          messagesDispatcher({\n            type: ON_MESSAGE_THREAD_INFO_UPDATED,\n            payload: {\n              channel: channel,\n              event: threadInfoUpdateEvent\n            }\n          });\n        },\n        onMessageDeleted: function onMessageDeleted(channel, messageId) {\n          logger.info('Channel | useHandleChannelEvents: onMessageDeleted', {\n            channel: channel,\n            messageId: messageId\n          });\n          setQuoteMessage(null);\n          messagesDispatcher({\n            type: ON_MESSAGE_DELETED,\n            payload: messageId\n          });\n        },\n        onReactionUpdated: function onReactionUpdated(channel, reactionEvent) {\n          logger.info('Channel | useHandleChannelEvents: onReactionUpdated', {\n            channel: channel,\n            reactionEvent: reactionEvent\n          });\n          messagesDispatcher({\n            type: ON_REACTION_UPDATED,\n            payload: reactionEvent\n          });\n        },\n        onChannelChanged: function onChannelChanged(channel) {\n          if (compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl)) {\n            logger.info('Channel | useHandleChannelEvents: onChannelChanged', channel);\n            messagesDispatcher({\n              type: SET_CURRENT_CHANNEL,\n              payload: channel\n            });\n          }\n        },\n        onChannelFrozen: function onChannelFrozen(channel) {\n          if (compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl)) {\n            logger.info('Channel | useHandleChannelEvents: onChannelFrozen', channel);\n            messagesDispatcher({\n              type: SET_CURRENT_CHANNEL,\n              payload: channel\n            });\n          }\n        },\n        onChannelUnfrozen: function onChannelUnfrozen(channel) {\n          if (compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl)) {\n            logger.info('Channel | useHandleChannelEvents: onChannelUnFrozen', channel);\n            messagesDispatcher({\n              type: SET_CURRENT_CHANNEL,\n              payload: channel\n            });\n          }\n        },\n        onUserMuted: function onUserMuted(channel, user) {\n          if (compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl)) {\n            logger.info('Channel | useHandleChannelEvents: onUserMuted', {\n              channel: channel,\n              user: user\n            });\n            messagesDispatcher({\n              type: SET_CURRENT_CHANNEL,\n              payload: channel\n            });\n          }\n        },\n        onUserUnmuted: function onUserUnmuted(channel, user) {\n          if (compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl)) {\n            logger.info('Channel | useHandleChannelEvents: onUserUnmuted', {\n              channel: channel,\n              user: user\n            });\n            messagesDispatcher({\n              type: SET_CURRENT_CHANNEL,\n              payload: channel\n            });\n          }\n        },\n        onUserBanned: function onUserBanned(channel, user) {\n          var _sdk$currentUser;\n          if (compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl) && (user === null || user === void 0 ? void 0 : user.userId) === (sdk === null || sdk === void 0 ? void 0 : (_sdk$currentUser = sdk.currentUser) === null || _sdk$currentUser === void 0 ? void 0 : _sdk$currentUser.userId)) {\n            logger.info('Channel | useHandleChannelEvents: onUserBanned', {\n              channel: channel,\n              user: user\n            });\n            messagesDispatcher({\n              type: SET_CURRENT_CHANNEL,\n              payload: null\n            });\n          }\n        },\n        onOperatorUpdated: function onOperatorUpdated(channel, users) {\n          if (compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl)) {\n            logger.info('Channel | useHandleChannelEvents: onOperatorUpdated', {\n              channel: channel,\n              users: users\n            });\n            messagesDispatcher({\n              type: SET_CURRENT_CHANNEL,\n              payload: channel\n            });\n          }\n        },\n        onUserLeft: function onUserLeft(channel, user) {\n          if (compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl)) {\n            logger.info('Channel | useHandleChannelEvents: onUserLeft', {\n              channel: channel,\n              user: user\n            });\n            if ((user === null || user === void 0 ? void 0 : user.userId) === currentUserId) {\n              messagesDispatcher({\n                type: SET_CURRENT_CHANNEL,\n                payload: null\n              });\n            }\n          }\n        }\n      };\n      logger.info('Channel | useHandleChannelEvents: Setup event handler', {\n        channelHandlerId: channelHandlerId,\n        channelHandler: channelHandler\n      });\n      // Add this group channel handler to the Sendbird chat instance\n      (_sdk$groupChannel = sdk.groupChannel) === null || _sdk$groupChannel === void 0 ? void 0 : _sdk$groupChannel.addGroupChannelHandler(channelHandlerId, new GroupChannelHandler(channelHandler));\n    }\n    return function () {\n      var _sdk$groupChannel2;\n      if (sdk !== null && sdk !== void 0 && (_sdk$groupChannel2 = sdk.groupChannel) !== null && _sdk$groupChannel2 !== void 0 && _sdk$groupChannel2.removeGroupChannelHandler) {\n        logger.info('Channel | useHandleChannelEvents: Removing message reciver handler', channelHandlerId);\n        sdk.groupChannel.removeGroupChannelHandler(channelHandlerId);\n      } else if (sdk !== null && sdk !== void 0 && sdk.groupChannel) {\n        logger.error('Channel | useHandleChannelEvents: Not found the removeGroupChannelHandler');\n      }\n    };\n  }, [currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.url, sdkInit]);\n}\nfunction useSetChannel(_ref, _ref2) {\n  var channelUrl = _ref.channelUrl,\n    sdkInit = _ref.sdkInit,\n    disableMarkAsRead = _ref.disableMarkAsRead;\n  var messagesDispatcher = _ref2.messagesDispatcher,\n    sdk = _ref2.sdk,\n    logger = _ref2.logger,\n    markAsReadScheduler = _ref2.markAsReadScheduler;\n  useEffect(function () {\n    if (channelUrl && sdkInit && sdk && sdk.groupChannel) {\n      logger.info('Channel | useSetChannel fetching channel', channelUrl);\n      sdk.groupChannel.getChannel(channelUrl).then(function (groupChannel) {\n        logger.info('Channel | useSetChannel fetched channel', groupChannel);\n        messagesDispatcher({\n          type: SET_CURRENT_CHANNEL,\n          payload: groupChannel\n        });\n        logger.info('Channel: Mark as read', groupChannel);\n        if (!disableMarkAsRead) {\n          markAsReadScheduler.push(groupChannel);\n        }\n      }).catch(function (e) {\n        logger.warning('Channel | useSetChannel fetch channel failed', {\n          channelUrl: channelUrl,\n          e: e\n        });\n        messagesDispatcher({\n          type: SET_CHANNEL_INVALID\n        });\n      });\n      sdk.getAllEmoji().then(function (emojiContainer_) {\n        logger.info('Channel: Getting emojis success', emojiContainer_);\n        messagesDispatcher({\n          type: SET_EMOJI_CONTAINER,\n          payload: emojiContainer_\n        });\n      }).catch(function (err) {\n        logger.error('Channel: Getting emojis failed', err);\n      });\n      sdk.getAllEmoji();\n    }\n  }, [channelUrl, sdkInit]);\n}\nfunction useInitialMessagesFetch(_ref, _ref2) {\n  var currentGroupChannel = _ref.currentGroupChannel,\n    userFilledMessageListQuery = _ref.userFilledMessageListQuery,\n    initialTimeStamp = _ref.initialTimeStamp,\n    replyType = _ref.replyType;\n  var logger = _ref2.logger,\n    scrollRef = _ref2.scrollRef,\n    messagesDispatcher = _ref2.messagesDispatcher;\n  var channelUrl = currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.url;\n  useEffect(function () {\n    logger.info('Channel useInitialMessagesFetch: Setup started', currentGroupChannel);\n    messagesDispatcher({\n      type: RESET_MESSAGES,\n      payload: null\n    });\n    if (currentGroupChannel && currentGroupChannel !== null && currentGroupChannel !== void 0 && currentGroupChannel.getMessagesByTimestamp) {\n      var messageListParams = {};\n      messageListParams.prevResultSize = PREV_RESULT_SIZE;\n      if (initialTimeStamp) {\n        messageListParams.nextResultSize = NEXT_RESULT_SIZE;\n      }\n      messageListParams.isInclusive = true;\n      messageListParams.includeReactions = true;\n      messageListParams.includeMetaArray = true;\n      if (replyType && (replyType === 'QUOTE_REPLY' || replyType === 'THREAD')) {\n        messageListParams.includeThreadInfo = true;\n        messageListParams.includeParentMessageInfo = true;\n        messageListParams.replyType = ReplyType.ONLY_REPLY_TO_CHANNEL;\n      }\n      if (userFilledMessageListQuery) {\n        Object.keys(userFilledMessageListQuery).forEach(function (key) {\n          messageListParams[key] = userFilledMessageListQuery[key];\n        });\n      }\n      if (replyType && (replyType === 'QUOTE_REPLY' || replyType === 'THREAD') || userFilledMessageListQuery) {\n        logger.info('Channel useInitialMessagesFetch: Setup messageListParams', messageListParams);\n        messagesDispatcher({\n          type: MESSAGE_LIST_PARAMS_CHANGED,\n          payload: messageListParams\n        });\n      }\n      logger.info('Channel: Fetching messages', {\n        currentGroupChannel: currentGroupChannel,\n        userFilledMessageListQuery: userFilledMessageListQuery\n      });\n      messagesDispatcher({\n        type: FETCH_INITIAL_MESSAGES_START,\n        payload: null\n      });\n      currentGroupChannel.getMessagesByTimestamp(initialTimeStamp || new Date().getTime(), messageListParams).then(function (messages) {\n        messagesDispatcher({\n          type: FETCH_INITIAL_MESSAGES_SUCCESS,\n          payload: {\n            currentGroupChannel: currentGroupChannel,\n            messages: messages\n          }\n        });\n      }).catch(function (error) {\n        logger.error('Channel: Fetching messages failed', error);\n        messagesDispatcher({\n          type: FETCH_INITIAL_MESSAGES_FAILURE,\n          payload: {\n            currentGroupChannel: currentGroupChannel\n          }\n        });\n      }).finally(function () {\n        if (!initialTimeStamp) {\n          setTimeout(function () {\n            return scrollIntoLast(0, scrollRef);\n          });\n        } else {\n          setTimeout(function () {\n            scrollToRenderedMessage(scrollRef, initialTimeStamp);\n          }, 500);\n        }\n      });\n    }\n  }, [channelUrl, userFilledMessageListQuery, initialTimeStamp]);\n  /**\n   * Note - useEffect(() => {}, [currentGroupChannel])\n   * was buggy, that is why we did\n   * const channelUrl = currentGroupChannel && currentGroupChannel.url;\n   * useEffect(() => {}, [channelUrl])\n   * Again, this hook is supposed to execute when currentGroupChannel changes\n   * The 'channelUrl' here is not the same memory reference from Conversation.props\n   */\n}\n\nfunction useHandleReconnect(_ref, _ref2) {\n  var isOnline = _ref.isOnline,\n    replyType = _ref.replyType,\n    disableMarkAsRead = _ref.disableMarkAsRead;\n  var logger = _ref2.logger,\n    sdk = _ref2.sdk,\n    scrollRef = _ref2.scrollRef,\n    currentGroupChannel = _ref2.currentGroupChannel,\n    messagesDispatcher = _ref2.messagesDispatcher,\n    markAsReadScheduler = _ref2.markAsReadScheduler,\n    userFilledMessageListQuery = _ref2.userFilledMessageListQuery;\n  useEffect(function () {\n    var wasOffline = !isOnline;\n    return function () {\n      // state changed from offline to online\n      if (wasOffline && currentGroupChannel !== null && currentGroupChannel !== void 0 && currentGroupChannel.url) {\n        var _sdk$appInfo, _sdk$groupChannel;\n        logger.info('Refreshing conversation state');\n        var isReactionEnabled = (sdk === null || sdk === void 0 ? void 0 : (_sdk$appInfo = sdk.appInfo) === null || _sdk$appInfo === void 0 ? void 0 : _sdk$appInfo.useReaction) || false;\n        var messageListParams = {\n          prevResultSize: PREV_RESULT_SIZE,\n          isInclusive: true,\n          includeReactions: isReactionEnabled,\n          nextResultSize: NEXT_RESULT_SIZE\n        };\n        if (replyType && replyType === 'QUOTE_REPLY') {\n          messageListParams.includeThreadInfo = true;\n          messageListParams.includeParentMessageInfo = true;\n          messageListParams.replyType = ReplyType.ONLY_REPLY_TO_CHANNEL;\n        }\n        if (userFilledMessageListQuery) {\n          Object.keys(userFilledMessageListQuery).forEach(function (key) {\n            messageListParams[key] = userFilledMessageListQuery[key];\n          });\n        }\n        logger.info('Channel: Fetching messages', {\n          currentGroupChannel: currentGroupChannel,\n          userFilledMessageListQuery: userFilledMessageListQuery\n        });\n        messagesDispatcher({\n          type: FETCH_INITIAL_MESSAGES_START,\n          payload: null\n        });\n        sdk === null || sdk === void 0 ? void 0 : (_sdk$groupChannel = sdk.groupChannel) === null || _sdk$groupChannel === void 0 ? void 0 : _sdk$groupChannel.getChannel(currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.url).then(function (groupChannel) {\n          var lastMessageTime = new Date().getTime();\n          groupChannel.getMessagesByTimestamp(lastMessageTime, messageListParams).then(function (messages) {\n            messagesDispatcher({\n              type: FETCH_INITIAL_MESSAGES_SUCCESS,\n              payload: {\n                currentGroupChannel: currentGroupChannel,\n                messages: messages\n              }\n            });\n            setTimeout(function () {\n              return scrollIntoLast(0, scrollRef);\n            });\n          }).catch(function (error) {\n            logger.error('Channel: Fetching messages failed', error);\n            messagesDispatcher({\n              type: FETCH_INITIAL_MESSAGES_FAILURE,\n              payload: {\n                currentGroupChannel: currentGroupChannel\n              }\n            });\n          });\n          if (!disableMarkAsRead) {\n            markAsReadScheduler.push(currentGroupChannel);\n          }\n        });\n      }\n    };\n  }, [isOnline, replyType]);\n}\nfunction useScrollCallback(_ref, _ref2) {\n  var currentGroupChannel = _ref.currentGroupChannel,\n    oldestMessageTimeStamp = _ref.oldestMessageTimeStamp,\n    userFilledMessageListQuery = _ref.userFilledMessageListQuery,\n    replyType = _ref.replyType;\n  var hasMorePrev = _ref2.hasMorePrev,\n    logger = _ref2.logger,\n    messagesDispatcher = _ref2.messagesDispatcher,\n    sdk = _ref2.sdk;\n  return useCallback(function (cb) {\n    if (!hasMorePrev) {\n      return;\n    }\n    var _sdk$appInfo2 = sdk.appInfo,\n      appInfo = _sdk$appInfo2 === void 0 ? {} : _sdk$appInfo2;\n    var isReactionEnabled = appInfo.useReaction || false;\n    var messageListParams = {\n      prevResultSize: PREV_RESULT_SIZE,\n      isInclusive: true,\n      includeReactions: isReactionEnabled\n    };\n    messageListParams.includeMetaArray = true;\n    if (replyType === 'QUOTE_REPLY' || replyType === 'THREAD') {\n      messageListParams.includeThreadInfo = true;\n      messageListParams.includeParentMessageInfo = true;\n      messageListParams.replyType = ReplyType.ONLY_REPLY_TO_CHANNEL;\n    }\n    if (userFilledMessageListQuery) {\n      Object.keys(userFilledMessageListQuery).forEach(function (key) {\n        messageListParams[key] = userFilledMessageListQuery[key];\n      });\n    }\n    logger.info('Channel: Fetching messages', {\n      currentGroupChannel: currentGroupChannel,\n      userFilledMessageListQuery: userFilledMessageListQuery\n    });\n    currentGroupChannel.getMessagesByTimestamp(oldestMessageTimeStamp || new Date().getTime(), messageListParams).then(function (messages) {\n      messagesDispatcher({\n        type: FETCH_PREV_MESSAGES_SUCCESS,\n        payload: {\n          currentGroupChannel: currentGroupChannel,\n          messages: messages\n        }\n      });\n      cb([messages, null]);\n    }).catch(function (error) {\n      logger.error('Channel: Fetching messages failed', error);\n      messagesDispatcher({\n        type: FETCH_PREV_MESSAGES_FAILURE,\n        payload: {\n          currentGroupChannel: currentGroupChannel\n        }\n      });\n      cb([null, error]);\n    });\n  }, [currentGroupChannel, oldestMessageTimeStamp, replyType]);\n}\nfunction useScrollDownCallback(_ref, _ref2) {\n  var currentGroupChannel = _ref.currentGroupChannel,\n    latestMessageTimeStamp = _ref.latestMessageTimeStamp,\n    userFilledMessageListQuery = _ref.userFilledMessageListQuery,\n    hasMoreNext = _ref.hasMoreNext,\n    replyType = _ref.replyType;\n  var logger = _ref2.logger,\n    messagesDispatcher = _ref2.messagesDispatcher,\n    sdk = _ref2.sdk;\n  return useCallback(function (cb) {\n    if (!hasMoreNext) {\n      return;\n    }\n    var _sdk$appInfo3 = sdk.appInfo,\n      appInfo = _sdk$appInfo3 === void 0 ? {} : _sdk$appInfo3;\n    var isReactionEnabled = appInfo.useReaction || false;\n    var messageListParams = {\n      nextResultSize: NEXT_RESULT_SIZE,\n      isInclusive: true,\n      includeReactions: isReactionEnabled\n    };\n    messageListParams.includeMetaArray = true;\n    if (replyType && (replyType === 'QUOTE_REPLY' || replyType === 'THREAD')) {\n      messageListParams.includeThreadInfo = true;\n      messageListParams.includeParentMessageInfo = true;\n      messageListParams.replyType = ReplyType.ONLY_REPLY_TO_CHANNEL;\n    }\n    if (userFilledMessageListQuery) {\n      Object.keys(userFilledMessageListQuery).forEach(function (key) {\n        messageListParams[key] = userFilledMessageListQuery[key];\n      });\n    }\n    logger.info('Channel: Fetching later messages', {\n      currentGroupChannel: currentGroupChannel,\n      userFilledMessageListQuery: userFilledMessageListQuery\n    });\n    currentGroupChannel.getMessagesByTimestamp(latestMessageTimeStamp || new Date().getTime(), messageListParams).then(function (messages) {\n      messagesDispatcher({\n        type: FETCH_NEXT_MESSAGES_SUCCESS,\n        payload: {\n          currentGroupChannel: currentGroupChannel,\n          messages: messages\n        }\n      });\n      cb([messages, null]);\n    }).catch(function (error) {\n      logger.error('Channel: Fetching later messages failed', error);\n      messagesDispatcher({\n        type: FETCH_NEXT_MESSAGES_FAILURE,\n        payload: {\n          currentGroupChannel: currentGroupChannel\n        }\n      });\n      cb([null, error]);\n    });\n  }, [currentGroupChannel, latestMessageTimeStamp, hasMoreNext, replyType]);\n}\nfunction useDeleteMessageCallback(_ref, _ref2) {\n  var currentGroupChannel = _ref.currentGroupChannel,\n    messagesDispatcher = _ref.messagesDispatcher;\n  var logger = _ref2.logger;\n  return useCallback(function (message) {\n    logger.info('Channel | useDeleteMessageCallback: Deleting message', message);\n    var requestState = message.requestState;\n    return new Promise(function (resolve, reject) {\n      logger.info('Channel | useDeleteMessageCallback: Deleting message requestState:', requestState);\n      // Message is only on local\n      if (requestState === 'failed' || requestState === 'pending') {\n        logger.info('Channel | useDeleteMessageCallback: Deleted message from local:', message);\n        messagesDispatcher({\n          type: ON_MESSAGE_DELETED_BY_REQ_ID,\n          payload: message.reqId\n        });\n        resolve(message);\n      }\n      logger.info('Channel | useDeleteMessageCallback: Deleting message from remote:', requestState);\n      currentGroupChannel.deleteMessage(message).then(function () {\n        logger.info('Channel | useDeleteMessageCallback: Deleting message success!', message);\n        messagesDispatcher({\n          type: ON_MESSAGE_DELETED,\n          payload: message.messageId\n        });\n        resolve(message);\n      }).catch(function (err) {\n        logger.warning('Channel | useDeleteMessageCallback: Deleting message failed!', err);\n        reject(err);\n      });\n    });\n  }, [currentGroupChannel, messagesDispatcher]);\n}\nfunction useUpdateMessageCallback(_ref, _ref2) {\n  var currentGroupChannel = _ref.currentGroupChannel,\n    messagesDispatcher = _ref.messagesDispatcher,\n    onBeforeUpdateUserMessage = _ref.onBeforeUpdateUserMessage,\n    isMentionEnabled = _ref.isMentionEnabled;\n  var logger = _ref2.logger,\n    pubSub = _ref2.pubSub;\n  return useCallback(function (props, callback) {\n    var messageId = props.messageId,\n      message = props.message,\n      mentionedUsers = props.mentionedUsers,\n      mentionTemplate = props.mentionTemplate;\n    var createParamsDefault = function createParamsDefault() {\n      var params = {};\n      params.message = message;\n      if (isMentionEnabled && (mentionedUsers === null || mentionedUsers === void 0 ? void 0 : mentionedUsers.length) > 0) {\n        params.mentionedUsers = mentionedUsers;\n      }\n      if (isMentionEnabled && mentionTemplate) {\n        params.mentionedMessageTemplate = mentionTemplate;\n      } else {\n        params.mentionedMessageTemplate = message;\n      }\n      return params;\n    };\n    var createCustomPrams = onBeforeUpdateUserMessage && typeof onBeforeUpdateUserMessage === 'function';\n    if (createCustomPrams) {\n      logger.info('Channel: creating params using onBeforeUpdateUserMessage', onBeforeUpdateUserMessage);\n    }\n    var params = onBeforeUpdateUserMessage ? onBeforeUpdateUserMessage(message) : createParamsDefault();\n    logger.info('Channel: Updating message!', params);\n    currentGroupChannel.updateUserMessage(messageId, params).then(function (msg, err) {\n      if (callback) {\n        callback(err, msg);\n      }\n      logger.info('Channel: Updating message success!', msg);\n      messagesDispatcher({\n        type: ON_MESSAGE_UPDATED,\n        payload: {\n          channel: currentGroupChannel,\n          message: msg\n        }\n      });\n      pubSub.publish(PUBSUB_TOPICS.UPDATE_USER_MESSAGE, {\n        message: msg,\n        channel: currentGroupChannel\n      });\n    });\n  }, [currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.url, messagesDispatcher, onBeforeUpdateUserMessage]);\n}\nfunction useResendMessageCallback(_ref, _ref2) {\n  var currentGroupChannel = _ref.currentGroupChannel,\n    messagesDispatcher = _ref.messagesDispatcher;\n  var logger = _ref2.logger;\n  return useCallback(function (failedMessage) {\n    logger.info('Channel: Resending message has started', failedMessage);\n    var messageType = failedMessage.messageType,\n      file = failedMessage.file;\n    if (failedMessage !== null && failedMessage !== void 0 && failedMessage.isResendable) {\n      // Move the logic setting sendingStatus to pending into the reducer\n      // eslint-disable-next-line no-param-reassign\n      failedMessage.requestState = 'pending';\n      // eslint-disable-next-line no-param-reassign\n      failedMessage.sendingStatus = 'pending';\n      messagesDispatcher({\n        type: RESEND_MESSAGEGE_START,\n        payload: failedMessage\n      });\n\n      // userMessage\n      if (messageType === 'user') {\n        currentGroupChannel.resendUserMessage(failedMessage).then(function (message) {\n          logger.info('Channel: Resending message success!', message);\n          messagesDispatcher({\n            type: SEND_MESSAGEGE_SUCESS,\n            payload: message\n          });\n        }).catch(function (e) {\n          logger.warning('Channel: Resending message failed!', e);\n          // eslint-disable-next-line no-param-reassign\n          failedMessage.requestState = 'failed';\n          // eslint-disable-next-line no-param-reassign\n          failedMessage.sendingStatus = 'failed';\n          messagesDispatcher({\n            type: SEND_MESSAGEGE_FAILURE,\n            payload: failedMessage\n          });\n        });\n\n        // eslint-disable-next-line no-param-reassign\n        failedMessage.requestState = 'pending';\n        // eslint-disable-next-line no-param-reassign\n        failedMessage.sendingStatus = 'pending';\n        messagesDispatcher({\n          type: RESEND_MESSAGEGE_START,\n          payload: failedMessage\n        });\n        return;\n      }\n      if (messageType === 'file') {\n        currentGroupChannel.resendFileMessage(failedMessage, file).then(function (message) {\n          logger.info('Channel: Resending file message success!', message);\n          messagesDispatcher({\n            type: SEND_MESSAGEGE_SUCESS,\n            payload: message\n          });\n        }).catch(function (e) {\n          logger.warning('Channel: Resending file message failed!', e);\n          // eslint-disable-next-line no-param-reassign\n          failedMessage.requestState = 'failed';\n          // eslint-disable-next-line no-param-reassign\n          failedMessage.sendingStatus = 'failed';\n          messagesDispatcher({\n            type: SEND_MESSAGEGE_FAILURE,\n            payload: failedMessage\n          });\n        });\n\n        // eslint-disable-next-line no-param-reassign\n        failedMessage.requestState = 'pending';\n        // eslint-disable-next-line no-param-reassign\n        failedMessage.sendingStatus = 'pending';\n        messagesDispatcher({\n          type: RESEND_MESSAGEGE_START,\n          payload: failedMessage\n        });\n      }\n    } else {\n      // to alert user on console\n      // eslint-disable-next-line no-console\n      console.error('Message is not resendable');\n      logger.warning('Message is not resendable', failedMessage);\n    }\n  }, [currentGroupChannel, messagesDispatcher]);\n}\nfunction useSendMessageCallback(_ref, _ref2) {\n  var isMentionEnabled = _ref.isMentionEnabled,\n    currentGroupChannel = _ref.currentGroupChannel,\n    onBeforeSendUserMessage = _ref.onBeforeSendUserMessage;\n  var logger = _ref2.logger,\n    pubSub = _ref2.pubSub,\n    scrollRef = _ref2.scrollRef,\n    messagesDispatcher = _ref2.messagesDispatcher;\n  var messageInputRef = useRef(null);\n  var sendMessage = useCallback(function (props) {\n    var _props$quoteMessage = props.quoteMessage,\n      quoteMessage = _props$quoteMessage === void 0 ? null : _props$quoteMessage,\n      message = props.message,\n      mentionTemplate = props.mentionTemplate,\n      mentionedUsers = props.mentionedUsers;\n    var createParamsDefault = function createParamsDefault() {\n      var params = {};\n      params.message = message;\n      // if (isMentionEnabled && mentionedUserIds?.length > 0) {\n      if (isMentionEnabled && (mentionedUsers === null || mentionedUsers === void 0 ? void 0 : mentionedUsers.length) > 0) {\n        // params.mentionedUserIds = mentionedUserIds;\n        params.mentionedUsers = mentionedUsers;\n      }\n      // if (isMentionEnabled && mentionTemplate && mentionedUserIds?.length > 0) {\n      if (isMentionEnabled && mentionTemplate && (mentionedUsers === null || mentionedUsers === void 0 ? void 0 : mentionedUsers.length) > 0) {\n        params.mentionedMessageTemplate = mentionTemplate;\n      }\n      if (quoteMessage) {\n        params.isReplyToChannel = true;\n        params.parentMessageId = quoteMessage.messageId;\n      }\n      return params;\n    };\n    var createCustomPrams = onBeforeSendUserMessage && typeof onBeforeSendUserMessage === 'function';\n    if (createCustomPrams) {\n      logger.info('Channel: creating params using onBeforeSendUserMessage', onBeforeSendUserMessage);\n    }\n    var params = onBeforeSendUserMessage ? onBeforeSendUserMessage(message, quoteMessage) : createParamsDefault();\n    logger.info('Channel: Sending message has started', params);\n    currentGroupChannel.sendUserMessage(params).onPending(function (pendingMsg) {\n      pubSub.publish(PUBSUB_TOPICS.SEND_MESSAGE_START, {\n        /* pubSub is used instead of messagesDispatcher\n          to avoid redundantly calling `messageActionTypes.SEND_MESSAGEGE_START` */\n        message: pendingMsg,\n        channel: currentGroupChannel\n      });\n      setTimeout(function () {\n        return scrollIntoLast(0, scrollRef);\n      });\n    }).onFailed(function (err, msg) {\n      logger.warning('Channel: Sending message failed!', {\n        message: msg,\n        error: err\n      });\n      messagesDispatcher({\n        type: SEND_MESSAGEGE_FAILURE,\n        payload: msg\n      });\n    }).onSucceeded(function (msg) {\n      logger.info('Channel: Sending message success!', msg);\n      messagesDispatcher({\n        type: SEND_MESSAGEGE_SUCESS,\n        payload: msg\n      });\n    });\n  }, [currentGroupChannel, onBeforeSendUserMessage]);\n  return [messageInputRef, sendMessage];\n}\nfunction useSendFileMessageCallback(_ref, _ref2) {\n  var currentGroupChannel = _ref.currentGroupChannel,\n    onBeforeSendFileMessage = _ref.onBeforeSendFileMessage,\n    _ref$imageCompression = _ref.imageCompression,\n    imageCompression = _ref$imageCompression === void 0 ? {} : _ref$imageCompression;\n  var logger = _ref2.logger,\n    pubSub = _ref2.pubSub,\n    scrollRef = _ref2.scrollRef,\n    messagesDispatcher = _ref2.messagesDispatcher;\n  var sendMessage = useCallback(function (file) {\n    var quoteMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var compressionRate = imageCompression.compressionRate,\n      resizingWidth = imageCompression.resizingWidth,\n      resizingHeight = imageCompression.resizingHeight;\n    var createCustomParams = onBeforeSendFileMessage && typeof onBeforeSendFileMessage === 'function';\n    var compressibleFileType = file.type === 'image/jpg' || file.type === 'image/png' || file.type === 'image/jpeg';\n    var compressibleRatio = compressionRate > 0 && compressionRate < 1;\n    // pxToNumber returns null if values are invalid\n    var compressibleDiamensions = pxToNumber(resizingWidth) || pxToNumber(resizingHeight);\n    var canCompressImage = compressibleFileType && (compressibleRatio || compressibleDiamensions);\n    var createParamsDefault = function createParamsDefault(file_) {\n      var params = {};\n      params.file = file_;\n      if (quoteMessage) {\n        params.isReplyToChannel = true;\n        params.parentMessageId = quoteMessage.messageId;\n      }\n      return params;\n    };\n    if (canCompressImage) {\n      // Using image compression\n      try {\n        var image = document.createElement('img');\n        image.src = URL.createObjectURL(file);\n        image.onload = function () {\n          URL.revokeObjectURL(image.src);\n          var canvas = document.createElement('canvas');\n          var imageWdith = image.naturalWidth || image.width;\n          var imageHeight = image.naturalHeight || image.height;\n          var targetWidth = pxToNumber(resizingWidth) || imageWdith;\n          var targetHeight = pxToNumber(resizingHeight) || imageHeight;\n\n          // In canvas.toBlob(callback, mimeType, qualityArgument)\n          // qualityArgument doesnt work\n          // so in case compressibleDiamensions are not present, we use ratio\n          if (file.type === 'image/png' && !compressibleDiamensions) {\n            targetWidth *= compressionRate;\n            targetHeight *= compressionRate;\n          }\n          canvas.width = targetWidth;\n          canvas.height = targetHeight;\n          var context = canvas.getContext('2d');\n          context.drawImage(image, 0, 0, targetWidth, targetHeight);\n          context.canvas.toBlob(function (newImageBlob) {\n            var compressedFile = new File([newImageBlob], file.name, {\n              type: file.type\n            });\n            if (createCustomParams) {\n              logger.info('Channel: Creating params using onBeforeSendFileMessage', onBeforeSendFileMessage);\n            }\n            var params = createCustomParams ? onBeforeSendFileMessage(compressedFile, quoteMessage) : createParamsDefault(compressedFile);\n            logger.info('Channel: Uploading file message start!', params);\n            currentGroupChannel.sendFileMessage(params).onPending(function (pendingMessage) {\n              pubSub.publish(PUBSUB_TOPICS.SEND_MESSAGE_START, {\n                /* pubSub is used instead of messagesDispatcher\n                  to avoid redundantly calling `messageActionTypes.SEND_MESSAGEGE_START` */\n                message: _objectSpread2(_objectSpread2({}, pendingMessage), {}, {\n                  url: URL.createObjectURL(compressedFile),\n                  // pending thumbnail message seems to be failed\n                  requestState: 'pending'\n                }),\n                channel: currentGroupChannel\n              });\n              setTimeout(function () {\n                return scrollIntoLast(0, scrollRef);\n              }, 1000);\n            }).onFailed(function (err, failedMessage) {\n              logger.error('Channel: Sending file message failed!', {\n                failedMessage: failedMessage,\n                err: err\n              });\n              // eslint-disable-next-line no-param-reassign\n              failedMessage.localUrl = URL.createObjectURL(compressedFile);\n              // eslint-disable-next-line no-param-reassign\n              failedMessage.file = compressedFile;\n              messagesDispatcher({\n                type: SEND_MESSAGEGE_FAILURE,\n                payload: failedMessage\n              });\n            }).onSucceeded(function (succeededMessage) {\n              logger.info('Channel: Sending file message success!', succeededMessage);\n              messagesDispatcher({\n                type: SEND_MESSAGEGE_SUCESS,\n                payload: succeededMessage\n              });\n            });\n          }, file.type, compressionRate);\n        };\n      } catch (error) {\n        logger.error('Channel: Sending file message failed!', error);\n      }\n    } else {\n      // Not using image compression\n      if (createCustomParams) {\n        logger.info('Channel: creating params using onBeforeSendFileMessage', onBeforeSendFileMessage);\n      }\n      var params = onBeforeSendFileMessage ? onBeforeSendFileMessage(file, quoteMessage) : createParamsDefault(file);\n      logger.info('Channel: Uploading file message start!', params);\n      currentGroupChannel.sendFileMessage(params).onPending(function (pendingMsg) {\n        pubSub.publish(PUBSUB_TOPICS.SEND_MESSAGE_START, {\n          /* pubSub is used instead of messagesDispatcher\n            to avoid redundantly calling `messageActionTypes.SEND_MESSAGEGE_START` */\n          message: _objectSpread2(_objectSpread2({}, pendingMsg), {}, {\n            url: URL.createObjectURL(file),\n            // pending thumbnail message seems to be failed\n            requestState: 'pending'\n          }),\n          channel: currentGroupChannel\n        });\n        setTimeout(function () {\n          return scrollIntoLast(0, scrollRef);\n        }, 1000);\n      }).onFailed(function (error, message) {\n        logger.error('Channel: Sending file message failed!', {\n          message: message,\n          error: error\n        });\n        // eslint-disable-next-line no-param-reassign\n        message.localUrl = URL.createObjectURL(file);\n        // eslint-disable-next-line no-param-reassign\n        message.file = file;\n        messagesDispatcher({\n          type: SEND_MESSAGEGE_FAILURE,\n          payload: message\n        });\n      }).onSucceeded(function (message) {\n        logger.info('Channel: Sending message success!', message);\n        messagesDispatcher({\n          type: SEND_MESSAGEGE_SUCESS,\n          payload: message\n        });\n      });\n    }\n  }, [currentGroupChannel, onBeforeSendFileMessage, imageCompression]);\n  return [sendMessage];\n}\nfunction useToggleReactionCallback(_ref, _ref2) {\n  var currentGroupChannel = _ref.currentGroupChannel;\n  var logger = _ref2.logger;\n  return useCallback(function (message, key, isReacted) {\n    if (isReacted) {\n      currentGroupChannel.deleteReaction(message, key).then(function (res) {\n        logger.info('Delete reaction success', res);\n      }).catch(function (err) {\n        logger.warning('Delete reaction failed', err);\n      });\n      return;\n    }\n    currentGroupChannel.addReaction(message, key).then(function (res) {\n      logger.info('Add reaction success', res);\n    }).catch(function (err) {\n      logger.warning('Add reaction failed', err);\n    });\n  }, [currentGroupChannel]);\n}\nfunction useScrollToMessage(_ref, _ref2) {\n  var setInitialTimeStamp = _ref.setInitialTimeStamp,\n    setAnimatedMessageId = _ref.setAnimatedMessageId,\n    allMessages = _ref.allMessages,\n    scrollRef = _ref.scrollRef;\n  var logger = _ref2.logger;\n  return useCallback(function (createdAt, messageId) {\n    var isPresent = allMessages.find(function (m) {\n      return m.messageId === messageId;\n    });\n    setAnimatedMessageId(null);\n    setTimeout(function () {\n      if (isPresent) {\n        logger.info('Channel: scroll to message - message is present');\n        setAnimatedMessageId(messageId);\n        scrollToRenderedMessage(scrollRef, createdAt);\n      } else {\n        logger.info('Channel: scroll to message - fetching older messages');\n        setInitialTimeStamp(null);\n        setInitialTimeStamp(createdAt);\n        setAnimatedMessageId(messageId);\n      }\n    });\n  }, [setInitialTimeStamp, setAnimatedMessageId, allMessages]);\n}\nvar useSendVoiceMessageCallback = function useSendVoiceMessageCallback(_ref, _ref2) {\n  var currentGroupChannel = _ref.currentGroupChannel,\n    onBeforeSendVoiceMessage = _ref.onBeforeSendVoiceMessage;\n  var logger = _ref2.logger,\n    pubSub = _ref2.pubSub,\n    scrollRef = _ref2.scrollRef,\n    messagesDispatcher = _ref2.messagesDispatcher;\n  var sendMessage = useCallback(function (file, duration, quoteMessage) {\n    var messageParams = onBeforeSendVoiceMessage && typeof onBeforeSendVoiceMessage === 'function' ? onBeforeSendVoiceMessage(file, quoteMessage) : {\n      file: file,\n      fileName: VOICE_MESSAGE_FILE_NAME,\n      mimeType: VOICE_MESSAGE_MIME_TYPE,\n      metaArrays: [new MessageMetaArray({\n        key: META_ARRAY_VOICE_DURATION_KEY,\n        value: [\"\".concat(duration)]\n      }), new MessageMetaArray({\n        key: META_ARRAY_MESSAGE_TYPE_KEY,\n        value: [META_ARRAY_MESSAGE_TYPE_VALUE__VOICE]\n      })]\n    };\n    if (quoteMessage) {\n      messageParams.isReplyToChannel = true;\n      messageParams.parentMessageId = quoteMessage.messageId;\n    }\n    logger.info('Channel: Start sending voice message', messageParams);\n    currentGroupChannel.sendFileMessage(messageParams).onPending(function (pendingMessage) {\n      pubSub.publish(PUBSUB_TOPICS.SEND_MESSAGE_START, {\n        /* pubSub is used instead of messagesDispatcher\n          to avoid redundantly calling `messageActionTypes.SEND_MESSAGEGE_START` */\n        message: pendingMessage,\n        channel: currentGroupChannel\n      });\n      setTimeout(function () {\n        return scrollIntoLast(0, scrollRef);\n      }, 1000);\n    }).onFailed(function (err, failedMessage) {\n      logger.error('Channel: Sending voice message failed!', {\n        failedMessage: failedMessage,\n        err: err\n      });\n      messagesDispatcher({\n        type: SEND_MESSAGEGE_FAILURE,\n        payload: failedMessage\n      });\n    }).onSucceeded(function (succeededMessage) {\n      logger.info('Channel: Sending voice message success!', succeededMessage);\n      messagesDispatcher({\n        type: SEND_MESSAGEGE_SUCESS,\n        payload: succeededMessage\n      });\n    });\n  }, [currentGroupChannel, onBeforeSendVoiceMessage]);\n  return [sendMessage];\n};\nvar ThreadReplySelectType = /*#__PURE__*/function (ThreadReplySelectType) {\n  ThreadReplySelectType[\"PARENT\"] = \"PARENT\";\n  ThreadReplySelectType[\"THREAD\"] = \"THREAD\";\n  return ThreadReplySelectType;\n}({});\nvar ChannelContext = /*#__PURE__*/React__default.createContext(undefined);\nvar ChannelProvider = function ChannelProvider(props) {\n  var _globalStore$stores, _globalStore$stores$s, _globalStore$stores2, _globalStore$stores2$;\n  var channelUrl = props.channelUrl,\n    children = props.children,\n    isReactionEnabled = props.isReactionEnabled,\n    _props$isMessageGroup = props.isMessageGroupingEnabled,\n    isMessageGroupingEnabled = _props$isMessageGroup === void 0 ? true : _props$isMessageGroup,\n    showSearchIcon = props.showSearchIcon,\n    animatedMessage = props.animatedMessage,\n    highlightedMessage = props.highlightedMessage,\n    startingPoint = props.startingPoint,\n    onBeforeSendUserMessage = props.onBeforeSendUserMessage,\n    onBeforeSendFileMessage = props.onBeforeSendFileMessage,\n    onBeforeUpdateUserMessage = props.onBeforeUpdateUserMessage,\n    onBeforeSendVoiceMessage = props.onBeforeSendVoiceMessage,\n    onChatHeaderActionClick = props.onChatHeaderActionClick,\n    onSearchClick = props.onSearchClick,\n    onBackClick = props.onBackClick,\n    replyType = props.replyType,\n    _props$threadReplySel = props.threadReplySelectType,\n    threadReplySelectType = _props$threadReplySel === void 0 ? ThreadReplySelectType.THREAD : _props$threadReplySel,\n    queries = props.queries,\n    filterMessageList = props.filterMessageList,\n    _props$disableMarkAsR = props.disableMarkAsRead,\n    disableMarkAsRead = _props$disableMarkAsR === void 0 ? false : _props$disableMarkAsR,\n    onReplyInThread = props.onReplyInThread,\n    onQuoteMessageClick = props.onQuoteMessageClick,\n    onMessageAnimated = props.onMessageAnimated,\n    onMessageHighlighted = props.onMessageHighlighted;\n  var globalStore = useSendbirdStateContext();\n  var config = globalStore.config;\n  var pubSub = config.pubSub,\n    logger = config.logger,\n    userId = config.userId,\n    isOnline = config.isOnline,\n    imageCompression = config.imageCompression,\n    isMentionEnabled = config.isMentionEnabled,\n    isVoiceMessageEnabled = config.isVoiceMessageEnabled,\n    onUserProfileMessage = config.onUserProfileMessage,\n    markAsReadScheduler = config.markAsReadScheduler;\n  var sdk = globalStore === null || globalStore === void 0 ? void 0 : (_globalStore$stores = globalStore.stores) === null || _globalStore$stores === void 0 ? void 0 : (_globalStore$stores$s = _globalStore$stores.sdkStore) === null || _globalStore$stores$s === void 0 ? void 0 : _globalStore$stores$s.sdk;\n  var sdkInit = globalStore === null || globalStore === void 0 ? void 0 : (_globalStore$stores2 = globalStore.stores) === null || _globalStore$stores2 === void 0 ? void 0 : (_globalStore$stores2$ = _globalStore$stores2.sdkStore) === null || _globalStore$stores2$ === void 0 ? void 0 : _globalStore$stores2$.initialized;\n  var _useState = useState(startingPoint),\n    _useState2 = _slicedToArray(_useState, 2),\n    initialTimeStamp = _useState2[0],\n    setInitialTimeStamp = _useState2[1];\n  useEffect(function () {\n    setInitialTimeStamp(startingPoint);\n  }, [startingPoint, channelUrl]);\n  var _useState3 = useState(0),\n    _useState4 = _slicedToArray(_useState3, 2),\n    animatedMessageId = _useState4[0],\n    setAnimatedMessageId = _useState4[1];\n  var _useState5 = useState(highlightedMessage),\n    _useState6 = _slicedToArray(_useState5, 2),\n    highLightedMessageId = _useState6[0],\n    setHighLightedMessageId = _useState6[1];\n  useEffect(function () {\n    setHighLightedMessageId(highlightedMessage);\n  }, [highlightedMessage]);\n  var userFilledMessageListQuery = queries === null || queries === void 0 ? void 0 : queries.messageListParams;\n  var _useState7 = useState(null),\n    _useState8 = _slicedToArray(_useState7, 2),\n    quoteMessage = _useState8[0],\n    setQuoteMessage = _useState8[1];\n  var _useReducer = useReducer(reducer, messagesInitialState),\n    _useReducer2 = _slicedToArray(_useReducer, 2),\n    messagesStore = _useReducer2[0],\n    messagesDispatcher = _useReducer2[1];\n  var scrollRef = useRef(null);\n  var allMessages = messagesStore.allMessages,\n    loading = messagesStore.loading,\n    initialized = messagesStore.initialized,\n    unreadSince = messagesStore.unreadSince,\n    isInvalid = messagesStore.isInvalid,\n    currentGroupChannel = messagesStore.currentGroupChannel,\n    hasMorePrev = messagesStore.hasMorePrev,\n    oldestMessageTimeStamp = messagesStore.oldestMessageTimeStamp,\n    hasMoreNext = messagesStore.hasMoreNext,\n    latestMessageTimeStamp = messagesStore.latestMessageTimeStamp,\n    emojiContainer = messagesStore.emojiContainer,\n    readStatus = messagesStore.readStatus;\n  var isSuper = (currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.isSuper) || false;\n  var isBroadcast = (currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.isBroadcast) || false;\n  var usingReaction = getIsReactionEnabled({\n    isBroadcast: isBroadcast,\n    isSuper: isSuper,\n    globalLevel: config === null || config === void 0 ? void 0 : config.isReactionEnabled,\n    moduleLevel: isReactionEnabled\n  });\n  var emojiAllMap = useMemo(function () {\n    return usingReaction ? getAllEmojisMapFromEmojiContainer(emojiContainer) : new Map();\n  }, [emojiContainer]);\n  var nicknamesMap = useMemo(function () {\n    return usingReaction && currentGroupChannel ? getNicknamesMapFromMembers(currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.members) : new Map();\n  }, [currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.members]);\n\n  // Animate message\n  useEffect(function () {\n    if (animatedMessage) {\n      setAnimatedMessageId(animatedMessage);\n    }\n  }, [animatedMessage]);\n\n  // Scrollup is default scroll for channel\n  var onScrollCallback = useScrollCallback({\n    currentGroupChannel: currentGroupChannel,\n    oldestMessageTimeStamp: oldestMessageTimeStamp,\n    userFilledMessageListQuery: userFilledMessageListQuery,\n    replyType: replyType,\n    isVoiceMessageEnabled: isVoiceMessageEnabled\n  }, {\n    hasMorePrev: hasMorePrev,\n    logger: logger,\n    messagesDispatcher: messagesDispatcher,\n    sdk: sdk\n  });\n  var scrollToMessage = useScrollToMessage({\n    setInitialTimeStamp: setInitialTimeStamp,\n    setAnimatedMessageId: setAnimatedMessageId,\n    allMessages: allMessages,\n    scrollRef: scrollRef\n  }, {\n    logger: logger\n  });\n\n  // onScrollDownCallback is added for navigation to different timestamps on messageSearch\n  // hasMorePrev, onScrollCallback -> scroll up(default behavior)\n  // hasMoreNext, onScrollDownCallback -> scroll down\n  var onScrollDownCallback = useScrollDownCallback({\n    currentGroupChannel: currentGroupChannel,\n    latestMessageTimeStamp: latestMessageTimeStamp,\n    userFilledMessageListQuery: userFilledMessageListQuery,\n    hasMoreNext: hasMoreNext,\n    replyType: replyType,\n    isVoiceMessageEnabled: isVoiceMessageEnabled\n  }, {\n    logger: logger,\n    messagesDispatcher: messagesDispatcher,\n    sdk: sdk\n  });\n  var toggleReaction = useToggleReactionCallback({\n    currentGroupChannel: currentGroupChannel\n  }, {\n    logger: logger\n  });\n\n  // to create message-datasource\n  // this hook sets currentGroupChannel asynchronously\n  useSetChannel({\n    channelUrl: channelUrl,\n    sdkInit: sdkInit,\n    disableMarkAsRead: disableMarkAsRead\n  }, {\n    messagesDispatcher: messagesDispatcher,\n    sdk: sdk,\n    logger: logger,\n    markAsReadScheduler: markAsReadScheduler\n  });\n\n  // to set quote message as null\n  useEffect(function () {\n    setQuoteMessage(null);\n  }, [channelUrl]);\n\n  // Hook to handle ChannelEvents and send values to useReducer using messagesDispatcher\n  useHandleChannelEvents({\n    currentGroupChannel: currentGroupChannel,\n    sdkInit: sdkInit,\n    currentUserId: userId,\n    disableMarkAsRead: disableMarkAsRead\n  }, {\n    messagesDispatcher: messagesDispatcher,\n    sdk: sdk,\n    logger: logger,\n    scrollRef: scrollRef,\n    setQuoteMessage: setQuoteMessage\n  });\n\n  // hook that fetches messages when channel changes\n  // to be clear here useGetChannel sets currentGroupChannel\n  // and useInitialMessagesFetch executes when currentGroupChannel changes\n  // p.s This one executes on initialTimeStamp change too\n  useInitialMessagesFetch({\n    currentGroupChannel: currentGroupChannel,\n    userFilledMessageListQuery: userFilledMessageListQuery,\n    initialTimeStamp: initialTimeStamp,\n    latestMessageTimeStamp: latestMessageTimeStamp,\n    replyType: replyType,\n    isVoiceMessageEnabled: isVoiceMessageEnabled\n  }, {\n    logger: logger,\n    scrollRef: scrollRef,\n    messagesDispatcher: messagesDispatcher\n  });\n\n  // handles API calls from withSendbird\n  useEffect(function () {\n    var subscriber = pubSubHandler({\n      channelUrl: channelUrl,\n      pubSub: pubSub,\n      dispatcher: messagesDispatcher,\n      scrollRef: scrollRef\n    });\n    return function () {\n      pubSubHandleRemover(subscriber);\n    };\n  }, [channelUrl, sdkInit]);\n\n  // handling connection breaks\n  useHandleReconnect({\n    isOnline: isOnline,\n    replyType: replyType,\n    disableMarkAsRead: disableMarkAsRead\n  }, {\n    logger: logger,\n    sdk: sdk,\n    scrollRef: scrollRef,\n    currentGroupChannel: currentGroupChannel,\n    messagesDispatcher: messagesDispatcher,\n    userFilledMessageListQuery: userFilledMessageListQuery,\n    markAsReadScheduler: markAsReadScheduler\n  });\n\n  // callbacks for Message CURD actions\n  var deleteMessage = useDeleteMessageCallback({\n    currentGroupChannel: currentGroupChannel,\n    messagesDispatcher: messagesDispatcher\n  }, {\n    logger: logger\n  });\n  var updateMessage = useUpdateMessageCallback({\n    currentGroupChannel: currentGroupChannel,\n    messagesDispatcher: messagesDispatcher,\n    onBeforeUpdateUserMessage: onBeforeUpdateUserMessage,\n    isMentionEnabled: isMentionEnabled\n  }, {\n    logger: logger,\n    pubSub: pubSub\n  });\n  var resendMessage = useResendMessageCallback({\n    currentGroupChannel: currentGroupChannel,\n    messagesDispatcher: messagesDispatcher\n  }, {\n    logger: logger\n  });\n  var _useSendMessageCallba = useSendMessageCallback({\n      currentGroupChannel: currentGroupChannel,\n      onBeforeSendUserMessage: onBeforeSendUserMessage,\n      isMentionEnabled: isMentionEnabled\n    }, {\n      logger: logger,\n      pubSub: pubSub,\n      scrollRef: scrollRef,\n      messagesDispatcher: messagesDispatcher\n    }),\n    _useSendMessageCallba2 = _slicedToArray(_useSendMessageCallba, 2),\n    messageInputRef = _useSendMessageCallba2[0],\n    sendMessage = _useSendMessageCallba2[1];\n  var _useSendFileMessageCa = useSendFileMessageCallback({\n      currentGroupChannel: currentGroupChannel,\n      onBeforeSendFileMessage: onBeforeSendFileMessage,\n      imageCompression: imageCompression\n    }, {\n      logger: logger,\n      pubSub: pubSub,\n      scrollRef: scrollRef,\n      messagesDispatcher: messagesDispatcher\n    }),\n    _useSendFileMessageCa2 = _slicedToArray(_useSendFileMessageCa, 1),\n    sendFileMessage = _useSendFileMessageCa2[0];\n  var _useSendVoiceMessageC = useSendVoiceMessageCallback({\n      currentGroupChannel: currentGroupChannel,\n      onBeforeSendVoiceMessage: onBeforeSendVoiceMessage\n    }, {\n      logger: logger,\n      pubSub: pubSub,\n      scrollRef: scrollRef,\n      messagesDispatcher: messagesDispatcher\n    }),\n    _useSendVoiceMessageC2 = _slicedToArray(_useSendVoiceMessageC, 1),\n    sendVoiceMessage = _useSendVoiceMessageC2[0];\n  return /*#__PURE__*/React__default.createElement(ChannelContext.Provider, {\n    value: {\n      // props\n      channelUrl: channelUrl,\n      isReactionEnabled: usingReaction,\n      isMessageGroupingEnabled: isMessageGroupingEnabled,\n      showSearchIcon: showSearchIcon,\n      highlightedMessage: highlightedMessage,\n      startingPoint: startingPoint,\n      onBeforeSendUserMessage: onBeforeSendUserMessage,\n      onBeforeSendFileMessage: onBeforeSendFileMessage,\n      onBeforeUpdateUserMessage: onBeforeUpdateUserMessage,\n      onChatHeaderActionClick: onChatHeaderActionClick,\n      onSearchClick: onSearchClick,\n      onBackClick: onBackClick,\n      replyType: replyType,\n      threadReplySelectType: threadReplySelectType,\n      queries: queries,\n      filterMessageList: filterMessageList,\n      disableMarkAsRead: disableMarkAsRead,\n      onReplyInThread: onReplyInThread,\n      onQuoteMessageClick: onQuoteMessageClick,\n      onMessageAnimated: onMessageAnimated,\n      onMessageHighlighted: onMessageHighlighted,\n      // messagesStore\n      allMessages: allMessages,\n      loading: loading,\n      initialized: initialized,\n      unreadSince: unreadSince,\n      isInvalid: isInvalid,\n      currentGroupChannel: currentGroupChannel,\n      hasMorePrev: hasMorePrev,\n      hasMoreNext: hasMoreNext,\n      oldestMessageTimeStamp: oldestMessageTimeStamp,\n      latestMessageTimeStamp: latestMessageTimeStamp,\n      emojiContainer: emojiContainer,\n      readStatus: readStatus,\n      // utils\n      scrollToMessage: scrollToMessage,\n      quoteMessage: quoteMessage,\n      setQuoteMessage: setQuoteMessage,\n      deleteMessage: deleteMessage,\n      updateMessage: updateMessage,\n      resendMessage: resendMessage,\n      messageInputRef: messageInputRef,\n      sendMessage: sendMessage,\n      sendFileMessage: sendFileMessage,\n      sendVoiceMessage: sendVoiceMessage,\n      initialTimeStamp: initialTimeStamp,\n      messageActionTypes: messageActionTypes,\n      messagesDispatcher: messagesDispatcher,\n      setInitialTimeStamp: setInitialTimeStamp,\n      setAnimatedMessageId: setAnimatedMessageId,\n      setHighLightedMessageId: setHighLightedMessageId,\n      animatedMessageId: animatedMessageId,\n      highLightedMessageId: highLightedMessageId,\n      nicknamesMap: nicknamesMap,\n      emojiAllMap: emojiAllMap,\n      onScrollCallback: onScrollCallback,\n      onScrollDownCallback: onScrollDownCallback,\n      scrollRef: scrollRef,\n      toggleReaction: toggleReaction\n    }\n  }, /*#__PURE__*/React__default.createElement(UserProfileProvider, {\n    disableUserProfile: props === null || props === void 0 ? void 0 : props.disableUserProfile,\n    renderUserProfile: props === null || props === void 0 ? void 0 : props.renderUserProfile,\n    onUserProfileMessage: onUserProfileMessage\n  }, children));\n};\nvar useChannelContext = function useChannelContext() {\n  return React__default.useContext(ChannelContext);\n};\nexport { ChannelProvider as C, ThreadReplySelectType as T, isDisabledBecauseFrozen as a, isDisabledBecauseMuted as b, compareMessagesForGrouping as c, isOperator as d, getIsReactionEnabled as g, isAboutSame as i, useChannelContext as u };","map":{"version":3,"mappings":"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","names":["RESET_MESSAGES","FETCH_INITIAL_MESSAGES_START","FETCH_INITIAL_MESSAGES_SUCCESS","FETCH_INITIAL_MESSAGES_FAILURE","FETCH_PREV_MESSAGES_SUCCESS","FETCH_PREV_MESSAGES_FAILURE","FETCH_NEXT_MESSAGES_SUCCESS","FETCH_NEXT_MESSAGES_FAILURE","SEND_MESSAGEGE_START","SEND_MESSAGEGE_SUCESS","SEND_MESSAGEGE_FAILURE","RESEND_MESSAGEGE_START","ON_MESSAGE_RECEIVED","ON_MESSAGE_UPDATED","ON_MESSAGE_THREAD_INFO_UPDATED","ON_MESSAGE_DELETED","ON_MESSAGE_DELETED_BY_REQ_ID","SET_CURRENT_CHANNEL","SET_CHANNEL_INVALID","MARK_AS_READ","ON_REACTION_UPDATED","SET_EMOJI_CONTAINER","MESSAGE_LIST_PARAMS_CHANGED","UNDEFINED","getSendingMessageStatus","SUCCEEDED","FAILED","PENDING","scrollToRenderedMessage","scrollRef","initialTimeStamp","container","current","element","querySelectorAll","_container$querySelec","containerHeight","offsetHeight","elementHeight","elementOffset","scrollTop","offsetTop","scrollIntoLast","initialTry","MAX_TRIES","currentTry","scrollDOM","document","querySelector","scrollHeight","error","setTimeout","pubSubHandleRemover","subscriber","forEach","s","remove","pubSubHandler","_ref","channelUrl","pubSub","dispatcher","Map","subscribe","set","topics","SEND_USER_MESSAGE","msg","channel","message","url","type","channelActions","payload","SEND_MESSAGE_START","SEND_FILE_MESSAGE","UPDATE_USER_MESSAGE","fromSelector","DELETE_MESSAGE","messageId","isOperator","groupChannel","myRole","isDisabledBecauseFrozen","isFrozen","isDisabledBecauseMuted","myMutedState","getAllEmojisMapFromEmojiContainer","emojiContainer","emojiCategories","allEmojisMap","categoryIndex","length","emojis","emojiIndex","key","getNicknamesMapFromMembers","members","nicknamesMap","memberIndex","userId","nickname","getUniqueListBy","arr","map","item","values","getUniqueListByMessageId","sortByCreatedAt","messages","sort","a","b","createdAt","mergeAndSortMessages","oldMessages","newMessages","lastOldMessage","firstNewMessage","mergedMessages","unique","getMessageCreatedAt","format","isSameGroup","comparingMessage","currentChannel","messageType","sender","_message$sender","_comparingMessage$sen","sendingStatus","_message$sender2","_comparingMessage$sen2","isReadMessage","compareMessagesForGrouping","prevMessage","currMessage","nextMessage","replyType","threadInfo","isAcceptable","passUnsuccessfullMessages","allMessages","newMessage","lastIndexOfSucceededMessage","isAdminMessage","lastIndexOf","splice","pxToNumber","px","parsed","Number","parseFloat","isNaN","isAboutSame","Math","abs","getIsReactionEnabled","isBroadcast","isSuper","globalLevel","moduleLevel","initialized","loading","currentGroupChannel","hasMorePrev","oldestMessageTimeStamp","hasMoreNext","latestMessageTimeStamp","unreadSince","isInvalid","messageListParams","getOldestMessageTimeStamp","oldestMessage","getLatestMessageTimeStamp","latestMessage","reducer","state","action","actionTypes","filter","m","_state$currentGroupCh","_state$currentGroupCh2","PREV_RESULT_SIZE","duplicatedMessageIds","updatedOldMessages","duplicatedMessage","find","compareIds","push","updatedAt","filteredNewMessages","_state$currentGroupCh3","NEXT_RESULT_SIZE","sortedMessages","_state$currentGroupCh4","filteredMessages","reqId","pendingIndex","findIndex","slice","failed","currentGroupChannelUrl","some","filterMessageListParams","senderMember","profileUrl","friendName","member","Date","_state$currentGroupCh5","parentMessageId","parentMessage","event","targetMessageId","_state$currentGroupCh6","_state$currentGroupCh7","_action$payload","_action$payload$chann","applyReactionEvent","DELIVERY_RECIPT","useHandleChannelEvents","sdkInit","currentUserId","disableMarkAsRead","sdk","_ref2","logger","setQuoteMessage","messagesDispatcher","store","useSendbirdStateContext","config","markAsReadScheduler","markAsDeliveredScheduler","disableMarkAsDelivered","canSetMarkAsDelivered","stores","sdkStore","_store$stores$sdkStor","appInfo","_store$stores$sdkStor2","premiumFeatureList","_store$stores$sdkStor3","feature","useEffect","channelHandlerId","uuidv4","channelHandler","onMessageReceived","scrollToEnd","info","messageActions","getElementById","_document$getElementB","childElementCount","_document$getElementB2","warning","onUnreadMemberStatusUpdated","onUndeliveredMemberStatusUpdated","onMessageUpdated","onThreadInfoUpdated","threadInfoUpdateEvent","onMessageDeleted","onReactionUpdated","reactionEvent","onChannelChanged","onChannelFrozen","onChannelUnfrozen","onUserMuted","user","onUserUnmuted","onUserBanned","currentUser","_sdk$currentUser","onOperatorUpdated","users","onUserLeft","_sdk$groupChannel","addGroupChannelHandler","GroupChannelHandler","_sdk$groupChannel2","removeGroupChannelHandler","useSetChannel","getChannel","then","messageActionTypes","catch","e","getAllEmoji","emojiContainer_","err","useInitialMessagesFetch","userFilledMessageListQuery","getMessagesByTimestamp","prevResultSize","nextResultSize","isInclusive","includeReactions","includeMetaArray","includeThreadInfo","includeParentMessageInfo","ReplyType","ONLY_REPLY_TO_CHANNEL","Object","keys","getTime","finally","utils","useHandleReconnect","isOnline","wasOffline","isReactionEnabled","_sdk$appInfo","useReaction","lastMessageTime","useScrollCallback","useCallback","cb","useScrollDownCallback","useDeleteMessageCallback","requestState","Promise","resolve","reject","deleteMessage","useUpdateMessageCallback","onBeforeUpdateUserMessage","isMentionEnabled","props","callback","mentionedUsers","mentionTemplate","createParamsDefault","params","mentionedMessageTemplate","createCustomPrams","updateUserMessage","publish","useResendMessageCallback","failedMessage","file","isResendable","resendUserMessage","resendFileMessage","console","useSendMessageCallback","onBeforeSendUserMessage","messageInputRef","useRef","sendMessage","quoteMessage","isReplyToChannel","sendUserMessage","onPending","pendingMsg","onFailed","onSucceeded","useSendFileMessageCallback","onBeforeSendFileMessage","imageCompression","compressionRate","resizingWidth","resizingHeight","createCustomParams","compressibleFileType","compressibleRatio","compressibleDiamensions","canCompressImage","file_","image","createElement","src","URL","createObjectURL","onload","revokeObjectURL","canvas","imageWdith","naturalWidth","width","imageHeight","naturalHeight","height","targetWidth","targetHeight","context","getContext","drawImage","toBlob","newImageBlob","compressedFile","File","name","sendFileMessage","pendingMessage","localUrl","succeededMessage","useToggleReactionCallback","isReacted","deleteReaction","res","addReaction","useScrollToMessage","setInitialTimeStamp","setAnimatedMessageId","isPresent","useSendVoiceMessageCallback","onBeforeSendVoiceMessage","duration","messageParams","fileName","VOICE_MESSAGE_FILE_NAME","mimeType","VOICE_MESSAGE_MIME_TYPE","metaArrays","MessageMetaArray","META_ARRAY_VOICE_DURATION_KEY","value","META_ARRAY_MESSAGE_TYPE_KEY","META_ARRAY_MESSAGE_TYPE_VALUE__VOICE","ThreadReplySelectType","ChannelContext","React","createContext","undefined","ChannelProvider","children","isMessageGroupingEnabled","showSearchIcon","animatedMessage","highlightedMessage","startingPoint","onChatHeaderActionClick","onSearchClick","onBackClick","threadReplySelectType","THREAD","queries","filterMessageList","onReplyInThread","onQuoteMessageClick","onMessageAnimated","onMessageHighlighted","globalStore","isVoiceMessageEnabled","onUserProfileMessage","_globalStore$stores","_globalStore$stores$s","_globalStore$stores2","_globalStore$stores2$","useState","animatedMessageId","highLightedMessageId","setHighLightedMessageId","useReducer","messagesReducer","messagesInitialState","messagesStore","readStatus","usingReaction","emojiAllMap","useMemo","onScrollCallback","scrollToMessage","onScrollDownCallback","toggleReaction","useGetChannel","updateMessage","resendMessage","sendVoiceMessage","Provider","UserProfileProvider","disableUserProfile","renderUserProfile","useChannelContext","useContext"],"sources":["C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Channel\\context\\dux\\actionTypes.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Channel\\context\\utils.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\utils\\getIsReactionEnabled.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Channel\\context\\dux\\initialState.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Channel\\context\\dux\\reducers.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Channel\\context\\hooks\\useHandleChannelEvents.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Channel\\context\\hooks\\useGetChannel.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Channel\\context\\hooks\\useInitialMessagesFetch.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Channel\\context\\hooks\\useHandleReconnect.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Channel\\context\\hooks\\useScrollCallback.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Channel\\context\\hooks\\useScrollDownCallback.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Channel\\context\\hooks\\useDeleteMessageCallback.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Channel\\context\\hooks\\useUpdateMessageCallback.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Channel\\context\\hooks\\useResendMessageCallback.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Channel\\context\\hooks\\useSendMessageCallback.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Channel\\context\\hooks\\useSendFileMessageCallback.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Channel\\context\\hooks\\useToggleReactionCallback.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Channel\\context\\hooks\\useScrollToMessage.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Channel\\context\\hooks\\useSendVoiceMessageCallback.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Channel\\context\\ChannelProvider.tsx"],"sourcesContent":["export const RESET_MESSAGES = 'RESET_MESSAGES';\n\nexport const FETCH_INITIAL_MESSAGES_START = 'FETCH_INITIAL_MESSAGES_START';\nexport const FETCH_INITIAL_MESSAGES_SUCCESS = 'FETCH_INITIAL_MESSAGES_SUCCESS';\nexport const FETCH_INITIAL_MESSAGES_FAILURE = 'FETCH_INITIAL_MESSAGES_FAILURE';\nexport const FETCH_PREV_MESSAGES_SUCCESS = 'FETCH_PREV_MESSAGES_SUCCESS';\nexport const FETCH_PREV_MESSAGES_FAILURE = 'FETCH_PREV_MESSAGES_FAILURE';\nexport const FETCH_NEXT_MESSAGES_SUCCESS = 'FETCH_NEXT_MESSAGES_SUCCESS';\nexport const FETCH_NEXT_MESSAGES_FAILURE = 'FETCH_NEXT_MESSAGES_FAILURE';\n\nexport const SEND_MESSAGEGE_START = 'SEND_MESSAGEGE_START';\nexport const SEND_MESSAGEGE_SUCESS = 'SEND_MESSAGEGE_SUCESS';\nexport const SEND_MESSAGEGE_FAILURE = 'SEND_MESSAGEGE_FAILURE';\n\nexport const RESEND_MESSAGEGE_START = 'RESEND_MESSAGEGE_START';\n\nexport const ON_MESSAGE_RECEIVED = 'ON_MESSAGE_RECEIVED';\nexport const ON_MESSAGE_UPDATED = 'ON_MESSAGE_UPDATED';\nexport const ON_MESSAGE_THREAD_INFO_UPDATED = 'ON_MESSAGE_THREAD_INFO_UPDATED';\nexport const ON_MESSAGE_DELETED = 'ON_MESSAGE_DELETED';\nexport const ON_MESSAGE_DELETED_BY_REQ_ID = 'ON_MESSAGE_DELETED_BY_REQ_ID';\n\nexport const SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\nexport const SET_CHANNEL_INVALID = 'SET_CHANNEL_INVALID';\nexport const MARK_AS_READ = 'MARK_AS_READ';\n\nexport const ON_REACTION_UPDATED = 'ON_REACTION_UPDATED';\nexport const SET_EMOJI_CONTAINER = 'SET_EMOJI_CONTAINER';\n\nexport const MESSAGE_LIST_PARAMS_CHANGED = 'MESSAGE_LIST_PARAMS_CHANGED';\n","import format from 'date-fns/format';\nimport * as channelActions from './dux/actionTypes';\nimport topics from '../../../lib/pubSub/topics';\n\nimport { getSendingMessageStatus, isReadMessage } from '../../../utils';\nimport { OutgoingMessageStates } from '../../../utils/exports/getOutgoingMessageState';\n\nconst UNDEFINED = 'undefined';\nconst { SUCCEEDED, FAILED, PENDING } = getSendingMessageStatus();\n\nexport const scrollToRenderedMessage = (scrollRef, initialTimeStamp) => {\n  try {\n    const container = scrollRef.current;\n    // scroll into the message with initialTimeStamp\n    const element = container.querySelectorAll(`[data-sb-created-at=\"${initialTimeStamp}\"]`)?.[0];\n    if (element) {\n      // Calculate the offset of the element from the top of the container\n      const containerHeight = container.offsetHeight;\n      const elementHeight = element.offsetHeight;\n      const elementOffset = (containerHeight - elementHeight) / 2;\n      // Set the scroll position of the container to bring the element to the middle\n      container.scrollTop = element.offsetTop - elementOffset;\n    }\n  } catch {\n    // do nothing\n  }\n};\n\n/* eslint-disable default-param-last */\nexport const scrollIntoLast = (initialTry = 0, scrollRef) => {\n  const MAX_TRIES = 10;\n  const currentTry = initialTry;\n  if (currentTry > MAX_TRIES) {\n    return;\n  }\n  try {\n    const scrollDOM = scrollRef?.current || document.querySelector('.sendbird-conversation__messages-padding');\n    // eslint-disable-next-line no-multi-assign\n    scrollDOM.scrollTop = scrollDOM.scrollHeight;\n  } catch (error) {\n    setTimeout(() => {\n      scrollIntoLast(currentTry + 1, scrollRef);\n    }, 500 * currentTry);\n  }\n};\n\nexport const pubSubHandleRemover = (subscriber) => {\n  subscriber.forEach((s) => {\n    try {\n      s.remove();\n    } catch {\n      //\n    }\n  });\n};\n\nexport const pubSubHandler = ({\n  channelUrl,\n  pubSub,\n  dispatcher,\n  scrollRef,\n}) => {\n  const subscriber = new Map();\n  if (!pubSub || !pubSub.subscribe) return subscriber;\n  subscriber.set(topics.SEND_USER_MESSAGE, pubSub.subscribe(topics.SEND_USER_MESSAGE, (msg) => {\n    const { channel, message } = msg;\n    scrollIntoLast(0, scrollRef);\n    if (channelUrl === channel?.url) {\n      dispatcher({\n        type: channelActions.SEND_MESSAGEGE_SUCESS,\n        payload: message,\n      });\n    }\n  }));\n  subscriber.set(topics.SEND_MESSAGE_START, pubSub.subscribe(topics.SEND_MESSAGE_START, (msg) => {\n    const { channel, message } = msg;\n    if (channelUrl === channel?.url) {\n      dispatcher({\n        type: channelActions.SEND_MESSAGEGE_START,\n        payload: message,\n      });\n    }\n  }));\n  subscriber.set(topics.SEND_FILE_MESSAGE, pubSub.subscribe(topics.SEND_FILE_MESSAGE, (msg) => {\n    const { channel, message } = msg;\n    scrollIntoLast(0, scrollRef);\n    if (channelUrl === channel?.url) {\n      dispatcher({\n        type: channelActions.SEND_MESSAGEGE_SUCESS,\n        payload: message,\n      });\n    }\n  }));\n  subscriber.set(topics.UPDATE_USER_MESSAGE, pubSub.subscribe(topics.UPDATE_USER_MESSAGE, (msg) => {\n    const { channel, message, fromSelector } = msg;\n    if (fromSelector && (channelUrl === channel?.url)) {\n      dispatcher({\n        type: channelActions.ON_MESSAGE_UPDATED,\n        payload: { channel, message },\n      });\n    }\n  }));\n  subscriber.set(topics.DELETE_MESSAGE, pubSub.subscribe(topics.DELETE_MESSAGE, (msg) => {\n    const { channel, messageId } = msg;\n    if (channelUrl === channel?.url) {\n      dispatcher({\n        type: channelActions.ON_MESSAGE_DELETED,\n        payload: messageId,\n      });\n    }\n  }));\n\n  return subscriber;\n};\n\nexport const getParsedStatus = (message, currentGroupChannel) => {\n  if (message.requestState === FAILED) {\n    return OutgoingMessageStates.FAILED;\n  }\n\n  if (message.requestState === PENDING) {\n    return OutgoingMessageStates.PENDING;\n  }\n\n  if (message.requestState === SUCCEEDED) {\n    if (!currentGroupChannel) {\n      return OutgoingMessageStates.SENT;\n    }\n\n    const unreadMemberCount = currentGroupChannel?.getUnreadMemberCount(message);\n    if (unreadMemberCount === 0) {\n      return OutgoingMessageStates.READ;\n    }\n\n    const isDelivered = currentGroupChannel?.getUndeliveredMemberCount(message) === 0;\n    if (isDelivered) {\n      return OutgoingMessageStates.DELIVERED;\n    }\n\n    return OutgoingMessageStates.SENT;\n  }\n\n  return null;\n};\n\nexport const isOperator = (groupChannel = {}) => {\n  const myRole = groupChannel?.myRole;\n  return myRole === 'operator';\n};\n\nexport const isDisabledBecauseFrozen = (groupChannel = {}) => {\n  const isFrozen = groupChannel?.isFrozen;\n  return isFrozen && !isOperator(groupChannel);\n};\n\nexport const isDisabledBecauseMuted = (groupChannel = {}) => {\n  const myMutedState = groupChannel?.myMutedState;\n  return myMutedState === 'muted';\n};\n\nexport const getEmojiCategoriesFromEmojiContainer = (emojiContainer = {}) => (\n  emojiContainer.emojiCategories ? emojiContainer.emojiCategories : []\n);\n\nexport const getAllEmojisFromEmojiContainer = (emojiContainer = {}) => {\n  const { emojiCategories = [] } = emojiContainer;\n  const allEmojis = [];\n\n  for (let categoryIndex = 0; categoryIndex < emojiCategories.length; categoryIndex += 1) {\n    const { emojis } = emojiCategories[categoryIndex];\n    for (let emojiIndex = 0; emojiIndex < emojis.length; emojiIndex += 1) {\n      allEmojis.push(emojis[emojiIndex]);\n    }\n  }\n  return allEmojis;\n};\n\nexport const getEmojisFromEmojiContainer = (emojiContainer = {}, emojiCategoryId = '') => (\n  emojiContainer.emojiCategories\n    ? emojiContainer.emojiCategories\n      .filter((emojiCategory) => emojiCategory.id === emojiCategoryId)[0].emojis\n    : []\n);\n\nexport const getAllEmojisMapFromEmojiContainer = (emojiContainer = {}) => {\n  const { emojiCategories = [] } = emojiContainer;\n  const allEmojisMap = new Map();\n\n  for (let categoryIndex = 0; categoryIndex < emojiCategories.length; categoryIndex += 1) {\n    const { emojis } = emojiCategories[categoryIndex];\n    for (let emojiIndex = 0; emojiIndex < emojis.length; emojiIndex += 1) {\n      const { key, url } = emojis[emojiIndex];\n      allEmojisMap.set(key, url);\n    }\n  }\n  return allEmojisMap;\n};\n\nexport const getNicknamesMapFromMembers = (members = []) => {\n  const nicknamesMap = new Map();\n  for (let memberIndex = 0; memberIndex < members.length; memberIndex += 1) {\n    const { userId, nickname } = members[memberIndex];\n    nicknamesMap.set(userId, nickname);\n  }\n  return nicknamesMap;\n};\n\nconst getUniqueListBy = (arr, key) => [...new Map(arr.map((item) => [item[key], item])).values()];\nconst getUniqueListByMessageId = (arr) => getUniqueListBy(arr, 'messageId');\nconst sortByCreatedAt = (messages) => messages.sort((a, b) => a.createdAt - b.createdAt);\n\nexport const mergeAndSortMessages = (oldMessages, newMessages) => {\n  const lastOldMessage = oldMessages[oldMessages.length - 1];\n  const firstNewMessage = newMessages[0];\n  // If the last message of oldMessages is older than the first message of newMessages,\n  // then we can safely append newMessages to oldMessages.\n  if (lastOldMessage?.createdAt < firstNewMessage?.createdAt) {\n    return [...oldMessages, ...newMessages];\n  }\n\n  // todo: optimize this\n  // If the last message of oldMessages is newer than the first message of newMessages,\n  // then we need to merge the two arrays and sort them by createdAt.\n  const mergedMessages = [...oldMessages, ...newMessages];\n  const unique = getUniqueListByMessageId(mergedMessages);\n  return sortByCreatedAt(unique);\n};\n\nexport const getMessageCreatedAt = (message) => format(message.createdAt, 'p');\n\nexport const isSameGroup = (message, comparingMessage, currentChannel) => {\n  if (!(message\n    && comparingMessage\n    && message.messageType\n    && message.messageType !== 'admin'\n    && comparingMessage.messageType\n    && comparingMessage?.messageType !== 'admin'\n    && message?.sender\n    && comparingMessage?.sender\n    && message?.createdAt\n    && comparingMessage?.createdAt\n    && message?.sender?.userId\n    && comparingMessage?.sender?.userId\n  )) {\n    return false;\n  }\n  return (\n    message?.sendingStatus === comparingMessage?.sendingStatus\n    && message?.sender?.userId === comparingMessage?.sender?.userId\n    && getMessageCreatedAt(message) === getMessageCreatedAt(comparingMessage)\n    && isReadMessage(currentChannel, message) === isReadMessage(currentChannel, comparingMessage)\n  );\n};\n\nexport const compareMessagesForGrouping = (\n  prevMessage,\n  currMessage,\n  nextMessage,\n  currentChannel,\n  replyType,\n) => {\n  if (replyType === 'THREAD' && currMessage?.threadInfo) {\n    return [false, false];\n  }\n  const sendingStatus = currMessage?.sendingStatus || '';\n  const isAcceptable = sendingStatus !== 'pending' && sendingStatus !== 'failed';\n  return [\n    isSameGroup(prevMessage, currMessage, currentChannel) && isAcceptable,\n    isSameGroup(currMessage, nextMessage, currentChannel) && isAcceptable,\n  ];\n};\n\nexport const hasOwnProperty = (property) => (payload) => {\n  // eslint-disable-next-line no-prototype-builtins\n  if (payload && payload.hasOwnProperty && payload.hasOwnProperty(property)) {\n    return true;\n  }\n  return false;\n};\n\nexport const passUnsuccessfullMessages = (allMessages, newMessage) => {\n  const { sendingStatus = UNDEFINED } = newMessage;\n  if (sendingStatus === SUCCEEDED || sendingStatus === PENDING) {\n    const lastIndexOfSucceededMessage = allMessages\n      .map((message) => (\n        message.sendingStatus\n        || ((message.isAdminMessage && message.isAdminMessage()) ? SUCCEEDED : UNDEFINED)\n      ))\n      .lastIndexOf(SUCCEEDED);\n    if (lastIndexOfSucceededMessage + 1 < allMessages.length) {\n      const messages = [...allMessages];\n      messages.splice(lastIndexOfSucceededMessage + 1, 0, newMessage);\n      return messages;\n    }\n  }\n  return [\n    ...allMessages,\n    newMessage,\n  ];\n};\n\nexport const pxToNumber = (px) => {\n  if (typeof px === 'number') {\n    return px;\n  }\n  if (typeof px === 'string') {\n    const parsed = Number.parseFloat(px);\n    if (!Number.isNaN(parsed)) {\n      return parsed;\n    }\n  }\n  return null;\n};\n\nexport const isAboutSame = (a, b, px) => (Math.abs(a - b) <= px);\n\nexport default getParsedStatus;\n","/**\n * This function helps consider the every condition\n * related to enabling emoji reaction feature.\n */\n\nexport interface IsReactionEnabledProps {\n  isBroadcast?: boolean;\n  isSuper?: boolean;\n  globalLevel?: boolean;\n  moduleLevel?: boolean;\n}\n\nexport function getIsReactionEnabled({\n  isBroadcast = false,\n  isSuper = false,\n  globalLevel = true,\n  moduleLevel,\n}: IsReactionEnabledProps): boolean {\n  return !(isBroadcast || isSuper) && (moduleLevel ?? globalLevel);\n}\n","export default {\n  initialized: false,\n  loading: true,\n  allMessages: [],\n  currentGroupChannel: { members: [] },\n  // for scrollup\n  hasMorePrev: false,\n  oldestMessageTimeStamp: 0,\n  // for scroll down\n  // onScrollDownCallback is added for navigation to different timestamps on messageSearch\n  // hasMorePrev, onScrollCallback -> scroll up(default behavior)\n  // hasMoreNext, onScrollDownCallback -> scroll down\n  hasMoreNext: false,\n  latestMessageTimeStamp: 0,\n  emojiContainer: {},\n  unreadSince: null,\n  isInvalid: false,\n  messageListParams: null,\n};\n","import format from 'date-fns/format';\n\nimport * as actionTypes from './actionTypes';\nimport compareIds from '../../../../utils/compareIds';\nimport { PREV_RESULT_SIZE, NEXT_RESULT_SIZE } from '../const';\nimport { passUnsuccessfullMessages, mergeAndSortMessages } from '../utils';\nimport { filterMessageListParams, getSendingMessageStatus } from '../../../../utils';\n\nconst {\n  SUCCEEDED,\n} = getSendingMessageStatus();\nconst getOldestMessageTimeStamp = (messages = []) => {\n  const oldestMessage = messages[0];\n  return (oldestMessage && oldestMessage.createdAt) || null;\n};\nconst getLatestMessageTimeStamp = (messages = []) => {\n  const latestMessage = messages[messages.length - 1];\n  return (latestMessage && latestMessage.createdAt) || null;\n};\n\nexport default function reducer(state, action) {\n  switch (action.type) {\n    case actionTypes.RESET_MESSAGES:\n      return {\n        ...state,\n        // when user switches channel, if the previous channel `hasMorePrev`\n        // the onScroll gets called twice, setting hasMorePrev false prevents this\n        hasMorePrev: false,\n        hasMoreNext: false,\n        allMessages: [],\n      };\n    case actionTypes.FETCH_INITIAL_MESSAGES_START: {\n      return {\n        ...state,\n        loading: true,\n        allMessages: [\n          ...state.allMessages.filter((m) => (\n            m.sendingStatus !== SUCCEEDED\n          )),\n        ],\n      };\n    }\n    case actionTypes.FETCH_INITIAL_MESSAGES_SUCCESS: {\n      const {\n        currentGroupChannel,\n        messages,\n      } = action.payload;\n      if (!(currentGroupChannel?.url === state.currentGroupChannel?.url)) {\n        return state;\n      }\n      const oldestMessageTimeStamp = getOldestMessageTimeStamp(messages);\n      const latestMessageTimeStamp = getLatestMessageTimeStamp(messages);\n      return {\n        ...state,\n        loading: false,\n        initialized: true,\n        hasMorePrev: true,\n        hasMoreNext: true,\n        oldestMessageTimeStamp,\n        latestMessageTimeStamp,\n        allMessages: [...messages],\n      };\n    }\n    case actionTypes.FETCH_PREV_MESSAGES_SUCCESS: {\n      const {\n        currentGroupChannel,\n        messages,\n      } = action.payload;\n      if (!(currentGroupChannel?.url === state.currentGroupChannel?.url)) {\n        return state;\n      }\n      const hasMorePrev = messages && messages.length === PREV_RESULT_SIZE + 1;\n      const oldestMessageTimeStamp = getOldestMessageTimeStamp(messages);\n\n      // Remove duplicated messages\n      const duplicatedMessageIds = [];\n      const updatedOldMessages = state.allMessages.map((msg) => {\n        const duplicatedMessage = messages.find(({ messageId }) => (\n          compareIds(messageId, msg.messageId)\n        ));\n        if (!duplicatedMessage) {\n          return msg;\n        }\n        duplicatedMessageIds.push(duplicatedMessage.messageId);\n        return (duplicatedMessage.updatedAt > msg.updatedAt) ? duplicatedMessage : msg;\n      });\n      const filteredNewMessages = (duplicatedMessageIds.length > 0)\n        ? messages.filter((msg) => (\n          !duplicatedMessageIds.find((messageId) => compareIds(messageId, msg.messageId))\n        ))\n        : messages;\n\n      return {\n        ...state,\n        hasMorePrev,\n        oldestMessageTimeStamp,\n        allMessages: [\n          ...filteredNewMessages,\n          ...updatedOldMessages,\n        ],\n      };\n    }\n    case actionTypes.FETCH_NEXT_MESSAGES_SUCCESS: {\n      const {\n        currentGroupChannel,\n        messages,\n      } = action.payload;\n      if (!(currentGroupChannel?.url === state.currentGroupChannel?.url)) {\n        return state;\n      }\n      const hasMoreNext = messages && messages.length === NEXT_RESULT_SIZE + 1;\n      const latestMessageTimeStamp = getLatestMessageTimeStamp(messages);\n\n      // sort ~\n      const sortedMessages = mergeAndSortMessages(state.allMessages, messages);\n\n      return {\n        ...state,\n        hasMoreNext,\n        latestMessageTimeStamp,\n        allMessages: sortedMessages,\n      };\n    }\n    case actionTypes.FETCH_INITIAL_MESSAGES_FAILURE:\n    case actionTypes.FETCH_PREV_MESSAGES_FAILURE:\n    case actionTypes.FETCH_NEXT_MESSAGES_FAILURE: {\n      const { currentGroupChannel } = action.payload;\n      if (currentGroupChannel?.url !== state?.currentGroupChannel?.url) {\n        return state;\n      }\n      return {\n        ...state,\n        loading: false,\n        initialized: false,\n        allMessages: [],\n        hasMorePrev: false,\n        hasMoreNext: false,\n        oldestMessageTimeStamp: null,\n        latestMessageTimeStamp: null,\n      };\n    }\n    case actionTypes.SEND_MESSAGEGE_START:\n      return {\n        ...state,\n        allMessages: [\n          ...state.allMessages,\n          { ...action.payload },\n        ],\n      };\n    case actionTypes.SEND_MESSAGEGE_SUCESS: {\n      const message = action.payload;\n      const filteredMessages = state.allMessages.filter((m) => (\n        m?.reqId !== message?.reqId\n      ));\n      const pendingIndex = filteredMessages.findIndex((msg) => (\n        msg?.sendingStatus === 'pending' || msg?.sendingStatus === 'failed'\n      ));\n      return {\n        ...state,\n        allMessages: pendingIndex > -1\n          ? [\n            ...filteredMessages.slice(0, pendingIndex),\n            message,\n            ...filteredMessages.slice(pendingIndex),\n          ]\n          : [\n            ...filteredMessages,\n            message,\n          ],\n      };\n    }\n    case actionTypes.SEND_MESSAGEGE_FAILURE: {\n      // eslint-disable-next-line no-param-reassign\n      action.payload.failed = true;\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => (\n          compareIds(m.reqId, action.payload.reqId)\n            ? action.payload\n            : m\n        )),\n      };\n    }\n    case actionTypes.SET_CURRENT_CHANNEL: {\n      return {\n        ...state,\n        currentGroupChannel: action.payload,\n        isInvalid: false,\n      };\n    }\n    case actionTypes.SET_CHANNEL_INVALID: {\n      return {\n        ...state,\n        currentGroupChannel: null,\n        isInvalid: true,\n      };\n    }\n    case actionTypes.ON_MESSAGE_RECEIVED: {\n      const { channel, message } = action.payload;\n      const { members } = channel;\n      const { sender } = message;\n      const { currentGroupChannel = {}, unreadSince } = state;\n      const currentGroupChannelUrl = currentGroupChannel?.url;\n\n      if (!compareIds(channel?.url, currentGroupChannelUrl)) {\n        return state;\n      }\n      // Excluded overlapping messages\n      if (state.allMessages.some((msg) => msg.messageId === message.messageId)) {\n        return state;\n      }\n      // Filter by userFilledQuery\n      if (state.messageListParams && !filterMessageListParams(state.messageListParams, message)) {\n        return state;\n      }\n\n      if (message.isAdminMessage && message.isAdminMessage()) {\n        return {\n          ...state,\n          allMessages: passUnsuccessfullMessages(state.allMessages, message),\n        };\n      }\n\n      // Update members when sender profileUrl, nickname, friendName has been changed\n      const senderMember = members?.find((m) => (m?.userId === sender?.userId));\n      if ((senderMember?.profileUrl !== sender?.profileUrl)\n        || (senderMember?.friendName !== sender?.friendName)\n        || (senderMember?.nickname !== sender?.nickname)) {\n        channel.members = members.map((member) => {\n          if (member.userId === sender.userId) {\n            return sender;\n          }\n          return member;\n        });\n      }\n      return {\n        ...state,\n        currentGroupChannel: channel,\n        unreadSince: state?.unreadSince ? unreadSince : format(new Date(), 'p MMM dd'),\n        allMessages: passUnsuccessfullMessages(state.allMessages, message),\n      };\n    }\n    case actionTypes.ON_MESSAGE_UPDATED: {\n      const { channel, message } = action.payload;\n      const currentGroupChannelUrl = state?.currentGroupChannel?.url || '';\n      if (!compareIds(channel?.url, currentGroupChannelUrl)) {\n        return state; // Ignore event when it is not for the current channel\n      }\n      if (state.messageListParams && !filterMessageListParams(state.messageListParams, message)) {\n        // Delete the message if it doesn't match to the params anymore\n        return {\n          ...state,\n          allMessages: state.allMessages.filter((m) => (\n            !compareIds(m.messageId, message?.messageId)\n          )),\n        };\n      }\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => {\n          if (compareIds(m.messageId, message.messageId)) {\n            return message;\n          }\n          if (compareIds(m.parentMessageId, message.messageId)) {\n            m.parentMessage = message;// eslint-disable-line no-param-reassign\n          }\n          return m;\n        }),\n      };\n    }\n    case actionTypes.ON_MESSAGE_THREAD_INFO_UPDATED: {\n      const { channel, event } = action.payload;\n      const { channelUrl, threadInfo, targetMessageId } = event;\n      const currentGroupChannelUrl = state?.currentGroupChannel?.url || '';\n      if (\n        !compareIds(channel?.url, currentGroupChannelUrl)\n        || !compareIds(channel?.url, channelUrl)\n      ) {\n        return state; // Ignore event when it is not for the current channel\n      }\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => {\n          if (compareIds(m.messageId, targetMessageId)) {\n            // eslint-disable-next-line no-param-reassign\n            m.threadInfo = threadInfo; // Upsert threadInfo to the target message\n          }\n          return m;\n        }),\n      };\n    }\n    case actionTypes.RESEND_MESSAGEGE_START:\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => (\n          compareIds(m.reqId, action.payload.reqId)\n            ? action.payload\n            : m\n        )),\n      };\n    case actionTypes.MARK_AS_READ:\n      if (state.currentGroupChannel?.url !== action.payload?.channel?.url) {\n        return state;\n      }\n      return {\n        ...state,\n        unreadSince: null,\n      };\n    case actionTypes.ON_MESSAGE_DELETED:\n      return {\n        ...state,\n        allMessages: state.allMessages.filter((m) => (\n          !compareIds(m.messageId, action.payload)\n        )),\n      };\n    case actionTypes.ON_MESSAGE_DELETED_BY_REQ_ID:\n      return {\n        ...state,\n        allMessages: state.allMessages.filter((m) => (\n          !compareIds(m.reqId, action.payload)\n        )),\n      };\n    case actionTypes.SET_EMOJI_CONTAINER: {\n      return {\n        ...state,\n        emojiContainer: action.payload,\n      };\n    }\n    case actionTypes.ON_REACTION_UPDATED: {\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => {\n          if (compareIds(m.messageId, action.payload.messageId)) {\n            if (m.applyReactionEvent && typeof m.applyReactionEvent === 'function') {\n              m.applyReactionEvent(action.payload);\n            }\n            return m;\n          }\n          return m;\n        }),\n      };\n    }\n    case actionTypes.MESSAGE_LIST_PARAMS_CHANGED: {\n      return {\n        ...state,\n        messageListParams: action.payload,\n      };\n    }\n    default:\n      return state;\n  }\n}\n","import { useEffect } from 'react';\nimport { GroupChannel, GroupChannelHandler, SendbirdGroupChat } from '@sendbird/chat/groupChannel';\nimport { FileMessage, UserMessage } from '@sendbird/chat/message';\n\nimport { scrollIntoLast } from '../utils';\n\nimport { CustomUseReducerDispatcher, Logger } from '../../../../lib/SendbirdState';\nimport uuidv4 from '../../../../utils/uuid';\nimport compareIds from '../../../../utils/compareIds';\nimport * as messageActions from '../dux/actionTypes';\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\n\n/**\n * Handles ChannelEvents and send values to dispatcher using messagesDispatcher\n * messagesDispatcher: Dispatcher\n * sdk: sdkInstance\n * logger: loggerInstance\n * channelUrl: string\n * sdkInit: bool\n */\ninterface DynamicParams {\n  sdkInit: boolean;\n  currentUserId: string;\n  currentGroupChannel: GroupChannel;\n  disableMarkAsRead: boolean;\n}\ninterface StaticParams {\n  sdk: SendbirdGroupChat;\n  logger: Logger;\n  scrollRef: React.RefObject<HTMLDivElement>;\n  setQuoteMessage: React.Dispatch<React.SetStateAction<UserMessage | FileMessage>>;\n  messagesDispatcher: CustomUseReducerDispatcher;\n}\n\nconst DELIVERY_RECIPT = 'delivery_receipt';\n\nfunction useHandleChannelEvents({\n  sdkInit,\n  currentUserId,\n  currentGroupChannel,\n  disableMarkAsRead,\n}: DynamicParams, {\n  sdk,\n  logger,\n  scrollRef,\n  setQuoteMessage,\n  messagesDispatcher,\n}: StaticParams): void {\n  const store = useSendbirdStateContext();\n  const {\n    markAsReadScheduler,\n    markAsDeliveredScheduler,\n    disableMarkAsDelivered,\n  } = store.config;\n  const canSetMarkAsDelivered = store.stores.sdkStore.sdk?.appInfo?.premiumFeatureList\n    ?.find((feature) => (feature === DELIVERY_RECIPT));\n\n  useEffect(() => {\n    const channelUrl = currentGroupChannel?.url;\n    const channelHandlerId = uuidv4();\n    if (channelUrl && sdkInit) {\n      const channelHandler: GroupChannelHandler = {\n        onMessageReceived: (channel, message) => {\n          if (compareIds(channel?.url, channelUrl)) {\n            let scrollToEnd = false;\n            try {\n              const { current } = scrollRef;\n              scrollToEnd = current.offsetHeight + current.scrollTop >= current.scrollHeight - 10;\n              // 10 is a buffer\n            } catch (error) {\n              //\n            }\n\n            logger.info('Channel | useHandleChannelEvents: onMessageReceived', message);\n            messagesDispatcher({\n              type: messageActions.ON_MESSAGE_RECEIVED,\n              payload: { channel, message },\n            });\n            if (scrollToEnd\n              && document.getElementById('sendbird-dropdown-portal')?.childElementCount === 0\n              && document.getElementById('sendbird-emoji-list-portal')?.childElementCount === 0\n            ) {\n              // and !openContextMenu\n              try {\n                setTimeout(() => {\n                  scrollIntoLast(0, scrollRef);\n                });\n                if (!disableMarkAsRead) {\n                  markAsReadScheduler.push(currentGroupChannel);\n                }\n                if (canSetMarkAsDelivered && !disableMarkAsDelivered) {\n                  markAsDeliveredScheduler.push(currentGroupChannel);\n                }\n              } catch (error) {\n                logger.warning('Channel | onMessageReceived | scroll to end failed');\n              }\n            }\n          }\n        },\n        onUnreadMemberStatusUpdated: (channel) => {\n          logger.info('Channel | useHandleChannelEvents: onUnreadMemberStatusUpdated', channel);\n          if (compareIds(channel?.url, channelUrl)) {\n            messagesDispatcher({\n              type: messageActions.SET_CURRENT_CHANNEL,\n              payload: channel,\n            });\n          }\n        },\n        // before(onDeliveryReceiptUpdated)\n        onUndeliveredMemberStatusUpdated: (channel) => {\n          if (compareIds(channel?.url, channelUrl)) {\n            logger.info('Channel | useHandleChannelEvents: onDeliveryReceiptUpdated', channel);\n            messagesDispatcher({\n              type: messageActions.SET_CURRENT_CHANNEL,\n              payload: channel,\n            });\n          }\n        },\n        onMessageUpdated: (channel, message) => {\n          logger.info('Channel | useHandleChannelEvents: onMessageUpdated', message);\n          messagesDispatcher({\n            type: messageActions.ON_MESSAGE_UPDATED,\n            payload: { channel, message },\n          });\n        },\n        onThreadInfoUpdated: (channel, threadInfoUpdateEvent) => {\n          logger.info('Channel | useHandleChannelEvents: onThreadInfoUpdated', { channel, threadInfoUpdateEvent });\n          messagesDispatcher({\n            type: messageActions.ON_MESSAGE_THREAD_INFO_UPDATED,\n            payload: { channel, event: threadInfoUpdateEvent },\n          });\n        },\n        onMessageDeleted: (channel, messageId) => {\n          logger.info('Channel | useHandleChannelEvents: onMessageDeleted', { channel, messageId });\n          setQuoteMessage(null);\n          messagesDispatcher({\n            type: messageActions.ON_MESSAGE_DELETED,\n            payload: messageId,\n          });\n        },\n        onReactionUpdated: (channel, reactionEvent) => {\n          logger.info('Channel | useHandleChannelEvents: onReactionUpdated', { channel, reactionEvent });\n          messagesDispatcher({\n            type: messageActions.ON_REACTION_UPDATED,\n            payload: reactionEvent,\n          });\n        },\n        onChannelChanged: (channel) => {\n          if (compareIds(channel?.url, channelUrl)) {\n            logger.info('Channel | useHandleChannelEvents: onChannelChanged', channel);\n            messagesDispatcher({\n              type: messageActions.SET_CURRENT_CHANNEL,\n              payload: channel,\n            });\n          }\n        },\n        onChannelFrozen: (channel) => {\n          if (compareIds(channel?.url, channelUrl)) {\n            logger.info('Channel | useHandleChannelEvents: onChannelFrozen', channel);\n            messagesDispatcher({\n              type: messageActions.SET_CURRENT_CHANNEL,\n              payload: channel,\n            });\n          }\n        },\n        onChannelUnfrozen: (channel) => {\n          if (compareIds(channel?.url, channelUrl)) {\n            logger.info('Channel | useHandleChannelEvents: onChannelUnFrozen', channel);\n            messagesDispatcher({\n              type: messageActions.SET_CURRENT_CHANNEL,\n              payload: channel,\n            });\n          }\n        },\n        onUserMuted: (channel, user) => {\n          if (compareIds(channel?.url, channelUrl)) {\n            logger.info('Channel | useHandleChannelEvents: onUserMuted', { channel, user });\n            messagesDispatcher({\n              type: messageActions.SET_CURRENT_CHANNEL,\n              payload: channel,\n            });\n          }\n        },\n        onUserUnmuted: (channel, user) => {\n          if (compareIds(channel?.url, channelUrl)) {\n            logger.info('Channel | useHandleChannelEvents: onUserUnmuted', { channel, user });\n            messagesDispatcher({\n              type: messageActions.SET_CURRENT_CHANNEL,\n              payload: channel,\n            });\n          }\n        },\n        onUserBanned: (channel, user) => {\n          if (compareIds(channel?.url, channelUrl) && user?.userId === sdk?.currentUser?.userId) {\n            logger.info('Channel | useHandleChannelEvents: onUserBanned', { channel, user });\n            messagesDispatcher({\n              type: messageActions.SET_CURRENT_CHANNEL,\n              payload: null,\n            });\n          }\n        },\n        onOperatorUpdated: (channel, users) => {\n          if (compareIds(channel?.url, channelUrl)) {\n            logger.info('Channel | useHandleChannelEvents: onOperatorUpdated', { channel, users });\n            messagesDispatcher({\n              type: messageActions.SET_CURRENT_CHANNEL,\n              payload: channel,\n            });\n          }\n        },\n        onUserLeft: (channel, user) => {\n          if (compareIds(channel?.url, channelUrl)) {\n            logger.info('Channel | useHandleChannelEvents: onUserLeft', { channel, user });\n            if (user?.userId === currentUserId) {\n              messagesDispatcher({\n                type: messageActions.SET_CURRENT_CHANNEL,\n                payload: null,\n              });\n            }\n          }\n        },\n      };\n      logger.info('Channel | useHandleChannelEvents: Setup event handler', { channelHandlerId, channelHandler });\n      // Add this group channel handler to the Sendbird chat instance\n      sdk.groupChannel?.addGroupChannelHandler(channelHandlerId, new GroupChannelHandler(channelHandler));\n    }\n    return () => {\n      if (sdk?.groupChannel?.removeGroupChannelHandler) {\n        logger.info('Channel | useHandleChannelEvents: Removing message reciver handler', channelHandlerId);\n        sdk.groupChannel.removeGroupChannelHandler(channelHandlerId);\n      } else if (sdk?.groupChannel) {\n        logger.error('Channel | useHandleChannelEvents: Not found the removeGroupChannelHandler');\n      }\n    };\n  }, [currentGroupChannel?.url, sdkInit]);\n}\n\nexport default useHandleChannelEvents;\n","import { useEffect } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\n\nfunction useSetChannel({ channelUrl, sdkInit, disableMarkAsRead }, {\n  messagesDispatcher,\n  sdk,\n  logger,\n  markAsReadScheduler,\n}) {\n  useEffect(() => {\n    if (channelUrl && sdkInit && sdk && sdk.groupChannel) {\n      logger.info('Channel | useSetChannel fetching channel', channelUrl);\n      sdk.groupChannel.getChannel(channelUrl)\n        .then((groupChannel) => {\n          logger.info('Channel | useSetChannel fetched channel', groupChannel);\n          messagesDispatcher({\n            type: messageActionTypes.SET_CURRENT_CHANNEL,\n            payload: groupChannel,\n          });\n\n          logger.info('Channel: Mark as read', groupChannel);\n          if (!disableMarkAsRead) {\n            markAsReadScheduler.push(groupChannel);\n          }\n        })\n        .catch((e) => {\n          logger.warning('Channel | useSetChannel fetch channel failed', { channelUrl, e });\n          messagesDispatcher({\n            type: messageActionTypes.SET_CHANNEL_INVALID,\n          });\n        });\n      sdk.getAllEmoji().then((emojiContainer_) => {\n        logger.info('Channel: Getting emojis success', emojiContainer_);\n        messagesDispatcher({\n          type: messageActionTypes.SET_EMOJI_CONTAINER,\n          payload: emojiContainer_,\n        });\n      }).catch((err) => {\n        logger.error('Channel: Getting emojis failed', err);\n      });\n      sdk.getAllEmoji();\n    }\n  }, [channelUrl, sdkInit]);\n}\n\nexport default useSetChannel;\n","import { useEffect } from 'react';\nimport { ReplyType } from '@sendbird/chat/message';\n\nimport * as utils from '../utils';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport { PREV_RESULT_SIZE, NEXT_RESULT_SIZE } from '../const';\n\nfunction useInitialMessagesFetch({\n  currentGroupChannel,\n  userFilledMessageListQuery,\n  initialTimeStamp,\n  replyType,\n}, {\n  logger,\n  scrollRef,\n  messagesDispatcher,\n}) {\n  const channelUrl = currentGroupChannel?.url;\n  useEffect(() => {\n    logger.info('Channel useInitialMessagesFetch: Setup started', currentGroupChannel);\n    messagesDispatcher({\n      type: messageActionTypes.RESET_MESSAGES,\n      payload: null,\n    });\n\n    if (currentGroupChannel && currentGroupChannel?.getMessagesByTimestamp) {\n      const messageListParams = {};\n      messageListParams.prevResultSize = PREV_RESULT_SIZE;\n      if (initialTimeStamp) {\n        messageListParams.nextResultSize = NEXT_RESULT_SIZE;\n      }\n      messageListParams.isInclusive = true;\n      messageListParams.includeReactions = true;\n      messageListParams.includeMetaArray = true;\n      if (replyType && (replyType === 'QUOTE_REPLY' || replyType === 'THREAD')) {\n        messageListParams.includeThreadInfo = true;\n        messageListParams.includeParentMessageInfo = true;\n        messageListParams.replyType = ReplyType.ONLY_REPLY_TO_CHANNEL;\n      }\n      if (userFilledMessageListQuery) {\n        Object.keys(userFilledMessageListQuery).forEach((key) => {\n          messageListParams[key] = userFilledMessageListQuery[key];\n        });\n      }\n      if ((replyType && (replyType === 'QUOTE_REPLY' || replyType === 'THREAD')) || userFilledMessageListQuery) {\n        logger.info('Channel useInitialMessagesFetch: Setup messageListParams', messageListParams);\n        messagesDispatcher({\n          type: messageActionTypes.MESSAGE_LIST_PARAMS_CHANGED,\n          payload: messageListParams,\n        });\n      }\n\n      logger.info('Channel: Fetching messages', { currentGroupChannel, userFilledMessageListQuery });\n      messagesDispatcher({\n        type: messageActionTypes.FETCH_INITIAL_MESSAGES_START,\n        payload: null,\n      });\n\n      currentGroupChannel.getMessagesByTimestamp(\n        initialTimeStamp || new Date().getTime(),\n        messageListParams,\n      )\n        .then((messages) => {\n          messagesDispatcher({\n            type: messageActionTypes.FETCH_INITIAL_MESSAGES_SUCCESS,\n            payload: {\n              currentGroupChannel,\n              messages,\n            },\n          });\n        })\n        .catch((error) => {\n          logger.error('Channel: Fetching messages failed', error);\n          messagesDispatcher({\n            type: messageActionTypes.FETCH_INITIAL_MESSAGES_FAILURE,\n            payload: { currentGroupChannel },\n          });\n        })\n        .finally(() => {\n          if (!initialTimeStamp) {\n            setTimeout(() => utils.scrollIntoLast(0, scrollRef));\n          } else {\n            setTimeout(() => {\n              utils.scrollToRenderedMessage(scrollRef, initialTimeStamp);\n            }, 500);\n          }\n        });\n    }\n  }, [channelUrl, userFilledMessageListQuery, initialTimeStamp]);\n  /**\n   * Note - useEffect(() => {}, [currentGroupChannel])\n   * was buggy, that is why we did\n   * const channelUrl = currentGroupChannel && currentGroupChannel.url;\n   * useEffect(() => {}, [channelUrl])\n   * Again, this hook is supposed to execute when currentGroupChannel changes\n   * The 'channelUrl' here is not the same memory reference from Conversation.props\n   */\n}\n\nexport default useInitialMessagesFetch;\n","import { useEffect } from 'react';\n\nimport type { GroupChannel, SendbirdGroupChat } from '@sendbird/chat/groupChannel';\nimport { MessageListParams, ReplyType } from '@sendbird/chat/message';\nimport * as utils from '../utils';\nimport { PREV_RESULT_SIZE, NEXT_RESULT_SIZE } from '../const';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport { Logger } from '../../../../lib/SendbirdState';\nimport { MarkAsReadSchedulerType } from '../../../../lib/hooks/useMarkAsReadScheduler';\n\ninterface DynamicParams {\n  isOnline: boolean;\n  replyType?: string;\n  disableMarkAsRead: boolean;\n}\n\ninterface StaticParams {\n  logger: Logger;\n  sdk: SendbirdGroupChat;\n  currentGroupChannel: GroupChannel;\n  scrollRef: React.RefObject<HTMLDivElement>;\n  markAsReadScheduler: MarkAsReadSchedulerType;\n  messagesDispatcher: (props: { type: string, payload: any }) => void;\n  userFilledMessageListQuery?: Record<string, any>;\n}\n\nfunction useHandleReconnect(\n  { isOnline, replyType, disableMarkAsRead }: DynamicParams,\n  {\n    logger,\n    sdk,\n    scrollRef,\n    currentGroupChannel,\n    messagesDispatcher,\n    markAsReadScheduler,\n    userFilledMessageListQuery,\n  }: StaticParams,\n): void {\n  useEffect(() => {\n    const wasOffline = !isOnline;\n    return () => {\n      // state changed from offline to online\n      if (wasOffline && currentGroupChannel?.url) {\n        logger.info('Refreshing conversation state');\n        const isReactionEnabled = sdk?.appInfo?.useReaction || false;\n\n        const messageListParams: MessageListParams = {\n          prevResultSize: PREV_RESULT_SIZE,\n          isInclusive: true,\n          includeReactions: isReactionEnabled,\n          nextResultSize: NEXT_RESULT_SIZE,\n        };\n        if (replyType && replyType === 'QUOTE_REPLY') {\n          messageListParams.includeThreadInfo = true;\n          messageListParams.includeParentMessageInfo = true;\n          messageListParams.replyType = ReplyType.ONLY_REPLY_TO_CHANNEL;\n        }\n        if (userFilledMessageListQuery) {\n          Object.keys(userFilledMessageListQuery).forEach((key) => {\n            messageListParams[key] = userFilledMessageListQuery[key];\n          });\n        }\n        logger.info('Channel: Fetching messages', { currentGroupChannel, userFilledMessageListQuery });\n        messagesDispatcher({\n          type: messageActionTypes.FETCH_INITIAL_MESSAGES_START,\n          payload: null,\n        });\n\n        sdk?.groupChannel?.getChannel(currentGroupChannel?.url)\n          .then((groupChannel) => {\n            const lastMessageTime = new Date().getTime();\n\n            groupChannel.getMessagesByTimestamp(\n              lastMessageTime,\n              messageListParams,\n            )\n              .then((messages) => {\n                messagesDispatcher({\n                  type: messageActionTypes.FETCH_INITIAL_MESSAGES_SUCCESS,\n                  payload: {\n                    currentGroupChannel,\n                    messages,\n                  },\n                });\n                setTimeout(() => utils.scrollIntoLast(0, scrollRef));\n              })\n              .catch((error) => {\n                logger.error('Channel: Fetching messages failed', error);\n                messagesDispatcher({\n                  type: messageActionTypes.FETCH_INITIAL_MESSAGES_FAILURE,\n                  payload: { currentGroupChannel },\n                });\n              });\n            if (!disableMarkAsRead) {\n              markAsReadScheduler.push(currentGroupChannel);\n            }\n          });\n      }\n    };\n  }, [isOnline, replyType]);\n}\n\nexport default useHandleReconnect;\n","import { useCallback } from 'react';\nimport { ReplyType } from '@sendbird/chat/message';\n\nimport * as messageActionTypes from '../dux/actionTypes';\nimport { PREV_RESULT_SIZE } from '../const';\n\nfunction useScrollCallback({\n  currentGroupChannel,\n  oldestMessageTimeStamp,\n  userFilledMessageListQuery,\n  replyType,\n}, {\n  hasMorePrev,\n  logger,\n  messagesDispatcher,\n  sdk,\n}) {\n  return useCallback((cb) => {\n    if (!hasMorePrev) { return; }\n    const { appInfo = {} } = sdk;\n    const isReactionEnabled = appInfo.useReaction || false;\n\n    const messageListParams = {\n      prevResultSize: PREV_RESULT_SIZE,\n      isInclusive: true,\n      includeReactions: isReactionEnabled,\n    };\n    messageListParams.includeMetaArray = true;\n    if (replyType === 'QUOTE_REPLY' || replyType === 'THREAD') {\n      messageListParams.includeThreadInfo = true;\n      messageListParams.includeParentMessageInfo = true;\n      messageListParams.replyType = ReplyType.ONLY_REPLY_TO_CHANNEL;\n    }\n    if (userFilledMessageListQuery) {\n      Object.keys(userFilledMessageListQuery).forEach((key) => {\n        messageListParams[key] = userFilledMessageListQuery[key];\n      });\n    }\n    logger.info('Channel: Fetching messages', { currentGroupChannel, userFilledMessageListQuery });\n\n    currentGroupChannel.getMessagesByTimestamp(\n      oldestMessageTimeStamp || new Date().getTime(),\n      messageListParams,\n    )\n      .then((messages) => {\n        messagesDispatcher({\n          type: messageActionTypes.FETCH_PREV_MESSAGES_SUCCESS,\n          payload: { currentGroupChannel, messages },\n        });\n        cb([messages, null]);\n      })\n      .catch((error) => {\n        logger.error('Channel: Fetching messages failed', error);\n        messagesDispatcher({\n          type: messageActionTypes.FETCH_PREV_MESSAGES_FAILURE,\n          payload: { currentGroupChannel },\n        });\n        cb([null, error]);\n      });\n  }, [currentGroupChannel, oldestMessageTimeStamp, replyType]);\n}\n\nexport default useScrollCallback;\n","import { useCallback } from 'react';\nimport { ReplyType } from '@sendbird/chat/message';\n\nimport * as messageActionTypes from '../dux/actionTypes';\nimport { NEXT_RESULT_SIZE } from '../const';\n\nfunction useScrollDownCallback({\n  currentGroupChannel,\n  latestMessageTimeStamp,\n  userFilledMessageListQuery,\n  hasMoreNext,\n  replyType,\n}, {\n  logger,\n  messagesDispatcher,\n  sdk,\n}) {\n  return useCallback((cb) => {\n    if (!hasMoreNext) { return; }\n    const { appInfo = {} } = sdk;\n    const isReactionEnabled = appInfo.useReaction || false;\n    const messageListParams = {\n      nextResultSize: NEXT_RESULT_SIZE,\n      isInclusive: true,\n      includeReactions: isReactionEnabled,\n    };\n    messageListParams.includeMetaArray = true;\n    if (replyType && (replyType === 'QUOTE_REPLY' || replyType === 'THREAD')) {\n      messageListParams.includeThreadInfo = true;\n      messageListParams.includeParentMessageInfo = true;\n      messageListParams.replyType = ReplyType.ONLY_REPLY_TO_CHANNEL;\n    }\n    if (userFilledMessageListQuery) {\n      Object.keys(userFilledMessageListQuery).forEach((key) => {\n        messageListParams[key] = userFilledMessageListQuery[key];\n      });\n    }\n    logger.info('Channel: Fetching later messages', { currentGroupChannel, userFilledMessageListQuery });\n\n    currentGroupChannel.getMessagesByTimestamp(\n      latestMessageTimeStamp || new Date().getTime(),\n      messageListParams,\n    )\n      .then((messages) => {\n        messagesDispatcher({\n          type: messageActionTypes.FETCH_NEXT_MESSAGES_SUCCESS,\n          payload: { currentGroupChannel, messages },\n        });\n        cb([messages, null]);\n      })\n      .catch((error) => {\n        logger.error('Channel: Fetching later messages failed', error);\n        messagesDispatcher({\n          type: messageActionTypes.FETCH_NEXT_MESSAGES_FAILURE,\n          payload: { currentGroupChannel },\n        });\n        cb([null, error]);\n      });\n  }, [currentGroupChannel, latestMessageTimeStamp, hasMoreNext, replyType]);\n}\n\nexport default useScrollDownCallback;\n","import { useCallback } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\n\nfunction useDeleteMessageCallback({ currentGroupChannel, messagesDispatcher }, { logger }) {\n  return useCallback((message) => {\n    logger.info('Channel | useDeleteMessageCallback: Deleting message', message);\n    const { requestState } = message;\n    return new Promise((resolve, reject) => {\n      logger.info('Channel | useDeleteMessageCallback: Deleting message requestState:', requestState);\n      // Message is only on local\n      if (requestState === 'failed' || requestState === 'pending') {\n        logger.info('Channel | useDeleteMessageCallback: Deleted message from local:', message);\n        messagesDispatcher({\n          type: messageActionTypes.ON_MESSAGE_DELETED_BY_REQ_ID,\n          payload: message.reqId,\n        });\n        resolve(message);\n      }\n\n      logger.info('Channel | useDeleteMessageCallback: Deleting message from remote:', requestState);\n      currentGroupChannel.deleteMessage(message)\n        .then(() => {\n          logger.info('Channel | useDeleteMessageCallback: Deleting message success!', message);\n          messagesDispatcher({\n            type: messageActionTypes.ON_MESSAGE_DELETED,\n            payload: message.messageId,\n          });\n          resolve(message);\n        })\n        .catch((err) => {\n          logger.warning('Channel | useDeleteMessageCallback: Deleting message failed!', err);\n          reject(err);\n        });\n    });\n  }, [currentGroupChannel, messagesDispatcher]);\n}\n\nexport default useDeleteMessageCallback;\n","import { useCallback } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\nimport topics from '../../../../lib/pubSub/topics';\n\nfunction useUpdateMessageCallback({\n  currentGroupChannel,\n  messagesDispatcher,\n  onBeforeUpdateUserMessage,\n  isMentionEnabled,\n}, {\n  logger,\n  pubSub,\n}) {\n  return useCallback((props, callback) => {\n    const {\n      messageId,\n      message,\n      mentionedUsers,\n      mentionTemplate,\n    } = props;\n    const createParamsDefault = () => {\n      const params = {};\n      params.message = message;\n      if (isMentionEnabled && mentionedUsers?.length > 0) {\n        params.mentionedUsers = mentionedUsers;\n      }\n      if (isMentionEnabled && mentionTemplate) {\n        params.mentionedMessageTemplate = mentionTemplate;\n      } else {\n        params.mentionedMessageTemplate = message;\n      }\n      return params;\n    };\n\n    const createCustomPrams = onBeforeUpdateUserMessage\n      && typeof onBeforeUpdateUserMessage === 'function';\n\n    if (createCustomPrams) {\n      logger.info('Channel: creating params using onBeforeUpdateUserMessage', onBeforeUpdateUserMessage);\n    }\n\n    const params = onBeforeUpdateUserMessage\n      ? onBeforeUpdateUserMessage(message)\n      : createParamsDefault(message);\n\n    logger.info('Channel: Updating message!', params);\n    currentGroupChannel.updateUserMessage(messageId, params).then((msg, err) => {\n      if (callback) {\n        callback(err, msg);\n      }\n\n      logger.info('Channel: Updating message success!', msg);\n      messagesDispatcher({\n        type: messageActionTypes.ON_MESSAGE_UPDATED,\n        payload: {\n          channel: currentGroupChannel,\n          message: msg,\n        },\n      });\n      pubSub.publish(\n        topics.UPDATE_USER_MESSAGE,\n        {\n          message: msg,\n          channel: currentGroupChannel,\n        },\n      );\n    });\n  }, [currentGroupChannel?.url, messagesDispatcher, onBeforeUpdateUserMessage]);\n}\n\nexport default useUpdateMessageCallback;\n","import { useCallback } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\n\nfunction useResendMessageCallback({\n  currentGroupChannel,\n  messagesDispatcher,\n}, {\n  logger,\n}) {\n  return useCallback((failedMessage) => {\n    logger.info('Channel: Resending message has started', failedMessage);\n    const { messageType, file } = failedMessage;\n    if (failedMessage?.isResendable) {\n      // Move the logic setting sendingStatus to pending into the reducer\n      // eslint-disable-next-line no-param-reassign\n      failedMessage.requestState = 'pending';\n      // eslint-disable-next-line no-param-reassign\n      failedMessage.sendingStatus = 'pending';\n      messagesDispatcher({\n        type: messageActionTypes.RESEND_MESSAGEGE_START,\n        payload: failedMessage,\n      });\n\n      // userMessage\n      if (messageType === 'user') {\n        currentGroupChannel.resendUserMessage(failedMessage)\n          .then((message) => {\n            logger.info('Channel: Resending message success!', message);\n            messagesDispatcher({\n              type: messageActionTypes.SEND_MESSAGEGE_SUCESS,\n              payload: message,\n            });\n          })\n          .catch((e) => {\n            logger.warning('Channel: Resending message failed!', e);\n            // eslint-disable-next-line no-param-reassign\n            failedMessage.requestState = 'failed';\n            // eslint-disable-next-line no-param-reassign\n            failedMessage.sendingStatus = 'failed';\n            messagesDispatcher({\n              type: messageActionTypes.SEND_MESSAGEGE_FAILURE,\n              payload: failedMessage,\n            });\n          });\n\n        // eslint-disable-next-line no-param-reassign\n        failedMessage.requestState = 'pending';\n        // eslint-disable-next-line no-param-reassign\n        failedMessage.sendingStatus = 'pending';\n        messagesDispatcher({\n          type: messageActionTypes.RESEND_MESSAGEGE_START,\n          payload: failedMessage,\n        });\n        return;\n      }\n\n      if (messageType === 'file') {\n        currentGroupChannel\n          .resendFileMessage(failedMessage, file)\n          .then((message) => {\n            logger.info('Channel: Resending file message success!', message);\n            messagesDispatcher({\n              type: messageActionTypes.SEND_MESSAGEGE_SUCESS,\n              payload: message,\n            });\n          })\n          .catch((e) => {\n            logger.warning('Channel: Resending file message failed!', e);\n            // eslint-disable-next-line no-param-reassign\n            failedMessage.requestState = 'failed';\n            // eslint-disable-next-line no-param-reassign\n            failedMessage.sendingStatus = 'failed';\n            messagesDispatcher({\n              type: messageActionTypes.SEND_MESSAGEGE_FAILURE,\n              payload: failedMessage,\n            });\n          });\n\n        // eslint-disable-next-line no-param-reassign\n        failedMessage.requestState = 'pending';\n        // eslint-disable-next-line no-param-reassign\n        failedMessage.sendingStatus = 'pending';\n        messagesDispatcher({\n          type: messageActionTypes.RESEND_MESSAGEGE_START,\n          payload: failedMessage,\n        });\n      }\n    } else {\n      // to alert user on console\n      // eslint-disable-next-line no-console\n      console.error('Message is not resendable');\n      logger.warning('Message is not resendable', failedMessage);\n    }\n  }, [currentGroupChannel, messagesDispatcher]);\n}\n\nexport default useResendMessageCallback;\n","import { useRef, useCallback } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\nimport * as utils from '../utils';\nimport topics from '../../../../lib/pubSub/topics';\n\nexport default function useSendMessageCallback({\n  isMentionEnabled,\n  currentGroupChannel,\n  onBeforeSendUserMessage,\n}, {\n  logger,\n  pubSub,\n  scrollRef,\n  messagesDispatcher,\n}) {\n  const messageInputRef = useRef(null);\n\n  const sendMessage = useCallback(\n    (props) => {\n      const {\n        quoteMessage = null,\n        message,\n        mentionTemplate,\n        // mentionedUserIds,\n        mentionedUsers,\n      } = props;\n      const createParamsDefault = () => {\n        const params = {};\n        params.message = message;\n        // if (isMentionEnabled && mentionedUserIds?.length > 0) {\n        if (isMentionEnabled && mentionedUsers?.length > 0) {\n          // params.mentionedUserIds = mentionedUserIds;\n          params.mentionedUsers = mentionedUsers;\n        }\n        // if (isMentionEnabled && mentionTemplate && mentionedUserIds?.length > 0) {\n        if (isMentionEnabled && mentionTemplate && mentionedUsers?.length > 0) {\n          params.mentionedMessageTemplate = mentionTemplate;\n        }\n        if (quoteMessage) {\n          params.isReplyToChannel = true;\n          params.parentMessageId = quoteMessage.messageId;\n        }\n        return params;\n      };\n\n      const createCustomPrams = onBeforeSendUserMessage\n        && typeof onBeforeSendUserMessage === 'function';\n\n      if (createCustomPrams) {\n        logger.info('Channel: creating params using onBeforeSendUserMessage', onBeforeSendUserMessage);\n      }\n\n      const params = onBeforeSendUserMessage\n        ? onBeforeSendUserMessage(message, quoteMessage)\n        : createParamsDefault();\n\n      logger.info('Channel: Sending message has started', params);\n      currentGroupChannel.sendUserMessage(params)\n        .onPending((pendingMsg) => {\n          pubSub.publish(topics.SEND_MESSAGE_START, {\n            /* pubSub is used instead of messagesDispatcher\n              to avoid redundantly calling `messageActionTypes.SEND_MESSAGEGE_START` */\n            message: pendingMsg,\n            channel: currentGroupChannel,\n          });\n          setTimeout(() => utils.scrollIntoLast(0, scrollRef));\n        })\n        .onFailed((err, msg) => {\n          logger.warning('Channel: Sending message failed!', { message: msg, error: err });\n          messagesDispatcher({\n            type: messageActionTypes.SEND_MESSAGEGE_FAILURE,\n            payload: msg,\n          });\n        })\n        .onSucceeded((msg) => {\n          logger.info('Channel: Sending message success!', msg);\n          messagesDispatcher({\n            type: messageActionTypes.SEND_MESSAGEGE_SUCESS,\n            payload: msg,\n          });\n        });\n    },\n    [currentGroupChannel, onBeforeSendUserMessage],\n  );\n\n  return [messageInputRef, sendMessage];\n}\n","import { useCallback } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\nimport * as utils from '../utils';\nimport topics from '../../../../lib/pubSub/topics';\n\nexport default function useSendFileMessageCallback({\n  currentGroupChannel,\n  onBeforeSendFileMessage,\n  imageCompression = {},\n}, {\n  logger,\n  pubSub,\n  scrollRef,\n  messagesDispatcher,\n}) {\n  const sendMessage = useCallback((file, quoteMessage = null) => {\n    const {\n      compressionRate,\n      resizingWidth,\n      resizingHeight,\n    } = imageCompression;\n    const createCustomParams = onBeforeSendFileMessage && typeof onBeforeSendFileMessage === 'function';\n\n    const compressibleFileType = (file.type === 'image/jpg' || file.type === 'image/png' || file.type === 'image/jpeg');\n    const compressibleRatio = (compressionRate > 0) && (compressionRate < 1);\n    // pxToNumber returns null if values are invalid\n    const compressibleDiamensions = utils.pxToNumber(resizingWidth)\n      || utils.pxToNumber(resizingHeight);\n\n    const canCompressImage = compressibleFileType && (compressibleRatio || compressibleDiamensions);\n\n    const createParamsDefault = (file_) => {\n      const params = {};\n      params.file = file_;\n      if (quoteMessage) {\n        params.isReplyToChannel = true;\n        params.parentMessageId = quoteMessage.messageId;\n      }\n      return params;\n    };\n\n    if (canCompressImage) { // Using image compression\n      try {\n        const image = document.createElement('img');\n        image.src = URL.createObjectURL(file);\n        image.onload = () => {\n          URL.revokeObjectURL(image.src);\n          const canvas = document.createElement('canvas');\n          const imageWdith = image.naturalWidth || image.width;\n          const imageHeight = image.naturalHeight || image.height;\n\n          let targetWidth = utils.pxToNumber(resizingWidth) || imageWdith;\n          let targetHeight = utils.pxToNumber(resizingHeight) || imageHeight;\n\n          // In canvas.toBlob(callback, mimeType, qualityArgument)\n          // qualityArgument doesnt work\n          // so in case compressibleDiamensions are not present, we use ratio\n          if (file.type === 'image/png' && !compressibleDiamensions) {\n            targetWidth *= compressionRate;\n            targetHeight *= compressionRate;\n          }\n\n          canvas.width = targetWidth;\n          canvas.height = targetHeight;\n          const context = canvas.getContext('2d');\n          context.drawImage(image, 0, 0, targetWidth, targetHeight);\n          context.canvas.toBlob(\n            (newImageBlob) => {\n              const compressedFile = new File([newImageBlob], file.name, { type: file.type });\n              if (createCustomParams) {\n                logger.info('Channel: Creating params using onBeforeSendFileMessage', onBeforeSendFileMessage);\n              }\n              const params = createCustomParams\n                ? onBeforeSendFileMessage(compressedFile, quoteMessage)\n                : createParamsDefault(compressedFile);\n              logger.info('Channel: Uploading file message start!', params);\n              currentGroupChannel.sendFileMessage(params)\n                .onPending((pendingMessage) => {\n                  pubSub.publish(topics.SEND_MESSAGE_START, {\n                    /* pubSub is used instead of messagesDispatcher\n                      to avoid redundantly calling `messageActionTypes.SEND_MESSAGEGE_START` */\n                    message: {\n                      ...pendingMessage,\n                      url: URL.createObjectURL(compressedFile),\n                      // pending thumbnail message seems to be failed\n                      requestState: 'pending',\n                    },\n                    channel: currentGroupChannel,\n                  });\n                  setTimeout(() => utils.scrollIntoLast(0, scrollRef), 1000);\n                })\n                .onFailed((err, failedMessage) => {\n                  logger.error('Channel: Sending file message failed!', { failedMessage, err });\n                  // eslint-disable-next-line no-param-reassign\n                  failedMessage.localUrl = URL.createObjectURL(compressedFile);\n                  // eslint-disable-next-line no-param-reassign\n                  failedMessage.file = compressedFile;\n                  messagesDispatcher({\n                    type: messageActionTypes.SEND_MESSAGEGE_FAILURE,\n                    payload: failedMessage,\n                  });\n                })\n                .onSucceeded((succeededMessage) => {\n                  logger.info('Channel: Sending file message success!', succeededMessage);\n                  messagesDispatcher({\n                    type: messageActionTypes.SEND_MESSAGEGE_SUCESS,\n                    payload: succeededMessage,\n                  });\n                });\n            },\n            file.type,\n            compressionRate,\n          );\n        };\n      } catch (error) {\n        logger.error('Channel: Sending file message failed!', error);\n      }\n    } else { // Not using image compression\n      if (createCustomParams) {\n        logger.info('Channel: creating params using onBeforeSendFileMessage', onBeforeSendFileMessage);\n      }\n      const params = onBeforeSendFileMessage\n        ? onBeforeSendFileMessage(file, quoteMessage)\n        : createParamsDefault(file);\n      logger.info('Channel: Uploading file message start!', params);\n\n      currentGroupChannel.sendFileMessage(params)\n        .onPending((pendingMsg) => {\n          pubSub.publish(topics.SEND_MESSAGE_START, {\n            /* pubSub is used instead of messagesDispatcher\n              to avoid redundantly calling `messageActionTypes.SEND_MESSAGEGE_START` */\n            message: {\n              ...pendingMsg,\n              url: URL.createObjectURL(file),\n              // pending thumbnail message seems to be failed\n              requestState: 'pending',\n            },\n            channel: currentGroupChannel,\n          });\n          setTimeout(() => utils.scrollIntoLast(0, scrollRef), 1000);\n        })\n        .onFailed((error, message) => {\n          logger.error('Channel: Sending file message failed!', { message, error });\n          // eslint-disable-next-line no-param-reassign\n          message.localUrl = URL.createObjectURL(file);\n          // eslint-disable-next-line no-param-reassign\n          message.file = file;\n          messagesDispatcher({\n            type: messageActionTypes.SEND_MESSAGEGE_FAILURE,\n            payload: message,\n          });\n        })\n        .onSucceeded((message) => {\n          logger.info('Channel: Sending message success!', message);\n          messagesDispatcher({\n            type: messageActionTypes.SEND_MESSAGEGE_SUCESS,\n            payload: message,\n          });\n        });\n    }\n  }, [currentGroupChannel, onBeforeSendFileMessage, imageCompression]);\n  return [sendMessage];\n}\n","import { useCallback } from 'react';\n\nexport default function useToggleReactionCallback({ currentGroupChannel }, { logger }) {\n  return useCallback((message, key, isReacted) => {\n    if (isReacted) {\n      currentGroupChannel.deleteReaction(message, key)\n        .then((res) => {\n          logger.info('Delete reaction success', res);\n        })\n        .catch((err) => {\n          logger.warning('Delete reaction failed', err);\n        });\n      return;\n    }\n    currentGroupChannel.addReaction(message, key)\n      .then((res) => {\n        logger.info('Add reaction success', res);\n      })\n      .catch((err) => {\n        logger.warning('Add reaction failed', err);\n      });\n  }, [currentGroupChannel]);\n}\n","import type { BaseMessage } from '@sendbird/chat/message';\nimport { useCallback } from 'react';\n\nimport { Logger } from '../../../../index';\nimport { scrollToRenderedMessage } from '../utils';\n\ninterface DynamicParams {\n  setInitialTimeStamp: React.Dispatch<React.SetStateAction<number>>;\n  setAnimatedMessageId: React.Dispatch<React.SetStateAction<number>>;\n  allMessages: BaseMessage[];\n  scrollRef: React.RefObject<HTMLDivElement>;\n}\n\ninterface StaticParams {\n  logger: Logger;\n}\n\nfunction useScrollToMessage({\n  setInitialTimeStamp,\n  setAnimatedMessageId,\n  allMessages,\n  scrollRef,\n}: DynamicParams,\n{ logger }: StaticParams,\n): (createdAt: number, messageId: number) => void {\n  return useCallback(\n    (createdAt: number, messageId: number) => {\n      const isPresent = allMessages.find((m) => (\n        m.messageId === messageId\n      ));\n      setAnimatedMessageId(null);\n      setTimeout(() => {\n        if (isPresent) {\n          logger.info('Channel: scroll to message - message is present');\n          setAnimatedMessageId(messageId);\n          scrollToRenderedMessage(scrollRef, createdAt);\n        } else {\n          logger.info('Channel: scroll to message - fetching older messages');\n          setInitialTimeStamp(null);\n          setInitialTimeStamp(createdAt);\n          setAnimatedMessageId(messageId);\n        }\n      });\n    }, [\n      setInitialTimeStamp,\n      setAnimatedMessageId,\n      allMessages,\n    ],\n  );\n}\n\nexport default useScrollToMessage;\n","import { useCallback } from 'react';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { FileMessage, FileMessageCreateParams, MessageMetaArray, UserMessage } from '@sendbird/chat/message';\nimport { Logger } from '../../../../lib/SendbirdState';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport * as utils from '../utils';\nimport topics from '../../../../lib/pubSub/topics';\nimport {\n  META_ARRAY_MESSAGE_TYPE_KEY,\n  META_ARRAY_MESSAGE_TYPE_VALUE__VOICE,\n  META_ARRAY_VOICE_DURATION_KEY,\n  VOICE_MESSAGE_FILE_NAME,\n  VOICE_MESSAGE_MIME_TYPE,\n} from '../../../../utils/consts';\n\ninterface DynamicParams {\n  currentGroupChannel: GroupChannel;\n  onBeforeSendVoiceMessage?: (file: File, quoteMessage?: UserMessage | FileMessage) => FileMessageCreateParams;\n}\ninterface StaticParams {\n  logger: Logger;\n  pubSub: any;\n  scrollRef: React.RefObject<HTMLDivElement>;\n  messagesDispatcher: (props: { type: string, payload: any }) => void;\n}\ntype FuncType = (file: File, duration: number, quoteMessage: UserMessage | FileMessage) => void;\n\nexport const useSendVoiceMessageCallback = ({\n  currentGroupChannel,\n  onBeforeSendVoiceMessage,\n}: DynamicParams,\n{\n  logger,\n  pubSub,\n  scrollRef,\n  messagesDispatcher,\n}: StaticParams): Array<FuncType> => {\n  const sendMessage = useCallback((file: File, duration: number, quoteMessage: UserMessage | FileMessage) => {\n    const messageParams: FileMessageCreateParams = (\n      onBeforeSendVoiceMessage\n      && typeof onBeforeSendVoiceMessage === 'function'\n    )\n      ? onBeforeSendVoiceMessage(file, quoteMessage)\n      : {\n        file,\n        fileName: VOICE_MESSAGE_FILE_NAME,\n        mimeType: VOICE_MESSAGE_MIME_TYPE,\n        metaArrays: [\n          new MessageMetaArray({\n            key: META_ARRAY_VOICE_DURATION_KEY,\n            value: [`${duration}`],\n          }),\n          new MessageMetaArray({\n            key: META_ARRAY_MESSAGE_TYPE_KEY,\n            value: [META_ARRAY_MESSAGE_TYPE_VALUE__VOICE],\n          }),\n        ],\n      };\n    if (quoteMessage) {\n      messageParams.isReplyToChannel = true;\n      messageParams.parentMessageId = quoteMessage.messageId;\n    }\n    logger.info('Channel: Start sending voice message', messageParams);\n    currentGroupChannel.sendFileMessage(messageParams)\n      .onPending((pendingMessage) => {\n        pubSub.publish(topics.SEND_MESSAGE_START, {\n          /* pubSub is used instead of messagesDispatcher\n            to avoid redundantly calling `messageActionTypes.SEND_MESSAGEGE_START` */\n          message: pendingMessage,\n          channel: currentGroupChannel,\n        });\n        setTimeout(() => utils.scrollIntoLast(0, scrollRef), 1000);\n      })\n      .onFailed((err, failedMessage) => {\n        logger.error('Channel: Sending voice message failed!', { failedMessage, err });\n        messagesDispatcher({\n          type: messageActionTypes.SEND_MESSAGEGE_FAILURE,\n          payload: failedMessage,\n        });\n      })\n      .onSucceeded((succeededMessage) => {\n        logger.info('Channel: Sending voice message success!', succeededMessage);\n        messagesDispatcher({\n          type: messageActionTypes.SEND_MESSAGEGE_SUCESS,\n          payload: succeededMessage,\n        });\n      });\n  }, [\n    currentGroupChannel,\n    onBeforeSendVoiceMessage,\n  ]);\n  return [sendMessage];\n};\n\nexport default useSendVoiceMessageCallback;\n","import React, {\n  useEffect,\n  useState,\n  useReducer,\n  useRef,\n  useMemo,\n} from 'react';\n\nimport type { GroupChannel, SendbirdGroupChat } from '@sendbird/chat/groupChannel';\nimport type {\n  BaseMessage,\n  FileMessage,\n  FileMessageCreateParams,\n  UserMessage,\n  UserMessageCreateParams,\n  UserMessageUpdateParams,\n} from '@sendbird/chat/message';\nimport type { SendbirdError, User } from '@sendbird/chat';\n\nimport { ReplyType, RenderUserProfileProps, Nullable } from '../../../types';\nimport { UserProfileProvider } from '../../../lib/UserProfileContext';\nimport useSendbirdStateContext from '../../../hooks/useSendbirdStateContext';\nimport { CoreMessageType } from '../../../utils';\n\nimport * as utils from './utils';\nimport { getIsReactionEnabled } from '../../../utils/getIsReactionEnabled';\n\nimport messagesInitialState from './dux/initialState';\nimport messagesReducer from './dux/reducers';\nimport * as messageActionTypes from './dux/actionTypes';\n\nimport useHandleChannelEvents from './hooks/useHandleChannelEvents';\nimport useGetChannel from './hooks/useGetChannel';\nimport useInitialMessagesFetch from './hooks/useInitialMessagesFetch';\nimport useHandleReconnect from './hooks/useHandleReconnect';\nimport useScrollCallback from './hooks/useScrollCallback';\nimport useScrollDownCallback from './hooks/useScrollDownCallback';\nimport useDeleteMessageCallback from './hooks/useDeleteMessageCallback';\nimport useUpdateMessageCallback from './hooks/useUpdateMessageCallback';\nimport useResendMessageCallback from './hooks/useResendMessageCallback';\nimport useSendMessageCallback from './hooks/useSendMessageCallback';\nimport useSendFileMessageCallback from './hooks/useSendFileMessageCallback';\nimport useToggleReactionCallback from './hooks/useToggleReactionCallback';\nimport useScrollToMessage from './hooks/useScrollToMessage';\nimport { CustomUseReducerDispatcher } from '../../../lib/SendbirdState';\nimport useSendVoiceMessageCallback from './hooks/useSendVoiceMessageCallback';\n\nexport type MessageListParams = {\n  // https://sendbird.github.io/core-sdk-javascript/module-model_params_messageListParams-MessageListParams.html\n  replyType?: string,\n  messageType?: string,\n  prevResultSize?: number,\n  nextResultSize?: number,\n  reverse?: boolean,\n  isInclusive?: boolean,\n  includeMetaArray?: boolean,\n  includeReactions?: boolean,\n  includeThreadInfo?: boolean,\n  includeParentMessageInfo?: boolean,\n  showSubchannelMessagesOnly?: boolean,\n  customTypes?: Array<string>,\n  senderUserIds?: Array<string>,\n};\n\nexport type ChannelQueries = {\n  messageListParams?: MessageListParams;\n};\n\nexport enum ThreadReplySelectType {\n  PARENT = 'PARENT',\n  THREAD = 'THREAD',\n}\n\nexport type ChannelContextProps = {\n  children?: React.ReactElement;\n  channelUrl: string;\n  isReactionEnabled?: boolean;\n  isMessageGroupingEnabled?: boolean;\n  showSearchIcon?: boolean;\n  animatedMessage?: number | null;\n  highlightedMessage?: number | null;\n  startingPoint?: number | null;\n  onBeforeSendUserMessage?(text: string, quotedMessage?: UserMessage | FileMessage): UserMessageCreateParams;\n  onBeforeSendFileMessage?(file: File, quotedMessage?: UserMessage | FileMessage): FileMessageCreateParams;\n  onBeforeUpdateUserMessage?(text: string): UserMessageUpdateParams;\n  onChatHeaderActionClick?(event: React.MouseEvent<HTMLElement>): void;\n  onBeforeSendVoiceMessage?: (file: File, quotedMessage?: UserMessage | FileMessage) => FileMessageCreateParams;\n  onSearchClick?(): void;\n  onBackClick?(): void;\n  replyType?: ReplyType;\n  threadReplySelectType?: ThreadReplySelectType;\n  queries?: ChannelQueries;\n  renderUserProfile?: (props: RenderUserProfileProps) => React.ReactElement;\n  filterMessageList?(messages: BaseMessage): boolean;\n  disableUserProfile?: boolean;\n  disableMarkAsRead?: boolean;\n  onReplyInThread?: (props: { message: UserMessage | FileMessage }) => void;\n  onQuoteMessageClick?: (props: { message: UserMessage | FileMessage }) => void;\n  onMessageAnimated?: () => void;\n  onMessageHighlighted?: () => void;\n};\n\ninterface MessageStoreInterface {\n  allMessages: CoreMessageType[];\n  loading: boolean;\n  initialized: boolean;\n  unreadSince: string;\n  isInvalid: boolean;\n  currentGroupChannel: Nullable<GroupChannel>;\n  hasMorePrev: boolean;\n  oldestMessageTimeStamp: number;\n  hasMoreNext: boolean;\n  latestMessageTimeStamp: number;\n  emojiContainer: any;\n  readStatus: any;\n}\n\ninterface SendMessageParams {\n  message: string;\n  quoteMessage?: UserMessage | FileMessage;\n  // mentionedUserIds?: Array<string>;\n  mentionedUsers?: Array<User>;\n  mentionTemplate?: string;\n}\n\ninterface UpdateMessageProps {\n  messageId: string | number;\n  message: string;\n  mentionedUsers?: Array<User>;\n  mentionTemplate?: string;\n}\n\ninterface ChannelProviderInterface extends ChannelContextProps, MessageStoreInterface {\n  scrollToMessage?(createdAt: number, messageId: number): void;\n  messageActionTypes: Record<string, string>;\n  messagesDispatcher: CustomUseReducerDispatcher;\n  quoteMessage: UserMessage | FileMessage;\n  setQuoteMessage: React.Dispatch<React.SetStateAction<UserMessage | FileMessage>>;\n  initialTimeStamp: number;\n  setInitialTimeStamp: React.Dispatch<React.SetStateAction<number>>;\n  animatedMessageId: number;\n  highLightedMessageId: number;\n  nicknamesMap: Map<string, string>;\n  emojiAllMap: any;\n  onScrollCallback: any;\n  onScrollDownCallback: any;\n  scrollRef: React.MutableRefObject<HTMLDivElement>;\n  setAnimatedMessageId: React.Dispatch<React.SetStateAction<number>>;\n  setHighLightedMessageId: React.Dispatch<React.SetStateAction<number>>;\n  messageInputRef: React.MutableRefObject<HTMLInputElement>,\n  deleteMessage(message: CoreMessageType): Promise<CoreMessageType>,\n  updateMessage(props: UpdateMessageProps, callback?: (err: SendbirdError, message: UserMessage) => void): Promise<CoreMessageType>,\n  resendMessage(failedMessage: UserMessage | FileMessage): Promise<UserMessage | FileMessage>,\n  // TODO: Good to change interface to using params / This part need refactoring\n  sendMessage(props: SendMessageParams): Promise<UserMessage>,\n  sendFileMessage(file: File, quoteMessage: UserMessage | FileMessage): Promise<FileMessage>,\n  sendVoiceMessage: (file: File, duration: number, quoteMessage?: UserMessage | FileMessage) => void,\n  // sendMessage(messageParams: SendBird.UserMessageParams): Promise<SendBird.UserMessage>,\n  // sendFileMessage(messageParams: SendBird.FileMessageParams): Promise<SendBird.FileMessage>,\n  toggleReaction(message: UserMessage | FileMessage, emojiKey: string, isReacted: boolean): void,\n  renderUserMentionItem?: (props: { user: User }) => JSX.Element;\n}\n\nconst ChannelContext = React.createContext<ChannelProviderInterface | null>(undefined);\n\nconst ChannelProvider: React.FC<ChannelContextProps> = (props: ChannelContextProps) => {\n  const {\n    channelUrl,\n    children,\n    isReactionEnabled,\n    isMessageGroupingEnabled = true,\n    showSearchIcon,\n    animatedMessage,\n    highlightedMessage,\n    startingPoint,\n    onBeforeSendUserMessage,\n    onBeforeSendFileMessage,\n    onBeforeUpdateUserMessage,\n    onBeforeSendVoiceMessage,\n    onChatHeaderActionClick,\n    onSearchClick,\n    onBackClick,\n    replyType,\n    threadReplySelectType = ThreadReplySelectType.THREAD,\n    queries,\n    filterMessageList,\n    disableMarkAsRead = false,\n    onReplyInThread,\n    onQuoteMessageClick,\n    onMessageAnimated,\n    onMessageHighlighted,\n  } = props;\n\n  const globalStore = useSendbirdStateContext();\n  const { config } = globalStore;\n  const {\n    pubSub,\n    logger,\n    userId,\n    isOnline,\n    imageCompression,\n    isMentionEnabled,\n    isVoiceMessageEnabled,\n    onUserProfileMessage,\n    markAsReadScheduler,\n  } = config;\n  const sdk = globalStore?.stores?.sdkStore?.sdk as SendbirdGroupChat;\n  const sdkInit = globalStore?.stores?.sdkStore?.initialized;\n\n  const [initialTimeStamp, setInitialTimeStamp] = useState(startingPoint);\n  useEffect(() => {\n    setInitialTimeStamp(startingPoint);\n  }, [startingPoint, channelUrl]);\n  const [animatedMessageId, setAnimatedMessageId] = useState(0);\n  const [highLightedMessageId, setHighLightedMessageId] = useState(highlightedMessage);\n  useEffect(() => {\n    setHighLightedMessageId(highlightedMessage);\n  }, [highlightedMessage]);\n  const userFilledMessageListQuery = queries?.messageListParams;\n  const [quoteMessage, setQuoteMessage] = useState<UserMessage | FileMessage>(null);\n\n  const [messagesStore, messagesDispatcher] = useReducer(\n    messagesReducer,\n    messagesInitialState,\n  ) as [MessageStoreInterface, CustomUseReducerDispatcher];\n  const scrollRef = useRef(null);\n\n  const {\n    allMessages,\n    loading,\n    initialized,\n    unreadSince,\n    isInvalid,\n    currentGroupChannel,\n    hasMorePrev,\n    oldestMessageTimeStamp,\n    hasMoreNext,\n    latestMessageTimeStamp,\n    emojiContainer,\n    readStatus,\n  } = messagesStore;\n\n  const isSuper = currentGroupChannel?.isSuper || false;\n  const isBroadcast = currentGroupChannel?.isBroadcast || false;\n  const usingReaction = getIsReactionEnabled({\n    isBroadcast,\n    isSuper,\n    globalLevel: config?.isReactionEnabled,\n    moduleLevel: isReactionEnabled,\n  });\n\n  const emojiAllMap = useMemo(() => (\n    usingReaction\n      ? utils.getAllEmojisMapFromEmojiContainer(emojiContainer)\n      : new Map()\n  ), [emojiContainer]);\n  const nicknamesMap: Map<string, string> = useMemo(() => (\n    (usingReaction && currentGroupChannel)\n      ? utils.getNicknamesMapFromMembers(currentGroupChannel?.members)\n      : new Map()\n  ), [currentGroupChannel?.members]);\n\n  // Animate message\n  useEffect(() => {\n    if (animatedMessage) {\n      setAnimatedMessageId(animatedMessage);\n    }\n  }, [animatedMessage]);\n\n  // Scrollup is default scroll for channel\n  const onScrollCallback = useScrollCallback({\n    currentGroupChannel,\n    oldestMessageTimeStamp,\n    userFilledMessageListQuery,\n    replyType,\n    isVoiceMessageEnabled,\n  }, {\n    hasMorePrev,\n    logger,\n    messagesDispatcher,\n    sdk,\n  });\n\n  const scrollToMessage = useScrollToMessage({\n    setInitialTimeStamp,\n    setAnimatedMessageId,\n    allMessages,\n    scrollRef,\n  }, { logger });\n\n  // onScrollDownCallback is added for navigation to different timestamps on messageSearch\n  // hasMorePrev, onScrollCallback -> scroll up(default behavior)\n  // hasMoreNext, onScrollDownCallback -> scroll down\n  const onScrollDownCallback = useScrollDownCallback({\n    currentGroupChannel,\n    latestMessageTimeStamp,\n    userFilledMessageListQuery,\n    hasMoreNext,\n    replyType,\n    isVoiceMessageEnabled,\n  }, {\n    logger,\n    messagesDispatcher,\n    sdk,\n  });\n\n  const toggleReaction = useToggleReactionCallback({ currentGroupChannel }, { logger });\n\n  // to create message-datasource\n  // this hook sets currentGroupChannel asynchronously\n  useGetChannel(\n    { channelUrl, sdkInit, disableMarkAsRead },\n    { messagesDispatcher, sdk, logger, markAsReadScheduler },\n  );\n\n  // to set quote message as null\n  useEffect(() => {\n    setQuoteMessage(null);\n  }, [channelUrl]);\n\n  // Hook to handle ChannelEvents and send values to useReducer using messagesDispatcher\n  useHandleChannelEvents(\n    {\n      currentGroupChannel,\n      sdkInit,\n      currentUserId: userId,\n      disableMarkAsRead,\n    },\n    {\n      messagesDispatcher,\n      sdk,\n      logger,\n      scrollRef,\n      setQuoteMessage,\n    },\n  );\n\n  // hook that fetches messages when channel changes\n  // to be clear here useGetChannel sets currentGroupChannel\n  // and useInitialMessagesFetch executes when currentGroupChannel changes\n  // p.s This one executes on initialTimeStamp change too\n  useInitialMessagesFetch({\n    currentGroupChannel,\n    userFilledMessageListQuery,\n    initialTimeStamp,\n    latestMessageTimeStamp,\n    replyType,\n    isVoiceMessageEnabled,\n  }, {\n    logger,\n    scrollRef,\n    messagesDispatcher,\n  });\n\n  // handles API calls from withSendbird\n  useEffect(() => {\n    const subscriber = utils.pubSubHandler({\n      channelUrl,\n      pubSub,\n      dispatcher: messagesDispatcher,\n      scrollRef,\n    });\n    return () => {\n      utils.pubSubHandleRemover(subscriber);\n    };\n  }, [channelUrl, sdkInit]);\n\n  // handling connection breaks\n  useHandleReconnect({ isOnline, replyType, disableMarkAsRead }, {\n    logger,\n    sdk,\n    scrollRef,\n    currentGroupChannel,\n    messagesDispatcher,\n    userFilledMessageListQuery,\n    markAsReadScheduler,\n  });\n\n  // callbacks for Message CURD actions\n  const deleteMessage = useDeleteMessageCallback({ currentGroupChannel, messagesDispatcher },\n    { logger });\n  const updateMessage = useUpdateMessageCallback(\n    { currentGroupChannel, messagesDispatcher, onBeforeUpdateUserMessage, isMentionEnabled },\n    { logger, pubSub },\n  );\n  const resendMessage = useResendMessageCallback(\n    { currentGroupChannel, messagesDispatcher },\n    { logger },\n  );\n  const [messageInputRef, sendMessage] = useSendMessageCallback(\n    { currentGroupChannel, onBeforeSendUserMessage, isMentionEnabled },\n    {\n      logger,\n      pubSub,\n      scrollRef,\n      messagesDispatcher,\n    },\n  );\n  const [sendFileMessage] = useSendFileMessageCallback(\n    { currentGroupChannel, onBeforeSendFileMessage, imageCompression },\n    {\n      logger,\n      pubSub,\n      scrollRef,\n      messagesDispatcher,\n    },\n  );\n  const [sendVoiceMessage] = useSendVoiceMessageCallback(\n    {\n      currentGroupChannel,\n      onBeforeSendVoiceMessage,\n    },\n    {\n      logger,\n      pubSub,\n      scrollRef,\n      messagesDispatcher,\n    },\n  );\n\n  return (\n    <ChannelContext.Provider value={{\n      // props\n      channelUrl,\n      isReactionEnabled: usingReaction,\n      isMessageGroupingEnabled,\n      showSearchIcon,\n      highlightedMessage,\n      startingPoint,\n      onBeforeSendUserMessage,\n      onBeforeSendFileMessage,\n      onBeforeUpdateUserMessage,\n      onChatHeaderActionClick,\n      onSearchClick,\n      onBackClick,\n      replyType,\n      threadReplySelectType,\n      queries,\n      filterMessageList,\n      disableMarkAsRead,\n      onReplyInThread,\n      onQuoteMessageClick,\n      onMessageAnimated,\n      onMessageHighlighted,\n\n      // messagesStore\n      allMessages,\n      loading,\n      initialized,\n      unreadSince,\n      isInvalid,\n      currentGroupChannel,\n      hasMorePrev,\n      hasMoreNext,\n      oldestMessageTimeStamp,\n      latestMessageTimeStamp,\n      emojiContainer,\n      readStatus,\n\n      // utils\n      scrollToMessage,\n      quoteMessage,\n      setQuoteMessage,\n      deleteMessage,\n      updateMessage,\n      resendMessage,\n      messageInputRef,\n      sendMessage,\n      sendFileMessage,\n      sendVoiceMessage,\n      initialTimeStamp,\n      messageActionTypes,\n      messagesDispatcher,\n      setInitialTimeStamp,\n      setAnimatedMessageId,\n      setHighLightedMessageId,\n      animatedMessageId,\n      highLightedMessageId,\n      nicknamesMap,\n      emojiAllMap,\n      onScrollCallback,\n      onScrollDownCallback,\n      scrollRef,\n      toggleReaction,\n    }}>\n      <UserProfileProvider\n        disableUserProfile={props?.disableUserProfile}\n        renderUserProfile={props?.renderUserProfile}\n        onUserProfileMessage={onUserProfileMessage}\n      >\n        {children}\n      </UserProfileProvider>\n    </ChannelContext.Provider>\n  );\n};\n\nexport type UseChannelType = () => ChannelProviderInterface;\nconst useChannelContext: UseChannelType = () => React.useContext(ChannelContext);\n\nexport {\n  ChannelProvider,\n  useChannelContext,\n};\n"]},"metadata":{},"sourceType":"module"}