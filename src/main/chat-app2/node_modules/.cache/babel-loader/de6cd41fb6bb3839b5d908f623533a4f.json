{"ast":null,"code":"import _toConsumableArray from \"C:/Users/\\uC774\\uACBD\\uBBFC/IdeaProjects/sendbird-uikit-whatsapp-sample/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _defineProperty from \"C:/Users/\\uC774\\uACBD\\uBBFC/IdeaProjects/sendbird-uikit-whatsapp-sample/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport React__default from 'react';\nimport { f as format } from './index-7cdd58b8.js';\nimport Icon, { IconTypes, IconColors } from './ui/Icon.js';\nimport { c as LabelStringSet, L as Label, a as LabelTypography, b as LabelColors } from './index-63949de5.js';\nimport Loader from './ui/Loader.js';\nimport { t as truncateString, e as isSentStatus } from './index-7eb65acf.js';\nimport { getOutgoingMessageState, OutgoingMessageStates } from './utils/message/getOutgoingMessageState.js';\nimport { i as isToday, a as isYesterday, b as isThisYear } from './index-306bc4ab.js';\nimport { u as useLocalization } from './LocalizationContext-076d6d2e.js';\n\n/* eslint-disable default-param-last */\nvar getChannelTitle = function getChannelTitle() {\n  var _channel$members;\n  var channel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var currentUserId = arguments.length > 1 ? arguments[1] : undefined;\n  var stringSet = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : LabelStringSet;\n  if (!(channel !== null && channel !== void 0 && channel.name) && !(channel !== null && channel !== void 0 && channel.members)) {\n    return stringSet.NO_TITLE;\n  }\n  if (channel !== null && channel !== void 0 && channel.name && channel.name !== 'Group Channel') {\n    return channel.name;\n  }\n  if ((channel === null || channel === void 0 ? void 0 : (_channel$members = channel.members) === null || _channel$members === void 0 ? void 0 : _channel$members.length) === 1) {\n    return stringSet.NO_MEMBERS;\n  }\n  return ((channel === null || channel === void 0 ? void 0 : channel.members) || []).filter(function (_ref) {\n    var userId = _ref.userId;\n    return userId !== currentUserId;\n  }).map(function (_ref2) {\n    var nickname = _ref2.nickname;\n    return nickname || stringSet.NO_NAME;\n  }).join(', ');\n};\nvar getLastMessageCreatedAt = function getLastMessageCreatedAt(_ref3) {\n  var _channel$lastMessage;\n  var channel = _ref3.channel,\n    locale = _ref3.locale,\n    stringSet = _ref3.stringSet;\n  var createdAt = channel === null || channel === void 0 ? void 0 : (_channel$lastMessage = channel.lastMessage) === null || _channel$lastMessage === void 0 ? void 0 : _channel$lastMessage.createdAt;\n  var optionalParam = locale ? {\n    locale: locale\n  } : null;\n  if (!createdAt) {\n    return '';\n  }\n  if (isToday(createdAt)) {\n    return format(createdAt, 'p', optionalParam);\n  }\n  if (isYesterday(createdAt)) {\n    return (stringSet === null || stringSet === void 0 ? void 0 : stringSet.MESSAGE_STATUS__YESTERDAY) || 'Yesterday';\n  }\n  if (isThisYear(createdAt)) {\n    return format(createdAt, 'MMM d', optionalParam);\n  }\n  return format(createdAt, 'yyyy/M/d', optionalParam);\n};\nvar getTotalMembers = function getTotalMembers(channel) {\n  return channel !== null && channel !== void 0 && channel.memberCount ? channel.memberCount : 0;\n};\nvar getPrettyLastMessage = function getPrettyLastMessage() {\n  var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var MAXLEN = 30;\n  var messageType = message.messageType,\n    name = message.name;\n  if (messageType === 'file') {\n    return truncateString(name, MAXLEN);\n  }\n  return message.message;\n};\nvar getLastMessage = function getLastMessage(channel) {\n  return channel !== null && channel !== void 0 && channel.lastMessage ? getPrettyLastMessage(channel === null || channel === void 0 ? void 0 : channel.lastMessage) : '';\n};\nvar getChannelUnreadMessageCount = function getChannelUnreadMessageCount(channel) {\n  return channel !== null && channel !== void 0 && channel.unreadMessageCount ? channel.unreadMessageCount : 0;\n};\nvar MessageStatusTypes = OutgoingMessageStates;\nfunction MessageStatus(_ref) {\n  var _iconType, _iconColor;\n  var _channel$isGroupChann;\n  var className = _ref.className,\n    message = _ref.message,\n    channel = _ref.channel,\n    _ref$isDateSeparatorC = _ref.isDateSeparatorConsidered,\n    isDateSeparatorConsidered = _ref$isDateSeparatorC === void 0 ? true : _ref$isDateSeparatorC;\n  var _useLocalization = useLocalization(),\n    stringSet = _useLocalization.stringSet,\n    dateLocale = _useLocalization.dateLocale;\n  var status = getOutgoingMessageState(channel, message);\n  var hideMessageStatusIcon = (channel === null || channel === void 0 ? void 0 : (_channel$isGroupChann = channel.isGroupChannel) === null || _channel$isGroupChann === void 0 ? void 0 : _channel$isGroupChann.call(channel)) && (channel.isSuper || channel.isPublic || channel.isBroadcast) && !(status === OutgoingMessageStates.PENDING || status === OutgoingMessageStates.FAILED);\n  var iconType = (_iconType = {}, _defineProperty(_iconType, OutgoingMessageStates.SENT, IconTypes.DONE), _defineProperty(_iconType, OutgoingMessageStates.DELIVERED, IconTypes.DONE_ALL), _defineProperty(_iconType, OutgoingMessageStates.READ, IconTypes.DONE_ALL), _defineProperty(_iconType, OutgoingMessageStates.FAILED, IconTypes.ERROR), _iconType);\n  var iconColor = (_iconColor = {}, _defineProperty(_iconColor, OutgoingMessageStates.SENT, IconColors.SENT), _defineProperty(_iconColor, OutgoingMessageStates.DELIVERED, IconColors.SENT), _defineProperty(_iconColor, OutgoingMessageStates.READ, IconColors.READ), _defineProperty(_iconColor, OutgoingMessageStates.FAILED, IconColors.ERROR), _iconColor);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: [].concat(_toConsumableArray(Array.isArray(className) ? className : [className]), ['sendbird-message-status']).join(' ')\n  }, status === OutgoingMessageStates.PENDING ? /*#__PURE__*/React__default.createElement(Loader, {\n    className: \"sendbird-message-status__icon\",\n    width: \"16px\",\n    height: \"16px\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.SPINNER,\n    fillColor: IconColors.PRIMARY,\n    width: \"16px\",\n    height: \"16px\"\n  })) : /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-message-status__icon \".concat(hideMessageStatusIcon ? 'hide-icon' : '', \" \").concat(status === OutgoingMessageStates.FAILED ? '' : 'sendbird-message-status--sent'),\n    type: iconType[status] || IconTypes.ERROR,\n    fillColor: iconColor[status],\n    width: \"16px\",\n    height: \"16px\"\n  }), isSentStatus(status) && /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-message-status__text\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_2\n  }, isDateSeparatorConsidered ? format((message === null || message === void 0 ? void 0 : message.createdAt) || 0, 'p', {\n    locale: dateLocale\n  }) : getLastMessageCreatedAt({\n    channel: channel,\n    locale: dateLocale,\n    stringSet: stringSet\n  })));\n}\nexport { MessageStatus as M, getTotalMembers as a, getLastMessageCreatedAt as b, getLastMessage as c, getChannelUnreadMessageCount as d, MessageStatusTypes as e, getChannelTitle as g };","map":{"version":3,"mappings":"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","names":["getChannelTitle","channel","currentUserId","stringSet","LabelStringSet","name","members","NO_TITLE","_channel$members","length","NO_MEMBERS","filter","_ref","userId","map","_ref2","nickname","NO_NAME","join","getLastMessageCreatedAt","_ref3","locale","createdAt","lastMessage","_channel$lastMessage","optionalParam","isToday","format","isYesterday","MESSAGE_STATUS__YESTERDAY","isThisYear","getTotalMembers","memberCount","getPrettyLastMessage","message","MAXLEN","messageType","truncateString","getLastMessage","getChannelUnreadMessageCount","unreadMessageCount","MessageStatusTypes","OutgoingMessageStates","MessageStatus","className","isDateSeparatorConsidered","useLocalization","dateLocale","status","getOutgoingMessageState","hideMessageStatusIcon","isGroupChannel","_channel$isGroupChann","isSuper","isPublic","isBroadcast","PENDING","FAILED","iconType","SENT","IconTypes","DONE","DELIVERED","DONE_ALL","READ","ERROR","iconColor","IconColors","React","Array","isArray","Loader","width","height","Icon","type","SPINNER","fillColor","PRIMARY","isSentStatus","Label","LabelTypography","CAPTION_3","color","LabelColors","ONBACKGROUND_2"],"sources":["C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\ChannelList\\components\\ChannelPreview\\utils.js","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\ui\\MessageStatus\\index.tsx"],"sourcesContent":["import isToday from 'date-fns/isToday';\nimport format from 'date-fns/format';\nimport isThisYear from 'date-fns/isThisYear';\nimport isYesterday from 'date-fns/isYesterday';\n\nimport { truncateString } from '../../../../utils';\nimport { LabelStringSet } from '../../../../ui/Label';\n\n/* eslint-disable default-param-last */\nexport const getChannelTitle = (channel = {}, currentUserId, stringSet = LabelStringSet) => {\n  if (!channel?.name && !channel?.members) {\n    return stringSet.NO_TITLE;\n  }\n  if (channel?.name && channel.name !== 'Group Channel') {\n    return channel.name;\n  }\n  if (channel?.members?.length === 1) {\n    return stringSet.NO_MEMBERS;\n  }\n  return (channel?.members || [])\n    .filter(({ userId }) => userId !== currentUserId)\n    .map(({ nickname }) => (nickname || stringSet.NO_NAME))\n    .join(', ');\n};\n\nexport const getLastMessageCreatedAt = ({\n  channel,\n  locale,\n  stringSet,\n}) => {\n  const createdAt = channel?.lastMessage?.createdAt;\n  const optionalParam = locale ? { locale } : null;\n  if (!createdAt) {\n    return '';\n  }\n  if (isToday(createdAt)) {\n    return format(createdAt, 'p', optionalParam);\n  }\n  if (isYesterday(createdAt)) {\n    return stringSet?.MESSAGE_STATUS__YESTERDAY || 'Yesterday';\n  }\n  if (isThisYear(createdAt)) {\n    return format(createdAt, 'MMM d', optionalParam);\n  }\n  return format(createdAt, 'yyyy/M/d', optionalParam);\n};\n\nexport const getTotalMembers = (channel) => (\n  channel?.memberCount\n    ? channel.memberCount\n    : 0\n);\n\nconst getPrettyLastMessage = (message = {}) => {\n  const MAXLEN = 30;\n  const { messageType, name } = message;\n  if (messageType === 'file') {\n    return truncateString(name, MAXLEN);\n  }\n  return message.message;\n};\n\nexport const getLastMessage = (channel) => (channel?.lastMessage ? getPrettyLastMessage(channel?.lastMessage) : '');\n\nexport const getChannelUnreadMessageCount = (channel) => (\n  channel?.unreadMessageCount\n    ? channel.unreadMessageCount\n    : 0\n);\n","import './index.scss';\nimport React from 'react';\nimport format from 'date-fns/format';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { FileMessage, UserMessage } from '@sendbird/chat/message';\n\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport Label, { LabelColors, LabelTypography } from '../Label';\nimport Loader from '../Loader';\n\nimport { isSentStatus } from '../../utils';\nimport {\n  getOutgoingMessageState,\n  OutgoingMessageStates,\n} from '../../utils/exports/getOutgoingMessageState';\nimport { getLastMessageCreatedAt } from '../../modules/ChannelList/components/ChannelPreview/utils';\nimport { useLocalization } from '../../lib/LocalizationContext';\nimport { Nullable } from '../../types';\n\nexport const MessageStatusTypes = OutgoingMessageStates;\n\ninterface MessageStatusProps {\n  className?: string;\n  message: UserMessage | FileMessage;\n  channel: Nullable<GroupChannel>;\n  isDateSeparatorConsidered?: boolean;\n}\n\nexport default function MessageStatus({\n  className,\n  message,\n  channel,\n  isDateSeparatorConsidered = true,\n}: MessageStatusProps): React.ReactElement {\n  const { stringSet, dateLocale } = useLocalization();\n  const status = getOutgoingMessageState(channel, message);\n  const hideMessageStatusIcon = channel?.isGroupChannel?.() && (\n    (channel.isSuper || channel.isPublic || channel.isBroadcast)\n    && !(status === OutgoingMessageStates.PENDING || status === OutgoingMessageStates.FAILED)\n  );\n  const iconType = {\n    [OutgoingMessageStates.SENT]: IconTypes.DONE,\n    [OutgoingMessageStates.DELIVERED]: IconTypes.DONE_ALL,\n    [OutgoingMessageStates.READ]: IconTypes.DONE_ALL,\n    [OutgoingMessageStates.FAILED]: IconTypes.ERROR,\n  };\n  const iconColor = {\n    [OutgoingMessageStates.SENT]: IconColors.SENT,\n    [OutgoingMessageStates.DELIVERED]: IconColors.SENT,\n    [OutgoingMessageStates.READ]: IconColors.READ,\n    [OutgoingMessageStates.FAILED]: IconColors.ERROR,\n  };\n\n  return (\n    <div\n      className={[\n        ...(Array.isArray(className) ? className : [className]),\n        'sendbird-message-status',\n      ].join(' ')}\n    >\n      {(status === OutgoingMessageStates.PENDING) ? (\n        <Loader\n          className=\"sendbird-message-status__icon\"\n          width=\"16px\"\n          height=\"16px\"\n        >\n          <Icon\n            type={IconTypes.SPINNER}\n            fillColor={IconColors.PRIMARY}\n            width=\"16px\"\n            height=\"16px\"\n          />\n        </Loader>\n      ) : (\n        <Icon\n          className={`sendbird-message-status__icon ${hideMessageStatusIcon ? 'hide-icon' : ''} ${status === OutgoingMessageStates.FAILED ? '' : 'sendbird-message-status--sent'\n          }`}\n          type={iconType[status] || IconTypes.ERROR}\n          fillColor={iconColor[status]}\n          width=\"16px\"\n          height=\"16px\"\n        />\n      )}\n      {isSentStatus(status) && (\n        <Label\n          className=\"sendbird-message-status__text\"\n          type={LabelTypography.CAPTION_3}\n          color={LabelColors.ONBACKGROUND_2}\n        >\n          {\n            isDateSeparatorConsidered\n              ? format(message?.createdAt || 0, 'p', { locale: dateLocale })\n              : getLastMessageCreatedAt({ channel, locale: dateLocale, stringSet })\n          }\n        </Label>\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}