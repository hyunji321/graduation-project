{"ast":null,"code":"import React__default, { useContext, useState } from 'react';\nimport useSendbirdStateContext from '../../useSendbirdStateContext.js';\nimport { useChannelSettingsContext } from '../context.js';\nimport { P as PlaceHolder, a as PlaceHolderTypes } from '../../index-cef1cfff.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../../index-63949de5.js';\nimport { a as LocalizationContext } from '../../LocalizationContext-076d6d2e.js';\nimport Icon, { IconTypes, IconColors } from '../../ui/Icon.js';\nimport IconButton from '../../ui/IconButton.js';\nimport ChannelProfile from './ChannelProfile.js';\nimport AdminPannel from './ModerationPanel.js';\nimport LeaveChannel from './LeaveChannel.js';\nimport UserPanel from './UserPanel.js';\nimport '../../withSendbird.js';\nimport '../../_rollupPluginBabelHelpers-6bb0305c.js';\nimport '../../UserProfileContext-9cfbab4d.js';\nimport 'prop-types';\nimport '../../uuid-1adedf62.js';\nimport '../../ui/Loader.js';\nimport '../../stringSet-13bbd4a2.js';\nimport '../../index-99aabd9e.js';\nimport '../../ui/ChannelAvatar.js';\nimport '../../ui/Avatar.js';\nimport '../../ui/ImageRenderer.js';\nimport '../../utils-d86ad6ab.js';\nimport '../../ui/TextButton.js';\nimport '../../color-879cc347.js';\nimport './EditDetailsModal.js';\nimport '../../ui/Modal.js';\nimport 'react-dom';\nimport '../../index-38e61c64.js';\nimport '../../ui/Button.js';\nimport '../../MediaQueryContext-11f0e43f.js';\nimport '../../ui/Input.js';\nimport '../../ui/Accordion.js';\nimport '../../ui/AccordionGroup.js';\nimport '../../context-63cbe5bd.js';\nimport '../../utils-4bbbca2c.js';\nimport '../../ui/Badge.js';\nimport '../../ui/Toggle.js';\nimport '../../ui/ContextMenu.js';\nimport '../../ui/SortByRow.js';\nimport '../../index-7eb65acf.js';\nimport '../../utils/message/getOutgoingMessageState.js';\nimport './UserListItem.js';\nimport '../../ui/MutedAvatarOverlay.js';\nimport '../../ui/UserProfile.js';\nimport '../../sendbirdSelectors.js';\nimport '../../topics-b2b77fb9.js';\nimport '../../ui/UserListItem.js';\nimport '../../ui/Checkbox.js';\nimport '@sendbird/chat/groupChannel';\nimport '../../MemberList-061d186f.js';\nconst ChannelSettingsUI = props => {\n  var _state$config, _state$config2;\n  const {\n    stringSet\n  } = useContext(LocalizationContext);\n  const state = useSendbirdStateContext();\n  const channelSettingStore = useChannelSettingsContext();\n  const [showLeaveChannelModal, setShowLeaveChannelModal] = useState(false);\n  const isOnline = state === null || state === void 0 ? void 0 : (_state$config = state.config) === null || _state$config === void 0 ? void 0 : _state$config.isOnline;\n  const logger = state === null || state === void 0 ? void 0 : (_state$config2 = state.config) === null || _state$config2 === void 0 ? void 0 : _state$config2.logger;\n  const {\n    channel,\n    invalidChannel,\n    onCloseClick\n  } = channelSettingStore;\n  const {\n    renderPlaceholderError,\n    renderChannelProfile,\n    renderModerationPanel,\n    renderLeaveChannel\n  } = props;\n  if (!channel || invalidChannel) {\n    return /*#__PURE__*/React__default.createElement(\"div\", null, /*#__PURE__*/React__default.createElement(\"div\", {\n      className: \"sendbird-channel-settings__header\"\n    }, /*#__PURE__*/React__default.createElement(Label, {\n      type: LabelTypography.H_2,\n      color: LabelColors.ONBACKGROUND_1\n    }, stringSet.CHANNEL_SETTING__HEADER__TITLE), /*#__PURE__*/React__default.createElement(Icon, {\n      className: \"sendbird-channel-settings__close-icon\",\n      type: IconTypes.CLOSE,\n      height: \"24px\",\n      width: \"24px\",\n      onClick: () => {\n        logger.info('ChannelSettings: Click close');\n        onCloseClick === null || onCloseClick === void 0 ? void 0 : onCloseClick();\n      }\n    })), /*#__PURE__*/React__default.createElement(\"div\", null, renderPlaceholderError ? renderPlaceholderError() : /*#__PURE__*/React__default.createElement(PlaceHolder, {\n      type: PlaceHolderTypes.WRONG\n    })));\n  }\n  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-settings__header\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.H_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.CHANNEL_SETTING__HEADER__TITLE), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-settings__header-icon\"\n  }, /*#__PURE__*/React__default.createElement(IconButton, {\n    width: \"32px\",\n    height: \"32px\",\n    onClick: () => {\n      logger.info('ChannelSettings: Click close');\n      onCloseClick === null || onCloseClick === void 0 ? void 0 : onCloseClick();\n    }\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-channel-settings__close-icon\",\n    type: IconTypes.CLOSE,\n    height: \"22px\",\n    width: \"22px\"\n  })))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-settings__scroll-area\"\n  }, (renderChannelProfile === null || renderChannelProfile === void 0 ? void 0 : renderChannelProfile()) || /*#__PURE__*/React__default.createElement(ChannelProfile, null), (renderModerationPanel === null || renderModerationPanel === void 0 ? void 0 : renderModerationPanel()) || ((channel === null || channel === void 0 ? void 0 : channel.myRole) === 'operator' ? /*#__PURE__*/React__default.createElement(AdminPannel, null) : /*#__PURE__*/React__default.createElement(UserPanel, null)), (renderLeaveChannel === null || renderLeaveChannel === void 0 ? void 0 : renderLeaveChannel()) || /*#__PURE__*/React__default.createElement(\"div\", {\n    className: ['sendbird-channel-settings__panel-item', 'sendbird-channel-settings__leave-channel', !isOnline ? 'sendbird-channel-settings__panel-item__disabled' : ''].join(' '),\n    role: \"button\",\n    onKeyDown: () => {\n      if (!isOnline) {\n        return;\n      }\n      setShowLeaveChannelModal(true);\n    },\n    onClick: () => {\n      if (!isOnline) {\n        return;\n      }\n      setShowLeaveChannelModal(true);\n    },\n    tabIndex: 0\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: ['sendbird-channel-settings__panel-icon-left', 'sendbird-channel-settings__panel-icon__leave'].join(' '),\n    type: IconTypes.LEAVE,\n    fillColor: IconColors.ERROR,\n    height: \"24px\",\n    width: \"24px\"\n  }), /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.CHANNEL_SETTING__LEAVE_CHANNEL__TITLE)), showLeaveChannelModal && /*#__PURE__*/React__default.createElement(LeaveChannel, {\n    onCancel: () => {\n      setShowLeaveChannelModal(false);\n    },\n    onSubmit: () => {\n      setShowLeaveChannelModal(false);\n      onCloseClick === null || onCloseClick === void 0 ? void 0 : onCloseClick();\n    }\n  })));\n};\nexport { ChannelSettingsUI as default };","map":{"version":3,"mappings":"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","names":["ChannelSettingsUI","props","stringSet","useContext","LocalizationContext","state","useSendbirdStateContext","channelSettingStore","useChannelSettingsContext","showLeaveChannelModal","setShowLeaveChannelModal","useState","isOnline","config","_state$config","logger","_state$config2","channel","invalidChannel","onCloseClick","renderPlaceholderError","renderChannelProfile","renderModerationPanel","renderLeaveChannel","React","className","Label","type","LabelTypography","H_2","color","LabelColors","ONBACKGROUND_1","CHANNEL_SETTING__HEADER__TITLE","Icon","IconTypes","CLOSE","height","width","onClick","info","PlaceHolder","PlaceHolderTypes","WRONG","IconButton","ChannelProfile","myRole","ModerationPanel","UserPanel","join","role","onKeyDown","tabIndex","LEAVE","fillColor","IconColors","ERROR","SUBTITLE_1","CHANNEL_SETTING__LEAVE_CHANNEL__TITLE","LeaveChannelModal","onCancel","onSubmit"],"sources":["C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\ChannelSettings\\components\\ChannelSettingsUI\\index.tsx"],"sourcesContent":["import './channel-settings-ui.scss';\n\nimport React, { useContext, useState } from 'react';\n\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\nimport { useChannelSettingsContext } from '../../context/ChannelSettingsProvider';\n\nimport PlaceHolder, { PlaceHolderTypes } from '../../../../ui/PlaceHolder';\nimport Label, { LabelTypography, LabelColors } from '../../../../ui/Label';\nimport { LocalizationContext } from '../../../../lib/LocalizationContext';\nimport Icon, { IconTypes, IconColors } from '../../../../ui/Icon';\nimport IconButton from '../../../../ui/IconButton';\nimport ChannelProfile from '../ChannelProfile';\nimport ModerationPanel from '../ModerationPanel';\nimport LeaveChannelModal from '../LeaveChannel';\nimport UserPanel from '../UserPanel';\n\nexport interface ChannelSettingsUIProps {\n  renderPlaceholderError?: () => React.ReactElement;\n  renderChannelProfile?: () => React.ReactElement;\n  renderModerationPanel?: () => React.ReactElement;\n  renderLeaveChannel?: () => React.ReactElement;\n}\n\nconst ChannelSettingsUI: React.FC<ChannelSettingsUIProps> = (props: ChannelSettingsUIProps) => {\n  const { stringSet } = useContext(LocalizationContext);\n\n  const state = useSendbirdStateContext();\n  const channelSettingStore = useChannelSettingsContext();\n\n  const [showLeaveChannelModal, setShowLeaveChannelModal] = useState(false);\n\n  const isOnline = state?.config?.isOnline;\n  const logger = state?.config?.logger;\n\n  const {\n    channel,\n    invalidChannel,\n    onCloseClick,\n  } = channelSettingStore;\n\n  const {\n    renderPlaceholderError,\n    renderChannelProfile,\n    renderModerationPanel,\n    renderLeaveChannel,\n  } = props;\n\n  if (!channel || invalidChannel) {\n    return (\n      <div>\n        <div className=\"sendbird-channel-settings__header\">\n          <Label type={LabelTypography.H_2} color={LabelColors.ONBACKGROUND_1}>\n            {stringSet.CHANNEL_SETTING__HEADER__TITLE}\n          </Label>\n          <Icon\n            className=\"sendbird-channel-settings__close-icon\"\n            type={IconTypes.CLOSE}\n            height=\"24px\"\n            width=\"24px\"\n            onClick={() => {\n              logger.info('ChannelSettings: Click close');\n              onCloseClick?.();\n            }}\n          />\n        </div>\n        <div>\n          {\n            renderPlaceholderError\n              ? renderPlaceholderError()\n              : (\n                <PlaceHolder type={PlaceHolderTypes.WRONG} />\n              )\n          }\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"sendbird-channel-settings__header\">\n        <Label type={LabelTypography.H_2} color={LabelColors.ONBACKGROUND_1}>\n          {stringSet.CHANNEL_SETTING__HEADER__TITLE}\n        </Label>\n        <div className=\"sendbird-channel-settings__header-icon\">\n          <IconButton\n            width=\"32px\"\n            height=\"32px\"\n            onClick={() => {\n              logger.info('ChannelSettings: Click close');\n              onCloseClick?.();\n            }}\n          >\n            <Icon\n              className=\"sendbird-channel-settings__close-icon\"\n              type={IconTypes.CLOSE}\n              height=\"22px\"\n              width=\"22px\"\n            />\n          </IconButton>\n        </div>\n      </div>\n      <div className=\"sendbird-channel-settings__scroll-area\">\n        {\n          renderChannelProfile?.() || (\n            <ChannelProfile />\n          )\n        }\n        {\n          renderModerationPanel?.() || (\n            channel?.myRole === 'operator'\n              ? (<ModerationPanel />)\n              : (<UserPanel />)\n          )\n        }\n        {\n          renderLeaveChannel?.() || (\n            <div\n              className={[\n                'sendbird-channel-settings__panel-item',\n                'sendbird-channel-settings__leave-channel',\n                !isOnline ? 'sendbird-channel-settings__panel-item__disabled' : '',\n              ].join(' ')}\n              role=\"button\"\n              onKeyDown={() => {\n                if (!isOnline) { return; }\n                setShowLeaveChannelModal(true);\n              }}\n              onClick={() => {\n                if (!isOnline) { return; }\n                setShowLeaveChannelModal(true);\n              }}\n              tabIndex={0}\n            >\n              <Icon\n                className={[\n                  'sendbird-channel-settings__panel-icon-left',\n                  'sendbird-channel-settings__panel-icon__leave',\n                ].join(' ')}\n                type={IconTypes.LEAVE}\n                fillColor={IconColors.ERROR}\n                height=\"24px\"\n                width=\"24px\"\n              />\n              <Label\n                type={LabelTypography.SUBTITLE_1}\n                color={LabelColors.ONBACKGROUND_1}\n              >\n                {stringSet.CHANNEL_SETTING__LEAVE_CHANNEL__TITLE}\n              </Label>\n            </div>\n          )\n        }\n        {\n          showLeaveChannelModal && (\n            <LeaveChannelModal\n              onCancel={() => {\n                setShowLeaveChannelModal(false);\n              }}\n              onSubmit={() => {\n                setShowLeaveChannelModal(false);\n                onCloseClick?.();\n              }}\n            />\n          )\n        }\n      </div>\n    </>\n  );\n};\n\nexport default ChannelSettingsUI;\n"]},"metadata":{},"sourceType":"module"}