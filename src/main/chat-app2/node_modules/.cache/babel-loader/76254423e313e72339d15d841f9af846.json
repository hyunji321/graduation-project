{"ast":null,"code":"import _slicedToArray from \"C:/Users/\\uC774\\uACBD\\uBBFC/IdeaProjects/sendbird-uikit-whatsapp-sample/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport React__default, { useRef, useState, useContext } from 'react';\nimport { useChannelSettingsContext } from '../context.js';\nimport { a as LocalizationContext } from '../../LocalizationContext-076d6d2e.js';\nimport useSendbirdStateContext from '../../useSendbirdStateContext.js';\nimport Modal from '../../ui/Modal.js';\nimport Input, { InputLabel } from '../../ui/Input.js';\nimport Avatar from '../../ui/Avatar.js';\nimport { ButtonTypes } from '../../ui/Button.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../../index-63949de5.js';\nimport TextButton from '../../ui/TextButton.js';\nimport ChannelAvatar from '../../ui/ChannelAvatar.js';\nimport { u as uuidv4 } from '../../uuid-1adedf62.js';\nimport '../../UserProfileContext-9cfbab4d.js';\nimport 'prop-types';\nimport '../../withSendbird.js';\nimport '../../_rollupPluginBabelHelpers-6bb0305c.js';\nimport '../../stringSet-13bbd4a2.js';\nimport '../../index-99aabd9e.js';\nimport 'react-dom';\nimport '../../index-38e61c64.js';\nimport '../../ui/Icon.js';\nimport '../../ui/IconButton.js';\nimport '../../MediaQueryContext-11f0e43f.js';\nimport '../../ui/ImageRenderer.js';\nimport '../../color-879cc347.js';\nimport '../../utils-d86ad6ab.js';\nvar EditDetails = function EditDetails(props) {\n  var _state$config, _state$config2, _state$config3;\n  var _onSubmit = props.onSubmit,\n    onCancel = props.onCancel;\n  var _useChannelSettingsCo = useChannelSettingsContext(),\n    channel = _useChannelSettingsCo.channel,\n    onChannelModified = _useChannelSettingsCo.onChannelModified,\n    onBeforeUpdateChannel = _useChannelSettingsCo.onBeforeUpdateChannel,\n    setChannelUpdateId = _useChannelSettingsCo.setChannelUpdateId;\n  var title = channel === null || channel === void 0 ? void 0 : channel.name;\n  var state = useSendbirdStateContext();\n  var userId = state === null || state === void 0 ? void 0 : (_state$config = state.config) === null || _state$config === void 0 ? void 0 : _state$config.userId;\n  var theme = state === null || state === void 0 ? void 0 : (_state$config2 = state.config) === null || _state$config2 === void 0 ? void 0 : _state$config2.theme;\n  var logger = state === null || state === void 0 ? void 0 : (_state$config3 = state.config) === null || _state$config3 === void 0 ? void 0 : _state$config3.logger;\n  var inputRef = useRef(null);\n  var formRef = useRef(null);\n  var hiddenInputRef = useRef(null);\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    currentImg = _useState2[0],\n    setCurrentImg = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    newFile = _useState4[0],\n    setNewFile = _useState4[1];\n  var _useContext = useContext(LocalizationContext),\n    stringSet = _useContext.stringSet;\n  return /*#__PURE__*/React__default.createElement(Modal, {\n    isFullScreenOnMobile: true,\n    titleText: stringSet.MODAL__CHANNEL_INFORMATION__TITLE,\n    submitText: stringSet.BUTTON__SAVE,\n    onCancel: onCancel,\n    onSubmit: function onSubmit() {\n      if (title !== '' && !inputRef.current.value) {\n        if (formRef.current.reportValidity) {\n          // might not work in explorer\n          formRef.current.reportValidity();\n        }\n        return;\n      }\n      var currentTitle = inputRef.current.value;\n      var currentImg = newFile;\n      logger.info('ChannelSettings: Channel information being updated', {\n        currentTitle: currentTitle,\n        currentImg: currentImg\n      });\n      if (onBeforeUpdateChannel) {\n        logger.info('ChannelSettings: onBeforeUpdateChannel');\n        var params = onBeforeUpdateChannel(currentTitle, currentImg, channel === null || channel === void 0 ? void 0 : channel.data);\n        channel === null || channel === void 0 ? void 0 : channel.updateChannel(params).then(function (groupChannel) {\n          onChannelModified === null || onChannelModified === void 0 ? void 0 : onChannelModified(groupChannel);\n          setChannelUpdateId(uuidv4());\n          _onSubmit();\n        });\n      } else {\n        logger.info('ChannelSettings: normal');\n        channel === null || channel === void 0 ? void 0 : channel.updateChannel({\n          coverImage: currentImg,\n          name: currentTitle,\n          data: (channel === null || channel === void 0 ? void 0 : channel.data) || ''\n        }).then(function (groupChannel) {\n          logger.info('ChannelSettings: Channel information updated', groupChannel);\n          onChannelModified === null || onChannelModified === void 0 ? void 0 : onChannelModified(groupChannel);\n          setChannelUpdateId(uuidv4());\n          _onSubmit();\n        });\n      }\n    },\n    type: ButtonTypes.PRIMARY\n  }, /*#__PURE__*/React__default.createElement(\"form\", {\n    className: \"channel-profile-form\",\n    ref: formRef,\n    onSubmit: function onSubmit(e) {\n      e.preventDefault();\n    }\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"channel-profile-form__img-section\"\n  }, /*#__PURE__*/React__default.createElement(InputLabel, null, stringSet.MODAL__CHANNEL_INFORMATION__CHANNEL_IMAGE), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"channel-profile-form__avatar\"\n  }, currentImg ? /*#__PURE__*/React__default.createElement(Avatar, {\n    height: \"80px\",\n    width: \"80px\",\n    src: currentImg\n  }) : /*#__PURE__*/React__default.createElement(ChannelAvatar, {\n    height: 80,\n    width: 80,\n    channel: channel,\n    userId: userId,\n    theme: theme\n  })), /*#__PURE__*/React__default.createElement(\"input\", {\n    ref: hiddenInputRef,\n    type: \"file\",\n    accept: \"image/gif, image/jpeg, image/png\",\n    style: {\n      display: 'none'\n    },\n    onChange: function onChange(e) {\n      setCurrentImg(URL.createObjectURL(e.target.files[0]));\n      setNewFile(e.target.files[0]);\n      hiddenInputRef.current.value = '';\n    }\n  }), /*#__PURE__*/React__default.createElement(TextButton, {\n    className: \"channel-profile-form__avatar-button\",\n    onClick: function onClick() {\n      return hiddenInputRef.current.click();\n    },\n    disableUnderline: true\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.BUTTON_1,\n    color: LabelColors.PRIMARY\n  }, stringSet.MODAL__CHANNEL_INFORMATION__UPLOAD))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"channel-profile-form__name-section\"\n  }, /*#__PURE__*/React__default.createElement(InputLabel, null, stringSet.MODAL__CHANNEL_INFORMATION__CHANNEL_NAME), /*#__PURE__*/React__default.createElement(Input, {\n    required: title !== '',\n    name: \"channel-profile-form__name\",\n    ref: inputRef,\n    value: title,\n    placeHolder: stringSet.MODAL__CHANNEL_INFORMATION__INPUT__PLACE_HOLDER\n  }))));\n};\nexport { EditDetails as default };","map":{"version":3,"mappings":"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","names":["EditDetails","props","onSubmit","onCancel","useChannelSettingsContext","channel","onChannelModified","onBeforeUpdateChannel","setChannelUpdateId","title","name","state","useSendbirdStateContext","userId","config","_state$config","theme","_state$config2","logger","_state$config3","inputRef","useRef","formRef","hiddenInputRef","useState","currentImg","setCurrentImg","newFile","setNewFile","useContext","LocalizationContext","stringSet","React","Modal","isFullScreenOnMobile","titleText","MODAL__CHANNEL_INFORMATION__TITLE","submitText","BUTTON__SAVE","current","value","reportValidity","currentTitle","info","params","data","updateChannel","then","groupChannel","uuidv4","coverImage","type","ButtonTypes","PRIMARY","className","ref","e","preventDefault","InputLabel","MODAL__CHANNEL_INFORMATION__CHANNEL_IMAGE","Avatar","height","width","src","ChannelAvatar","accept","style","display","onChange","URL","createObjectURL","target","files","TextButton","onClick","click","disableUnderline","Label","LabelTypography","BUTTON_1","color","LabelColors","MODAL__CHANNEL_INFORMATION__UPLOAD","MODAL__CHANNEL_INFORMATION__CHANNEL_NAME","Input","required","placeHolder","MODAL__CHANNEL_INFORMATION__INPUT__PLACE_HOLDER"],"sources":["C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\ChannelSettings\\components\\EditDetailsModal\\index.tsx"],"sourcesContent":["import React, { useState, useRef, useContext } from 'react';\n\nimport { useChannelSettingsContext } from '../../context/ChannelSettingsProvider';\nimport { LocalizationContext } from '../../../../lib/LocalizationContext';\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\n\nimport Modal from '../../../../ui/Modal';\nimport Input, { InputLabel } from '../../../../ui/Input';\nimport Avatar from '../../../../ui/Avatar/index';\nimport { ButtonTypes } from '../../../../ui/Button';\nimport Label, { LabelColors, LabelTypography } from '../../../../ui/Label';\nimport TextButton from '../../../../ui/TextButton';\nimport ChannelAvatar from '../../../../ui/ChannelAvatar/index';\nimport uuidv4 from '../../../../utils/uuid';\n\nexport type EditDetailsProps = {\n  onSubmit: () => void;\n  onCancel: () => void;\n};\n\nconst EditDetails: React.FC<EditDetailsProps> = (props: EditDetailsProps) => {\n  const {\n    onSubmit,\n    onCancel,\n  } = props;\n\n  const {\n    channel,\n    onChannelModified,\n    onBeforeUpdateChannel,\n    setChannelUpdateId,\n  } = useChannelSettingsContext();\n  const title = channel?.name;\n\n  const state = useSendbirdStateContext();\n  const userId = state?.config?.userId;\n  const theme = state?.config?.theme;\n  const logger = state?.config?.logger;\n\n  const inputRef = useRef(null);\n  const formRef = useRef(null);\n  const hiddenInputRef = useRef(null);\n  const [currentImg, setCurrentImg] = useState(null);\n  const [newFile, setNewFile] = useState(null);\n  const { stringSet } = useContext(LocalizationContext);\n\n  return (\n    <Modal\n      isFullScreenOnMobile\n      titleText={stringSet.MODAL__CHANNEL_INFORMATION__TITLE}\n      submitText={stringSet.BUTTON__SAVE}\n      onCancel={onCancel}\n      onSubmit={() => {\n        if (title !== '' && !inputRef.current.value) {\n          if (formRef.current.reportValidity) { // might not work in explorer\n            formRef.current.reportValidity();\n          }\n          return;\n        }\n\n        const currentTitle = inputRef.current.value;\n        const currentImg = newFile;\n        logger.info('ChannelSettings: Channel information being updated', {\n          currentTitle,\n          currentImg,\n        });\n        if (onBeforeUpdateChannel) {\n          logger.info('ChannelSettings: onBeforeUpdateChannel');\n          const params = onBeforeUpdateChannel(currentTitle, currentImg, channel?.data);\n          channel?.updateChannel(params).then((groupChannel) => {\n            onChannelModified?.(groupChannel);\n            setChannelUpdateId(uuidv4());\n            onSubmit();\n          });\n        } else {\n          logger.info('ChannelSettings: normal');\n          channel?.updateChannel({\n            coverImage: currentImg,\n            name: currentTitle,\n            data: channel?.data || '',\n          }).then((groupChannel) => {\n            logger.info('ChannelSettings: Channel information updated', groupChannel);\n            onChannelModified?.(groupChannel);\n            setChannelUpdateId(uuidv4());\n            onSubmit();\n          });\n        }\n      }}\n      type={ButtonTypes.PRIMARY}\n    >\n      <form\n        className=\"channel-profile-form\"\n        ref={formRef}\n        onSubmit={(e) => { e.preventDefault(); }}\n      >\n        <div className=\"channel-profile-form__img-section\">\n          <InputLabel>\n            {stringSet.MODAL__CHANNEL_INFORMATION__CHANNEL_IMAGE}\n          </InputLabel>\n          <div className=\"channel-profile-form__avatar\">\n            {\n              currentImg\n                ? (\n                  <Avatar\n                    height=\"80px\"\n                    width=\"80px\"\n                    src={currentImg}\n                  />\n                ) : (\n                  <ChannelAvatar\n                    height={80}\n                    width={80}\n                    channel={channel}\n                    userId={userId}\n                    theme={theme}\n                  />\n                )\n              }\n          </div>\n          <input\n            ref={hiddenInputRef}\n            type=\"file\"\n            accept=\"image/gif, image/jpeg, image/png\"\n            style={{ display: 'none' }}\n            onChange={(e) => {\n              setCurrentImg(URL.createObjectURL(e.target.files[0]));\n              setNewFile(e.target.files[0]);\n              hiddenInputRef.current.value = '';\n            }}\n          />\n          <TextButton\n            className=\"channel-profile-form__avatar-button\"\n            onClick={() => hiddenInputRef.current.click()}\n            disableUnderline\n          >\n            <Label type={LabelTypography.BUTTON_1} color={LabelColors.PRIMARY}>\n              {stringSet.MODAL__CHANNEL_INFORMATION__UPLOAD}\n            </Label>\n          </TextButton>\n        </div>\n        <div className=\"channel-profile-form__name-section\">\n          <InputLabel>\n            {stringSet.MODAL__CHANNEL_INFORMATION__CHANNEL_NAME}\n          </InputLabel>\n          <Input\n            required={title !== ''}\n            name=\"channel-profile-form__name\"\n            ref={inputRef}\n            value={title}\n            placeHolder={stringSet.MODAL__CHANNEL_INFORMATION__INPUT__PLACE_HOLDER}\n          />\n        </div>\n      </form>\n    </Modal>\n  );\n};\n\nexport default EditDetails;\n"]},"metadata":{},"sourceType":"module"}