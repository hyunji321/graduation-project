{"ast":null,"code":"import React__default, { useRef, useContext, useEffect, useMemo, useState } from 'react';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../../index-63949de5.js';\nimport Icon, { IconTypes, IconColors } from '../../ui/Icon.js';\nimport Avatar from '../../ui/Avatar.js';\nimport { a as LocalizationContext } from '../../LocalizationContext-076d6d2e.js';\nimport { u as uuidv4 } from '../../uuid-1adedf62.js';\nimport { u as useChannelContext } from '../../ChannelProvider-910bbc1f.js';\nimport useSendbirdStateContext from '../../useSendbirdStateContext.js';\nimport { U as USER_MENTION_TEMP_CHAR, M as MAX_USER_MENTION_COUNT, a as MAX_USER_SUGGESTION_COUNT } from '../../const-b3f02313.js';\nimport { M as MessageInputKeys } from '../../const-221c6a89.js';\nimport { u as useThreadContext } from '../../ThreadProvider-3a4a4db0.js';\nimport 'prop-types';\nimport '../../stringSet-13bbd4a2.js';\nimport '../../ui/ImageRenderer.js';\nimport '../../index-99aabd9e.js';\nimport '../../UserProfileContext-9cfbab4d.js';\nimport '../../index-7cdd58b8.js';\nimport '../../topics-b2b77fb9.js';\nimport '../../index-7eb65acf.js';\nimport '../../_rollupPluginBabelHelpers-6bb0305c.js';\nimport '../../utils/message/getOutgoingMessageState.js';\nimport '../../compareIds-defe2bb3.js';\nimport '@sendbird/chat/groupChannel';\nimport '@sendbird/chat/message';\nimport '../../consts-95d8566e.js';\nimport '../../withSendbird.js';\nimport '../../Thread/context/types.js';\nimport '@sendbird/chat';\nfunction SuggestedUserMentionItem(props) {\n  const {\n    member,\n    isFocused = false,\n    parentScrollRef,\n    onClick,\n    onMouseOver,\n    onMouseMove,\n    renderUserMentionItem\n  } = props;\n  const scrollRef = useRef(null);\n  const {\n    stringSet = {}\n  } = useContext(LocalizationContext);\n  useEffect(() => {\n    if (isFocused && (parentScrollRef === null || parentScrollRef === void 0 ? void 0 : parentScrollRef.current) != null && (scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current) != null && (parentScrollRef.current.scrollTop >= scrollRef.current.offsetTop || parentScrollRef.current.scrollTop + parentScrollRef.current.clientHeight <= scrollRef.current.offsetTop)) {\n      scrollRef.current.scrollIntoView({\n        block: 'nearest',\n        inline: 'nearest'\n      });\n    }\n  }, [isFocused]);\n  const customMentionItem = useMemo(() => {\n    if (renderUserMentionItem) {\n      return /*#__PURE__*/React__default.createElement(\"div\", {\n        className: \"sendbird-mention-suggest-list__user-item\",\n        onClick: event => onClick === null || onClick === void 0 ? void 0 : onClick({\n          event,\n          member: member,\n          itemRef: scrollRef\n        }),\n        onMouseOver: event => onMouseOver === null || onMouseOver === void 0 ? void 0 : onMouseOver({\n          event,\n          member: member,\n          itemRef: scrollRef\n        }),\n        onMouseMove: event => onMouseMove === null || onMouseMove === void 0 ? void 0 : onMouseMove({\n          event,\n          member: member,\n          itemRef: scrollRef\n        }),\n        key: (member === null || member === void 0 ? void 0 : member.userId) || uuidv4(),\n        ref: scrollRef\n      }, renderUserMentionItem({\n        user: member\n      }));\n    }\n  }, [renderUserMentionItem]);\n  if (customMentionItem) {\n    return customMentionItem;\n  }\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: `sendbird-mention-suggest-list__user-item ${isFocused ? 'focused' : ''}`,\n    onClick: event => onClick === null || onClick === void 0 ? void 0 : onClick({\n      event,\n      member: member,\n      itemRef: scrollRef\n    }),\n    onMouseOver: event => onMouseOver === null || onMouseOver === void 0 ? void 0 : onMouseOver({\n      event,\n      member: member,\n      itemRef: scrollRef\n    }),\n    onMouseMove: event => onMouseMove === null || onMouseMove === void 0 ? void 0 : onMouseMove({\n      event,\n      member: member,\n      itemRef: scrollRef\n    }),\n    key: (member === null || member === void 0 ? void 0 : member.userId) || uuidv4(),\n    ref: scrollRef\n  }, /*#__PURE__*/React__default.createElement(Avatar, {\n    className: \"sendbird-mention-suggest-list__user-item__avatar\",\n    src: member === null || member === void 0 ? void 0 : member.profileUrl,\n    alt: \"user-profile\",\n    width: \"24px\",\n    height: \"24px\"\n  }), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-mention-suggest-list__user-item__nickname\",\n    type: LabelTypography.SUBTITLE_2,\n    color: member !== null && member !== void 0 && member.nickname ? LabelColors.ONBACKGROUND_1 : LabelColors.ONBACKGROUND_3\n  }, (member === null || member === void 0 ? void 0 : member.nickname) || (stringSet === null || stringSet === void 0 ? void 0 : stringSet.MENTION_NAME__NO_NAME)), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-mention-suggest-list__user-item__user-id\",\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, member === null || member === void 0 ? void 0 : member.userId));\n}\nconst DEBOUNCING_TIME = 300;\nfunction SuggestedMentionList(props) {\n  var _useChannelContext, _useThreadContext, _stores$sdkStore, _stores$sdkStore$sdk, _stores$sdkStore$sdk$;\n  const {\n    className,\n    targetNickname = '',\n    // memberListQuery,\n    onUserItemClick,\n    onFocusItemChange,\n    onFetchUsers,\n    renderUserMentionItem,\n    inputEvent,\n    ableAddMention = true,\n    maxMentionCount = MAX_USER_MENTION_COUNT,\n    maxSuggestionCount = MAX_USER_SUGGESTION_COUNT\n  } = props;\n  const currentGroupChannel = useChannelContext === null || useChannelContext === void 0 ? void 0 : (_useChannelContext = useChannelContext()) === null || _useChannelContext === void 0 ? void 0 : _useChannelContext.currentGroupChannel;\n  const currentChannel = useThreadContext === null || useThreadContext === void 0 ? void 0 : (_useThreadContext = useThreadContext()) === null || _useThreadContext === void 0 ? void 0 : _useThreadContext.currentChannel;\n  const channelInstance = currentGroupChannel || currentChannel;\n  const {\n    config,\n    stores\n  } = useSendbirdStateContext();\n  const {\n    logger\n  } = config;\n  const currentUserId = (stores === null || stores === void 0 ? void 0 : (_stores$sdkStore = stores.sdkStore) === null || _stores$sdkStore === void 0 ? void 0 : (_stores$sdkStore$sdk = _stores$sdkStore.sdk) === null || _stores$sdkStore$sdk === void 0 ? void 0 : (_stores$sdkStore$sdk$ = _stores$sdkStore$sdk.currentUser) === null || _stores$sdkStore$sdk$ === void 0 ? void 0 : _stores$sdkStore$sdk$.userId) || '';\n  const scrollRef = useRef(null);\n  const {\n    stringSet\n  } = useContext(LocalizationContext);\n  const [timer, setTimer] = useState(null);\n  const [searchString, setSearchString] = useState('');\n  const [lastSearchString, setLastSearchString] = useState('');\n  const [currentUser, setCurrentUser] = useState(null);\n  const [currentMemberList, setCurrentMemberList] = useState([]);\n  useEffect(() => {\n    clearTimeout(timer);\n    setTimer(setTimeout(() => {\n      setSearchString(targetNickname);\n    }, DEBOUNCING_TIME));\n  }, [targetNickname]);\n  useEffect(() => {\n    if ((inputEvent === null || inputEvent === void 0 ? void 0 : inputEvent.key) === MessageInputKeys.Enter) {\n      if (currentMemberList.length > 0) {\n        onUserItemClick(currentUser);\n      }\n    }\n    if ((inputEvent === null || inputEvent === void 0 ? void 0 : inputEvent.key) === MessageInputKeys.ArrowUp) {\n      const currentUserIndex = currentMemberList.findIndex(member => (member === null || member === void 0 ? void 0 : member.userId) === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.userId));\n      if (0 < currentUserIndex) {\n        setCurrentUser(currentMemberList[currentUserIndex - 1]);\n        onFocusItemChange(currentMemberList[currentUserIndex - 1]);\n      }\n    }\n    if ((inputEvent === null || inputEvent === void 0 ? void 0 : inputEvent.key) === MessageInputKeys.ArrowDown) {\n      const currentUserIndex = currentMemberList.findIndex(member => (member === null || member === void 0 ? void 0 : member.userId) === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.userId));\n      if (currentUserIndex < currentMemberList.length - 1) {\n        setCurrentUser(currentMemberList[currentUserIndex + 1]);\n        onFocusItemChange(currentMemberList[currentUserIndex + 1]);\n      }\n    }\n  }, [inputEvent]);\n\n  /* Fetch member list */\n  useEffect(() => {\n    if (!(channelInstance !== null && channelInstance !== void 0 && channelInstance.createMemberListQuery)) {\n      logger.warning('SuggestedMentionList: Creating member list query failed');\n      return;\n    }\n    if (lastSearchString && searchString.indexOf(lastSearchString) === 0 && currentMemberList.length === 0) {\n      // Don't need to request query again\n      return;\n    }\n    const query = channelInstance === null || channelInstance === void 0 ? void 0 : channelInstance.createMemberListQuery({\n      limit: maxSuggestionCount + 1,\n      // because current user could be included\n      nicknameStartsWithFilter: searchString.slice(USER_MENTION_TEMP_CHAR.length)\n    });\n    // Add member list query for customization\n    query.next().then(memberList => {\n      const suggestingMembers = memberList.filter(member => currentUserId !== (member === null || member === void 0 ? void 0 : member.userId)).slice(0, maxSuggestionCount);\n      if (suggestingMembers.length < 1) {\n        logger.info('SuggestedMentionList: Fetched member list is empty');\n      } else {\n        logger.info('SuggestedMentionList: Fetching member list succeeded', {\n          memberListQuery: query,\n          memberList: suggestingMembers\n        });\n        setCurrentUser(suggestingMembers[0]);\n      }\n      setLastSearchString(searchString);\n      onFetchUsers(suggestingMembers);\n      setCurrentMemberList(suggestingMembers);\n    }).catch(error => {\n      if (error) {\n        logger.error('SuggestedMentionList: Fetching member list failed', error);\n      }\n    });\n  }, [channelInstance === null || channelInstance === void 0 ? void 0 : channelInstance.url, searchString]);\n  if (!ableAddMention && currentMemberList.length === 0) {\n    return null;\n  }\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: `sendbird-mention-suggest-list ${className}`,\n    key: \"sendbird-mention-suggest-list\",\n    ref: scrollRef\n  }, ableAddMention && (currentMemberList === null || currentMemberList === void 0 ? void 0 : currentMemberList.map(member => /*#__PURE__*/React__default.createElement(SuggestedUserMentionItem, {\n    key: (member === null || member === void 0 ? void 0 : member.userId) || uuidv4(),\n    member: member,\n    isFocused: (member === null || member === void 0 ? void 0 : member.userId) === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.userId),\n    parentScrollRef: scrollRef,\n    onClick: _ref => {\n      let {\n        member\n      } = _ref;\n      onUserItemClick(member);\n    },\n    onMouseOver: _ref2 => {\n      let {\n        member\n      } = _ref2;\n      setCurrentUser(member);\n    },\n    renderUserMentionItem: renderUserMentionItem\n  }))), !ableAddMention && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-mention-suggest-list__notice-item\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    className: \"sendbird-mention-suggest-list__notice-item__icon\",\n    type: IconTypes.INFO,\n    fillColor: IconColors.ON_BACKGROUND_2,\n    width: \"20px\",\n    height: \"20px\"\n  }), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-mention-suggest-list__notice-item__text\",\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, stringSet.MENTION_COUNT__OVER_LIMIT.replace('%d', maxMentionCount))));\n}\nexport { SuggestedMentionList as default };","map":{"version":3,"mappings":"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","names":["SuggestedUserMentionItem","props","member","isFocused","parentScrollRef","onClick","onMouseOver","onMouseMove","renderUserMentionItem","scrollRef","useRef","stringSet","useContext","LocalizationContext","useEffect","current","scrollTop","offsetTop","clientHeight","scrollIntoView","block","inline","customMentionItem","useMemo","React","className","event","itemRef","key","userId","uuidv4","ref","user","Avatar","src","profileUrl","alt","width","height","Label","type","LabelTypography","SUBTITLE_2","color","nickname","LabelColors","ONBACKGROUND_1","ONBACKGROUND_3","MENTION_NAME__NO_NAME","ONBACKGROUND_2","DEBOUNCING_TIME","SuggestedMentionList","targetNickname","onUserItemClick","onFocusItemChange","onFetchUsers","inputEvent","ableAddMention","maxMentionCount","MAX_USER_MENTION_COUNT","maxSuggestionCount","MAX_USER_SUGGESTION_COUNT","currentGroupChannel","useChannelContext","_useChannelContext","currentChannel","useThreadContext","_useThreadContext","channelInstance","config","stores","useSendbirdStateContext","logger","currentUserId","sdkStore","_stores$sdkStore","sdk","_stores$sdkStore$sdk","currentUser","_stores$sdkStore$sdk$","timer","setTimer","useState","searchString","setSearchString","lastSearchString","setLastSearchString","setCurrentUser","currentMemberList","setCurrentMemberList","clearTimeout","setTimeout","MessageInputKeys","Enter","length","ArrowUp","currentUserIndex","findIndex","ArrowDown","createMemberListQuery","warning","indexOf","query","limit","nicknameStartsWithFilter","slice","USER_MENTION_TEMP_CHAR","next","then","memberList","suggestingMembers","filter","info","memberListQuery","catch","error","url","map","_ref","_ref2","Icon","IconTypes","INFO","fillColor","IconColors","ON_BACKGROUND_2","MENTION_COUNT__OVER_LIMIT","replace"],"sources":["C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Channel\\components\\SuggestedMentionList\\SuggestedUserMentionItem.tsx","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\Channel\\components\\SuggestedMentionList\\index.tsx"],"sourcesContent":["import React, { useContext, useEffect, useMemo, useRef } from 'react';\nimport type { Member } from '@sendbird/chat/groupChannel';\nimport type { User } from '@sendbird/chat';\n\nimport Avatar from '../../../../ui/Avatar';\nimport Label, { LabelTypography, LabelColors } from '../../../../ui/Label';\nimport { LocalizationContext } from '../../../../lib/LocalizationContext';\nimport { MentionItemUIEvent } from '../../../..';\nimport uuidv4 from '../../../../utils/uuid';\n\ninterface SuggestedUserMentionItemProps {\n  member: User | Member;\n  isFocused?: boolean;\n  parentScrollRef?: React.RefObject<HTMLDivElement>;\n  onClick?: (props: MentionItemUIEvent) => void;\n  onMouseOver?: (props: MentionItemUIEvent) => void;\n  onMouseMove?: (props: MentionItemUIEvent) => void;\n  renderUserMentionItem?: (props: { user: User | Member }) => JSX.Element;\n}\n\nfunction SuggestedUserMentionItem(props: SuggestedUserMentionItemProps): JSX.Element {\n  const {\n    member,\n    isFocused = false,\n    parentScrollRef,\n    onClick,\n    onMouseOver,\n    onMouseMove,\n    renderUserMentionItem,\n  } = props;\n  const scrollRef = useRef<HTMLDivElement>(null);\n  const { stringSet = {} } = useContext(LocalizationContext);\n  useEffect(() => {\n    if (isFocused && parentScrollRef?.current != null && scrollRef?.current != null\n      && (parentScrollRef.current.scrollTop >= scrollRef.current.offsetTop\n        || parentScrollRef.current.scrollTop + parentScrollRef.current.clientHeight <= scrollRef.current.offsetTop\n      )) {\n      scrollRef.current.scrollIntoView({ block: 'nearest', inline: 'nearest' });\n    }\n  }, [isFocused]);\n  const customMentionItem = useMemo(() => {\n    if (renderUserMentionItem) {\n      return (\n        <div\n          className=\"sendbird-mention-suggest-list__user-item\"\n          onClick={(event) => onClick?.({ event, member: (member as Member), itemRef: scrollRef })}\n          onMouseOver={(event) => onMouseOver?.({ event, member: (member as Member), itemRef: scrollRef })}\n          onMouseMove={(event) => onMouseMove?.({ event, member: (member as Member), itemRef: scrollRef })}\n          key={member?.userId || uuidv4()}\n          ref={scrollRef}\n        >\n          {renderUserMentionItem({ user: member })}\n        </div>\n      );\n    }\n  }, [renderUserMentionItem]);\n  if (customMentionItem) {\n    return customMentionItem;\n  }\n  return (\n    <div\n      className={`sendbird-mention-suggest-list__user-item ${isFocused ? 'focused' : ''}`}\n      onClick={(event) => onClick?.({ event, member: (member as Member), itemRef: scrollRef })}\n      onMouseOver={(event) => onMouseOver?.({ event, member: (member as Member), itemRef: scrollRef })}\n      onMouseMove={(event) => onMouseMove?.({ event, member: (member as Member), itemRef: scrollRef })}\n      key={member?.userId || uuidv4()}\n      ref={scrollRef}\n    >\n      <Avatar\n        className=\"sendbird-mention-suggest-list__user-item__avatar\"\n        src={member?.profileUrl}\n        alt=\"user-profile\"\n        width=\"24px\"\n        height=\"24px\"\n      />\n      <Label\n        className=\"sendbird-mention-suggest-list__user-item__nickname\"\n        type={LabelTypography.SUBTITLE_2}\n        color={member?.nickname ? LabelColors.ONBACKGROUND_1 : LabelColors.ONBACKGROUND_3}\n      >\n        {member?.nickname || stringSet?.MENTION_NAME__NO_NAME}\n      </Label>\n      <Label\n        className=\"sendbird-mention-suggest-list__user-item__user-id\"\n        type={LabelTypography.SUBTITLE_2}\n        color={LabelColors.ONBACKGROUND_2}\n      >\n        {member?.userId}\n      </Label>\n    </div>\n  );\n}\n\nexport default SuggestedUserMentionItem;\n","import './index.scss';\nimport React, { useState, useEffect, useContext, useRef } from 'react';\nimport type { User } from '@sendbird/chat';\nimport type { Member } from '@sendbird/chat/groupChannel';\n\nimport Label, { LabelTypography, LabelColors } from '../../../../ui/Label';\nimport Icon, { IconTypes, IconColors } from '../../../../ui/Icon';\nimport SuggestedUserMentionItem from './SuggestedUserMentionItem';\nimport { useChannelContext } from '../../context/ChannelProvider';\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\nimport { LocalizationContext } from '../../../../lib/LocalizationContext';\nimport { MAX_USER_MENTION_COUNT, MAX_USER_SUGGESTION_COUNT, USER_MENTION_TEMP_CHAR } from '../../context/const';\nimport { MessageInputKeys } from '../../../../ui/MessageInput/const';\nimport uuidv4 from '../../../../utils/uuid';\nimport { useThreadContext } from '../../../Thread/context/ThreadProvider';\n\nexport interface SuggestedMentionListProps {\n  className?: string;\n  targetNickname: string;\n  memberListQuery?: Record<string, string>;\n  onUserItemClick?: (member: User) => void;\n  onFocusItemChange?: (member: User) => void;\n  onFetchUsers?: (users: Array<User>) => void;\n  renderUserMentionItem?: (props: { user: User }) => JSX.Element;\n  ableAddMention: boolean;\n  maxMentionCount?: number;\n  maxSuggestionCount?: number;\n  inputEvent?: React.KeyboardEvent<HTMLDivElement>;\n}\n\nconst DEBOUNCING_TIME = 300;\n\nfunction SuggestedMentionList(props: SuggestedMentionListProps): JSX.Element {\n  const {\n    className,\n    targetNickname = '',\n    // memberListQuery,\n    onUserItemClick,\n    onFocusItemChange,\n    onFetchUsers,\n    renderUserMentionItem,\n    inputEvent,\n    ableAddMention = true,\n    maxMentionCount = MAX_USER_MENTION_COUNT,\n    maxSuggestionCount = MAX_USER_SUGGESTION_COUNT,\n  } = props;\n  const currentGroupChannel = useChannelContext?.()?.currentGroupChannel;\n  const currentChannel = useThreadContext?.()?.currentChannel;\n  const channelInstance = currentGroupChannel || currentChannel;\n  const { config, stores } = useSendbirdStateContext();\n  const { logger } = config;\n  const currentUserId = stores?.sdkStore?.sdk?.currentUser?.userId || '';\n  const scrollRef = useRef(null);\n  const { stringSet } = useContext(LocalizationContext);\n  const [timer, setTimer] = useState(null);\n  const [searchString, setSearchString] = useState('');\n  const [lastSearchString, setLastSearchString] = useState('');\n  const [currentUser, setCurrentUser] = useState<User>(null);\n  const [currentMemberList, setCurrentMemberList] = useState<Array<Member>>([]);\n\n  useEffect(() => {\n    clearTimeout(timer);\n    setTimer(\n      setTimeout(() => {\n        setSearchString(targetNickname);\n      }, DEBOUNCING_TIME),\n    );\n  }, [targetNickname]);\n\n  useEffect(() => {\n    if (inputEvent?.key === MessageInputKeys.Enter) {\n      if (currentMemberList.length > 0) {\n        onUserItemClick(currentUser);\n      }\n    }\n    if (inputEvent?.key === MessageInputKeys.ArrowUp) {\n      const currentUserIndex = currentMemberList.findIndex((member) => (\n        member?.userId === currentUser?.userId\n      ));\n      if (0 < currentUserIndex) {\n        setCurrentUser(currentMemberList[currentUserIndex - 1]);\n        onFocusItemChange(currentMemberList[currentUserIndex - 1]);\n      }\n    }\n    if (inputEvent?.key === MessageInputKeys.ArrowDown) {\n      const currentUserIndex = currentMemberList.findIndex((member) => (\n        member?.userId === currentUser?.userId\n      ));\n      if (currentUserIndex < currentMemberList.length - 1) {\n        setCurrentUser(currentMemberList[currentUserIndex + 1]);\n        onFocusItemChange(currentMemberList[currentUserIndex + 1]);\n      }\n    }\n  }, [inputEvent]);\n\n  /* Fetch member list */\n  useEffect(() => {\n    if (!channelInstance?.createMemberListQuery) {\n      logger.warning('SuggestedMentionList: Creating member list query failed');\n      return;\n    }\n    if (lastSearchString && searchString.indexOf(lastSearchString) === 0 && currentMemberList.length === 0) {\n      // Don't need to request query again\n      return;\n    }\n\n    const query = channelInstance?.createMemberListQuery({\n      limit: maxSuggestionCount + 1, // because current user could be included\n      nicknameStartsWithFilter: searchString.slice(USER_MENTION_TEMP_CHAR.length),\n    });\n    // Add member list query for customization\n    query.next()\n      .then((memberList) => {\n        const suggestingMembers = memberList\n          .filter((member) => currentUserId !== member?.userId)\n          .slice(0, maxSuggestionCount);\n        if (suggestingMembers.length < 1) {\n          logger.info('SuggestedMentionList: Fetched member list is empty');\n        } else {\n          logger.info('SuggestedMentionList: Fetching member list succeeded', { memberListQuery: query, memberList: suggestingMembers });\n          setCurrentUser(suggestingMembers[0]);\n        }\n        setLastSearchString(searchString);\n        onFetchUsers(suggestingMembers);\n        setCurrentMemberList(suggestingMembers);\n      })\n      .catch((error) => {\n        if (error) {\n          logger.error('SuggestedMentionList: Fetching member list failed', error);\n        }\n      });\n  }, [channelInstance?.url, searchString]);\n\n  if (!ableAddMention && currentMemberList.length === 0) {\n    return null;\n  }\n\n  return (\n    <div\n      className={`sendbird-mention-suggest-list ${className}`}\n      key=\"sendbird-mention-suggest-list\"\n      ref={scrollRef}\n    >\n      {\n        ableAddMention && currentMemberList?.map((member) => (\n          <SuggestedUserMentionItem\n            key={member?.userId || uuidv4()}\n            member={member}\n            isFocused={member?.userId === currentUser?.userId}\n            parentScrollRef={scrollRef}\n            onClick={({ member }) => {\n              onUserItemClick(member);\n            }}\n            onMouseOver={({ member }) => {\n              setCurrentUser(member);\n            }}\n            renderUserMentionItem={renderUserMentionItem}\n          />\n        ))\n      }\n      {\n        !ableAddMention && (\n          <div className=\"sendbird-mention-suggest-list__notice-item\">\n            <Icon\n              className=\"sendbird-mention-suggest-list__notice-item__icon\"\n              type={IconTypes.INFO}\n              fillColor={IconColors.ON_BACKGROUND_2}\n              width=\"20px\"\n              height=\"20px\"\n            />\n            <Label\n              className=\"sendbird-mention-suggest-list__notice-item__text\"\n              type={LabelTypography.SUBTITLE_2}\n              color={LabelColors.ONBACKGROUND_2}\n            >\n              {stringSet.MENTION_COUNT__OVER_LIMIT.replace('%d', maxMentionCount)}\n            </Label>\n          </div>\n        )\n      }\n    </div>\n  );\n}\n\nexport default SuggestedMentionList;\n"]},"metadata":{},"sourceType":"module"}