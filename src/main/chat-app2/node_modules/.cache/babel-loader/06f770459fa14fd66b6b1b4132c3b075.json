{"ast":null,"code":"import { useRef, useEffect, useCallback } from 'react';\nimport { S as SCROLL_BUFFER } from './consts-95d8566e.js';\nfunction useDebounce(callback, delay) {\n  const timeoutRef = useRef(null);\n  useEffect(() => {\n    // Cleanup the timeout on unmount\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, []);\n  function debounceFunction() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    timeoutRef.current = setTimeout(() => {\n      callback(...args);\n    }, delay);\n  }\n  return debounceFunction;\n}\nconst DELAY = 500;\nfunction calcScrollBottom(scrollHeight, scrollTop) {\n  return scrollHeight - scrollTop;\n}\nfunction useHandleOnScrollCallback(_ref) {\n  let {\n    hasMore,\n    hasNext,\n    onScroll,\n    scrollRef,\n    setShowScrollDownButton\n  } = _ref;\n  const scrollCb = useCallback(() => {\n    const element = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current;\n    if (element == null) {\n      return;\n    }\n    const {\n      scrollTop,\n      scrollHeight,\n      clientHeight\n    } = element;\n    // https://sendbird.atlassian.net/browse/SBISSUE-11759\n    // the edge case where channel is inside a page that already has scroll\n    // scrollintoView will move the whole page, which we dont want\n    const scrollBottom = calcScrollBottom(scrollHeight, scrollTop);\n    // even if there is more to fetch or not,\n    // we still have to show the scroll to bottom button\n    if (typeof setShowScrollDownButton === 'function') {\n      setShowScrollDownButton(scrollHeight > scrollTop + clientHeight + 1);\n    }\n    if (hasMore && scrollTop < SCROLL_BUFFER) {\n      onScroll(() => {\n        // sets the scroll position to the bottom of the new messages\n        element.scrollTop = element.scrollHeight - scrollBottom;\n      });\n    }\n    if (hasNext) {\n      onScroll(() => {\n        // sets the scroll position to the top of the new messages\n        element.scrollTop = scrollTop - (scrollHeight - element.scrollHeight);\n      });\n    }\n  }, [setShowScrollDownButton, hasMore, onScroll, scrollRef]);\n  return useDebounce(scrollCb, DELAY);\n}\nexport { useHandleOnScrollCallback as a, useDebounce as u };","map":{"version":3,"mappings":";;AAEO,SAASA,WAAWA,CAAoCC,QAAW,EAAEC,KAAa,EAAK;EAC5F,MAAMC,UAAU,GAAGC,MAAM,CAAuC,IAAI,CAAC;EAErEC,SAAS,CAAC,MAAM;IACd;IACA,OAAO,MAAM;MACX,IAAIF,UAAU,CAACG,OAAO,EAAE;QACtBC,YAAY,CAACJ,UAAU,CAACG,OAAO,CAAC;MAClC;KACD;GACF,EAAE,EAAE,CAAC;EAEN,SAASE,gBAAgBA,GAAyB;IAAA,kCAArBC,IAAI;MAAJA,IAAI;IAAA;IAC/B,IAAIN,UAAU,CAACG,OAAO,EAAE;MACtBC,YAAY,CAACJ,UAAU,CAACG,OAAO,CAAC;IAClC;IAEAH,UAAU,CAACG,OAAO,GAAGI,UAAU,CAAC,MAAM;MACpCT,QAAQ,CAAC,GAAGQ,IAAI,CAAC;KAClB,EAAEP,KAAK,CAAC;EACX;EAEA,OAAOM,gBAAgB;AACzB;ACrBA,MAAMG,KAAK,GAAG,GAAG;AAUV,SAASC,gBAAgBA,CAACC,YAAoB,EAAEC,SAAiB,EAAU;EAChF,OAAOD,YAAY,GAAGC,SAAS;AACjC;AAEO,SAASC,yBAAyBA,OAMM;EAAA,IANL;IACxCC,OAAO;IACPC,OAAO;IACPC,QAAQ;IACRC,SAAS;IACTC;EAC8B,CAAC;EAC/B,MAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;IACjC,MAAMC,OAAO,GAAGJ,SAAS,aAATA,SAAS,KAATA,2BAAS,CAAEb,OAAO;IAClC,IAAIiB,OAAO,IAAI,IAAI,EAAE;MACnB;IACF;IAEA,MAAM;MACJT,SAAS;MACTD,YAAY;MACZW;IACF,CAAC,GAAGD,OAAO;IACX;IACA;IACA;IACA,MAAME,YAAY,GAAGb,gBAAgB,CAACC,YAAY,EAAEC,SAAS,CAAC;IAC9D;IACA;IACA,IAAI,OAAOM,uBAAuB,KAAK,UAAU,EAAE;MACjDA,uBAAuB,CAACP,YAAY,GAAGC,SAAS,GAAGU,YAAY,GAAG,CAAC,CAAC;IACtE;IACA,IAAIR,OAAO,IAAIF,SAAS,GAAGY,aAAa,EAAE;MACxCR,QAAQ,CAAC,MAAM;QACb;QACAK,OAAO,CAACT,SAAS,GAAGS,OAAO,CAACV,YAAY,GAAGY,YAAY;MACzD,CAAC,CAAC;IACJ;IACA,IAAIR,OAAO,EAAE;MACXC,QAAQ,CAAC,MAAM;QACb;QACAK,OAAO,CAACT,SAAS,GAAGA,SAAS,IAAID,YAAY,GAAGU,OAAO,CAACV,YAAY,CAAC;MACvE,CAAC,CAAC;IACJ;GACD,EAAE,CACDO,uBAAuB,EACvBJ,OAAO,EACPE,QAAQ,EACRC,SAAS,CACV,CAAC;EAEF,OAAOnB,WAAW,CAACqB,QAAQ,EAAEV,KAAK,CAAC;AACrC","names":["useDebounce","callback","delay","timeoutRef","useRef","useEffect","current","clearTimeout","debounceFunction","args","setTimeout","DELAY","calcScrollBottom","scrollHeight","scrollTop","useHandleOnScrollCallback","hasMore","hasNext","onScroll","scrollRef","setShowScrollDownButton","scrollCb","useCallback","element","clientHeight","scrollBottom","SCROLL_BUFFER"],"sources":["C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\hooks\\useDebounce.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\hooks\\useHandleOnScrollCallback\\index.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\n\nexport function useDebounce<T extends(...args: any[]) => void>(callback: T, delay: number): T {\n  const timeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null);\n\n  useEffect(() => {\n    // Cleanup the timeout on unmount\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, []);\n\n  function debounceFunction(...args: Parameters<T>) {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      callback(...args);\n    }, delay);\n  }\n\n  return debounceFunction as T;\n}\n","import React, { useCallback } from 'react';\nimport { SCROLL_BUFFER } from '../../utils/consts';\nimport { useDebounce } from '../useDebounce';\n\nconst DELAY = 500;\n\nexport interface UseHandleOnScrollCallbackProps {\n  hasMore: boolean;\n  hasNext?: boolean;\n  onScroll(callback: () => void): void;\n  scrollRef: React.RefObject<HTMLDivElement>;\n  setShowScrollDownButton?: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport function calcScrollBottom(scrollHeight: number, scrollTop: number): number {\n  return scrollHeight - scrollTop;\n}\n\nexport function useHandleOnScrollCallback({\n  hasMore,\n  hasNext,\n  onScroll,\n  scrollRef,\n  setShowScrollDownButton,\n}: UseHandleOnScrollCallbackProps): () => void {\n  const scrollCb = useCallback(() => {\n    const element = scrollRef?.current;\n    if (element == null) {\n      return;\n    }\n\n    const {\n      scrollTop,\n      scrollHeight,\n      clientHeight,\n    } = element;\n    // https://sendbird.atlassian.net/browse/SBISSUE-11759\n    // the edge case where channel is inside a page that already has scroll\n    // scrollintoView will move the whole page, which we dont want\n    const scrollBottom = calcScrollBottom(scrollHeight, scrollTop);\n    // even if there is more to fetch or not,\n    // we still have to show the scroll to bottom button\n    if (typeof setShowScrollDownButton === 'function') {\n      setShowScrollDownButton(scrollHeight > scrollTop + clientHeight + 1);\n    }\n    if (hasMore && scrollTop < SCROLL_BUFFER) {\n      onScroll(() => {\n        // sets the scroll position to the bottom of the new messages\n        element.scrollTop = element.scrollHeight - scrollBottom;\n      });\n    }\n    if (hasNext) {\n      onScroll(() => {\n        // sets the scroll position to the top of the new messages\n        element.scrollTop = scrollTop - (scrollHeight - element.scrollHeight);\n      });\n    }\n  }, [\n    setShowScrollDownButton,\n    hasMore,\n    onScroll,\n    scrollRef,\n  ]);\n\n  return useDebounce(scrollCb, DELAY);\n}\n"]},"metadata":{},"sourceType":"module"}