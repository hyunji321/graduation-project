{"ast":null,"code":"import _slicedToArray from \"C:/Users/\\uC774\\uACBD\\uBBFC/IdeaProjects/sendbird-uikit-whatsapp-sample/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useState, useEffect } from 'react';\nimport { u as useVoicePlayerContext, A as AudioUnitDefaultValue } from '../index-5c985608.js';\nimport { g as VOICE_PLAYER_AUDIO_ID } from '../consts-95d8566e.js';\nimport { useVoiceRecorderContext } from '../VoiceRecorder/context.js';\nimport '../_rollupPluginBabelHelpers-6bb0305c.js';\nimport '../useSendbirdStateContext.js';\nimport '../withSendbird.js';\nvar generateGroupKey = function generateGroupKey() {\n  var channelUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  return \"\".concat(channelUrl, \"-\").concat(key);\n};\nvar useVoicePlayer = function useVoicePlayer(_ref) {\n  var _voicePlayerStore$aud;\n  var _ref$key = _ref.key,\n    key = _ref$key === void 0 ? '' : _ref$key,\n    _ref$channelUrl = _ref.channelUrl,\n    channelUrl = _ref$channelUrl === void 0 ? '' : _ref$channelUrl,\n    _ref$audioFile = _ref.audioFile,\n    audioFile = _ref$audioFile === void 0 ? null : _ref$audioFile,\n    _ref$audioFileUrl = _ref.audioFileUrl,\n    audioFileUrl = _ref$audioFileUrl === void 0 ? '' : _ref$audioFileUrl;\n  var _useState = useState(generateGroupKey(channelUrl, key)),\n    _useState2 = _slicedToArray(_useState, 1),\n    groupKey = _useState2[0];\n  var _useVoicePlayerContex = useVoicePlayerContext(),\n    play = _useVoicePlayerContex.play,\n    pause = _useVoicePlayerContex.pause,\n    stop = _useVoicePlayerContex.stop,\n    voicePlayerStore = _useVoicePlayerContex.voicePlayerStore;\n  var _useVoiceRecorderCont = useVoiceRecorderContext(),\n    isRecordable = _useVoiceRecorderCont.isRecordable;\n  var currentAudioUnit = (voicePlayerStore === null || voicePlayerStore === void 0 ? void 0 : (_voicePlayerStore$aud = voicePlayerStore.audioStorage) === null || _voicePlayerStore$aud === void 0 ? void 0 : _voicePlayerStore$aud[groupKey]) || AudioUnitDefaultValue();\n  var playVoicePlayer = function playVoicePlayer() {\n    if (!isRecordable) {\n      play === null || play === void 0 ? void 0 : play({\n        groupKey: groupKey,\n        audioFile: audioFile,\n        audioFileUrl: audioFileUrl\n      });\n    }\n  };\n  var pauseVoicePlayer = function pauseVoicePlayer() {\n    pause === null || pause === void 0 ? void 0 : pause(groupKey);\n  };\n  var stopVoicePlayer = function stopVoicePlayer() {\n    var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    stop === null || stop === void 0 ? void 0 : stop(text);\n  };\n  useEffect(function () {\n    return function () {\n      if (audioFile || audioFileUrl) {\n        var _pause, _ref2;\n        // Can't get the current AudioPlayer through the React hooks(useReducer or useState) in this scope\n        var voiceAudioPlayerElement = document.getElementById(VOICE_PLAYER_AUDIO_ID);\n        voiceAudioPlayerElement === null || voiceAudioPlayerElement === void 0 ? void 0 : (_pause = (_ref2 = voiceAudioPlayerElement).pause) === null || _pause === void 0 ? void 0 : _pause.call(_ref2);\n      }\n    };\n  }, []);\n  return {\n    play: playVoicePlayer,\n    pause: pauseVoicePlayer,\n    stop: stopVoicePlayer,\n    playbackTime: currentAudioUnit.playbackTime * 1000,\n    duration: currentAudioUnit.duration * 1000,\n    // the unit of playbackTime and duration should be millisecond\n    playingStatus: currentAudioUnit.playingStatus\n  };\n};\nexport { useVoicePlayer };","map":{"version":3,"mappings":";;;;;;;;AACO,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAgB,GAAG;EAAA,IAACC,UAAU,uEAAG,EAAE;EAAA,IAAEC,GAAG,uEAAG,EAAE;EAAA,iBAAmBD,UAAW,cAAGC,GAAI;AAAC,CAAC;ACuBpFC,kBAAc,GAAGC,SAAjBD,cAAc,CAAGC,MAKoB;EAAA;EAAA,eAA5BA,KAJpBF,GAAG;IAAHA,GAAG,yBAAG,EAAE;IAAA,kBAIYE,KAHpBH,UAAU;IAAVA,UAAU,gCAAG,EAAE;IAAA,iBAGKG,KAFpBC,SAAS;IAATA,SAAS,+BAAG,IAAI;IAAA,oBAEID,KADpBE,YAAY;IAAZA,YAAY,kCAAG;EAEf,gBAAmBC,QAAQ,CAASP,gBAAgB,CAACC,UAAU,EAAEC,GAAG,CAAC,CAAC;IAAA;IAA/DM,QAAQ;EACf,4BAKIC,qBAAqB,EAAE;IAJzBC,IAAI,yBAAJA,IAAI;IACJC,KAAK,yBAALA,KAAK;IACLC,IAAI,yBAAJA,IAAI;IACJC;EAEF,4BAAyBC,uBAAuB,EAAE;IAA1CC;EACR,IAAMC,gBAAgB,GAAG,iBAAgB,aAAhBH,gBAAgB,gDAAhBA,gBAAgB,CAAEI,YAAY,wCAA9BC,wCAAiCV,QAAQ,CAAC,KAAIW,qBAAqB,EAAE;EAE9F,IAAMC,eAAe,GAAGA,SAAlBA,eAAe,GAAS;IAC5B,IAAI,CAACL,YAAY,EAAE;MACjBL,IAAI,KAAJA,YAAI,KAAJA,sBAAI,CAAG;QACLF,QAAQ,EAARA,QAAQ;QACRH,SAAS,EAATA,SAAS;QACTC;MACF,CAAC,CAAC;IACJ;GACD;EAED,IAAMe,gBAAgB,GAAGA,SAAnBA,gBAAgB,GAAS;IAC7BV,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAGH,QAAQ,CAAC;GAClB;EAED,IAAMc,eAAe,GAAG,SAAlBA,eAAe,GAAkB;IAAA,IAAdC,IAAI,uEAAG,EAAE;IAChCX,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAGW,IAAI,CAAC;GACb;EAEDC,SAAS,CAAC,YAAM;IACd,OAAO,YAAM;MACX,IAAInB,SAAS,IAAIC,YAAY,EAAE;QAAA;QAC7B;QACA,IAAMmB,uBAAuB,GAAGC,QAAQ,CAACC,cAAc,CAACC,qBAAqB,CAAC;QAC7EH,uBAAuB,aAAvBA,uBAAuB,iCAAxB,SAACA,uBAAuB,EAAuBd,KAAK,yBAApDkB,oCAAwD;MAC1D;KACD;GACF,EAAE,EAAE,CAAC;EAEN,OAAQ;IACNnB,IAAI,EAAEU,eAAe;IACrBT,KAAK,EAAEU,gBAAgB;IACvBT,IAAI,EAAEU,eAAe;IACrBQ,YAAY,EAAEd,gBAAgB,CAACc,YAAY,GAAG,IAAI;IAClDC,QAAQ,EAAEf,gBAAgB,CAACe,QAAQ,GAAG,IAAI;IAC1C;IACAC,aAAa,EAAEhB,gBAAgB,CAACgB;GACjC;AACH","names":["generateGroupKey","channelUrl","key","useVoicePlayer","_ref","audioFile","audioFileUrl","useState","groupKey","useVoicePlayerContext","play","pause","stop","voicePlayerStore","useVoiceRecorderContext","isRecordable","currentAudioUnit","audioStorage","_voicePlayerStore$aud","AudioUnitDefaultValue","playVoicePlayer","pauseVoicePlayer","stopVoicePlayer","text","useEffect","voiceAudioPlayerElement","document","getElementById","VOICE_PLAYER_AUDIO_ID","_pause","playbackTime","duration","playingStatus"],"sources":["C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\hooks\\VoicePlayer\\utils.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\hooks\\VoicePlayer\\useVoicePlayer.tsx"],"sourcesContent":["export type GroupKey = string;\nexport const generateGroupKey = (channelUrl = '', key = ''): GroupKey => (`${channelUrl}-${key}`);\n","import { useEffect, useState } from 'react';\nimport { useVoicePlayerContext } from '.';\nimport { VOICE_PLAYER_AUDIO_ID } from '../../utils/consts';\nimport { useVoiceRecorderContext } from '../VoiceRecorder';\n\nimport { AudioUnitDefaultValue, VoicePlayerStatusType } from './dux/initialState';\nimport { generateGroupKey } from './utils';\n\nexport interface UseVoicePlayerProps {\n  key: string;\n  channelUrl: string;\n  audioFile?: File;\n  audioFileUrl?: string;\n}\n\nexport interface UseVoicePlayerContext {\n  play: () => void;\n  pause: () => void;\n  stop: (text?: string) => void;\n  playbackTime: number;\n  duration: number;\n  playingStatus: VoicePlayerStatusType;\n}\n\nexport const useVoicePlayer = ({\n  key = '',\n  channelUrl = '',\n  audioFile = null,\n  audioFileUrl = '',\n}: UseVoicePlayerProps): UseVoicePlayerContext => {\n  const [groupKey] = useState<string>(generateGroupKey(channelUrl, key));\n  const {\n    play,\n    pause,\n    stop,\n    voicePlayerStore,\n  } = useVoicePlayerContext();\n  const { isRecordable } = useVoiceRecorderContext();\n  const currentAudioUnit = voicePlayerStore?.audioStorage?.[groupKey] || AudioUnitDefaultValue();\n\n  const playVoicePlayer = () => {\n    if (!isRecordable) {\n      play?.({\n        groupKey,\n        audioFile,\n        audioFileUrl,\n      });\n    }\n  };\n\n  const pauseVoicePlayer = () => {\n    pause?.(groupKey);\n  };\n\n  const stopVoicePlayer = (text = '') => {\n    stop?.(text);\n  };\n\n  useEffect(() => {\n    return () => {\n      if (audioFile || audioFileUrl) {\n        // Can't get the current AudioPlayer through the React hooks(useReducer or useState) in this scope\n        const voiceAudioPlayerElement = document.getElementById(VOICE_PLAYER_AUDIO_ID);\n        (voiceAudioPlayerElement as HTMLAudioElement)?.pause?.();\n      }\n    };\n  }, []);\n\n  return ({\n    play: playVoicePlayer,\n    pause: pauseVoicePlayer,\n    stop: stopVoicePlayer,\n    playbackTime: currentAudioUnit.playbackTime * 1000,\n    duration: currentAudioUnit.duration * 1000,\n    // the unit of playbackTime and duration should be millisecond\n    playingStatus: currentAudioUnit.playingStatus,\n  });\n};\n"]},"metadata":{},"sourceType":"module"}