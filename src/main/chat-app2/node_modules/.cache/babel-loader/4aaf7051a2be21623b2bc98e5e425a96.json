{"ast":null,"code":"import _slicedToArray from \"C:/Users/\\uC774\\uACBD\\uBBFC/IdeaProjects/sendbird-uikit-whatsapp-sample/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport React__default, { useState, useContext, useMemo, useRef } from 'react';\nimport ReactionBadge from './ReactionBadge.js';\nimport ReactionButton from './ReactionButton.js';\nimport ImageRenderer from './ImageRenderer.js';\nimport Icon, { IconTypes, IconColors } from './Icon.js';\nimport ContextMenu, { EmojiListItems } from './ContextMenu.js';\nimport { H as getEmojiUrl, I as isReactedBy, J as getEmojiTooltipString, G as getEmojiListAll, K as getEmojiMapAll, h as getClassName } from '../index-7eb65acf.js';\nimport BottomSheet from './BottomSheet.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../index-63949de5.js';\nimport UserListItem from './UserListItem.js';\nimport Tooltip from './Tooltip.js';\nimport TooltipWrapper from './TooltipWrapper.js';\nimport { u as useMediaQueryContext } from '../MediaQueryContext-11f0e43f.js';\nimport { u as useLongPress } from '../useLongPress-1303953d.js';\nimport { a as LocalizationContext } from '../LocalizationContext-076d6d2e.js';\nimport useSendbirdStateContext from '../useSendbirdStateContext.js';\nimport { useMessageContext } from '../Message/context.js';\nimport { b as _extends } from '../_rollupPluginBabelHelpers-6bb0305c.js';\nimport '../utils-4bbbca2c.js';\nimport 'prop-types';\nimport 'react-dom';\nimport './SortByRow.js';\nimport '../uuid-1adedf62.js';\nimport '../utils/message/getOutgoingMessageState.js';\nimport '../stringSet-13bbd4a2.js';\nimport '../index-38e61c64.js';\nimport '../UserProfileContext-9cfbab4d.js';\nimport './Avatar.js';\nimport './MutedAvatarOverlay.js';\nimport './Checkbox.js';\nimport './UserProfile.js';\nimport '../sendbirdSelectors.js';\nimport '../topics-b2b77fb9.js';\nimport './Button.js';\nimport '../index-99aabd9e.js';\nimport '../withSendbird.js';\nvar ReactedMembersBottomSheet = function ReactedMembersBottomSheet(_ref) {\n  var _message$reactions, _message$reactions2, _message$reactions2$f;\n  var message = _ref.message,\n    channel = _ref.channel,\n    _ref$emojiKey = _ref.emojiKey,\n    emojiKey = _ref$emojiKey === void 0 ? '' : _ref$emojiKey,\n    hideMenu = _ref.hideMenu,\n    emojiContainer = _ref.emojiContainer;\n  var _channel$members = channel.members,\n    members = _channel$members === void 0 ? [] : _channel$members;\n  var _useState = useState(emojiKey),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedEmoji = _useState2[0],\n    setSelectedEmoji = _useState2[1];\n  return /*#__PURE__*/React__default.createElement(BottomSheet, {\n    onBackdropClick: hideMenu\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message__bottomsheet\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message__bottomsheet__reacted-members\"\n  }, (_message$reactions = message.reactions) === null || _message$reactions === void 0 ? void 0 : _message$reactions.map(function (reaction) {\n    var emojiUrl = getEmojiUrl(emojiContainer, reaction.key);\n    return /*#__PURE__*/React__default.createElement(\"div\", {\n      key: reaction.key,\n      className: \"\\n                  sendbird-message__bottomsheet__reacted-members__item\\n                  \".concat(selectedEmoji === reaction.key ? 'sendbird-message__bottomsheet__reacted-members__item__selected' : '', \"\\n                \"),\n      onClick: function onClick() {\n        setSelectedEmoji(reaction.key);\n      }\n    }, /*#__PURE__*/React__default.createElement(ImageRenderer, {\n      url: emojiUrl,\n      width: \"28px\",\n      height: \"28px\",\n      placeHolder: function placeHolder(style) {\n        return /*#__PURE__*/React__default.createElement(\"div\", {\n          style: style\n        }, /*#__PURE__*/React__default.createElement(Icon, {\n          type: IconTypes.QUESTION,\n          fillColor: IconColors.ON_BACKGROUND_3,\n          width: \"28px\",\n          height: \"28px\"\n        }));\n      }\n    }), /*#__PURE__*/React__default.createElement(Label, {\n      type: LabelTypography.BUTTON_2,\n      color: selectedEmoji === reaction.key ? LabelColors.PRIMARY : LabelColors.ONBACKGROUND_3\n    }, reaction.userIds.length));\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message__bottomsheet__reactor-list\"\n  },\n  // making a member list who reacted to the message with the `selectedEmoji`\n  ((_message$reactions2 = message.reactions) === null || _message$reactions2 === void 0 ? void 0 : (_message$reactions2$f = _message$reactions2.find(function (reaction) {\n    return reaction.key === selectedEmoji;\n  })) === null || _message$reactions2$f === void 0 ? void 0 : _message$reactions2$f.userIds.map(function (userId) {\n    return members.find(function (member) {\n      return member.userId === userId;\n    });\n  }).filter(function (member) {\n    return member !== undefined;\n  })).map(function (member) {\n    return /*#__PURE__*/React__default.createElement(UserListItem, {\n      key: member.userId,\n      className: \"sendbird-message__bottomsheet__reactor-list__item\",\n      user: member,\n      avatarSize: \"36px\"\n    });\n  }))));\n};\nfunction ReactionItem(_ref) {\n  var _emojisMap$get;\n  var reaction = _ref.reaction,\n    memberNicknamesMap = _ref.memberNicknamesMap,\n    setEmojiKey = _ref.setEmojiKey,\n    toggleReaction = _ref.toggleReaction,\n    emojisMap = _ref.emojisMap;\n  var store = useSendbirdStateContext();\n  var _useMediaQueryContext = useMediaQueryContext(),\n    isMobile = _useMediaQueryContext.isMobile;\n  var messageStore = useMessageContext();\n  var message = messageStore === null || messageStore === void 0 ? void 0 : messageStore.message;\n  var _useContext = useContext(LocalizationContext),\n    stringSet = _useContext.stringSet;\n  var userId = store.config.userId;\n  var reactedByMe = isReactedBy(userId, reaction);\n  var handleOnClick = function handleOnClick() {\n    setEmojiKey('');\n    toggleReaction === null || toggleReaction === void 0 ? void 0 : toggleReaction(message, reaction.key, reactedByMe);\n  };\n  var longPress = useLongPress({\n    onLongPress: function onLongPress() {\n      setEmojiKey(reaction.key);\n    },\n    onClick: handleOnClick\n  }, {\n    shouldPreventDefault: true,\n    shouldStopPropagation: true\n  });\n  return /*#__PURE__*/React__default.createElement(TooltipWrapper, {\n    className: \"sendbird-emoji-reactions__reaction-badge\",\n    hoverTooltip: reaction.userIds.length > 0 ? /*#__PURE__*/React__default.createElement(Tooltip, null, getEmojiTooltipString(reaction, userId, memberNicknamesMap, stringSet)) : /*#__PURE__*/React__default.createElement(React__default.Fragment, null)\n  }, /*#__PURE__*/React__default.createElement(\"div\", isMobile ? longPress : {\n    onClick: handleOnClick\n  }, /*#__PURE__*/React__default.createElement(ReactionBadge, {\n    count: reaction.userIds.length,\n    selected: reactedByMe\n  }, /*#__PURE__*/React__default.createElement(ImageRenderer, {\n    circle: true,\n    url: ((_emojisMap$get = emojisMap.get(reaction === null || reaction === void 0 ? void 0 : reaction.key)) === null || _emojisMap$get === void 0 ? void 0 : _emojisMap$get.url) || '',\n    width: \"20px\",\n    height: \"20px\",\n    defaultComponent: /*#__PURE__*/React__default.createElement(Icon, {\n      width: \"20px\",\n      height: \"20px\",\n      type: IconTypes.QUESTION\n    })\n  }))));\n}\nvar AddReactionBadgeItem = function AddReactionBadgeItem(_ref) {\n  var onClick = _ref.onClick;\n  var onlyClick = useLongPress({\n    onLongPress: function onLongPress() {/* noop */},\n    onClick: onClick\n  }, {\n    shouldPreventDefault: true,\n    shouldStopPropagation: true\n  });\n  return /*#__PURE__*/React__default.createElement(\"div\", _extends({\n    className: \"sendbird-emoji-reactions__add-reaction-badge\"\n  }, onlyClick), /*#__PURE__*/React__default.createElement(ReactionBadge, {\n    isAdd: true\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.EMOJI_MORE,\n    fillColor: IconColors.ON_BACKGROUND_3,\n    width: \"20px\",\n    height: \"20px\"\n  })));\n};\nvar MobileEmojisBottomSheet = function MobileEmojisBottomSheet(_ref) {\n  var userId = _ref.userId,\n    message = _ref.message,\n    emojiContainer = _ref.emojiContainer,\n    hideMenu = _ref.hideMenu,\n    toggleReaction = _ref.toggleReaction;\n  var emojiAllList = useMemo(function () {\n    return getEmojiListAll(emojiContainer);\n  }, [emojiContainer]);\n  return /*#__PURE__*/React__default.createElement(BottomSheet, {\n    onBackdropClick: hideMenu\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-message__bottomsheet sendbird-message__emojis-bottomsheet\"\n  }, emojiAllList.map(function (emoji) {\n    var _message$reactions$fi, _message$reactions, _message$reactions$fi2, _message$reactions$fi3;\n    var isReacted = (_message$reactions$fi = message === null || message === void 0 ? void 0 : (_message$reactions = message.reactions) === null || _message$reactions === void 0 ? void 0 : (_message$reactions$fi2 = _message$reactions.find(function (reaction) {\n      return reaction.key === emoji.key;\n    })) === null || _message$reactions$fi2 === void 0 ? void 0 : (_message$reactions$fi3 = _message$reactions$fi2.userIds) === null || _message$reactions$fi3 === void 0 ? void 0 : _message$reactions$fi3.some(function (reactorId) {\n      return reactorId === userId;\n    })) !== null && _message$reactions$fi !== void 0 ? _message$reactions$fi : false;\n    return /*#__PURE__*/React__default.createElement(ReactionButton, {\n      key: emoji.key,\n      width: \"44px\",\n      height: \"44px\",\n      selected: isReacted,\n      onClick: function onClick(e) {\n        e === null || e === void 0 ? void 0 : e.stopPropagation();\n        toggleReaction === null || toggleReaction === void 0 ? void 0 : toggleReaction(message, emoji.key, isReacted);\n        hideMenu();\n      },\n      dataSbId: \"ui_mobile_emoji_reactions_menu_\".concat(emoji.key)\n    }, /*#__PURE__*/React__default.createElement(ImageRenderer, {\n      url: emoji.url,\n      width: \"38px\",\n      height: \"38px\",\n      placeHolder: function placeHolder(style) {\n        return /*#__PURE__*/React__default.createElement(\"div\", {\n          style: style\n        }, /*#__PURE__*/React__default.createElement(Icon, {\n          type: IconTypes.QUESTION,\n          fillColor: IconColors.ON_BACKGROUND_3,\n          width: \"28px\",\n          height: \"28px\"\n        }));\n      }\n    }));\n  })));\n};\nvar EmojiReactions = function EmojiReactions(_ref) {\n  var _message$reactions$le, _message$reactions, _message$reactions$le2, _message$reactions2, _message$reactions3;\n  var _ref$className = _ref.className,\n    className = _ref$className === void 0 ? '' : _ref$className,\n    userId = _ref.userId,\n    message = _ref.message,\n    channel = _ref.channel,\n    emojiContainer = _ref.emojiContainer,\n    memberNicknamesMap = _ref.memberNicknamesMap,\n    _ref$spaceFromTrigger = _ref.spaceFromTrigger,\n    spaceFromTrigger = _ref$spaceFromTrigger === void 0 ? {\n      x: 0,\n      y: 0\n    } : _ref$spaceFromTrigger,\n    _ref$isByMe = _ref.isByMe,\n    isByMe = _ref$isByMe === void 0 ? false : _ref$isByMe,\n    toggleReaction = _ref.toggleReaction;\n  var _useMediaQueryContext2 = useMediaQueryContext(),\n    isMobile = _useMediaQueryContext2.isMobile;\n  var addReactionRef = useRef(null);\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    showEmojiList = _useState4[0],\n    setShowEmojiList = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    selectedEmojiKey = _useState6[0],\n    setSelectedEmojiKey = _useState6[1];\n  var emojisMap = getEmojiMapAll(emojiContainer);\n  var showAddReactionBadge = ((_message$reactions$le = (_message$reactions = message.reactions) === null || _message$reactions === void 0 ? void 0 : _message$reactions.length) !== null && _message$reactions$le !== void 0 ? _message$reactions$le : 0) < emojisMap.size;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName([className, 'sendbird-emoji-reactions', isByMe ? 'outgoing' : 'incoming'])\n  }, ((_message$reactions$le2 = (_message$reactions2 = message.reactions) === null || _message$reactions2 === void 0 ? void 0 : _message$reactions2.length) !== null && _message$reactions$le2 !== void 0 ? _message$reactions$le2 : 0) > 0 && ((_message$reactions3 = message.reactions) === null || _message$reactions3 === void 0 ? void 0 : _message$reactions3.map(function (reaction) {\n    return /*#__PURE__*/React__default.createElement(ReactionItem, {\n      key: reaction === null || reaction === void 0 ? void 0 : reaction.key,\n      reaction: reaction,\n      memberNicknamesMap: memberNicknamesMap,\n      setEmojiKey: setSelectedEmojiKey,\n      toggleReaction: toggleReaction,\n      emojisMap: emojisMap\n    });\n  })), !isMobile && showAddReactionBadge && /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return /*#__PURE__*/React__default.createElement(ReactionBadge, {\n        className: \"sendbird-emoji-reactions__add-reaction-badge\",\n        ref: addReactionRef,\n        isAdd: true,\n        onClick: function onClick(e) {\n          var _e$stopPropagation;\n          toggleDropdown();\n          e === null || e === void 0 ? void 0 : (_e$stopPropagation = e.stopPropagation) === null || _e$stopPropagation === void 0 ? void 0 : _e$stopPropagation.call(e);\n        }\n      }, /*#__PURE__*/React__default.createElement(Icon, {\n        type: IconTypes.EMOJI_MORE,\n        fillColor: IconColors.ON_BACKGROUND_3,\n        width: \"20px\",\n        height: \"20px\"\n      }));\n    },\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(EmojiListItems, {\n        parentRef: addReactionRef,\n        parentContainRef: addReactionRef,\n        closeDropdown: closeDropdown,\n        spaceFromTrigger: spaceFromTrigger\n      }, getEmojiListAll(emojiContainer).map(function (emoji) {\n        var _message$reactions4, _message$reactions4$f, _message$reactions4$f2;\n        var isReacted = (message === null || message === void 0 ? void 0 : (_message$reactions4 = message.reactions) === null || _message$reactions4 === void 0 ? void 0 : (_message$reactions4$f = _message$reactions4.find(function (reaction) {\n          return reaction.key === emoji.key;\n        })) === null || _message$reactions4$f === void 0 ? void 0 : (_message$reactions4$f2 = _message$reactions4$f.userIds) === null || _message$reactions4$f2 === void 0 ? void 0 : _message$reactions4$f2.some(function (reactorId) {\n          return reactorId === userId;\n        })) || false;\n        return /*#__PURE__*/React__default.createElement(ReactionButton, {\n          key: emoji.key,\n          width: \"36px\",\n          height: \"36px\",\n          selected: isReacted,\n          onClick: function onClick(e) {\n            closeDropdown();\n            toggleReaction === null || toggleReaction === void 0 ? void 0 : toggleReaction(message, emoji.key, isReacted);\n            e === null || e === void 0 ? void 0 : e.stopPropagation();\n          },\n          dataSbId: \"ui_emoji_reactions_menu_\".concat(emoji.key)\n        }, /*#__PURE__*/React__default.createElement(ImageRenderer, {\n          url: (emoji === null || emoji === void 0 ? void 0 : emoji.url) || '',\n          width: \"28px\",\n          height: \"28px\",\n          placeHolder: function placeHolder(style) {\n            return /*#__PURE__*/React__default.createElement(\"div\", {\n              style: style\n            }, /*#__PURE__*/React__default.createElement(Icon, {\n              type: IconTypes.QUESTION,\n              fillColor: IconColors.ON_BACKGROUND_3,\n              width: \"28px\",\n              height: \"28px\"\n            }));\n          }\n        }));\n      }));\n    }\n  }), isMobile && showAddReactionBadge && /*#__PURE__*/React__default.createElement(AddReactionBadgeItem, {\n    onClick: function onClick() {\n      setShowEmojiList(true);\n    }\n  }), isMobile && showEmojiList && /*#__PURE__*/React__default.createElement(MobileEmojisBottomSheet, {\n    userId: userId,\n    message: message,\n    emojiContainer: emojiContainer,\n    hideMenu: function hideMenu() {\n      setShowEmojiList(false);\n    },\n    toggleReaction: toggleReaction\n  }), isMobile && selectedEmojiKey && channel !== null && /*#__PURE__*/React__default.createElement(ReactedMembersBottomSheet, {\n    message: message,\n    channel: channel,\n    emojiKey: selectedEmojiKey,\n    hideMenu: function hideMenu() {\n      setSelectedEmojiKey('');\n    },\n    emojiContainer: emojiContainer\n  }));\n};\nexport { EmojiReactions as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBO,IAAMA,yBAAyB,GAAGC,SAA5BD,yBAAyB,CAAGC,MAMW;EAAA;EAAA,IALlDC,OAAO,GAKwBD,KAL/BC,OAAO;IACPC,OAAO,GAIwBF,KAJ/BE,OAAO;IAAA,gBAIwBF,KAH/BG,QAAQ;IAARA,QAAQ,8BAAG,EAAE;IACbC,QAAQ,GAEuBJ,KAF/BI,QAAQ;IACRC,iBAC+BL,KAD/BK;EAEA,uBAAyBH,OAAO,CAAxBI,OAAO;IAAPA,OAAO,iCAAG;EAClB,gBAA0CC,QAAQ,CAACJ,QAAQ,CAAC;IAAA;IAArDK,aAAa;IAAEC,gBAAgB;EAEtC,oBACEC,6BAACC,WAAW;IAACC,eAAe,EAAER;GAC5BM;IAAKG,SAAS,EAAC;GACbH;IAAKG,SAAS,EAAC;EAAgD,yBAC5DZ,OAAO,CAACa,SAAS,uDAAjBC,mBAAmBC,GAAG,CAAEC,kBAAkB,EAAmB;IAC5D,IAAMC,QAAQ,GAAGC,WAAW,CAACd,cAAc,EAAEY,QAAQ,CAACG,GAAG,CAAC;IAC1D,oBACEV;MACEU,GAAG,EAAEH,QAAQ,CAACG,GAAI;MAClBP,SAAS,wGAELL,aAAa,KAAKS,QAAQ,CAACG,GAAG,GAAG,gEAAgE,GAAG,EAAG,uBACzG;MACFC,OAAO,EAAEA,mBAAM;QACbZ,gBAAgB,CAACQ,QAAQ,CAACG,GAAG,CAAC;MAChC;IAAE,gBAEFV,6BAACY,aAAa;MACZC,GAAG,EAAEL,QAAS;MACdM,KAAK,EAAC,MAAM;MACZC,MAAM,EAAC,MAAM;MACbC,WAAW,EAAGC,0BAAK;QAAA,oBACjBjB;UAAKiB,KAAK,EAAEA;QAAM,gBAChBjB,6BAACkB,IAAI;UACHC,IAAI,EAAEC,SAAS,CAACC,QAAS;UACzBC,SAAS,EAAEC,UAAU,CAACC,eAAgB;UACtCV,KAAK,EAAC,MAAM;UACZC,MAAM,EAAC;SACP;MAAA;IAEJ,EACF,eACFf,6BAACyB,KAAK;MACJN,IAAI,EAAEO,eAAe,CAACC,QAAS;MAC/BC,KAAK,EAAE9B,aAAa,KAAKS,QAAQ,CAACG,GAAG,GAAGmB,WAAW,CAACC,OAAO,GAAGD,WAAW,CAACE;IAAe,GAExFxB,QAAQ,CAACyB,OAAO,CAACC,MAAM,CAClB,CACJ;EAEV,CAAC,CAAC,CACE,eACNjC;IAAKG,SAAS,EAAC;EAA6C;EACxD;EACA,wBACEZ,OAAO,CAACa,SAAS,iFAAjB8B,oBAAmBC,IAAI,CAAC5B,kBAAQ;IAAA,OAAIA,QAAQ,CAACG,GAAG,KAAKZ,aAAa;EAAA,EAAC,0DAAnEsC,sBACIJ,OAAO,CAAC1B,GAAG,CAAE+B,gBAAM;IAAA,OAAKzC,OAAO,CAACuC,IAAI,CAAEG,gBAAM;MAAA,OAAKA,MAAM,CAACD,MAAM,KAAKA,MAAM;IAAA,EAAC;EAAA,EAAC,CAC5EE,MAAM,CAAED,gBAAM;IAAA,OAAKA,MAAM,KAAKE,SAAS;EAAA,EAAC,EAE1ClC,GAAG,CAAEgC,gBAAM;IAAA,oBACVtC,6BAACyC,YAAY;MACX/B,GAAG,EAAE4B,MAAM,CAACD,MAAO;MACnBlC,SAAS,EAAC,mDAAmD;MAC7DuC,IAAI,EAAEJ,MAAO;MACbK,UAAU,EAAC;KAEd;EAAA,EAAC,CAEF,CACF,CACM;AAElB,CAAC;ACrEc,SAASC,YAAYA,OAM1B;EAAA;EAAA,IALRrC,QAAQ,GAKFjB,KALNiB,QAAQ;IACRsC,kBAAkB,GAIZvD,KAJNuD,kBAAkB;IAClBC,WAAW,GAGLxD,KAHNwD,WAAW;IACXC,cAAc,GAERzD,KAFNyD,cAAc;IACdC,YACM1D,KADN0D;EAEA,IAAMC,KAAK,GAAGC,uBAAuB,EAAE;EACvC,4BAAqBC,oBAAoB,EAAE;IAAnCC;EACR,IAAMC,YAAY,GAAGC,iBAAiB,EAAE;EACxC,IAAM/D,OAAO,GAAG8D,YAAY,aAAZA,YAAY,KAAZA,8BAAY,CAAE9D,OAAsB;EACpD,kBAAsBgE,UAAU,CAACC,mBAAmB,CAAC;IAA7CC;EAER,IAAMpB,MAAM,GAAGY,KAAK,CAACS,MAAM,CAACrB,MAAM;EAClC,IAAMsB,WAAW,GAAGC,WAAW,CAACvB,MAAM,EAAE9B,QAAQ,CAAC;EAEjD,IAAMsD,aAAa,GAAGA,SAAhBA,aAAa,GAAS;IAC1Bf,WAAW,CAAC,EAAE,CAAC;IACfC,cAAc,KAAdA,sBAAc,KAAdA,gCAAc,CAAIxD,OAAO,EAAGgB,QAAQ,CAACG,GAAG,EAAEiD,WAAW,CAAC;GACvD;EACD,IAAMG,SAAS,GAAGC,YAAY,CAAC;IAC7BC,WAAW,EAAEA,uBAAM;MACjBlB,WAAW,CAACvC,QAAQ,CAACG,GAAG,CAAC;KAC1B;IACDC,OAAO,EAAEkD;EACX,CAAC,EAAE;IACDI,oBAAoB,EAAE,IAAI;IAC1BC,qBAAqB,EAAE;EACzB,CAAC,CAAC;EAEF,oBACElE,6BAACmE,cAAc;IACbhE,SAAS,EAAC,0CAA0C;IACpDiE,YAAY,EAAG7D,QAAQ,CAACyB,OAAO,CAACC,MAAM,GAAG,CAAC,gBACxCjC,6BAACqE,OAAO,EACLC,2BAAqB,CAAC/D,QAAQ,EAAE8B,MAAM,EAAEQ,kBAAkB,EAAEY,SAAS,CAAC,CAC/D,gBACRzD;EAAM,gBAEVA,oCAEIoD,QAAQ,GACJU,SAAS,GACT;IAAEnD,OAAO,EAAEkD;EAAc,CAAC,eAGhC7D,6BAACuE,aAAa;IACZC,KAAK,EAAEjE,QAAQ,CAACyB,OAAO,CAACC,MAAO;IAC/BwC,QAAQ,EAAEd;EAAY,gBAEtB3D,6BAACY,aAAa;IACZ8D,MAAM;IACN7D,GAAG,EAAE,4BAAS,CAAC8D,GAAG,CAACpE,QAAQ,KAARA,gBAAQ,uBAARA,QAAQ,CAAEG,GAAG,CAAC,mDAA5BkE,eAA8B/D,GAAG,KAAI,EAAG;IAC7CC,KAAK,EAAC,MAAM;IACZC,MAAM,EAAC,MAAM;IACb8D,gBAAgB,eACd7E,6BAACkB,IAAI;MAACJ,KAAK,EAAC,MAAM;MAACC,MAAM,EAAC,MAAM;MAACI,IAAI,EAAEC,SAAS,CAACC;IAAS;GAE5D,EACY,CACZ,CACS;AAErB;AC3EO,IAAMyD,oBAAoB,GAAGxF,SAAvBwF,oBAAoB,CAAGxF,MAEiB;EAAA,IADnDqB,UAC0BrB,KAD1BqB;EAEA,IAAMoE,SAAS,GAAGhB,YAAY,CAAC;IAC7BC,WAAW,EAAEA,uBAAM,YAAc;IACjCrD;EACF,CAAC,EAAE;IACDsD,oBAAoB,EAAE,IAAI;IAC1BC,qBAAqB,EAAE;EACzB,CAAC,CAAC;EAEF,oBACElE;IACEG,SAAS,EAAC;EAA8C,GACpD4E,SAAS,CAEb/E,4CAACuE,aAAa;IACZS,KAAK;EAAA,gBAELhF,6BAACkB,IAAI;IACHC,IAAI,EAAEC,SAAS,CAAC6D,UAAW;IAC3B3D,SAAS,EAAEC,UAAU,CAACC,eAAgB;IACtCV,KAAK,EAAC,MAAM;IACZC,MAAM,EAAC;EAAM,EACb,CACY,CACZ;AAEV,CAAC;ACvBM,IAAMmE,uBAAuB,GAAG5F,SAA1B4F,uBAAuB,CAAG5F,MAMW;EAAA,IALhD+C,MAAM,GAKuB/C,KAL7B+C,MAAM;IACN9C,OAAO,GAIsBD,KAJ7BC,OAAO;IACPI,cAAc,GAGeL,KAH7BK,cAAc;IACdD,QAAQ,GAEqBJ,KAF7BI,QAAQ;IACRqD,iBAC6BzD,KAD7ByD;EAEA,IAAMoC,YAAY,GAAGC,OAAO,CAAC,YAAM;IACjC,OAAOC,eAAe,CAAC1F,cAAc,CAAC;EACxC,CAAC,EAAE,CAACA,cAAc,CAAC,CAAC;EACpB,oBACEK,6BAACC,WAAW;IAACC,eAAe,EAAER;GAC5BM;IAAKG,SAAS,EAAC;EAAoE,GAChFgF,YAAY,CAAC7E,GAAG,CAAEgF,eAAK,EAAK;IAAA;IAC3B,IAAMC,SAAkB,4BAAIhG,OAAO,KAAPA,eAAO,6CAAPA,OAAO,CAAEa,SAAS,iFAAlBC,mBACxB8B,IAAI,CAAE5B,kBAAkB;MAAA,OAAcA,QAAQ,CAACG,GAAG,KAAK4E,KAAK,CAAC5E,GAAG;IAAA,EAAC,qFADzC8E,uBAC2CxD,OAAO,yCADlDyD,yCAExBC,IAAI,CAAEC,mBAAiB;MAAA,OAAcA,SAAS,KAAKtD,MAAM;IAAA,EAAC,yEAAK,KAAK;IACxE,oBACErC,6BAAC4F,cAAc;MACblF,GAAG,EAAE4E,KAAK,CAAC5E,GAAI;MACfI,KAAK,EAAC,MAAM;MACZC,MAAM,EAAC,MAAM;MACb0D,QAAQ,EAAEc,SAAU;MACpB5E,OAAO,EAAGkF,kBAAC,EAAK;QACdA,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAEC,eAAe,EAAE;QACpB/C,cAAc,KAAdA,sBAAc,KAAdA,gCAAc,CAAGxD,OAAO,EAAE+F,KAAK,CAAC5E,GAAG,EAAE6E,SAAS,CAAC;QAC/C7F,QAAQ,EAAE;OACV;MACFqG,QAAQ,2CAAoCT,KAAK,CAAC5E,GAAI;IAAE,gBAExDV,6BAACY,aAAa;MACZC,GAAG,EAAEyE,KAAK,CAACzE,GAAI;MACfC,KAAK,EAAC,MAAM;MACZC,MAAM,EAAC,MAAM;MACbC,WAAW,EAAGC,0BAA8B;QAAA,oBAC1CjB;UAAKiB,KAAK,EAAEA;QAAM,gBAChBjB,6BAACkB,IAAI;UACHC,IAAI,EAAEC,SAAS,CAACC,QAAS;UACzBC,SAAS,EAAEC,UAAU,CAACC,eAAgB;UACtCV,KAAK,EAAC,MAAM;UACZC,MAAM,EAAC;SACP;MAAA;IAEJ,EACF,CACa;GAEpB,CAAC,CACE,CACM;AAElB,CAAC;ACrCKiF,kBAAc,GAAG1G,SAAjB0G,cAAc,CAAG1G,MAUI;EAAA;EAAA,qBAAnBA,KATNa,SAAS;IAATA,SAAS,+BAAG,EAAE;IACdkC,MAAM,GAQA/C,KARN+C,MAAM;IACN9C,OAAO,GAODD,KAPNC,OAAO;IACPC,OAAO,GAMDF,KANNE,OAAO;IACPG,cAAc,GAKRL,KALNK,cAAc;IACdkD,kBAAkB,GAIZvD,KAJNuD,kBAAkB;IAAA,wBAIZvD,KAHN2G,gBAAgB;IAAhBA,gBAAgB,sCAAG;MAAEC,CAAC,EAAE,CAAC;MAAEC,CAAC,EAAE;KAAG;IAAA,cAG3B7G,KAFN8G,MAAM;IAANA,MAAM,4BAAG,KAAK;IACdrD,iBACMzD,KADNyD;EAEA,6BAAqBI,oBAAoB,EAAE;IAAnCC;EACR,IAAMiD,cAAc,GAAGC,MAAM,CAAC,IAAI,CAAC;EACnC,iBAA0CzG,QAAQ,CAAC,KAAK,CAAC;IAAA;IAAlD0G,aAAa;IAAEC,gBAAgB;EACtC,iBAAgD3G,QAAQ,CAAC,EAAE,CAAC;IAAA;IAArD4G,gBAAgB;IAAEC,mBAAmB;EAE5C,IAAM1D,SAAS,GAAG2D,cAAc,CAAChH,cAAc,CAAC;EAChD,IAAMiH,oBAAoB,GAAG,gDAACrH,OAAO,CAACa,SAAS,uDAAjBC,mBAAmB4B,MAAM,yEAAI,CAAC,IAAIe,SAAS,CAAC6D,IAAI;EAE9E,oBACE7G;IAAKG,SAAS,EAAE2G,YAAY,CAAC,CAC3B3G,SAAS,EAAE,0BAA0B,EACrCiG,MAAM,GAAG,UAAU,GAAG,UAAU,CACjC;EAAE,GACC,kDAAC7G,OAAO,CAACa,SAAS,wDAAjB8B,oBAAmBD,MAAM,2EAAI,CAAC,IAAI,CAAC,4BACpC1C,OAAO,CAACa,SAAS,wDAAjB2G,oBAAmBzG,GAAG,CAAEC,kBAAkB,EAAmB;IAC3D,oBACEP,6BAAC4C,YAAY;MACXlC,GAAG,EAAEH,QAAQ,aAARA,QAAQ,KAARA,0BAAQ,CAAEG,GAAI;MACnBH,QAAQ,EAAEA,QAAS;MACnBsC,kBAAkB,EAAEA,kBAAmB;MACvCC,WAAW,EAAE4D,mBAAoB;MACjC3D,cAAc,EAAEA,cAAe;MAC/BC,SAAS,EAAEA;KACX;EAEN,CAAC,CAAC,CACH,EACC,CAACI,QAAQ,IAAIwD,oBAAoB,iBACjC5G,6BAACgH,WAAW;IACVC,WAAW,EAAGC,mCAA0B;MAAA,oBACtClH,6BAACuE,aAAa;QACZpE,SAAS,EAAC,8CAA8C;QACxDgH,GAAG,EAAEd,cAAe;QACpBrB,KAAK;QACLrE,OAAO,EAAGkF,kBAAC,EAAK;UAAA;UACdqB,cAAc,EAAE;UAChBrB,CAAC,aAADA,CAAC,6CAADA,CAAC,CAAEC,eAAe,uDAAlBsB,yBAAC,CAAqB;QACxB;MAAE,gBAEFpH,6BAACkB,IAAI;QACHC,IAAI,EAAEC,SAAS,CAAC6D,UAAW;QAC3B3D,SAAS,EAAEC,UAAU,CAACC,eAAgB;QACtCV,KAAK,EAAC,MAAM;QACZC,MAAM,EAAC;MAAM,EACb,CAEJ;IAAA;IACFsG,SAAS,EAAGC,gCAAyB;MAAA,oBACnCtH,6BAACuH,cAAc;QACbC,SAAS,EAAEnB,cAAe;QAC1BoB,gBAAgB,EAAEpB,cAAe;QACjCiB,aAAa,EAAEA,aAAc;QAC7BrB,gBAAgB,EAAEA;OAEjBZ,iBAAe,CAAC1F,cAAc,CAAC,CAACW,GAAG,CAAEgF,eAAY,EAAmB;QAAA;QACnE,IAAMC,SAAkB,GAAG,CAAChG,OAAO,aAAPA,OAAO,8CAAPA,OAAO,CAAEa,SAAS,iFAAlBsH,oBACxBvF,IAAI,CAAE5B,kBAAkB;UAAA,OAAcA,QAAQ,CAACG,GAAG,KAAK4E,KAAK,CAAC5E,GAAG;QAAA,EAAC,oFADzCiH,sBAC2C3F,OAAO,yCADlD4F,yCAExBlC,IAAI,CAAEC,mBAAiB;UAAA,OAAcA,SAAS,KAAKtD,MAAM;QAAA,EAAC,KAAK,KAAK;QACxE,oBACErC,6BAAC4F,cAAc;UACblF,GAAG,EAAE4E,KAAK,CAAC5E,GAAI;UACfI,KAAK,EAAC,MAAM;UACZC,MAAM,EAAC,MAAM;UACb0D,QAAQ,EAAEc,SAAU;UACpB5E,OAAO,EAAGkF,kBAAC,EAAW;YACpByB,aAAa,EAAE;YACfvE,cAAc,KAAdA,sBAAc,KAAdA,gCAAc,CAAGxD,OAAO,EAAE+F,KAAK,CAAC5E,GAAG,EAAE6E,SAAS,CAAC;YAC/CM,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAEC,eAAe,EAAE;WACpB;UACFC,QAAQ,oCAA6BT,KAAK,CAAC5E,GAAI;QAAE,gBAEjDV,6BAACY,aAAa;UACZC,GAAG,EAAE,MAAK,KAALyE,aAAK,uBAALA,KAAK,CAAEzE,GAAG,KAAI,EAAG;UACtBC,KAAK,EAAC,MAAM;UACZC,MAAM,EAAC,MAAM;UACbC,WAAW,EAAGC,0BAA8B;YAAA,oBAC1CjB;cAAKiB,KAAK,EAAEA;YAAM,gBAChBjB,6BAACkB,IAAI;cACHC,IAAI,EAAEC,SAAS,CAACC,QAAS;cACzBC,SAAS,EAAEC,UAAU,CAACC,eAAgB;cACtCV,KAAK,EAAC,MAAM;cACZC,MAAM,EAAC;aACP;UAAA;QAEJ,EACF,CACa;MAErB,CAAC,CAAC;IAAA;GAIT,GACCqC,QAAQ,IAAIwD,oBAAoB,iBAChC5G,6BAAC8E,oBAAoB;IACnBnE,OAAO,EAAEA,mBAAM;MACb6F,gBAAgB,CAAC,IAAI,CAAC;IACxB;GAEH,GACCpD,QAAQ,IAAImD,aAAa,iBACzBvG,6BAACkF,uBAAuB;IACtB7C,MAAM,EAAEA,MAAO;IACf9C,OAAO,EAAEA,OAAQ;IACjBI,cAAc,EAAEA,cAAe;IAC/BD,QAAQ,EAAEA,oBAAM;MACd8G,gBAAgB,CAAC,KAAK,CAAC;KACvB;IACFzD,cAAc,EAAEA;EAAe,EAElC,EACCK,QAAQ,IAAIqD,gBAAgB,IAAIjH,OAAO,KAAK,IAAI,iBAChDQ,6BAACX,yBAAyB;IACxBE,OAAO,EAAEA,OAAQ;IACjBC,OAAO,EAAEA,OAAQ;IACjBC,QAAQ,EAAEgH,gBAAiB;IAC3B/G,QAAQ,EAAEA,oBAAM;MACdgH,mBAAmB,CAAC,EAAE,CAAC;KACvB;IACF/G,cAAc,EAAEA;EAAe,EAElC,CACG;AAEV","names":["ReactedMembersBottomSheet","_ref","message","channel","emojiKey","hideMenu","emojiContainer","members","useState","selectedEmoji","setSelectedEmoji","React","BottomSheet","onBackdropClick","className","reactions","_message$reactions","map","reaction","emojiUrl","getEmojiUrl","key","onClick","ImageRenderer","url","width","height","placeHolder","style","Icon","type","IconTypes","QUESTION","fillColor","IconColors","ON_BACKGROUND_3","Label","LabelTypography","BUTTON_2","color","LabelColors","PRIMARY","ONBACKGROUND_3","userIds","length","_message$reactions2","find","_message$reactions2$f","userId","member","filter","undefined","UserListItem","user","avatarSize","ReactionItem","memberNicknamesMap","setEmojiKey","toggleReaction","emojisMap","store","useSendbirdStateContext","useMediaQueryContext","isMobile","messageStore","useMessageContext","useContext","LocalizationContext","stringSet","config","reactedByMe","isReactedBy","handleOnClick","longPress","useLongPress","onLongPress","shouldPreventDefault","shouldStopPropagation","TooltipWrapper","hoverTooltip","Tooltip","getEmojiTooltipString","ReactionBadge","count","selected","circle","get","_emojisMap$get","defaultComponent","AddReactionBadgeItem","onlyClick","isAdd","EMOJI_MORE","MobileEmojisBottomSheet","emojiAllList","useMemo","getEmojiListAll","emoji","isReacted","_message$reactions$fi2","_message$reactions$fi3","some","reactorId","ReactionButton","e","stopPropagation","dataSbId","EmojiReactions","spaceFromTrigger","x","y","isByMe","addReactionRef","useRef","showEmojiList","setShowEmojiList","selectedEmojiKey","setSelectedEmojiKey","getEmojiMapAll","showAddReactionBadge","size","getClassName","_message$reactions3","ContextMenu","menuTrigger","toggleDropdown","ref","_e$stopPropagation","menuItems","closeDropdown","EmojiListItems","parentRef","parentContainRef","_message$reactions4","_message$reactions4$f","_message$reactions4$f2"],"sources":["C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\ui\\MobileMenu\\ReactedMembersBottomSheet.tsx","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\ui\\EmojiReactions\\ReactionItem.tsx","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\ui\\EmojiReactions\\AddReactionBadgeItem.tsx","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\ui\\MobileMenu\\MobileEmojisBottomSheet.tsx","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\ui\\EmojiReactions\\index.tsx"],"sourcesContent":["import React, { ReactElement, useState } from 'react';\nimport { EmojiContainer } from '@sendbird/chat';\nimport { GroupChannel, Member } from '@sendbird/chat/groupChannel';\nimport { FileMessage, Reaction, UserMessage } from '@sendbird/chat/message';\n\nimport './mobile-menu-reacted-members.scss';\n\nimport BottomSheet from '../BottomSheet';\nimport { getEmojiUrl } from '../../utils';\nimport ImageRenderer from '../ImageRenderer';\nimport Icon, { IconColors, IconTypes } from '../Icon';\nimport Label, { LabelColors, LabelTypography } from '../Label';\nimport UserListItem from '../UserListItem';\n\nexport interface ReactedMembersBottomSheetProps {\n  message: UserMessage | FileMessage;\n  channel: GroupChannel;\n  emojiKey: string;\n  hideMenu: () => void;\n  emojiContainer?: EmojiContainer;\n}\n\nexport const ReactedMembersBottomSheet = ({\n  message,\n  channel,\n  emojiKey = '',\n  hideMenu,\n  emojiContainer,\n}: ReactedMembersBottomSheetProps): ReactElement => {\n  const { members = [] } = channel;\n  const [selectedEmoji, setSelectedEmoji] = useState(emojiKey);\n\n  return (\n    <BottomSheet onBackdropClick={hideMenu}>\n      <div className=\"sendbird-message__bottomsheet\">\n        <div className=\"sendbird-message__bottomsheet__reacted-members\">\n          {message.reactions?.map((reaction: Reaction): ReactElement => {\n            const emojiUrl = getEmojiUrl(emojiContainer, reaction.key);\n            return (\n              <div\n                key={reaction.key}\n                className={`\n                  sendbird-message__bottomsheet__reacted-members__item\n                  ${selectedEmoji === reaction.key ? 'sendbird-message__bottomsheet__reacted-members__item__selected' : ''}\n                `}\n                onClick={() => {\n                  setSelectedEmoji(reaction.key);\n                }}\n              >\n                <ImageRenderer\n                  url={emojiUrl}\n                  width=\"28px\"\n                  height=\"28px\"\n                  placeHolder={(style) => (\n                    <div style={style}>\n                      <Icon\n                        type={IconTypes.QUESTION}\n                        fillColor={IconColors.ON_BACKGROUND_3}\n                        width=\"28px\"\n                        height=\"28px\"\n                      />\n                    </div>\n                  )}\n                />\n                <Label\n                  type={LabelTypography.BUTTON_2}\n                  color={selectedEmoji === reaction.key ? LabelColors.PRIMARY : LabelColors.ONBACKGROUND_3}\n                >\n                  {reaction.userIds.length}\n                </Label>\n              </div>\n            );\n          })}\n        </div>\n        <div className=\"sendbird-message__bottomsheet__reactor-list\">\n          { // making a member list who reacted to the message with the `selectedEmoji`\n            (\n              message.reactions?.find(reaction => reaction.key === selectedEmoji)\n                ?.userIds.map((userId) => members.find((member) => member.userId === userId))\n                .filter((member) => member !== undefined) as Array<Member>\n            )\n              .map((member) => (\n                <UserListItem\n                  key={member.userId}\n                  className=\"sendbird-message__bottomsheet__reactor-list__item\"\n                  user={member}\n                  avatarSize=\"36px\"\n                />\n              ))\n          }\n        </div>\n      </div>\n    </BottomSheet>\n  );\n};\n","import React, { useContext } from 'react';\n\nimport { FileMessage, Reaction, UserMessage } from '@sendbird/chat/message';\n\nimport Tooltip from '../Tooltip';\nimport TooltipWrapper from '../TooltipWrapper';\nimport ReactionBadge from '../ReactionBadge';\nimport ImageRenderer from '../ImageRenderer';\nimport Icon, { IconTypes } from '../Icon';\nimport { useMediaQueryContext } from '../../lib/MediaQueryContext';\nimport useLongPress from '../../hooks/useLongPress';\nimport { LocalizationContext } from '../../lib/LocalizationContext';\nimport useSendbirdStateContext from '../../hooks/useSendbirdStateContext';\nimport { getEmojiTooltipString, isReactedBy } from '../../utils';\nimport { useMessageContext } from '../../modules/Message/context/MessageProvider';\nimport { Emoji } from '@sendbird/chat';\n\ntype Props = {\n  reaction: Reaction;\n  memberNicknamesMap: Map<string, string>;\n  setEmojiKey: React.Dispatch<React.SetStateAction<string>>;\n  toggleReaction?: (message: UserMessage | FileMessage, key: string, byMe: boolean) => void;\n  emojisMap: Map<string, Emoji>;\n};\n\nexport default function ReactionItem({\n  reaction,\n  memberNicknamesMap,\n  setEmojiKey,\n  toggleReaction,\n  emojisMap,\n}: Props) {\n  const store = useSendbirdStateContext();\n  const { isMobile } = useMediaQueryContext();\n  const messageStore = useMessageContext();\n  const message = messageStore?.message as UserMessage;\n  const { stringSet } = useContext(LocalizationContext);\n\n  const userId = store.config.userId;\n  const reactedByMe = isReactedBy(userId, reaction);\n\n  const handleOnClick = () => {\n    setEmojiKey('');\n    toggleReaction?.((message), reaction.key, reactedByMe);\n  };\n  const longPress = useLongPress({\n    onLongPress: () => {\n      setEmojiKey(reaction.key);\n    },\n    onClick: handleOnClick,\n  }, {\n    shouldPreventDefault: true,\n    shouldStopPropagation: true,\n  });\n\n  return (\n    <TooltipWrapper\n      className=\"sendbird-emoji-reactions__reaction-badge\"\n      hoverTooltip={(reaction.userIds.length > 0) ? (\n        <Tooltip>\n          {getEmojiTooltipString(reaction, userId, memberNicknamesMap, stringSet)}\n        </Tooltip>\n      ) : <></>}\n    >\n      <div\n        {...(\n          isMobile\n            ? longPress\n            : { onClick: handleOnClick }\n        )}\n      >\n        <ReactionBadge\n          count={reaction.userIds.length}\n          selected={reactedByMe}\n        >\n          <ImageRenderer\n            circle\n            url={emojisMap.get(reaction?.key)?.url || ''}\n            width=\"20px\"\n            height=\"20px\"\n            defaultComponent={(\n              <Icon width=\"20px\" height=\"20px\" type={IconTypes.QUESTION} />\n            )}\n          />\n        </ReactionBadge>\n      </div>\n    </TooltipWrapper>\n  );\n}\n","import React, {\n  KeyboardEvent,\n  MouseEvent,\n  TouchEvent,\n} from 'react';\nimport ReactionBadge from '../ReactionBadge';\nimport Icon, { IconColors, IconTypes } from '../Icon';\nimport useLongPress from '../../hooks/useLongPress';\n\nexport interface AddReactionBadgeItemProps {\n  onClick: (e: MouseEvent<HTMLDivElement> | KeyboardEvent<HTMLDivElement> | TouchEvent<HTMLDivElement>) => void;\n}\n\nexport const AddReactionBadgeItem = ({\n  onClick,\n}: AddReactionBadgeItemProps): React.ReactElement => {\n  const onlyClick = useLongPress({\n    onLongPress: () => { /* noop */ },\n    onClick,\n  }, {\n    shouldPreventDefault: true,\n    shouldStopPropagation: true,\n  });\n\n  return (\n    <div\n      className=\"sendbird-emoji-reactions__add-reaction-badge\"\n      {...onlyClick}\n    >\n      <ReactionBadge\n        isAdd\n      >\n        <Icon\n          type={IconTypes.EMOJI_MORE}\n          fillColor={IconColors.ON_BACKGROUND_3}\n          width=\"20px\"\n          height=\"20px\"\n        />\n      </ReactionBadge>\n    </div>\n  );\n};\n","import React, { ReactElement, useMemo } from 'react';\nimport { EmojiContainer } from '@sendbird/chat';\nimport { FileMessage, Reaction, UserMessage } from '@sendbird/chat/message';\n\nimport BottomSheet from '../BottomSheet';\nimport { getEmojiListAll } from '../../utils';\nimport ReactionButton from '../ReactionButton';\nimport ImageRenderer from '../ImageRenderer';\nimport Icon, { IconColors, IconTypes } from '../Icon';\n\nexport interface MobileEmojisBottomSheetProps {\n  userId: string;\n  message: UserMessage | FileMessage;\n  emojiContainer: EmojiContainer;\n  hideMenu: () => void;\n  toggleReaction?: (message: UserMessage | FileMessage, key: string, byMe: boolean) => void;\n}\n\nexport const MobileEmojisBottomSheet = ({\n  userId,\n  message,\n  emojiContainer,\n  hideMenu,\n  toggleReaction,\n}: MobileEmojisBottomSheetProps): ReactElement => {\n  const emojiAllList = useMemo(() => {\n    return getEmojiListAll(emojiContainer);\n  }, [emojiContainer]);\n  return (\n    <BottomSheet onBackdropClick={hideMenu}>\n      <div className=\"sendbird-message__bottomsheet sendbird-message__emojis-bottomsheet\">\n        {emojiAllList.map((emoji) => {\n          const isReacted: boolean = (message?.reactions\n            ?.find((reaction: Reaction): boolean => reaction.key === emoji.key)?.userIds\n            ?.some((reactorId: string): boolean => reactorId === userId)) ?? false;\n          return (\n            <ReactionButton\n              key={emoji.key}\n              width=\"44px\"\n              height=\"44px\"\n              selected={isReacted}\n              onClick={(e) => {\n                e?.stopPropagation();\n                toggleReaction?.(message, emoji.key, isReacted);\n                hideMenu();\n              }}\n              dataSbId={`ui_mobile_emoji_reactions_menu_${emoji.key}`}\n            >\n              <ImageRenderer\n                url={emoji.url}\n                width=\"38px\"\n                height=\"38px\"\n                placeHolder={(style: Record<string, unknown>): ReactElement => (\n                  <div style={style}>\n                    <Icon\n                      type={IconTypes.QUESTION}\n                      fillColor={IconColors.ON_BACKGROUND_3}\n                      width=\"28px\"\n                      height=\"28px\"\n                    />\n                  </div>\n                )}\n              />\n            </ReactionButton>\n          );\n        })}\n      </div>\n    </BottomSheet>\n  );\n};\n","import './index.scss';\nimport React, { ReactElement, useRef, useState } from 'react';\nimport type { Emoji, EmojiContainer } from '@sendbird/chat';\nimport type { FileMessage, Reaction, UserMessage } from '@sendbird/chat/message';\nimport type { GroupChannel } from '@sendbird/chat/groupChannel';\n\nimport ReactionBadge from '../ReactionBadge';\nimport ReactionButton from '../ReactionButton';\nimport ImageRenderer from '../ImageRenderer';\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport ContextMenu, { EmojiListItems } from '../ContextMenu';\nimport { Nullable, SpaceFromTriggerType } from '../../types';\n\nimport { getClassName, getEmojiListAll, getEmojiMapAll } from '../../utils';\nimport { ReactedMembersBottomSheet } from '../MobileMenu/ReactedMembersBottomSheet';\nimport ReactionItem from './ReactionItem';\nimport { useMediaQueryContext } from '../../lib/MediaQueryContext';\nimport { AddReactionBadgeItem } from './AddReactionBadgeItem';\nimport { MobileEmojisBottomSheet } from '../MobileMenu/MobileEmojisBottomSheet';\n\ninterface Props {\n  className?: string | Array<string>;\n  userId: string;\n  message: UserMessage | FileMessage;\n  channel: Nullable<GroupChannel>;\n  emojiContainer: EmojiContainer;\n  memberNicknamesMap: Map<string, string>;\n  spaceFromTrigger?: SpaceFromTriggerType;\n  isByMe?: boolean;\n  toggleReaction?: (message: UserMessage | FileMessage, key: string, byMe: boolean) => void;\n}\n\nconst EmojiReactions = ({\n  className = '',\n  userId,\n  message,\n  channel,\n  emojiContainer,\n  memberNicknamesMap,\n  spaceFromTrigger = { x: 0, y: 0 },\n  isByMe = false,\n  toggleReaction,\n}: Props): ReactElement => {\n  const { isMobile } = useMediaQueryContext();\n  const addReactionRef = useRef(null);\n  const [showEmojiList, setShowEmojiList] = useState(false);\n  const [selectedEmojiKey, setSelectedEmojiKey] = useState('');\n\n  const emojisMap = getEmojiMapAll(emojiContainer);\n  const showAddReactionBadge = (message.reactions?.length ?? 0) < emojisMap.size;\n\n  return (\n    <div className={getClassName([\n      className, 'sendbird-emoji-reactions',\n      isByMe ? 'outgoing' : 'incoming',\n    ])}>\n      {((message.reactions?.length ?? 0) > 0) && (\n        message.reactions?.map((reaction: Reaction): ReactElement => {\n          return (\n            <ReactionItem\n              key={reaction?.key}\n              reaction={reaction}\n              memberNicknamesMap={memberNicknamesMap}\n              setEmojiKey={setSelectedEmojiKey}\n              toggleReaction={toggleReaction}\n              emojisMap={emojisMap}\n            />\n          );\n        })\n      )}\n      {(!isMobile && showAddReactionBadge) && (\n        <ContextMenu\n          menuTrigger={(toggleDropdown: () => void): ReactElement => (\n            <ReactionBadge\n              className=\"sendbird-emoji-reactions__add-reaction-badge\"\n              ref={addReactionRef}\n              isAdd\n              onClick={(e) => {\n                toggleDropdown();\n                e?.stopPropagation?.();\n              }}\n            >\n              <Icon\n                type={IconTypes.EMOJI_MORE}\n                fillColor={IconColors.ON_BACKGROUND_3}\n                width=\"20px\"\n                height=\"20px\"\n              />\n            </ReactionBadge>\n          )}\n          menuItems={(closeDropdown: () => void): ReactElement => (\n            <EmojiListItems\n              parentRef={addReactionRef}\n              parentContainRef={addReactionRef}\n              closeDropdown={closeDropdown}\n              spaceFromTrigger={spaceFromTrigger}\n            >\n              {getEmojiListAll(emojiContainer).map((emoji: Emoji): ReactElement => {\n                const isReacted: boolean = (message?.reactions\n                  ?.find((reaction: Reaction): boolean => reaction.key === emoji.key)?.userIds\n                  ?.some((reactorId: string): boolean => reactorId === userId)) || false;\n                return (\n                  <ReactionButton\n                    key={emoji.key}\n                    width=\"36px\"\n                    height=\"36px\"\n                    selected={isReacted}\n                    onClick={(e): void => {\n                      closeDropdown();\n                      toggleReaction?.(message, emoji.key, isReacted);\n                      e?.stopPropagation();\n                    }}\n                    dataSbId={`ui_emoji_reactions_menu_${emoji.key}`}\n                  >\n                    <ImageRenderer\n                      url={emoji?.url || ''}\n                      width=\"28px\"\n                      height=\"28px\"\n                      placeHolder={(style: Record<string, unknown>): ReactElement => (\n                        <div style={style}>\n                          <Icon\n                            type={IconTypes.QUESTION}\n                            fillColor={IconColors.ON_BACKGROUND_3}\n                            width=\"28px\"\n                            height=\"28px\"\n                          />\n                        </div>\n                      )}\n                    />\n                  </ReactionButton>\n                );\n              })}\n            </EmojiListItems>\n          )}\n        />\n      )}\n      {(isMobile && showAddReactionBadge) && (\n        <AddReactionBadgeItem\n          onClick={() => {\n            setShowEmojiList(true);\n          }}\n        />\n      )}\n      {(isMobile && showEmojiList) && (\n        <MobileEmojisBottomSheet\n          userId={userId}\n          message={message}\n          emojiContainer={emojiContainer}\n          hideMenu={() => {\n            setShowEmojiList(false);\n          }}\n          toggleReaction={toggleReaction}\n        />\n      )}\n      {(isMobile && selectedEmojiKey && channel !== null) && (\n        <ReactedMembersBottomSheet\n          message={message}\n          channel={channel}\n          emojiKey={selectedEmojiKey}\n          hideMenu={() => {\n            setSelectedEmojiKey('');\n          }}\n          emojiContainer={emojiContainer}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default EmojiReactions;\n"]},"metadata":{},"sourceType":"module"}