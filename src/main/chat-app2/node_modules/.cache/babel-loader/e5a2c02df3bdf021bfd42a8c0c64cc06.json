{"ast":null,"code":"import React__default, { useRef } from 'react';\nimport ContextMenu, { EmojiListItems } from './ContextMenu.js';\nimport Icon, { IconTypes, IconColors } from './Icon.js';\nimport IconButton from './IconButton.js';\nimport ImageRenderer from './ImageRenderer.js';\nimport ReactionButton from './ReactionButton.js';\nimport { E as isPendingMessage, D as isFailedMessage, h as getClassName, G as getEmojiListAll } from '../index-7eb65acf.js';\nimport '../_rollupPluginBabelHelpers-6bb0305c.js';\nimport 'react-dom';\nimport './SortByRow.js';\nimport '../uuid-1adedf62.js';\nimport '../index-63949de5.js';\nimport 'prop-types';\nimport '../stringSet-13bbd4a2.js';\nimport '../utils/message/getOutgoingMessageState.js';\nimport '../useLongPress-1303953d.js';\nimport '../MediaQueryContext-11f0e43f.js';\nimport '../utils-4bbbca2c.js';\nfunction MessageItemReactionMenu(_ref) {\n  let {\n    className,\n    message,\n    userId,\n    spaceFromTrigger = {\n      x: 0,\n      y: 0\n    },\n    emojiContainer,\n    toggleReaction,\n    setSupposedHover\n  } = _ref;\n  const triggerRef = useRef(null);\n  const containerRef = useRef(null);\n  if (isPendingMessage(message) || isFailedMessage(message)) {\n    return null;\n  }\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: getClassName([className, 'sendbird-message-item-reaction-menu']),\n    ref: containerRef\n  }, /*#__PURE__*/React__default.createElement(ContextMenu, {\n    menuTrigger: toggleDropdown => /*#__PURE__*/React__default.createElement(IconButton, {\n      className: \"sendbird-message-item-reaction-menu__trigger\",\n      ref: triggerRef,\n      width: \"32px\",\n      height: \"32px\",\n      onClick: () => {\n        toggleDropdown();\n        setSupposedHover(true);\n      },\n      onBlur: () => {\n        setSupposedHover(false);\n      }\n    }, /*#__PURE__*/React__default.createElement(Icon, {\n      className: \"sendbird-message-item-reaction-menu__trigger__icon\",\n      type: IconTypes.EMOJI_MORE,\n      fillColor: IconColors.CONTENT_INVERSE,\n      width: \"24px\",\n      height: \"24px\"\n    })),\n    menuItems: close => {\n      const closeDropdown = () => {\n        close();\n        setSupposedHover(false);\n      };\n      return /*#__PURE__*/React__default.createElement(EmojiListItems, {\n        parentRef: triggerRef,\n        parentContainRef: containerRef,\n        closeDropdown: closeDropdown,\n        spaceFromTrigger: spaceFromTrigger\n      }, getEmojiListAll(emojiContainer).map(emoji => {\n        var _message$reactions, _message$reactions$fi, _message$reactions$fi2;\n        const isReacted = message === null || message === void 0 ? void 0 : (_message$reactions = message.reactions) === null || _message$reactions === void 0 ? void 0 : (_message$reactions$fi = _message$reactions.filter(reaction => reaction.key === emoji.key)[0]) === null || _message$reactions$fi === void 0 ? void 0 : (_message$reactions$fi2 = _message$reactions$fi.userIds) === null || _message$reactions$fi2 === void 0 ? void 0 : _message$reactions$fi2.some(reactorId => reactorId === userId);\n        return /*#__PURE__*/React__default.createElement(ReactionButton, {\n          key: emoji.key,\n          width: \"36px\",\n          height: \"36px\",\n          selected: isReacted,\n          onClick: () => {\n            closeDropdown();\n            toggleReaction(message, emoji.key, isReacted);\n          },\n          dataSbId: `ui_emoji_reactions_menu_${emoji.key}`\n        }, /*#__PURE__*/React__default.createElement(ImageRenderer, {\n          url: emoji.url,\n          width: \"28px\",\n          height: \"28px\",\n          placeHolder: style => /*#__PURE__*/React__default.createElement(\"div\", {\n            style: style\n          }, /*#__PURE__*/React__default.createElement(Icon, {\n            type: IconTypes.QUESTION,\n            fillColor: IconColors.ON_BACKGROUND_3,\n            width: \"28px\",\n            height: \"28px\"\n          }))\n        }));\n      }));\n    }\n  }));\n}\nexport { MessageItemReactionMenu as default };","map":{"version":3,"mappings":"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","names":["MessageItemReactionMenu","className","message","userId","spaceFromTrigger","x","y","emojiContainer","toggleReaction","setSupposedHover","triggerRef","useRef","containerRef","isPendingMessage","isFailedMessage","React","getClassName","ref","ContextMenu","menuTrigger","toggleDropdown","IconButton","width","height","onClick","onBlur","Icon","type","IconTypes","EMOJI_MORE","fillColor","IconColors","CONTENT_INVERSE","menuItems","close","closeDropdown","EmojiListItems","parentRef","parentContainRef","getEmojiListAll","map","emoji","isReacted","reactions","_message$reactions","filter","reaction","key","_message$reactions$fi","userIds","_message$reactions$fi2","some","reactorId","ReactionButton","selected","dataSbId","ImageRenderer","url","placeHolder","style","QUESTION","ON_BACKGROUND_3"],"sources":["C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\ui\\MessageItemReactionMenu\\index.tsx"],"sourcesContent":["import './index.scss';\nimport React, { ReactElement, useRef } from 'react';\nimport type { FileMessage, Reaction, UserMessage } from '@sendbird/chat/message';\nimport type { Emoji, EmojiContainer } from '@sendbird/chat';\n\nimport ContextMenu, { EmojiListItems } from '../ContextMenu';\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport IconButton from '../IconButton';\nimport ImageRenderer from '../ImageRenderer';\nimport ReactionButton from '../ReactionButton';\nimport { getClassName, getEmojiListAll, isPendingMessage, isFailedMessage } from '../../utils';\nimport { SpaceFromTriggerType } from '../../types';\n\ninterface Props {\n  className?: string | Array<string>;\n  message: UserMessage | FileMessage;\n  userId: string;\n  spaceFromTrigger?: SpaceFromTriggerType;\n  emojiContainer?: EmojiContainer;\n  toggleReaction?: (message: UserMessage | FileMessage, reactionKey: string, isReacted: boolean) => void;\n  setSupposedHover?: (bool: boolean) => void;\n}\n\nexport default function MessageItemReactionMenu({\n  className,\n  message,\n  userId,\n  spaceFromTrigger = { x: 0, y: 0 },\n  emojiContainer,\n  toggleReaction,\n  setSupposedHover,\n}: Props): ReactElement {\n  const triggerRef = useRef(null);\n  const containerRef = useRef(null);\n\n  if (isPendingMessage(message) || isFailedMessage(message)) {\n    return null;\n  }\n\n  return (\n    <div\n      className={getClassName([className, 'sendbird-message-item-reaction-menu'])}\n      ref={containerRef}\n    >\n      <ContextMenu\n        menuTrigger={(toggleDropdown: () => void): ReactElement => (\n          <IconButton\n            className=\"sendbird-message-item-reaction-menu__trigger\"\n            ref={triggerRef}\n            width=\"32px\"\n            height=\"32px\"\n            onClick={(): void => {\n              toggleDropdown();\n              setSupposedHover(true);\n            }}\n            onBlur={(): void => {\n              setSupposedHover(false);\n            }}\n          >\n            <Icon\n              className=\"sendbird-message-item-reaction-menu__trigger__icon\"\n              type={IconTypes.EMOJI_MORE}\n              fillColor={IconColors.CONTENT_INVERSE}\n              width=\"24px\"\n              height=\"24px\"\n            />\n          </IconButton>\n        )}\n        menuItems={(close: () => void): ReactElement => {\n          const closeDropdown = (): void => {\n            close();\n            setSupposedHover(false);\n          };\n          return (\n            <EmojiListItems\n              parentRef={triggerRef}\n              parentContainRef={containerRef}\n              closeDropdown={closeDropdown}\n              spaceFromTrigger={spaceFromTrigger}\n            >\n              {getEmojiListAll(emojiContainer).map((emoji: Emoji): ReactElement => {\n                const isReacted: boolean = message?.reactions\n                  ?.filter((reaction: Reaction) => reaction.key === emoji.key)[0]?.userIds\n                  ?.some((reactorId: string) => reactorId === userId);\n                return (\n                  <ReactionButton\n                    key={emoji.key}\n                    width=\"36px\"\n                    height=\"36px\"\n                    selected={isReacted}\n                    onClick={() => {\n                      closeDropdown();\n                      toggleReaction(message, emoji.key, isReacted);\n                    }}\n                    dataSbId={`ui_emoji_reactions_menu_${emoji.key}`}\n                  >\n                    <ImageRenderer\n                      url={emoji.url}\n                      width=\"28px\"\n                      height=\"28px\"\n                      placeHolder={(style) => (\n                        <div style={style}>\n                          <Icon\n                            type={IconTypes.QUESTION}\n                            fillColor={IconColors.ON_BACKGROUND_3}\n                            width=\"28px\"\n                            height=\"28px\"\n                          />\n                        </div>\n                      )}\n                    />\n                  </ReactionButton>\n                );\n              })}\n            </EmojiListItems>\n          );\n        }}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}