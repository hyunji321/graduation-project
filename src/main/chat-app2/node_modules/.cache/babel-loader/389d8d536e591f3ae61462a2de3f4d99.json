{"ast":null,"code":"import React__default, { useState, useContext, useEffect, useCallback } from 'react';\nimport Button, { ButtonTypes, ButtonSizes } from './ui/Button.js';\nimport IconButton from './ui/IconButton.js';\nimport Icon, { IconTypes, IconColors } from './ui/Icon.js';\nimport ContextMenu, { MenuItems, MenuItem } from './ui/ContextMenu.js';\nimport UserListItem$1 from './ChannelSettings/components/UserListItem.js';\nimport { _ as _objectSpread2 } from './_rollupPluginBabelHelpers-6bb0305c.js';\nimport Modal from './ui/Modal.js';\nimport UserListItem from './ui/UserListItem.js';\nimport { n as noop } from './utils-4bbbca2c.js';\nimport { useChannelSettingsContext } from './ChannelSettings/context.js';\nimport useSendbirdStateContext from './useSendbirdStateContext.js';\nimport { a as LocalizationContext, u as useLocalization } from './LocalizationContext-076d6d2e.js';\nimport { u as uuidv4 } from './uuid-1adedf62.js';\nfunction MembersModal(_ref) {\n  var _state$config;\n  let {\n    onCancel\n  } = _ref;\n  const [members, setMembers] = useState([]);\n  const [memberQuery, setMemberQuery] = useState(null);\n  const {\n    channel\n  } = useChannelSettingsContext();\n  const state = useSendbirdStateContext();\n  const currentUser = state === null || state === void 0 ? void 0 : (_state$config = state.config) === null || _state$config === void 0 ? void 0 : _state$config.userId;\n  const {\n    stringSet\n  } = useContext(LocalizationContext);\n  useEffect(() => {\n    const memberListQuery = channel === null || channel === void 0 ? void 0 : channel.createMemberListQuery({\n      limit: 20\n    });\n    memberListQuery.next().then(members => {\n      setMembers(members);\n    });\n    setMemberQuery(memberListQuery);\n  }, []);\n  return /*#__PURE__*/React__default.createElement(\"div\", null, /*#__PURE__*/React__default.createElement(Modal, {\n    isFullScreenOnMobile: true,\n    hideFooter: true,\n    onCancel: () => onCancel(),\n    onSubmit: noop,\n    titleText: stringSet.CHANNEL_SETTING__MEMBERS__SEE_ALL_MEMBERS\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-more-members__popup-scroll\",\n    onScroll: e => {\n      const {\n        hasNext\n      } = memberQuery;\n      const target = e.target;\n      const fetchMore = target.clientHeight + target.scrollTop === target.scrollHeight;\n      if (hasNext && fetchMore) {\n        memberQuery.next().then(o => {\n          setMembers([...members, ...o]);\n        });\n      }\n    }\n  }, members.map(member => /*#__PURE__*/React__default.createElement(UserListItem, {\n    user: member,\n    key: member.userId,\n    currentUser: currentUser,\n    action: _ref2 => {\n      let {\n        parentRef,\n        actionRef\n      } = _ref2;\n      return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, (channel === null || channel === void 0 ? void 0 : channel.myRole) === 'operator' && /*#__PURE__*/React__default.createElement(ContextMenu, {\n        menuTrigger: toggleDropdown => /*#__PURE__*/React__default.createElement(IconButton, {\n          className: \"sendbird-user-message__more__menu\",\n          width: \"32px\",\n          height: \"32px\",\n          onClick: toggleDropdown\n        }, /*#__PURE__*/React__default.createElement(Icon, {\n          width: \"24px\",\n          height: \"24px\",\n          type: IconTypes.MORE,\n          fillColor: IconColors.CONTENT_INVERSE\n        })),\n        menuItems: closeDropdown => /*#__PURE__*/React__default.createElement(MenuItems, {\n          parentContainRef: parentRef,\n          parentRef: actionRef // for catching location(x, y) of MenuItems\n          ,\n\n          closeDropdown: closeDropdown,\n          openLeft: true\n        }, /*#__PURE__*/React__default.createElement(MenuItem, {\n          disable: currentUser === member.userId,\n          onClick: () => {\n            if (member.role !== 'operator') {\n              channel === null || channel === void 0 ? void 0 : channel.addOperators([member.userId]).then(() => {\n                setMembers(members.map(m => {\n                  if (m.userId === member.userId) {\n                    return _objectSpread2(_objectSpread2({}, member), {}, {\n                      role: 'operator'\n                    });\n                  }\n                  return m;\n                }));\n                closeDropdown();\n              });\n            } else {\n              channel === null || channel === void 0 ? void 0 : channel.removeOperators([member.userId]).then(() => {\n                setMembers(members.map(m => {\n                  if (m.userId === member.userId) {\n                    return _objectSpread2(_objectSpread2({}, member), {}, {\n                      role: ''\n                    });\n                  }\n                  return m;\n                }));\n                closeDropdown();\n              });\n            }\n          },\n          dataSbId: `channel_setting_member_context_menu_${member.role !== 'operator' ? 'register_as_operator' : 'unregister_operator'}`\n        }, member.role !== 'operator' ? stringSet.CHANNEL_SETTING__MODERATION__REGISTER_AS_OPERATOR : stringSet.CHANNEL_SETTING__MODERATION__UNREGISTER_OPERATOR),\n        // No muted members in broadcast channel\n        !(channel !== null && channel !== void 0 && channel.isBroadcast) && /*#__PURE__*/React__default.createElement(MenuItem, {\n          onClick: () => {\n            if (member.isMuted) {\n              channel === null || channel === void 0 ? void 0 : channel.unmuteUser(member).then(() => {\n                setMembers(members.map(m => {\n                  if (m.userId === member.userId) {\n                    return _objectSpread2(_objectSpread2({}, member), {}, {\n                      isMuted: false\n                    });\n                  }\n                  return m;\n                }));\n                closeDropdown();\n              });\n            } else {\n              channel === null || channel === void 0 ? void 0 : channel.muteUser(member).then(() => {\n                setMembers(members.map(m => {\n                  if (m.userId === member.userId) {\n                    return _objectSpread2(_objectSpread2({}, member), {}, {\n                      isMuted: true\n                    });\n                  }\n                  return m;\n                }));\n                closeDropdown();\n              });\n            }\n          },\n          dataSbId: `channel_setting_member_context_menu_${member.isMuted ? 'unmute' : 'mute'}`\n        }, member.isMuted ? stringSet.CHANNEL_SETTING__MODERATION__UNMUTE : stringSet.CHANNEL_SETTING__MODERATION__MUTE), /*#__PURE__*/React__default.createElement(MenuItem, {\n          onClick: () => {\n            channel === null || channel === void 0 ? void 0 : channel.banUser(member, -1, '').then(() => {\n              setMembers(members.filter(_ref3 => {\n                let {\n                  userId\n                } = _ref3;\n                return userId !== member.userId;\n              }));\n            });\n          },\n          dataSbId: \"channel_setting_member_context_menu_ban\"\n        }, stringSet.CHANNEL_SETTING__MODERATION__BAN))\n      }));\n    }\n  })))));\n}\nconst isAboutSame = (a, b, px) => Math.abs(a - b) <= px;\nfunction InviteUsers(_ref) {\n  var _state$stores, _state$stores$sdkStor, _state$config;\n  let {\n    onCancel,\n    onSubmit\n  } = _ref;\n  const [members, setMembers] = useState([]);\n  const [selectedMembers, setSelectedMembers] = useState({});\n  const [userQuery, setUserQuery] = useState(null);\n  const state = useSendbirdStateContext();\n  const sdk = state === null || state === void 0 ? void 0 : (_state$stores = state.stores) === null || _state$stores === void 0 ? void 0 : (_state$stores$sdkStor = _state$stores.sdkStore) === null || _state$stores$sdkStor === void 0 ? void 0 : _state$stores$sdkStor.sdk;\n  const globalUserListQuery = state === null || state === void 0 ? void 0 : (_state$config = state.config) === null || _state$config === void 0 ? void 0 : _state$config.userListQuery;\n  const {\n    channel,\n    overrideInviteUser,\n    queries\n  } = useChannelSettingsContext();\n  const userFilledQuery = _objectSpread2({}, queries === null || queries === void 0 ? void 0 : queries.applicationUserListQuery);\n  const {\n    stringSet\n  } = useLocalization();\n  useEffect(() => {\n    const userListQuery = globalUserListQuery ? globalUserListQuery() : sdk === null || sdk === void 0 ? void 0 : sdk.createApplicationUserListQuery(userFilledQuery);\n    if (userListQuery !== null && userListQuery !== void 0 && userListQuery.next) {\n      userListQuery.next().then(members => {\n        setMembers(members);\n      });\n      setUserQuery(userListQuery);\n    }\n  }, [sdk]);\n  return /*#__PURE__*/React__default.createElement(\"div\", null, /*#__PURE__*/React__default.createElement(Modal, {\n    isFullScreenOnMobile: true,\n    disabled: Object.keys(selectedMembers).length === 0,\n    submitText: stringSet.BUTTON__INVITE,\n    type: ButtonTypes.PRIMARY,\n    onCancel: () => onCancel(),\n    onSubmit: () => {\n      const members = Object.keys(selectedMembers).filter(m => selectedMembers[m]);\n      if (typeof overrideInviteUser === 'function') {\n        overrideInviteUser({\n          users: members,\n          onClose: onCancel,\n          channel\n        });\n        return;\n      }\n      channel === null || channel === void 0 ? void 0 : channel.inviteWithUserIds(members).then(() => {\n        onSubmit(members);\n      });\n    },\n    titleText: stringSet.CHANNEL_SETTING__MEMBERS__SELECT_TITLE\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-more-members__popup-scroll\",\n    onScroll: e => {\n      const {\n        hasNext\n      } = userQuery;\n      const target = e.target;\n      const fetchMore = isAboutSame(target.clientHeight + target.scrollTop, target.scrollHeight, 20);\n      if (hasNext && fetchMore) {\n        userQuery.next().then(users => {\n          setMembers([...members, ...users]);\n        });\n      }\n    }\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-more-members__popup-scroll__inner\"\n  }, members.map(member => {\n    var _channel$members;\n    const isJoinedMember = channel === null || channel === void 0 ? void 0 : (_channel$members = channel.members) === null || _channel$members === void 0 ? void 0 : _channel$members.some(_ref2 => {\n      let {\n        userId\n      } = _ref2;\n      return userId === (member === null || member === void 0 ? void 0 : member.userId);\n    });\n    return /*#__PURE__*/React__default.createElement(UserListItem, {\n      checkBox: true,\n      checked: isJoinedMember || selectedMembers[member.userId],\n      disabled: isJoinedMember,\n      onChange: event => {\n        const modifiedSelectedMembers = _objectSpread2(_objectSpread2({}, selectedMembers), {}, {\n          [event.target.id]: event.target.checked\n        });\n        if (!event.target.checked) {\n          delete modifiedSelectedMembers[event.target.id];\n        }\n        setSelectedMembers(modifiedSelectedMembers);\n      },\n      user: member,\n      key: member.userId\n    });\n  })))));\n}\nconst MemberList = () => {\n  var _state$stores, _state$stores$sdkStor, _state$config;\n  const [members, setMembers] = useState([]);\n  const [hasNext, setHasNext] = useState(false);\n  const [showAllMembers, setShowAllMembers] = useState(false);\n  const [showInviteUsers, setShowInviteUsers] = useState(false);\n  const state = useSendbirdStateContext();\n  const {\n    channel,\n    setChannelUpdateId\n  } = useChannelSettingsContext();\n  const {\n    stringSet\n  } = useContext(LocalizationContext);\n  const sdk = state === null || state === void 0 ? void 0 : (_state$stores = state.stores) === null || _state$stores === void 0 ? void 0 : (_state$stores$sdkStor = _state$stores.sdkStore) === null || _state$stores$sdkStor === void 0 ? void 0 : _state$stores$sdkStor.sdk;\n  const userId = state === null || state === void 0 ? void 0 : (_state$config = state.config) === null || _state$config === void 0 ? void 0 : _state$config.userId;\n  useEffect(() => {\n    if (!channel) {\n      setMembers([]);\n      return;\n    }\n    const memberUserListQuery = channel === null || channel === void 0 ? void 0 : channel.createMemberListQuery({\n      limit: 10\n    });\n    memberUserListQuery.next().then(members => {\n      setMembers(members);\n      setHasNext(memberUserListQuery.hasNext);\n    });\n  }, [channel]);\n  const refreshList = useCallback(() => {\n    if (!channel) {\n      setMembers([]);\n      return;\n    }\n    const memberUserListQuery = channel === null || channel === void 0 ? void 0 : channel.createMemberListQuery({\n      limit: 10\n    });\n    memberUserListQuery.next().then(members => {\n      setMembers(members);\n      setHasNext(memberUserListQuery.hasNext);\n      setChannelUpdateId(uuidv4());\n    });\n  }, [channel]);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-settings-member-list sendbird-accordion\"\n  }, members.map(member => /*#__PURE__*/React__default.createElement(UserListItem$1, {\n    key: member.userId,\n    user: member,\n    currentUser: sdk.currentUser.userId,\n    action: (channel === null || channel === void 0 ? void 0 : channel.myRole) === 'operator' && userId !== member.userId ? _ref => {\n      let {\n        actionRef,\n        parentRef\n      } = _ref;\n      return /*#__PURE__*/React__default.createElement(ContextMenu, {\n        menuTrigger: toggleDropdown => /*#__PURE__*/React__default.createElement(IconButton, {\n          className: \"sendbird-user-message__more__menu\",\n          width: \"32px\",\n          height: \"32px\",\n          onClick: toggleDropdown\n        }, /*#__PURE__*/React__default.createElement(Icon, {\n          width: \"24px\",\n          height: \"24px\",\n          type: IconTypes.MORE,\n          fillColor: IconColors.CONTENT_INVERSE\n        })),\n        menuItems: closeDropdown => /*#__PURE__*/React__default.createElement(MenuItems, {\n          parentContainRef: parentRef,\n          parentRef: actionRef // for catching location(x, y) of MenuItems\n          ,\n\n          closeDropdown: closeDropdown,\n          openLeft: true\n        }, /*#__PURE__*/React__default.createElement(MenuItem, {\n          onClick: () => {\n            if (member.role !== 'operator') {\n              channel === null || channel === void 0 ? void 0 : channel.addOperators([member.userId]).then(() => {\n                refreshList();\n                closeDropdown();\n              });\n            } else {\n              channel === null || channel === void 0 ? void 0 : channel.removeOperators([member.userId]).then(() => {\n                refreshList();\n                closeDropdown();\n              });\n            }\n          },\n          dataSbId: `channel_setting_member_context_menu_${member.role !== 'operator' ? 'register_as_operator' : 'unregister_operator'}`\n        }, member.role !== 'operator' ? stringSet.CHANNEL_SETTING__MODERATION__REGISTER_AS_OPERATOR : stringSet.CHANNEL_SETTING__MODERATION__UNREGISTER_OPERATOR),\n        // No muted members in broadcast channel\n        !(channel !== null && channel !== void 0 && channel.isBroadcast) && /*#__PURE__*/React__default.createElement(MenuItem, {\n          onClick: () => {\n            if (member.isMuted) {\n              channel === null || channel === void 0 ? void 0 : channel.unmuteUser(member).then(() => {\n                refreshList();\n                closeDropdown();\n              });\n            } else {\n              channel === null || channel === void 0 ? void 0 : channel.muteUser(member).then(() => {\n                refreshList();\n                closeDropdown();\n              });\n            }\n          },\n          dataSbId: `channel_setting_member_context_menu_${member.isMuted ? 'unmute' : 'mute'}`\n        }, member.isMuted ? stringSet.CHANNEL_SETTING__MODERATION__UNMUTE : stringSet.CHANNEL_SETTING__MODERATION__MUTE), /*#__PURE__*/React__default.createElement(MenuItem, {\n          onClick: () => {\n            channel === null || channel === void 0 ? void 0 : channel.banUser(member, -1, '').then(() => {\n              refreshList();\n              closeDropdown();\n            });\n          },\n          dataSbId: \"channel_setting_member_context_menu_ban\"\n        }, stringSet.CHANNEL_SETTING__MODERATION__BAN))\n      });\n    } : null\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-settings-accordion__footer\"\n  }, hasNext && /*#__PURE__*/React__default.createElement(Button, {\n    type: ButtonTypes.SECONDARY,\n    size: ButtonSizes.SMALL,\n    onClick: () => setShowAllMembers(true)\n  }, stringSet.CHANNEL_SETTING__MEMBERS__SEE_ALL_MEMBERS), /*#__PURE__*/React__default.createElement(Button, {\n    type: ButtonTypes.SECONDARY,\n    size: ButtonSizes.SMALL,\n    onClick: () => setShowInviteUsers(true)\n  }, stringSet.CHANNEL_SETTING__MEMBERS__INVITE_MEMBER)), showAllMembers && /*#__PURE__*/React__default.createElement(MembersModal, {\n    onCancel: () => {\n      setShowAllMembers(false);\n      refreshList();\n    }\n  }), showInviteUsers && /*#__PURE__*/React__default.createElement(InviteUsers, {\n    onSubmit: () => {\n      setShowInviteUsers(false);\n      refreshList();\n    },\n    onCancel: () => setShowInviteUsers(false)\n  }));\n};\nexport { MemberList as M };","map":{"version":3,"mappings":"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","names":["MembersModal","onCancel","members","setMembers","useState","memberQuery","setMemberQuery","channel","useChannelSettingsContext","state","useSendbirdStateContext","currentUser","config","_state$config","userId","stringSet","useContext","LocalizationContext","useEffect","memberListQuery","createMemberListQuery","limit","next","then","React","Modal","isFullScreenOnMobile","hideFooter","onSubmit","noop","titleText","CHANNEL_SETTING__MEMBERS__SEE_ALL_MEMBERS","className","onScroll","e","hasNext","target","fetchMore","clientHeight","scrollTop","scrollHeight","o","map","member","UserListItem","user","key","action","_ref2","parentRef","actionRef","myRole","ContextMenu","menuTrigger","toggleDropdown","IconButton","width","height","onClick","Icon","type","IconTypes","MORE","fillColor","IconColors","CONTENT_INVERSE","menuItems","closeDropdown","MenuItems","parentContainRef","openLeft","MenuItem","disable","role","addOperators","m","removeOperators","dataSbId","CHANNEL_SETTING__MODERATION__REGISTER_AS_OPERATOR","CHANNEL_SETTING__MODERATION__UNREGISTER_OPERATOR","isBroadcast","isMuted","unmuteUser","muteUser","CHANNEL_SETTING__MODERATION__UNMUTE","CHANNEL_SETTING__MODERATION__MUTE","banUser","filter","_ref3","CHANNEL_SETTING__MODERATION__BAN","isAboutSame","a","b","px","Math","abs","InviteUsers","selectedMembers","setSelectedMembers","userQuery","setUserQuery","sdk","stores","_state$stores","sdkStore","_state$stores$sdkStor","globalUserListQuery","userListQuery","overrideInviteUser","queries","userFilledQuery","applicationUserListQuery","useLocalization","createApplicationUserListQuery","disabled","Object","keys","length","submitText","BUTTON__INVITE","ButtonTypes","PRIMARY","users","onClose","inviteWithUserIds","CHANNEL_SETTING__MEMBERS__SELECT_TITLE","isJoinedMember","_channel$members","some","checkBox","checked","onChange","event","modifiedSelectedMembers","id","MemberList","setHasNext","showAllMembers","setShowAllMembers","showInviteUsers","setShowInviteUsers","setChannelUpdateId","memberUserListQuery","refreshList","useCallback","uuidv4","_ref","Button","SECONDARY","size","ButtonSizes","SMALL","CHANNEL_SETTING__MEMBERS__INVITE_MEMBER"],"sources":["C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\ChannelSettings\\components\\ModerationPanel\\MembersModal.tsx","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\ChannelSettings\\components\\ModerationPanel\\InviteUsersModal.tsx","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\ChannelSettings\\components\\ModerationPanel\\MemberList.tsx"],"sourcesContent":["import React, {\n  ReactElement,\n  useContext,\n  useEffect,\n  useState,\n} from 'react';\n\nimport Modal from '../../../../ui/Modal';\nimport UserListItem from '../../../../ui/UserListItem';\nimport IconButton from '../../../../ui/IconButton';\nimport Icon, { IconTypes, IconColors } from '../../../../ui/Icon';\nimport ContextMenu, { MenuItem, MenuItems } from '../../../../ui/ContextMenu';\nimport { noop } from '../../../../utils/utils';\n\nimport { useChannelSettingsContext } from '../../context/ChannelSettingsProvider';\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\nimport { LocalizationContext } from '../../../../lib/LocalizationContext';\nimport { Member } from '@sendbird/chat/groupChannel';\n\ninterface Props {\n  onCancel(): void;\n}\n\nexport default function MembersModal({ onCancel }: Props): ReactElement {\n  const [members, setMembers] = useState([]);\n  const [memberQuery, setMemberQuery] = useState(null);\n\n  const { channel } = useChannelSettingsContext();\n  const state = useSendbirdStateContext();\n  const currentUser = state?.config?.userId;\n  const { stringSet } = useContext(LocalizationContext);\n\n  useEffect(() => {\n    const memberListQuery = channel?.createMemberListQuery({\n      limit: 20,\n    });\n    memberListQuery.next().then((members) => {\n      setMembers(members);\n    });\n    setMemberQuery(memberListQuery);\n  }, []);\n  return (\n    <div>\n      <Modal\n        isFullScreenOnMobile\n        hideFooter\n        onCancel={() => onCancel()}\n        onSubmit={noop}\n        titleText={stringSet.CHANNEL_SETTING__MEMBERS__SEE_ALL_MEMBERS}\n      >\n        <div\n          className=\"sendbird-more-members__popup-scroll\"\n          onScroll={(e) => {\n            const { hasNext } = memberQuery;\n            const target = e.target as HTMLTextAreaElement;\n            const fetchMore = (\n              target.clientHeight + target.scrollTop === target.scrollHeight\n            );\n\n            if (hasNext && fetchMore) {\n              memberQuery.next().then((o) => {\n                setMembers([\n                  ...members,\n                  ...o,\n                ]);\n              });\n            }\n          }}\n        >\n          {\n            members.map((member: Member) => (\n              <UserListItem\n                user={member}\n                key={member.userId}\n                currentUser={currentUser}\n                action={({ parentRef, actionRef }) => (\n                  <>\n                    {channel?.myRole === 'operator' && (\n                      <ContextMenu\n                        menuTrigger={(toggleDropdown) => (\n                          <IconButton\n                            className=\"sendbird-user-message__more__menu\"\n                            width=\"32px\"\n                            height=\"32px\"\n                            onClick={toggleDropdown}\n                          >\n                            <Icon\n                              width=\"24px\"\n                              height=\"24px\"\n                              type={IconTypes.MORE}\n                              fillColor={IconColors.CONTENT_INVERSE}\n                            />\n                          </IconButton>\n                        )}\n                        menuItems={(closeDropdown) => (\n                          <MenuItems\n                            parentContainRef={parentRef}\n                            parentRef={actionRef} // for catching location(x, y) of MenuItems\n                            closeDropdown={closeDropdown}\n                            openLeft\n                          >\n                            <MenuItem\n                              disable={currentUser === member.userId}\n                              onClick={() => {\n                                if ((member.role !== 'operator')) {\n                                  channel?.addOperators([member.userId]).then(() => {\n                                    setMembers(members.map(m => {\n                                      if (m.userId === member.userId) {\n                                        return {\n                                          ...member,\n                                          role: 'operator',\n                                        };\n                                      }\n                                      return m;\n                                    }));\n                                    closeDropdown();\n                                  });\n                                } else {\n                                  channel?.removeOperators([member.userId]).then(() => {\n                                    setMembers(members.map(m => {\n                                      if (m.userId === member.userId) {\n                                        return {\n                                          ...member,\n                                          role: '',\n                                        };\n                                      }\n                                      return m;\n                                    }));\n                                    closeDropdown();\n                                  });\n                                }\n                              }}\n                              dataSbId={`channel_setting_member_context_menu_${(\n                                member.role !== 'operator'\n                              ) ? 'register_as_operator' : 'unregister_operator'}`}\n                            >\n                              {\n                                member.role !== 'operator'\n                                  ? stringSet.CHANNEL_SETTING__MODERATION__REGISTER_AS_OPERATOR\n                                  : stringSet.CHANNEL_SETTING__MODERATION__UNREGISTER_OPERATOR\n                              }\n                            </MenuItem>\n                            {\n                              // No muted members in broadcast channel\n                              !channel?.isBroadcast && (\n                                <MenuItem\n                                  onClick={() => {\n                                    if (member.isMuted) {\n                                      channel?.unmuteUser(member).then(() => {\n                                        setMembers(members.map(m => {\n                                          if (m.userId === member.userId) {\n                                            return {\n                                              ...member,\n                                              isMuted: false,\n                                            };\n                                          }\n                                          return m;\n                                        }));\n                                        closeDropdown();\n                                      });\n                                    } else {\n                                      channel?.muteUser(member).then(() => {\n                                        setMembers(members.map(m => {\n                                          if (m.userId === member.userId) {\n                                            return {\n                                              ...member,\n                                              isMuted: true,\n                                            };\n                                          }\n                                          return m;\n                                        }));\n                                        closeDropdown();\n                                      });\n                                    }\n                                  }}\n                                  dataSbId={`channel_setting_member_context_menu_${(\n                                    member.isMuted) ? 'unmute' : 'mute'}`\n                                  }\n                                >\n                                  {\n                                    member.isMuted\n                                      ? stringSet.CHANNEL_SETTING__MODERATION__UNMUTE\n                                      : stringSet.CHANNEL_SETTING__MODERATION__MUTE\n                                  }\n                                </MenuItem>\n                              )\n                            }\n                            <MenuItem\n                              onClick={() => {\n                                channel?.banUser(member, -1, '').then(() => {\n                                  setMembers(members.filter(({ userId }) => {\n                                    return userId !== member.userId;\n                                  }));\n                                });\n                              }}\n                              dataSbId=\"channel_setting_member_context_menu_ban\"\n                            >\n                              {stringSet.CHANNEL_SETTING__MODERATION__BAN}\n                            </MenuItem>\n                          </MenuItems>\n                        )}\n                      />\n                    )}\n                  </>\n                )}\n              />\n            ))\n          }\n        </div>\n      </Modal>\n    </div>\n  );\n}\n","import React, { ReactElement, useEffect, useState } from 'react';\n\nimport Modal from '../../../../ui/Modal';\nimport { ButtonTypes } from '../../../../ui/Button';\nimport UserListItem from '../../../../ui/UserListItem';\nimport { useChannelSettingsContext } from '../../context/ChannelSettingsProvider';\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\nimport { useLocalization } from '../../../../lib/LocalizationContext';\n\ninterface Props {\n  onCancel(): void;\n  onSubmit(members: Array<string>): void;\n}\n\nconst isAboutSame = (a, b, px) => (Math.abs(a - b) <= px);\n\nexport default function InviteUsers({\n  onCancel,\n  onSubmit,\n}: Props): ReactElement {\n  const [members, setMembers] = useState([]);\n  const [selectedMembers, setSelectedMembers] = useState({});\n  const [userQuery, setUserQuery] = useState(null);\n\n  const state = useSendbirdStateContext();\n  const sdk = state?.stores?.sdkStore?.sdk;\n  const globalUserListQuery = state?.config?.userListQuery;\n\n  const { channel, overrideInviteUser, queries } = useChannelSettingsContext();\n  const userFilledQuery = {\n    ...queries?.applicationUserListQuery,\n  };\n  const { stringSet } = useLocalization();\n\n  useEffect(() => {\n    const userListQuery = globalUserListQuery\n      ? globalUserListQuery()\n      : sdk?.createApplicationUserListQuery(userFilledQuery);\n    if (userListQuery?.next) {\n      userListQuery.next().then((members) => {\n        setMembers(members);\n      });\n      setUserQuery(userListQuery);\n    }\n  }, [sdk]);\n  return (\n    <div>\n      <Modal\n        isFullScreenOnMobile\n        disabled={Object.keys(selectedMembers).length === 0}\n        submitText={stringSet.BUTTON__INVITE}\n        type={ButtonTypes.PRIMARY}\n        onCancel={() => onCancel()}\n        onSubmit={() => {\n          const members = Object.keys(selectedMembers).filter((m) => selectedMembers[m]);\n          if (typeof overrideInviteUser === 'function') {\n            overrideInviteUser({\n              users: members,\n              onClose: onCancel,\n              channel,\n            });\n            return;\n          }\n          channel?.inviteWithUserIds(members).then(() => {\n            onSubmit(members);\n          });\n        }}\n        titleText={stringSet.CHANNEL_SETTING__MEMBERS__SELECT_TITLE}\n      >\n        <div\n          className=\"sendbird-more-members__popup-scroll\"\n          onScroll={(e) => {\n            const { hasNext } = userQuery;\n            const target = e.target as HTMLTextAreaElement;\n            const fetchMore = isAboutSame(target.clientHeight + target.scrollTop, target.scrollHeight, 20);\n            if (hasNext && fetchMore) {\n              userQuery.next().then((users) => {\n                setMembers([\n                  ...members,\n                  ...users,\n                ]);\n              });\n            }\n          }}\n        >\n          <div className=\"sendbird-more-members__popup-scroll__inner\">\n            {members.map((member) => {\n              const isJoinedMember = channel?.members?.some(({ userId }) => userId === member?.userId);\n              return (\n                <UserListItem\n                  checkBox\n                  checked={isJoinedMember || selectedMembers[member.userId]}\n                  disabled={isJoinedMember}\n                  onChange={\n                    (event) => {\n                      const modifiedSelectedMembers = {\n                        ...selectedMembers,\n                        [event.target.id]: event.target.checked,\n                      };\n                      if (!event.target.checked) {\n                        delete modifiedSelectedMembers[event.target.id];\n                      }\n                      setSelectedMembers(modifiedSelectedMembers);\n                    }\n                  }\n                  user={member}\n                  key={member.userId}\n                />\n              );\n            })}\n          </div>\n        </div>\n      </Modal>\n    </div>\n  );\n}\n","import React, {\n  ReactElement,\n  useEffect,\n  useState,\n  useCallback,\n  useContext,\n} from 'react';\nimport type { Member } from '@sendbird/chat/groupChannel';\n\nimport Button, { ButtonTypes, ButtonSizes } from '../../../../ui/Button';\nimport IconButton from '../../../../ui/IconButton';\nimport Icon, { IconTypes, IconColors } from '../../../../ui/Icon';\nimport ContextMenu, { MenuItem, MenuItems } from '../../../../ui/ContextMenu';\n\nimport UserListItem from '../UserListItem';\nimport MembersModal from './MembersModal';\nimport InviteUsers from './InviteUsersModal';\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\nimport { useChannelSettingsContext } from '../../context/ChannelSettingsProvider';\nimport { LocalizationContext } from '../../../../lib/LocalizationContext';\nimport uuidv4 from '../../../../utils/uuid';\n\nexport const MemberList = (): ReactElement => {\n  const [members, setMembers] = useState<Array<Member>>([]);\n  const [hasNext, setHasNext] = useState(false);\n  const [showAllMembers, setShowAllMembers] = useState(false);\n  const [showInviteUsers, setShowInviteUsers] = useState(false);\n\n  const state = useSendbirdStateContext();\n  const {\n    channel,\n    setChannelUpdateId,\n  } = useChannelSettingsContext();\n  const { stringSet } = useContext(LocalizationContext);\n\n  const sdk = state?.stores?.sdkStore?.sdk;\n  const userId = state?.config?.userId;\n\n  useEffect(() => {\n    if (!channel) {\n      setMembers([]);\n      return;\n    }\n\n    const memberUserListQuery = channel?.createMemberListQuery({ limit: 10 });\n    memberUserListQuery.next().then((members) => {\n      setMembers(members);\n      setHasNext(memberUserListQuery.hasNext);\n    });\n  }, [channel]);\n\n  const refreshList = useCallback(() => {\n    if (!channel) {\n      setMembers([]);\n      return;\n    }\n    const memberUserListQuery = channel?.createMemberListQuery({ limit: 10 });\n    memberUserListQuery.next().then((members) => {\n      setMembers(members);\n      setHasNext(memberUserListQuery.hasNext);\n      setChannelUpdateId(uuidv4());\n    });\n  }, [channel]);\n\n  return (\n    <div className=\"sendbird-channel-settings-member-list sendbird-accordion\">\n      {\n        members.map((member) => (\n          <UserListItem\n            key={member.userId}\n            user={member}\n            currentUser={sdk.currentUser.userId}\n            action={\n              (channel?.myRole === 'operator' && userId !== member.userId)\n                ? ({ actionRef, parentRef }) => (\n                  <ContextMenu\n                    menuTrigger={(toggleDropdown) => (\n                      <IconButton\n                        className=\"sendbird-user-message__more__menu\"\n                        width=\"32px\"\n                        height=\"32px\"\n                        onClick={toggleDropdown}\n                      >\n                        <Icon\n                          width=\"24px\"\n                          height=\"24px\"\n                          type={IconTypes.MORE}\n                          fillColor={IconColors.CONTENT_INVERSE}\n                        />\n                      </IconButton>\n                    )}\n                    menuItems={(closeDropdown) => (\n                      <MenuItems\n                        parentContainRef={parentRef}\n                        parentRef={actionRef} // for catching location(x, y) of MenuItems\n                        closeDropdown={closeDropdown}\n                        openLeft\n                      >\n                        <MenuItem\n                          onClick={() => {\n                            if ((member.role !== 'operator')) {\n                              channel?.addOperators([member.userId]).then(() => {\n                                refreshList();\n                                closeDropdown();\n                              });\n                            } else {\n                              channel?.removeOperators([member.userId]).then(() => {\n                                refreshList();\n                                closeDropdown();\n                              });\n                            }\n                          }}\n                          dataSbId={`channel_setting_member_context_menu_${(\n                            member.role !== 'operator'\n                          ) ? 'register_as_operator' : 'unregister_operator'}`}\n                        >\n                          {\n                            member.role !== 'operator'\n                              ? stringSet.CHANNEL_SETTING__MODERATION__REGISTER_AS_OPERATOR\n                              : stringSet.CHANNEL_SETTING__MODERATION__UNREGISTER_OPERATOR\n                          }\n                        </MenuItem>\n                        {\n                          // No muted members in broadcast channel\n                          !channel?.isBroadcast && (\n                            <MenuItem\n                              onClick={() => {\n                                if (member.isMuted) {\n                                  channel?.unmuteUser(member).then(() => {\n                                    refreshList();\n                                    closeDropdown();\n                                  });\n                                } else {\n                                  channel?.muteUser(member).then(() => {\n                                    refreshList();\n                                    closeDropdown();\n                                  });\n                                }\n                              }}\n                              dataSbId={`channel_setting_member_context_menu_${(\n                                member.isMuted) ? 'unmute' : 'mute'}`\n                              }\n                            >\n                              {\n                                member.isMuted\n                                  ? stringSet.CHANNEL_SETTING__MODERATION__UNMUTE\n                                  : stringSet.CHANNEL_SETTING__MODERATION__MUTE\n                              }\n                            </MenuItem>\n                          )\n                        }\n                        <MenuItem\n                          onClick={() => {\n                            channel?.banUser(member, -1, '').then(() => {\n                              refreshList();\n                              closeDropdown();\n                            });\n                          }}\n                          dataSbId=\"channel_setting_member_context_menu_ban\"\n                        >\n                          {stringSet.CHANNEL_SETTING__MODERATION__BAN}\n                        </MenuItem>\n                      </MenuItems>\n                    )}\n                  />\n                )\n                : null\n            }\n          />\n        ))\n      }\n      <div\n        className=\"sendbird-channel-settings-accordion__footer\"\n      >\n        {\n          hasNext && (\n            <Button\n              type={ButtonTypes.SECONDARY}\n              size={ButtonSizes.SMALL}\n              onClick={() => setShowAllMembers(true)}\n            >\n              {stringSet.CHANNEL_SETTING__MEMBERS__SEE_ALL_MEMBERS}\n            </Button>\n          )\n        }\n        <Button\n          type={ButtonTypes.SECONDARY}\n          size={ButtonSizes.SMALL}\n          onClick={() => setShowInviteUsers(true)}\n        >\n          {stringSet.CHANNEL_SETTING__MEMBERS__INVITE_MEMBER}\n        </Button>\n      </div>\n      {\n        showAllMembers && (\n          <MembersModal\n            onCancel={() => {\n              setShowAllMembers(false);\n              refreshList();\n            }}\n          />\n        )\n      }\n      {\n        showInviteUsers && (\n          <InviteUsers\n            onSubmit={() => {\n              setShowInviteUsers(false);\n              refreshList();\n            }}\n            onCancel={() => setShowInviteUsers(false)}\n          />\n        )\n      }\n    </div>\n  );\n};\n\nexport default MemberList;\n"]},"metadata":{},"sourceType":"module"}