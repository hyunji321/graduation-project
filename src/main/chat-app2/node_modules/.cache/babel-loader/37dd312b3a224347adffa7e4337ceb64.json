{"ast":null,"code":"import { _ as _objectSpread2 } from '../../_rollupPluginBabelHelpers-6bb0305c.js';\nimport React__default, { useState, useContext, useEffect } from 'react';\nimport { a as LocalizationContext } from '../../LocalizationContext-076d6d2e.js';\nimport { u as useCreateChannelContext } from '../../CreateChannelProvider-11c8b9a3.js';\nimport useSendbirdStateContext from '../../useSendbirdStateContext.js';\nimport Modal from '../../ui/Modal.js';\nimport { L as Label, b as LabelColors, a as LabelTypography } from '../../index-63949de5.js';\nimport { ButtonTypes } from '../../ui/Button.js';\nimport UserListItem from '../../ui/UserListItem.js';\nimport '../../stringSet-13bbd4a2.js';\nimport '../../index-99aabd9e.js';\nimport '../../sendbirdSelectors.js';\nimport '../../topics-b2b77fb9.js';\nimport '../../utils-4bbbca2c.js';\nimport '../../withSendbird.js';\nimport 'react-dom';\nimport '../../index-38e61c64.js';\nimport '../../ui/Icon.js';\nimport 'prop-types';\nimport '../../ui/IconButton.js';\nimport '../../MediaQueryContext-11f0e43f.js';\nimport '../../UserProfileContext-9cfbab4d.js';\nimport '../../ui/Avatar.js';\nimport '../../ui/ImageRenderer.js';\nimport '../../uuid-1adedf62.js';\nimport '../../ui/MutedAvatarOverlay.js';\nimport '../../ui/Checkbox.js';\nimport '../../ui/UserProfile.js';\nimport '../../ui/ContextMenu.js';\nimport '../../ui/SortByRow.js';\nimport '../../index-7eb65acf.js';\nimport '../../utils/message/getOutgoingMessageState.js';\nconst filterUser = idsToFilter => currentId => idsToFilter === null || idsToFilter === void 0 ? void 0 : idsToFilter.includes(currentId);\nconst setChannelType = (params, type) => {\n  if (type === 'broadcast') {\n    // eslint-disable-next-line no-param-reassign\n    params.isBroadcast = true;\n  }\n  if (type === 'supergroup') {\n    // eslint-disable-next-line no-param-reassign\n    params.isSuper = true;\n  }\n  return params;\n};\nconst createDefaultUserListQuery = _ref => {\n  let {\n    sdk,\n    userFilledApplicationUserListQuery\n  } = _ref;\n  if (sdk !== null && sdk !== void 0 && sdk.createApplicationUserListQuery) {\n    const params = sdk === null || sdk === void 0 ? void 0 : sdk.createApplicationUserListQuery();\n    if (userFilledApplicationUserListQuery) {\n      Object.keys(userFilledApplicationUserListQuery).forEach(key => {\n        params[key] = userFilledApplicationUserListQuery[key];\n      });\n    }\n    return params;\n  }\n};\nconst appHeight = () => {\n  try {\n    const doc = document.documentElement;\n    doc.style.setProperty('--sendbird-vh', window.innerHeight * 0.01 + 'px');\n  } catch (_unused) {\n    //\n  }\n};\nconst BUFFER = 50;\nconst InviteUsers = _ref => {\n  var _globalStore$config, _globalStore$stores, _globalStore$stores$s;\n  let {\n    onCancel,\n    userListQuery\n  } = _ref;\n  const {\n    onBeforeCreateChannel,\n    onCreateChannel,\n    overrideInviteUser,\n    createChannel,\n    type\n  } = useCreateChannelContext();\n  const globalStore = useSendbirdStateContext();\n  const userId = globalStore === null || globalStore === void 0 ? void 0 : (_globalStore$config = globalStore.config) === null || _globalStore$config === void 0 ? void 0 : _globalStore$config.userId;\n  const sdk = globalStore === null || globalStore === void 0 ? void 0 : (_globalStore$stores = globalStore.stores) === null || _globalStore$stores === void 0 ? void 0 : (_globalStore$stores$s = _globalStore$stores.sdkStore) === null || _globalStore$stores$s === void 0 ? void 0 : _globalStore$stores$s.sdk;\n  const idsToFilter = [userId];\n  const [users, setUsers] = useState([]);\n  const [selectedUsers, setSelectedUsers] = useState({});\n  const {\n    stringSet\n  } = useContext(LocalizationContext);\n  const [usersDataSource, setUsersDataSource] = useState(null);\n  const selectedCount = Object.keys(selectedUsers).length;\n  const titleText = stringSet.MODAL__CREATE_CHANNEL__TITLE;\n  const submitText = stringSet.BUTTON__CREATE;\n  const userQueryCreator = userListQuery ? userListQuery() : createDefaultUserListQuery({\n    sdk\n  });\n  useEffect(() => {\n    const applicationUserListQuery = userQueryCreator;\n    setUsersDataSource(applicationUserListQuery);\n    // @ts-ignore\n    if (!(applicationUserListQuery !== null && applicationUserListQuery !== void 0 && applicationUserListQuery.isLoading)) {\n      applicationUserListQuery.next().then(users_ => {\n        setUsers(users_);\n      });\n    }\n  }, []);\n\n  // https://stackoverflow.com/a/70302463\n  // https://css-tricks.com/the-trick-to-viewport-units-on-mobile/#css-custom-properties-the-trick-to-correct-sizing\n  // to fix navbar break in mobile\n  useEffect(() => {\n    appHeight();\n    window.addEventListener('resize', appHeight);\n    return () => {\n      window.removeEventListener('resize', appHeight);\n    };\n  }, []);\n  return /*#__PURE__*/React__default.createElement(Modal, {\n    isFullScreenOnMobile: true,\n    titleText: titleText,\n    submitText: submitText,\n    type: ButtonTypes.PRIMARY,\n    disabled: Object.keys(selectedUsers).length === 0,\n    onCancel: onCancel,\n    onSubmit: () => {\n      const selectedUserList = Object.keys(selectedUsers);\n      if (typeof overrideInviteUser === 'function') {\n        overrideInviteUser({\n          users: selectedUserList,\n          onClose: onCancel,\n          channelType: type\n        });\n        return;\n      }\n      if (selectedUserList.length > 0) {\n        if (onBeforeCreateChannel) {\n          const params = onBeforeCreateChannel(selectedUserList);\n          setChannelType(params, type);\n          createChannel(params).then(channel => {\n            onCreateChannel(channel);\n          });\n        } else {\n          const params = {};\n          params.invitedUserIds = selectedUserList;\n          params.isDistinct = false;\n          if (userId) {\n            params.operatorUserIds = [userId];\n          }\n          setChannelType(params, type);\n          // do not have custom params\n          createChannel(params).then(channel => {\n            onCreateChannel(channel);\n          });\n        }\n        onCancel();\n      }\n    }\n  }, /*#__PURE__*/React__default.createElement(\"div\", null, /*#__PURE__*/React__default.createElement(Label, {\n    color: selectedCount > 0 ? LabelColors.PRIMARY : LabelColors.ONBACKGROUND_3,\n    type: LabelTypography.CAPTION_1\n  }, `${selectedCount} ${stringSet.MODAL__INVITE_MEMBER__SELECTED}`), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-create-channel--scroll\",\n    onScroll: e => {\n      const eventTarget = e.target;\n      const {\n        hasNext\n      } = usersDataSource;\n      const fetchMore = eventTarget.clientHeight + eventTarget.scrollTop + BUFFER > eventTarget.scrollHeight;\n      if (hasNext && fetchMore) {\n        usersDataSource.next().then(usersBatch => {\n          setUsers([...users, ...usersBatch]);\n        });\n      }\n    }\n  }, users.map(user => !filterUser(idsToFilter)(user.userId) && /*#__PURE__*/React__default.createElement(UserListItem, {\n    key: user.userId,\n    user: user,\n    checkBox: true,\n    checked: selectedUsers[user.userId],\n    onChange: event => {\n      const modifiedSelectedUsers = _objectSpread2(_objectSpread2({}, selectedUsers), {}, {\n        [event.target.id]: event.target.checked\n      });\n      if (!event.target.checked) {\n        delete modifiedSelectedUsers[event.target.id];\n      }\n      setSelectedUsers(modifiedSelectedUsers);\n    }\n  })))));\n};\nexport { InviteUsers as default };","map":{"version":3,"mappings":"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","names":["filterUser","idsToFilter","currentId","includes","setChannelType","params","type","isBroadcast","isSuper","createDefaultUserListQuery","_ref","sdk","userFilledApplicationUserListQuery","createApplicationUserListQuery","Object","keys","forEach","key","appHeight","doc","document","documentElement","style","setProperty","window","innerHeight","BUFFER","InviteUsers","onCancel","userListQuery","onBeforeCreateChannel","onCreateChannel","overrideInviteUser","createChannel","useCreateChannelContext","globalStore","useSendbirdStateContext","userId","config","_globalStore$config","stores","_globalStore$stores","sdkStore","_globalStore$stores$s","users","setUsers","useState","selectedUsers","setSelectedUsers","stringSet","useContext","LocalizationContext","usersDataSource","setUsersDataSource","selectedCount","length","titleText","MODAL__CREATE_CHANNEL__TITLE","submitText","BUTTON__CREATE","userQueryCreator","useEffect","applicationUserListQuery","isLoading","next","then","users_","addEventListener","removeEventListener","React","Modal","isFullScreenOnMobile","ButtonTypes","PRIMARY","disabled","onSubmit","selectedUserList","onClose","channelType","channel","invitedUserIds","isDistinct","operatorUserIds","Label","color","LabelColors","ONBACKGROUND_3","LabelTypography","CAPTION_1","MODAL__INVITE_MEMBER__SELECTED","className","onScroll","e","eventTarget","target","hasNext","fetchMore","clientHeight","scrollTop","scrollHeight","usersBatch","map","user","UserListItem","checkBox","checked","onChange","event","modifiedSelectedUsers","id"],"sources":["C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\CreateChannel\\components\\InviteUsers\\utils.ts","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\CreateChannel\\components\\InviteUsers\\index.tsx"],"sourcesContent":["import type { ApplicationUserListQuery } from '@sendbird/chat';\nimport type { GroupChannelCreateParams, SendbirdGroupChat } from '@sendbird/chat/groupChannel';\nimport { CHANNEL_TYPE } from '../../types';\n\nexport const filterUser = (idsToFilter: string[]) => (currentId: string): boolean => idsToFilter?.includes(currentId);\n\nexport const setChannelType = (\n  params: GroupChannelCreateParams,\n  type: CHANNEL_TYPE,\n): GroupChannelCreateParams => {\n  if (type === 'broadcast') {\n    // eslint-disable-next-line no-param-reassign\n    params.isBroadcast = true;\n  }\n  if (type === 'supergroup') {\n    // eslint-disable-next-line no-param-reassign\n    params.isSuper = true;\n  }\n  return params;\n};\n\ntype CreateDefaultUserListQueryType = {\n  sdk: SendbirdGroupChat;\n  userFilledApplicationUserListQuery?: ApplicationUserListQuery;\n};\n\nexport const createDefaultUserListQuery = (\n  { sdk, userFilledApplicationUserListQuery }: CreateDefaultUserListQueryType,\n): ApplicationUserListQuery => {\n  if (sdk?.createApplicationUserListQuery) {\n    const params = sdk?.createApplicationUserListQuery();\n    if (userFilledApplicationUserListQuery) {\n      Object.keys(userFilledApplicationUserListQuery).forEach((key) => {\n        params[key] = userFilledApplicationUserListQuery[key];\n      });\n    }\n    return params;\n  }\n};\n","import React, { useState, useEffect, useContext } from 'react';\nimport type { ApplicationUserListQuery, User } from '@sendbird/chat';\n\nimport './invite-users.scss';\nimport { LocalizationContext } from '../../../../lib/LocalizationContext';\nimport { useCreateChannelContext, UserListQuery } from '../../context/CreateChannelProvider';\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\nimport type { GroupChannelCreateParams, SendbirdGroupChat } from '@sendbird/chat/groupChannel';\n\nimport Modal from '../../../../ui/Modal';\nimport Label, {\n  LabelColors,\n  LabelTypography,\n} from '../../../../ui/Label';\nimport { ButtonTypes } from '../../../../ui/Button';\nimport UserListItem from '../../../../ui/UserListItem';\n\nimport {\n  filterUser,\n  setChannelType,\n  createDefaultUserListQuery,\n} from './utils';\n\nexport interface InviteUsersProps {\n  onCancel?: () => void;\n  userListQuery?(): UserListQuery;\n}\n\nconst appHeight = () => {\n  try {\n    const doc = document.documentElement;\n    doc.style.setProperty('--sendbird-vh', (window.innerHeight * 0.01) + 'px');\n  } catch {\n    //\n  }\n};\n\nconst BUFFER = 50;\n\nconst InviteUsers: React.FC<InviteUsersProps> = ({\n  onCancel,\n  userListQuery,\n}: InviteUsersProps) => {\n  const {\n    onBeforeCreateChannel,\n    onCreateChannel,\n    overrideInviteUser,\n    createChannel,\n    type,\n  } = useCreateChannelContext();\n\n  const globalStore = useSendbirdStateContext();\n  const userId = globalStore?.config?.userId;\n  const sdk = globalStore?.stores?.sdkStore?.sdk as SendbirdGroupChat;\n  const idsToFilter = [userId];\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUsers, setSelectedUsers] = useState({});\n  const { stringSet } = useContext(LocalizationContext);\n  const [usersDataSource, setUsersDataSource] = useState<ApplicationUserListQuery | UserListQuery>(null);\n  const selectedCount = Object.keys(selectedUsers).length;\n  const titleText = stringSet.MODAL__CREATE_CHANNEL__TITLE;\n  const submitText = stringSet.BUTTON__CREATE;\n\n  const userQueryCreator = userListQuery ? userListQuery() : createDefaultUserListQuery({ sdk });\n\n  useEffect(() => {\n    const applicationUserListQuery = userQueryCreator;\n    setUsersDataSource(applicationUserListQuery);\n    // @ts-ignore\n    if (!applicationUserListQuery?.isLoading) {\n      applicationUserListQuery.next().then((users_) => {\n        setUsers(users_);\n      });\n    }\n  }, []);\n\n  // https://stackoverflow.com/a/70302463\n  // https://css-tricks.com/the-trick-to-viewport-units-on-mobile/#css-custom-properties-the-trick-to-correct-sizing\n  // to fix navbar break in mobile\n  useEffect(() => {\n    appHeight();\n    window.addEventListener('resize', appHeight);\n    return () => {\n      window.removeEventListener('resize', appHeight);\n    };\n  }, []);\n\n  return (\n    <Modal\n      isFullScreenOnMobile\n      titleText={titleText}\n      submitText={submitText}\n      type={ButtonTypes.PRIMARY}\n      disabled={Object.keys(selectedUsers).length === 0}\n      onCancel={onCancel}\n      onSubmit={() => {\n        const selectedUserList = Object.keys(selectedUsers);\n        if (typeof overrideInviteUser === 'function') {\n          overrideInviteUser({\n            users: selectedUserList,\n            onClose: onCancel,\n            channelType: type,\n          });\n          return;\n        }\n        if (selectedUserList.length > 0) {\n          if (onBeforeCreateChannel) {\n            const params = onBeforeCreateChannel(selectedUserList);\n            setChannelType(params, type);\n            createChannel(params).then((channel) => {\n              onCreateChannel(channel);\n            });\n          } else {\n            const params: GroupChannelCreateParams = {};\n            params.invitedUserIds = selectedUserList;\n            params.isDistinct = false;\n            if (userId) {\n              params.operatorUserIds = [userId];\n            }\n            setChannelType(params, type);\n            // do not have custom params\n            createChannel(params).then((channel) => {\n              onCreateChannel(channel);\n            });\n          }\n          onCancel();\n        }\n      }}\n    >\n      <div>\n        <Label\n          color={(selectedCount > 0) ? LabelColors.PRIMARY : LabelColors.ONBACKGROUND_3}\n          type={LabelTypography.CAPTION_1}\n        >\n          {`${selectedCount} ${stringSet.MODAL__INVITE_MEMBER__SELECTED}`}\n        </Label>\n        <div\n          className=\"sendbird-create-channel--scroll\"\n\n          onScroll={(e) => {\n            const eventTarget = e.target as HTMLDivElement;\n            const { hasNext } = usersDataSource;\n            const fetchMore = (\n              (eventTarget.clientHeight + eventTarget.scrollTop + BUFFER) > eventTarget.scrollHeight\n            );\n\n            if (hasNext && fetchMore) {\n              usersDataSource.next().then((usersBatch) => {\n                setUsers([\n                  ...users,\n                  ...usersBatch,\n                ]);\n              });\n            }\n          }}\n        >\n          {\n            users.map((user) => (!filterUser(idsToFilter)(user.userId)) && (\n              <UserListItem\n                key={user.userId}\n                user={user}\n                checkBox\n                checked={selectedUsers[user.userId]}\n                onChange={\n                  (event) => {\n                    const modifiedSelectedUsers = {\n                      ...selectedUsers,\n                      [event.target.id]: event.target.checked,\n                    };\n                    if (!event.target.checked) {\n                      delete modifiedSelectedUsers[event.target.id];\n                    }\n                    setSelectedUsers(modifiedSelectedUsers);\n                  }\n                }\n              />\n            ))\n          }\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default InviteUsers;\n"]},"metadata":{},"sourceType":"module"}