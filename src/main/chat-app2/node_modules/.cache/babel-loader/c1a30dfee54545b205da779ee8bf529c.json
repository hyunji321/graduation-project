{"ast":null,"code":"import { b as _extends, _ as _objectSpread2 } from '../../_rollupPluginBabelHelpers-6bb0305c.js';\nimport React__default, { useState } from 'react';\nimport ChannelAvatar from '../../ui/ChannelAvatar.js';\nimport Badge from '../../ui/Badge.js';\nimport Icon, { IconTypes, IconColors } from '../../ui/Icon.js';\nimport { L as Label, a as LabelTypography, b as LabelColors } from '../../index-63949de5.js';\nimport { g as getChannelTitle, a as getTotalMembers, M as MessageStatus, b as getLastMessageCreatedAt, c as getLastMessage, d as getChannelUnreadMessageCount } from '../../index-5c1b672d.js';\nimport useSendbirdStateContext from '../../useSendbirdStateContext.js';\nimport { u as useLocalization } from '../../LocalizationContext-076d6d2e.js';\nimport MentionUserLabel from '../../ui/MentionUserLabel.js';\nimport Modal from '../../ui/Modal.js';\nimport TextButton from '../../ui/TextButton.js';\nimport { u as useChannelListContext } from '../../ChannelListProvider-21425002.js';\nimport { TypingIndicatorText } from '../../Channel/components/TypingIndicator.js';\nimport { d as isVoiceMessage } from '../../index-7eb65acf.js';\nimport { u as useMediaQueryContext } from '../../MediaQueryContext-11f0e43f.js';\nimport { u as useLongPress } from '../../useLongPress-1303953d.js';\nimport '../../ui/Avatar.js';\nimport '../../ui/ImageRenderer.js';\nimport '../../uuid-1adedf62.js';\nimport '../../utils-d86ad6ab.js';\nimport 'prop-types';\nimport '../../stringSet-13bbd4a2.js';\nimport '../../index-7cdd58b8.js';\nimport '../../index-99aabd9e.js';\nimport '../../ui/Loader.js';\nimport '../../utils/message/getOutgoingMessageState.js';\nimport '../../index-306bc4ab.js';\nimport '../../index-fe932783.js';\nimport '../../withSendbird.js';\nimport '../../consts-ff014656.js';\nimport 'react-dom';\nimport '../../index-38e61c64.js';\nimport '../../ui/Button.js';\nimport '../../ui/IconButton.js';\nimport '../../color-879cc347.js';\nimport '@sendbird/chat/groupChannel';\nimport '../../topics-b2b77fb9.js';\nimport '../../utils-4bbbca2c.js';\nimport '../../UserProfileContext-9cfbab4d.js';\nimport '../../ChannelProvider-910bbc1f.js';\nimport '../../compareIds-defe2bb3.js';\nimport '../../const-b3f02313.js';\nimport '@sendbird/chat/message';\nimport '../../consts-95d8566e.js';\nconst ChannelPreview = _ref => {\n  var _sbState$stores, _sbState$stores$userS, _sbState$stores$userS2, _sbState$config, _sbState$config2, _channel$lastMessage, _channel$lastMessage2, _channel$lastMessage3, _channel$lastMessage4;\n  let {\n    channel,\n    isActive = false,\n    isTyping = false,\n    renderChannelAction,\n    onLeaveChannel,\n    onClick,\n    tabIndex\n  } = _ref;\n  const sbState = useSendbirdStateContext();\n  const {\n    isTypingIndicatorEnabled = false,\n    isMessageReceiptStatusEnabled = false\n  } = useChannelListContext();\n  const {\n    dateLocale,\n    stringSet\n  } = useLocalization();\n  const {\n    isMobile\n  } = useMediaQueryContext();\n  const [showMobileLeave, setShowMobileLeave] = useState(false);\n  const userId = sbState === null || sbState === void 0 ? void 0 : (_sbState$stores = sbState.stores) === null || _sbState$stores === void 0 ? void 0 : (_sbState$stores$userS = _sbState$stores.userStore) === null || _sbState$stores$userS === void 0 ? void 0 : (_sbState$stores$userS2 = _sbState$stores$userS.user) === null || _sbState$stores$userS2 === void 0 ? void 0 : _sbState$stores$userS2.userId;\n  const theme = sbState === null || sbState === void 0 ? void 0 : (_sbState$config = sbState.config) === null || _sbState$config === void 0 ? void 0 : _sbState$config.theme;\n  const isMentionEnabled = sbState === null || sbState === void 0 ? void 0 : (_sbState$config2 = sbState.config) === null || _sbState$config2 === void 0 ? void 0 : _sbState$config2.isMentionEnabled;\n  const isFrozen = (channel === null || channel === void 0 ? void 0 : channel.isFrozen) || false;\n  const isBroadcast = (channel === null || channel === void 0 ? void 0 : channel.isBroadcast) || false;\n  const isChannelTyping = isTypingIndicatorEnabled && isTyping;\n  const isMessageStatusEnabled = isMessageReceiptStatusEnabled && ((channel === null || channel === void 0 ? void 0 : (_channel$lastMessage = channel.lastMessage) === null || _channel$lastMessage === void 0 ? void 0 : _channel$lastMessage.messageType) === 'user' || (channel === null || channel === void 0 ? void 0 : (_channel$lastMessage2 = channel.lastMessage) === null || _channel$lastMessage2 === void 0 ? void 0 : _channel$lastMessage2.messageType) === 'file') && (channel === null || channel === void 0 ? void 0 : (_channel$lastMessage3 = channel.lastMessage) === null || _channel$lastMessage3 === void 0 ? void 0 : (_channel$lastMessage4 = _channel$lastMessage3.sender) === null || _channel$lastMessage4 === void 0 ? void 0 : _channel$lastMessage4.userId) === userId;\n  const onLongPress = useLongPress({\n    onLongPress: () => {\n      if (isMobile) {\n        setShowMobileLeave(true);\n      }\n    },\n    onClick\n  }, {\n    delay: 1000\n  });\n  const channelName = getChannelTitle(channel, userId, stringSet);\n  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(\"div\", _extends({\n    className: ['sendbird-channel-preview', isActive ? 'sendbird-channel-preview--active' : ''].join(' '),\n    role: \"link\",\n    tabIndex: tabIndex\n  }, isMobile ? _objectSpread2({}, onLongPress) : {\n    onClick\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__avatar\"\n  }, /*#__PURE__*/React__default.createElement(ChannelAvatar, {\n    channel: channel,\n    userId: userId,\n    theme: theme\n  })), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__content\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__content__upper\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__content__upper__header\"\n  }, isBroadcast && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__content__upper__header__broadcast-icon\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.BROADCAST,\n    fillColor: IconColors.SECONDARY,\n    height: \"16px\",\n    width: \"16px\"\n  })), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-channel-preview__content__upper__header__channel-name\",\n    type: LabelTypography.SUBTITLE_2,\n    color: LabelColors.ONBACKGROUND_1\n  }, channelName), /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-channel-preview__content__upper__header__total-members\",\n    type: LabelTypography.CAPTION_2,\n    color: LabelColors.ONBACKGROUND_2\n  }, getTotalMembers(channel)), isFrozen && /*#__PURE__*/React__default.createElement(\"div\", {\n    title: \"Frozen\",\n    className: \"sendbird-channel-preview__content__upper__header__frozen-icon\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    type: IconTypes.FREEZE,\n    fillColor: IconColors.PRIMARY,\n    height: 12,\n    width: 12\n  }))), !(channel !== null && channel !== void 0 && channel.isEphemeral) && isMessageStatusEnabled && /*#__PURE__*/React__default.createElement(MessageStatus, {\n    className: \"sendbird-channel-preview__content__upper__last-message-at\",\n    channel: channel,\n    message: channel === null || channel === void 0 ? void 0 : channel.lastMessage,\n    isDateSeparatorConsidered: false\n  }), !(channel !== null && channel !== void 0 && channel.isEphemeral) && !isMessageStatusEnabled && /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-channel-preview__content__upper__last-message-at\",\n    type: LabelTypography.CAPTION_3,\n    color: LabelColors.ONBACKGROUND_2\n  }, getLastMessageCreatedAt({\n    channel,\n    locale: dateLocale,\n    stringSet\n  }))), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__content__lower\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    className: \"sendbird-channel-preview__content__lower__last-message\",\n    type: LabelTypography.BODY_2,\n    color: LabelColors.ONBACKGROUND_3\n  }, isChannelTyping && /*#__PURE__*/React__default.createElement(TypingIndicatorText, {\n    members: channel === null || channel === void 0 ? void 0 : channel.getTypingUsers()\n  }), !isChannelTyping && !isVoiceMessage(channel === null || channel === void 0 ? void 0 : channel.lastMessage) && getLastMessage(channel), !isChannelTyping && isVoiceMessage(channel === null || channel === void 0 ? void 0 : channel.lastMessage) && stringSet.VOICE_MESSAGE), !(channel !== null && channel !== void 0 && channel.isEphemeral) && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__content__lower__unread-message-count\"\n  }, isMentionEnabled && (channel === null || channel === void 0 ? void 0 : channel.unreadMentionCount) > 0 ? /*#__PURE__*/React__default.createElement(MentionUserLabel, {\n    className: \"sendbird-channel-preview__content__lower__unread-message-count__mention\",\n    color: \"purple\"\n  }, '@') : null, getChannelUnreadMessageCount(channel) // return number\n  ? /*#__PURE__*/React__default.createElement(Badge, {\n    count: getChannelUnreadMessageCount(channel)\n  }) : null))), !isMobile && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-channel-preview__action\"\n  }, renderChannelAction({\n    channel\n  }))), showMobileLeave && isMobile && /*#__PURE__*/React__default.createElement(Modal, {\n    className: \"sendbird-channel-preview__leave--mobile\",\n    titleText: channelName,\n    hideFooter: true,\n    isCloseOnClickOutside: true,\n    onCancel: () => setShowMobileLeave(false)\n  }, /*#__PURE__*/React__default.createElement(TextButton, {\n    onClick: () => {\n      onLeaveChannel();\n      setShowMobileLeave(false);\n    },\n    className: \"sendbird-channel-preview__leave-label--mobile\"\n  }, /*#__PURE__*/React__default.createElement(Label, {\n    type: LabelTypography.SUBTITLE_1,\n    color: LabelColors.ONBACKGROUND_1\n  }, stringSet.CHANNEL_PREVIEW_MOBILE_LEAVE))));\n};\nexport { ChannelPreview as default };","map":{"version":3,"mappings":"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","names":["ChannelPreview","_ref","channel","isActive","isTyping","renderChannelAction","onLeaveChannel","onClick","tabIndex","sbState","useSendbirdStateContext","isTypingIndicatorEnabled","isMessageReceiptStatusEnabled","useChannelListContext","dateLocale","stringSet","useLocalization","isMobile","useMediaQueryContext","showMobileLeave","setShowMobileLeave","useState","userId","stores","_sbState$stores","userStore","_sbState$stores$userS","user","_sbState$stores$userS2","theme","config","_sbState$config","isMentionEnabled","_sbState$config2","isFrozen","isBroadcast","isChannelTyping","isMessageStatusEnabled","lastMessage","_channel$lastMessage","messageType","_channel$lastMessage2","_channel$lastMessage3","sender","_channel$lastMessage4","onLongPress","useLongPress","delay","channelName","utils","React","className","join","role","ChannelAvatar","Icon","type","IconTypes","BROADCAST","fillColor","IconColors","SECONDARY","height","width","Label","LabelTypography","SUBTITLE_2","color","LabelColors","ONBACKGROUND_1","CAPTION_2","ONBACKGROUND_2","title","FREEZE","PRIMARY","isEphemeral","MessageStatus","message","isDateSeparatorConsidered","CAPTION_3","locale","BODY_2","ONBACKGROUND_3","TypingIndicatorText","members","getTypingUsers","isVoiceMessage","VOICE_MESSAGE","unreadMentionCount","MentionUserLabel","Badge","count","Modal","titleText","hideFooter","isCloseOnClickOutside","onCancel","TextButton","SUBTITLE_1","CHANNEL_PREVIEW_MOBILE_LEAVE"],"sources":["C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\ChannelList\\components\\ChannelPreview\\index.tsx"],"sourcesContent":["import './channel-preview.scss';\n\nimport React, { useState } from 'react';\nimport type { GroupChannel } from '@sendbird/chat/groupChannel';\nimport type { FileMessage, UserMessage } from '@sendbird/chat/message';\n\nimport ChannelAvatar from '../../../../ui/ChannelAvatar';\nimport Badge from '../../../../ui/Badge';\nimport Icon, { IconColors, IconTypes } from '../../../../ui/Icon';\nimport Label, { LabelTypography, LabelColors } from '../../../../ui/Label';\n\nimport * as utils from './utils';\n\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\nimport { useLocalization } from '../../../../lib/LocalizationContext';\nimport MentionUserLabel from '../../../../ui/MentionUserLabel';\nimport Modal from '../../../../ui/Modal';\nimport TextButton from '../../../../ui/TextButton';\nimport { useChannelListContext } from '../../context/ChannelListProvider';\nimport { TypingIndicatorText } from '../../../Channel/components/TypingIndicator';\nimport MessageStatus from '../../../../ui/MessageStatus';\nimport { isVoiceMessage } from '../../../../utils';\nimport { useMediaQueryContext } from '../../../../lib/MediaQueryContext';\nimport useLongPress from '../../../../hooks/useLongPress';\n\ninterface ChannelPreviewInterface {\n  channel: GroupChannel;\n  isActive?: boolean;\n  isTyping?: boolean;\n  onClick: () => void;\n  onLeaveChannel?: () => void;\n  renderChannelAction: (props: { channel: GroupChannel }) => React.ReactElement;\n  tabIndex: number;\n}\n\nconst ChannelPreview: React.FC<ChannelPreviewInterface> = ({\n  channel,\n  isActive = false,\n  isTyping = false,\n  renderChannelAction,\n  onLeaveChannel,\n  onClick,\n  tabIndex,\n}: ChannelPreviewInterface) => {\n  const sbState = useSendbirdStateContext();\n  const {\n    isTypingIndicatorEnabled = false,\n    isMessageReceiptStatusEnabled = false,\n  } = useChannelListContext();\n  const { dateLocale, stringSet } = useLocalization();\n  const { isMobile } = useMediaQueryContext();\n\n  const [showMobileLeave, setShowMobileLeave] = useState(false);\n\n  const userId = sbState?.stores?.userStore?.user?.userId;\n  const theme = sbState?.config?.theme;\n  const isMentionEnabled = sbState?.config?.isMentionEnabled;\n  const isFrozen = channel?.isFrozen || false;\n  const isBroadcast = channel?.isBroadcast || false;\n  const isChannelTyping = isTypingIndicatorEnabled && isTyping;\n  const isMessageStatusEnabled = isMessageReceiptStatusEnabled\n    && (channel?.lastMessage?.messageType === 'user' || channel?.lastMessage?.messageType === 'file')\n    && (channel?.lastMessage as UserMessage | FileMessage)?.sender?.userId === userId;\n\n  const onLongPress = useLongPress({\n    onLongPress: () => {\n      if (isMobile) {\n        setShowMobileLeave(true);\n      }\n    },\n    onClick,\n  }, {\n    delay: 1000,\n  });\n  const channelName = utils.getChannelTitle(channel, userId, stringSet);\n  return (\n    <>\n      <div\n        className={[\n          'sendbird-channel-preview',\n          isActive ? 'sendbird-channel-preview--active' : '',\n        ].join(' ')}\n        role=\"link\"\n        tabIndex={tabIndex}\n        {...(isMobile ? { ...onLongPress } : { onClick })}\n      >\n        <div\n          className=\"sendbird-channel-preview__avatar\"\n        >\n          <ChannelAvatar\n            channel={channel}\n            userId={userId}\n            theme={theme}\n          />\n        </div>\n        <div className=\"sendbird-channel-preview__content\">\n          <div className=\"sendbird-channel-preview__content__upper\">\n            <div className=\"sendbird-channel-preview__content__upper__header\">\n              {\n                isBroadcast\n                && (\n                  <div className=\"sendbird-channel-preview__content__upper__header__broadcast-icon\">\n                    <Icon\n                      type={IconTypes.BROADCAST}\n                      fillColor={IconColors.SECONDARY}\n                      height=\"16px\"\n                      width=\"16px\"\n                    />\n                  </div>\n                )\n              }\n              <Label\n                className=\"sendbird-channel-preview__content__upper__header__channel-name\"\n                type={LabelTypography.SUBTITLE_2}\n                color={LabelColors.ONBACKGROUND_1}\n              >\n                {channelName}\n              </Label>\n              <Label\n                className=\"sendbird-channel-preview__content__upper__header__total-members\"\n                type={LabelTypography.CAPTION_2}\n                color={LabelColors.ONBACKGROUND_2}\n              >\n                {utils.getTotalMembers(channel)}\n              </Label>\n              {\n                isFrozen\n                && (\n                  <div title=\"Frozen\" className=\"sendbird-channel-preview__content__upper__header__frozen-icon\">\n                    <Icon\n                      type={IconTypes.FREEZE}\n                      fillColor={IconColors.PRIMARY}\n                      height={12}\n                      width={12}\n                    />\n                  </div>\n                )\n              }\n            </div>\n            {\n              (!channel?.isEphemeral && isMessageStatusEnabled) && (\n                <MessageStatus\n                  className=\"sendbird-channel-preview__content__upper__last-message-at\"\n                  channel={channel}\n                  message={channel?.lastMessage as UserMessage | FileMessage}\n                  isDateSeparatorConsidered={false}\n                />\n              )\n            }\n            {\n              (!channel?.isEphemeral && !isMessageStatusEnabled) && (\n                <Label\n                  className=\"sendbird-channel-preview__content__upper__last-message-at\"\n                  type={LabelTypography.CAPTION_3}\n                  color={LabelColors.ONBACKGROUND_2}\n                >\n                  {utils.getLastMessageCreatedAt({\n                    channel,\n                    locale: dateLocale,\n                    stringSet,\n                  })}\n                </Label>\n              )\n            }\n          </div>\n          <div className=\"sendbird-channel-preview__content__lower\">\n            <Label\n              className=\"sendbird-channel-preview__content__lower__last-message\"\n              type={LabelTypography.BODY_2}\n              color={LabelColors.ONBACKGROUND_3}\n            >\n              {\n                isChannelTyping && (\n                  <TypingIndicatorText members={channel?.getTypingUsers()} />\n                )\n              }\n              {\n                !isChannelTyping && !isVoiceMessage(channel?.lastMessage as FileMessage) && (\n                  utils.getLastMessage(channel)\n                )\n              }\n              {\n                !isChannelTyping && isVoiceMessage(channel?.lastMessage as FileMessage) && (\n                  stringSet.VOICE_MESSAGE\n                )\n              }\n            </Label>\n            {\n              !channel?.isEphemeral && (\n                <div className=\"sendbird-channel-preview__content__lower__unread-message-count\">\n                  {\n                    (isMentionEnabled && channel?.unreadMentionCount > 0)\n                      ? (\n                        <MentionUserLabel\n                          className=\"sendbird-channel-preview__content__lower__unread-message-count__mention\"\n                          color=\"purple\"\n                        >\n                          {'@'}\n                        </MentionUserLabel>\n                      )\n                      : null\n                  }\n                  {\n                    utils.getChannelUnreadMessageCount(channel) // return number\n                      ? <Badge count={utils.getChannelUnreadMessageCount(channel)} />\n                      : null\n                  }\n                </div>\n              )\n            }\n          </div>\n        </div>\n        {\n          !isMobile && (\n            <div\n              className=\"sendbird-channel-preview__action\"\n            >\n              {renderChannelAction({ channel })}\n            </div>\n          )\n        }\n      </div>\n      {/*\n        Event from portal is transferred to parent\n        If this modal goes inside channel preview, it will propogate event to\n        ChannelPreview and cause many issues with click/touchEnd etc\n        https://github.com/facebook/react/issues/11387#issuecomment-340019419\n      */}\n      {\n        showMobileLeave && isMobile && (\n          <Modal\n            className=\"sendbird-channel-preview__leave--mobile\"\n            titleText={channelName}\n            hideFooter\n            isCloseOnClickOutside\n            onCancel={() => setShowMobileLeave(false)}\n          >\n            <TextButton\n              onClick={() => {\n                onLeaveChannel();\n                setShowMobileLeave(false);\n              }}\n              className=\"sendbird-channel-preview__leave-label--mobile\"\n            >\n              <Label\n                type={LabelTypography.SUBTITLE_1}\n                color={LabelColors.ONBACKGROUND_1}\n              >\n                {stringSet.CHANNEL_PREVIEW_MOBILE_LEAVE}\n              </Label>\n            </TextButton>\n          </Modal>\n        )\n      }\n    </>\n  );\n};\n\nexport default ChannelPreview;\n"]},"metadata":{},"sourceType":"module"}