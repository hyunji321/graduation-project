{"ast":null,"code":"import React__default, { useState, useEffect, useMemo } from 'react';\nimport { ProgressBar, ProgressBarColorTypes } from './ProgressBar.js';\nimport { useVoicePlayer } from '../VoicePlayer/useVoicePlayer.js';\nimport { PlaybackTime } from './PlaybackTime.js';\nimport Loader from './Loader.js';\nimport Icon, { IconTypes, IconColors } from './Icon.js';\nimport { a as LabelTypography, b as LabelColors } from '../index-63949de5.js';\nimport { a as VOICE_PLAYER_STATUS } from '../index-5c985608.js';\nimport '../consts-95d8566e.js';\nimport '../VoiceRecorder/context.js';\nimport '../useSendbirdStateContext.js';\nimport '../withSendbird.js';\nimport '../_rollupPluginBabelHelpers-6bb0305c.js';\nimport 'prop-types';\nimport '../stringSet-13bbd4a2.js';\nconst VoiceMessageItemBody = _ref => {\n  var _message$reactions2;\n  let {\n    className,\n    message,\n    channelUrl,\n    isByMe = false,\n    isReactionEnabled = false\n  } = _ref;\n  const [usingReaction, setUsingReaction] = useState(false);\n  const {\n    play,\n    pause,\n    playbackTime = 0,\n    duration,\n    playingStatus = VOICE_PLAYER_STATUS.IDLE\n  } = useVoicePlayer({\n    channelUrl,\n    key: `${message === null || message === void 0 ? void 0 : message.messageId}`,\n    audioFileUrl: message === null || message === void 0 ? void 0 : message.url\n  });\n  useEffect(() => {\n    var _message$reactions;\n    if (isReactionEnabled && (message === null || message === void 0 ? void 0 : (_message$reactions = message.reactions) === null || _message$reactions === void 0 ? void 0 : _message$reactions.length) > 0) {\n      setUsingReaction(true);\n    } else {\n      setUsingReaction(false);\n    }\n  }, [isReactionEnabled, message === null || message === void 0 ? void 0 : (_message$reactions2 = message.reactions) === null || _message$reactions2 === void 0 ? void 0 : _message$reactions2.length]);\n  const progresBarMaxSize = useMemo(() => {\n    if (message !== null && message !== void 0 && message.metaArrays) {\n      var _message$metaArrays$f;\n      const duration = message === null || message === void 0 ? void 0 : (_message$metaArrays$f = message.metaArrays.find(metaArray => metaArray.key === 'KEY_VOICE_MESSAGE_DURATION')) === null || _message$metaArrays$f === void 0 ? void 0 : _message$metaArrays$f.value[0];\n      return duration && parseInt(duration);\n    }\n    return 1;\n  }, [message === null || message === void 0 ? void 0 : message.metaArrays]);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: `sendbird-voice-message-item-body ${className} ${usingReaction ? 'is-reactions-contained' : ''}`\n  }, /*#__PURE__*/React__default.createElement(ProgressBar, {\n    className: \"sendbird-voice-message-item-body__progress-bar\",\n    maxSize: duration || progresBarMaxSize,\n    currentSize: playbackTime,\n    colorType: isByMe ? ProgressBarColorTypes.PRIMARY : ProgressBarColorTypes.GRAY\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-voice-message-item-body__status-button\"\n  }, (playingStatus === VOICE_PLAYER_STATUS.IDLE || playingStatus === VOICE_PLAYER_STATUS.PAUSED) && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-voice-message-item-body__status-button__button\",\n    onClick: play\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    width: \"18px\",\n    height: \"18px\",\n    type: IconTypes.PLAY,\n    fillColor: IconColors.PRIMARY\n  })), playingStatus === VOICE_PLAYER_STATUS.PREPARING && /*#__PURE__*/React__default.createElement(Loader, {\n    width: \"22.2px\",\n    height: \"22.2px\"\n  }, /*#__PURE__*/React__default.createElement(Icon, {\n    width: \"22.2px\",\n    height: \"22.2px\",\n    type: IconTypes.SPINNER,\n    fillColor: IconColors.PRIMARY_2\n  })), playingStatus === VOICE_PLAYER_STATUS.PLAYING && /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-voice-message-item-body__status-button__button\",\n    onClick: () => {\n      pause();\n    }\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-voice-message-item-body__status-button__button__pause\"\n  }, /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-voice-message-item-body__status-button__button__pause__inner\"\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: \"sendbird-voice-message-item-body__status-button__button__pause__inner\"\n  })))), /*#__PURE__*/React__default.createElement(PlaybackTime, {\n    className: \"sendbird-voice-message-item-body__playback-time\",\n    time: progresBarMaxSize - playbackTime,\n    labelType: LabelTypography.BODY_1,\n    labelColor: isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1\n  }));\n};\nexport { VoiceMessageItemBody, VoiceMessageItemBody as default };","map":{"version":3,"mappings":"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","names":["VoiceMessageItemBody","_ref","className","message","channelUrl","isByMe","isReactionEnabled","usingReaction","setUsingReaction","useState","play","pause","playbackTime","duration","playingStatus","VOICE_PLAYER_STATUS","IDLE","useVoicePlayer","key","messageId","audioFileUrl","url","useEffect","reactions","_message$reactions","length","_message$reactions2","progresBarMaxSize","useMemo","metaArrays","find","metaArray","_message$metaArrays$f","value","parseInt","React","ProgressBar","maxSize","currentSize","colorType","ProgressBarColorTypes","PRIMARY","GRAY","PAUSED","onClick","Icon","width","height","type","IconTypes","PLAY","fillColor","IconColors","PREPARING","Loader","SPINNER","PRIMARY_2","PLAYING","PlaybackTime","time","labelType","LabelTypography","BODY_1","labelColor","LabelColors","ONCONTENT_1","ONBACKGROUND_1"],"sources":["C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\ui\\VoiceMessageItemBody\\index.tsx"],"sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\nimport { FileMessage } from '@sendbird/chat/message';\n\nimport './index.scss';\n\nimport ProgressBar, { ProgressBarColorTypes } from '../ProgressBar';\nimport { useVoicePlayer } from '../../hooks/VoicePlayer/useVoicePlayer';\nimport PlaybackTime from '../PlaybackTime';\nimport Loader from '../Loader';\nimport Icon, { IconTypes, IconColors } from '../Icon';\nimport { LabelTypography, LabelColors } from '../Label';\nimport { VOICE_PLAYER_STATUS } from '../../hooks/VoicePlayer/dux/initialState';\n\nexport interface VoiceMessageItemBodyProps {\n  className?: string;\n  message: FileMessage;\n  channelUrl: string;\n  isByMe?: boolean;\n  isReactionEnabled?: boolean;\n}\n\nexport const VoiceMessageItemBody = ({\n  className,\n  message,\n  channelUrl,\n  isByMe = false,\n  isReactionEnabled = false,\n}: VoiceMessageItemBodyProps): React.ReactElement => {\n  const [usingReaction, setUsingReaction] = useState(false);\n  const {\n    play,\n    pause,\n    playbackTime = 0,\n    duration,\n    playingStatus = VOICE_PLAYER_STATUS.IDLE,\n  } = useVoicePlayer({\n    channelUrl,\n    key: `${message?.messageId}`,\n    audioFileUrl: message?.url,\n  });\n\n  useEffect(() => {\n    if (isReactionEnabled && message?.reactions?.length > 0) {\n      setUsingReaction(true);\n    } else {\n      setUsingReaction(false);\n    }\n  }, [isReactionEnabled, message?.reactions?.length]);\n  const progresBarMaxSize = useMemo(() => {\n    if (message?.metaArrays) {\n      const duration = message?.metaArrays.find((metaArray) => metaArray.key === 'KEY_VOICE_MESSAGE_DURATION')?.value[0];\n      return duration && parseInt(duration);\n    }\n    return 1;\n  }, [message?.metaArrays]);\n\n  return (\n    <div className={`sendbird-voice-message-item-body ${className} ${usingReaction ? 'is-reactions-contained' : ''}`}>\n      <ProgressBar\n        className=\"sendbird-voice-message-item-body__progress-bar\"\n        maxSize={duration || progresBarMaxSize}\n        currentSize={playbackTime}\n        colorType={isByMe ? ProgressBarColorTypes.PRIMARY : ProgressBarColorTypes.GRAY}\n      />\n      <div className=\"sendbird-voice-message-item-body__status-button\">\n        {(playingStatus === VOICE_PLAYER_STATUS.IDLE || playingStatus === VOICE_PLAYER_STATUS.PAUSED) && (\n          <div\n            className=\"sendbird-voice-message-item-body__status-button__button\"\n            onClick={play}\n          >\n            <Icon\n              width=\"18px\"\n              height=\"18px\"\n              type={IconTypes.PLAY}\n              fillColor={IconColors.PRIMARY}\n            />\n          </div>\n        )}\n        {playingStatus === VOICE_PLAYER_STATUS.PREPARING && (\n          <Loader width=\"22.2px\" height=\"22.2px\">\n            <Icon\n              width=\"22.2px\"\n              height=\"22.2px\"\n              type={IconTypes.SPINNER}\n              fillColor={IconColors.PRIMARY_2}\n            />\n          </Loader>\n        )}\n        {playingStatus === VOICE_PLAYER_STATUS.PLAYING && (\n          <div\n            className=\"sendbird-voice-message-item-body__status-button__button\"\n            onClick={() => { pause(); }}\n          >\n            <div className=\"sendbird-voice-message-item-body__status-button__button__pause\">\n              <div className=\"sendbird-voice-message-item-body__status-button__button__pause__inner\" />\n              <div className=\"sendbird-voice-message-item-body__status-button__button__pause__inner\" />\n            </div>\n          </div>\n        )}\n      </div>\n      <PlaybackTime\n        className=\"sendbird-voice-message-item-body__playback-time\"\n        time={progresBarMaxSize - playbackTime}\n        labelType={LabelTypography.BODY_1}\n        labelColor={isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1}\n      />\n    </div>\n  );\n};\n\nexport default VoiceMessageItemBody;\n"]},"metadata":{},"sourceType":"module"}