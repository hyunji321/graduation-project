{"ast":null,"code":"import React__default, { useRef, useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { u as useLocalization, a as LocalizationContext } from '../../LocalizationContext-076d6d2e.js';\nimport ContextMenu, { MenuItems, MenuItem } from '../../ui/ContextMenu.js';\nimport IconButton from '../../ui/IconButton.js';\nimport Icon, { IconTypes, IconColors } from '../../ui/Icon.js';\nimport useSendbirdStateContext from '../../useSendbirdStateContext.js';\nimport { n as noop } from '../../utils-4bbbca2c.js';\nimport Modal from '../../ui/Modal.js';\nimport { u as useChannelListContext } from '../../ChannelListProvider-21425002.js';\nimport '../../stringSet-13bbd4a2.js';\nimport '../../index-99aabd9e.js';\nimport '../../_rollupPluginBabelHelpers-6bb0305c.js';\nimport 'react-dom';\nimport '../../ui/SortByRow.js';\nimport '../../uuid-1adedf62.js';\nimport '../../index-7eb65acf.js';\nimport '../../utils/message/getOutgoingMessageState.js';\nimport '../../index-63949de5.js';\nimport '../../withSendbird.js';\nimport '../../index-38e61c64.js';\nimport '../../ui/Button.js';\nimport '../../MediaQueryContext-11f0e43f.js';\nimport '@sendbird/chat/groupChannel';\nimport '../../topics-b2b77fb9.js';\nimport '../../UserProfileContext-9cfbab4d.js';\nconst LeaveChannel = props => {\n  var _useChannelListContex, _state$config, _state$config2;\n  const {\n    channel = null,\n    onSubmit = noop,\n    onCancel = noop\n  } = props;\n  const channelFromContext = (_useChannelListContex = useChannelListContext()) === null || _useChannelListContex === void 0 ? void 0 : _useChannelListContex.currentChannel;\n  const leavingChannel = channel || channelFromContext;\n  const state = useSendbirdStateContext();\n  const {\n    stringSet\n  } = useLocalization();\n  const logger = state === null || state === void 0 ? void 0 : (_state$config = state.config) === null || _state$config === void 0 ? void 0 : _state$config.logger;\n  const isOnline = state === null || state === void 0 ? void 0 : (_state$config2 = state.config) === null || _state$config2 === void 0 ? void 0 : _state$config2.isOnline;\n  if (leavingChannel) {\n    return /*#__PURE__*/React__default.createElement(Modal, {\n      disabled: !isOnline,\n      onCancel: onCancel,\n      onSubmit: () => {\n        logger.info('ChannelSettings: Leaving channel', leavingChannel);\n        leavingChannel === null || leavingChannel === void 0 ? void 0 : leavingChannel.leave().then(() => {\n          logger.info('ChannelSettings: Leaving channel successful!', leavingChannel);\n          onSubmit();\n        });\n      },\n      submitText: stringSet.MODAL__LEAVE_CHANNEL__FOOTER,\n      titleText: stringSet.MODAL__LEAVE_CHANNEL__TITLE\n    });\n  }\n};\nfunction ChannelPreviewAction(_ref) {\n  let {\n    channel,\n    disabled,\n    onLeaveChannel\n  } = _ref;\n  const parentRef = useRef(null);\n  const parentContainerRef = useRef(null);\n  const [showModal, setShowModal] = useState(false);\n  const {\n    stringSet\n  } = useContext(LocalizationContext);\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    role: \"button\",\n    style: {\n      display: 'inline-block'\n    },\n    onKeyDown: e => {\n      e.stopPropagation();\n    },\n    tabIndex: 0,\n    onClick: e => {\n      e.stopPropagation();\n    },\n    ref: parentContainerRef\n  }, /*#__PURE__*/React__default.createElement(ContextMenu\n  /* eslint-disable react/no-unstable-nested-components */, {\n    menuTrigger: toggleDropdown => /*#__PURE__*/React__default.createElement(IconButton, {\n      ref: parentRef,\n      onClick: toggleDropdown,\n      height: \"32px\",\n      width: \"32px\"\n    }, /*#__PURE__*/React__default.createElement(Icon, {\n      type: IconTypes.MORE,\n      fillColor: IconColors.PRIMARY,\n      width: \"24px\",\n      height: \"24px\"\n    }))\n    /* eslint-disable react/no-unstable-nested-components */,\n    menuItems: closeDropdown => /*#__PURE__*/React__default.createElement(MenuItems, {\n      parentRef: parentRef,\n      parentContainRef: parentContainerRef,\n      closeDropdown: closeDropdown\n    }, /*#__PURE__*/React__default.createElement(MenuItem, {\n      onClick: () => {\n        if (disabled) {\n          return;\n        }\n        setShowModal(true);\n        closeDropdown();\n      },\n      dataSbId: \"channel_list_item_context_menu_leave_channel\"\n    }, stringSet.CHANNEL_SETTING__LEAVE_CHANNEL__TITLE))\n  }), showModal && /*#__PURE__*/React__default.createElement(LeaveChannel, {\n    channel: channel,\n    onSubmit: () => {\n      setShowModal(false);\n      onLeaveChannel();\n    },\n    onCancel: () => setShowModal(false)\n  }));\n}\nChannelPreviewAction.propTypes = {\n  disabled: PropTypes.bool,\n  onLeaveChannel: PropTypes.func.isRequired,\n  channel: PropTypes.shape({})\n};\nChannelPreviewAction.defaultProps = {\n  disabled: false,\n  channel: null\n};\nexport { ChannelPreviewAction as default };","map":{"version":3,"mappings":"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","names":["LeaveChannel","props","channel","onSubmit","noop","onCancel","channelFromContext","useChannelListContext","_useChannelListContex","currentChannel","leavingChannel","state","useSendbirdStateContext","stringSet","useLocalization","logger","config","_state$config","isOnline","_state$config2","React","Modal","disabled","info","leave","then","submitText","MODAL__LEAVE_CHANNEL__FOOTER","titleText","MODAL__LEAVE_CHANNEL__TITLE","ChannelPreviewAction","onLeaveChannel","parentRef","useRef","parentContainerRef","showModal","setShowModal","useState","useContext","LocalizationContext","role","style","display","onKeyDown","e","stopPropagation","tabIndex","onClick","ref","ContextMenu","menuTrigger","toggleDropdown","IconButton","height","width","Icon","type","IconTypes","MORE","fillColor","IconColors","PRIMARY","menuItems","closeDropdown","MenuItems","parentContainRef","MenuItem","dataSbId","CHANNEL_SETTING__LEAVE_CHANNEL__TITLE","LeaveChannelModal","propTypes","PropTypes","bool","func","isRequired","shape","defaultProps"],"sources":["C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\ChannelList\\components\\LeaveChannel\\index.tsx","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\ChannelList\\components\\ChannelPreviewAction.jsx"],"sourcesContent":["import React from 'react';\n\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\nimport { noop } from '../../../../utils/utils';\n\nimport Modal from '../../../../ui/Modal';\nimport { useChannelListContext } from '../../context/ChannelListProvider';\nimport { useLocalization } from '../../../../lib/LocalizationContext';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\n\nexport type LeaveChannelProps = {\n  channel?: GroupChannel;\n  onSubmit: () => void;\n  onCancel: () => void;\n};\n\nconst LeaveChannel: React.FC<LeaveChannelProps> = (props: LeaveChannelProps) => {\n  const {\n    channel = null,\n    onSubmit = noop,\n    onCancel = noop,\n  } = props;\n\n  const channelFromContext = useChannelListContext()?.currentChannel;\n  const leavingChannel = channel || channelFromContext;\n  const state = useSendbirdStateContext();\n  const { stringSet } = useLocalization();\n\n  const logger = state?.config?.logger;\n  const isOnline = state?.config?.isOnline;\n  if (leavingChannel) {\n    return (\n      <Modal\n        disabled={!isOnline}\n        onCancel={onCancel}\n        onSubmit={() => {\n          logger.info('ChannelSettings: Leaving channel', leavingChannel);\n          leavingChannel?.leave()\n            .then(() => {\n              logger.info('ChannelSettings: Leaving channel successful!', leavingChannel);\n              onSubmit();\n            });\n        }}\n        submitText={stringSet.MODAL__LEAVE_CHANNEL__FOOTER}\n        titleText={stringSet.MODAL__LEAVE_CHANNEL__TITLE}\n      />\n    );\n  }\n};\n\nexport default LeaveChannel;\n","import React, {\n  useState,\n  useRef,\n  useContext,\n} from 'react';\nimport PropTypes from 'prop-types';\n\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\nimport ContextMenu, { MenuItem, MenuItems } from '../../../ui/ContextMenu';\nimport IconButton from '../../../ui/IconButton';\nimport Icon, { IconTypes, IconColors } from '../../../ui/Icon';\nimport LeaveChannelModal from './LeaveChannel';\n\nexport default function ChannelPreviewAction({\n  channel,\n  disabled,\n  onLeaveChannel,\n}) {\n  const parentRef = useRef(null);\n  const parentContainerRef = useRef(null);\n  const [showModal, setShowModal] = useState(false);\n  const { stringSet } = useContext(LocalizationContext);\n\n  return (\n    <div\n      role=\"button\"\n      style={{ display: 'inline-block' }}\n      onKeyDown={(e) => { e.stopPropagation(); }}\n      tabIndex={0}\n      onClick={(e) => { e.stopPropagation(); }}\n      ref={parentContainerRef}\n    >\n      <ContextMenu\n      /* eslint-disable react/no-unstable-nested-components */\n        menuTrigger={(toggleDropdown) => (\n          <IconButton\n            ref={parentRef}\n            onClick={toggleDropdown}\n            height=\"32px\"\n            width=\"32px\"\n          >\n            <Icon\n              type={IconTypes.MORE}\n              fillColor={IconColors.PRIMARY}\n              width=\"24px\"\n              height=\"24px\"\n            />\n          </IconButton>\n        )}\n        /* eslint-disable react/no-unstable-nested-components */\n        menuItems={(closeDropdown) => (\n          <MenuItems\n            parentRef={parentRef}\n            parentContainRef={parentContainerRef}\n            closeDropdown={closeDropdown}\n          >\n            <MenuItem\n              onClick={() => {\n                if (disabled) { return; }\n                setShowModal(true);\n                closeDropdown();\n              }}\n              dataSbId=\"channel_list_item_context_menu_leave_channel\"\n            >\n              {stringSet.CHANNEL_SETTING__LEAVE_CHANNEL__TITLE}\n            </MenuItem>\n          </MenuItems>\n        )}\n      />\n      {\n        showModal && (\n          <LeaveChannelModal\n            channel={channel}\n            onSubmit={() => {\n              setShowModal(false);\n              onLeaveChannel();\n            }}\n            onCancel={() => setShowModal(false)}\n          />\n        )\n      }\n    </div>\n  );\n}\n\nChannelPreviewAction.propTypes = {\n  disabled: PropTypes.bool,\n  onLeaveChannel: PropTypes.func.isRequired,\n  channel: PropTypes.shape({}),\n};\n\nChannelPreviewAction.defaultProps = {\n  disabled: false,\n  channel: null,\n};\n"]},"metadata":{},"sourceType":"module"}