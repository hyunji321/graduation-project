{"ast":null,"code":"import _slicedToArray from \"C:/Users/\\uC774\\uACBD\\uBBFC/IdeaProjects/sendbird-uikit-whatsapp-sample/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport React__default, { useRef, useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { u as useLocalization, a as LocalizationContext } from '../../LocalizationContext-076d6d2e.js';\nimport ContextMenu, { MenuItems, MenuItem } from '../../ui/ContextMenu.js';\nimport IconButton from '../../ui/IconButton.js';\nimport Icon, { IconTypes, IconColors } from '../../ui/Icon.js';\nimport useSendbirdStateContext from '../../useSendbirdStateContext.js';\nimport { n as noop } from '../../utils-4bbbca2c.js';\nimport Modal from '../../ui/Modal.js';\nimport { u as useChannelListContext } from '../../ChannelListProvider-21425002.js';\nimport '../../stringSet-13bbd4a2.js';\nimport '../../index-99aabd9e.js';\nimport '../../_rollupPluginBabelHelpers-6bb0305c.js';\nimport 'react-dom';\nimport '../../ui/SortByRow.js';\nimport '../../uuid-1adedf62.js';\nimport '../../index-7eb65acf.js';\nimport '../../utils/message/getOutgoingMessageState.js';\nimport '../../index-63949de5.js';\nimport '../../withSendbird.js';\nimport '../../index-38e61c64.js';\nimport '../../ui/Button.js';\nimport '../../MediaQueryContext-11f0e43f.js';\nimport '@sendbird/chat/groupChannel';\nimport '../../topics-b2b77fb9.js';\nimport '../../UserProfileContext-9cfbab4d.js';\nvar LeaveChannel = function LeaveChannel(props) {\n  var _useChannelListContex, _state$config, _state$config2;\n  var _props$channel = props.channel,\n    channel = _props$channel === void 0 ? null : _props$channel,\n    _props$onSubmit = props.onSubmit,\n    _onSubmit = _props$onSubmit === void 0 ? noop : _props$onSubmit,\n    _props$onCancel = props.onCancel,\n    onCancel = _props$onCancel === void 0 ? noop : _props$onCancel;\n  var channelFromContext = (_useChannelListContex = useChannelListContext()) === null || _useChannelListContex === void 0 ? void 0 : _useChannelListContex.currentChannel;\n  var leavingChannel = channel || channelFromContext;\n  var state = useSendbirdStateContext();\n  var _useLocalization = useLocalization(),\n    stringSet = _useLocalization.stringSet;\n  var logger = state === null || state === void 0 ? void 0 : (_state$config = state.config) === null || _state$config === void 0 ? void 0 : _state$config.logger;\n  var isOnline = state === null || state === void 0 ? void 0 : (_state$config2 = state.config) === null || _state$config2 === void 0 ? void 0 : _state$config2.isOnline;\n  if (leavingChannel) {\n    return /*#__PURE__*/React__default.createElement(Modal, {\n      disabled: !isOnline,\n      onCancel: onCancel,\n      onSubmit: function onSubmit() {\n        logger.info('ChannelSettings: Leaving channel', leavingChannel);\n        leavingChannel === null || leavingChannel === void 0 ? void 0 : leavingChannel.leave().then(function () {\n          logger.info('ChannelSettings: Leaving channel successful!', leavingChannel);\n          _onSubmit();\n        });\n      },\n      submitText: stringSet.MODAL__LEAVE_CHANNEL__FOOTER,\n      titleText: stringSet.MODAL__LEAVE_CHANNEL__TITLE\n    });\n  }\n};\nfunction ChannelPreviewAction(_ref) {\n  var channel = _ref.channel,\n    disabled = _ref.disabled,\n    onLeaveChannel = _ref.onLeaveChannel;\n  var parentRef = useRef(null);\n  var parentContainerRef = useRef(null);\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    showModal = _useState2[0],\n    setShowModal = _useState2[1];\n  var _useContext = useContext(LocalizationContext),\n    stringSet = _useContext.stringSet;\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    role: \"button\",\n    style: {\n      display: 'inline-block'\n    },\n    onKeyDown: function onKeyDown(e) {\n      e.stopPropagation();\n    },\n    tabIndex: 0,\n    onClick: function onClick(e) {\n      e.stopPropagation();\n    },\n    ref: parentContainerRef\n  }, /*#__PURE__*/React__default.createElement(ContextMenu\n  /* eslint-disable react/no-unstable-nested-components */, {\n    menuTrigger: function menuTrigger(toggleDropdown) {\n      return /*#__PURE__*/React__default.createElement(IconButton, {\n        ref: parentRef,\n        onClick: toggleDropdown,\n        height: \"32px\",\n        width: \"32px\"\n      }, /*#__PURE__*/React__default.createElement(Icon, {\n        type: IconTypes.MORE,\n        fillColor: IconColors.PRIMARY,\n        width: \"24px\",\n        height: \"24px\"\n      }));\n    }\n    /* eslint-disable react/no-unstable-nested-components */,\n    menuItems: function menuItems(closeDropdown) {\n      return /*#__PURE__*/React__default.createElement(MenuItems, {\n        parentRef: parentRef,\n        parentContainRef: parentContainerRef,\n        closeDropdown: closeDropdown\n      }, /*#__PURE__*/React__default.createElement(MenuItem, {\n        onClick: function onClick() {\n          if (disabled) {\n            return;\n          }\n          setShowModal(true);\n          closeDropdown();\n        },\n        dataSbId: \"channel_list_item_context_menu_leave_channel\"\n      }, stringSet.CHANNEL_SETTING__LEAVE_CHANNEL__TITLE));\n    }\n  }), showModal && /*#__PURE__*/React__default.createElement(LeaveChannel, {\n    channel: channel,\n    onSubmit: function onSubmit() {\n      setShowModal(false);\n      onLeaveChannel();\n    },\n    onCancel: function onCancel() {\n      return setShowModal(false);\n    }\n  }));\n}\nChannelPreviewAction.propTypes = {\n  disabled: PropTypes.bool,\n  onLeaveChannel: PropTypes.func.isRequired,\n  channel: PropTypes.shape({})\n};\nChannelPreviewAction.defaultProps = {\n  disabled: false,\n  channel: null\n};\nexport { ChannelPreviewAction as default };","map":{"version":3,"mappings":"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","names":["LeaveChannel","props","channel","onSubmit","noop","onCancel","channelFromContext","useChannelListContext","_useChannelListContex","currentChannel","leavingChannel","state","useSendbirdStateContext","useLocalization","stringSet","logger","config","_state$config","isOnline","_state$config2","React","Modal","disabled","info","leave","then","submitText","MODAL__LEAVE_CHANNEL__FOOTER","titleText","MODAL__LEAVE_CHANNEL__TITLE","ChannelPreviewAction","_ref","onLeaveChannel","parentRef","useRef","parentContainerRef","useState","showModal","setShowModal","useContext","LocalizationContext","role","style","display","onKeyDown","e","stopPropagation","tabIndex","onClick","ref","ContextMenu","menuTrigger","toggleDropdown","IconButton","height","width","Icon","type","IconTypes","MORE","fillColor","IconColors","PRIMARY","menuItems","closeDropdown","MenuItems","parentContainRef","MenuItem","dataSbId","CHANNEL_SETTING__LEAVE_CHANNEL__TITLE","LeaveChannelModal","propTypes","PropTypes","bool","func","isRequired","shape","defaultProps"],"sources":["C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\ChannelList\\components\\LeaveChannel\\index.tsx","C:\\Users\\이경민\\IdeaProjects\\sendbird-uikit-whatsapp-sample\\node_modules\\@sendbird\\src\\modules\\ChannelList\\components\\ChannelPreviewAction.jsx"],"sourcesContent":["import React from 'react';\n\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\nimport { noop } from '../../../../utils/utils';\n\nimport Modal from '../../../../ui/Modal';\nimport { useChannelListContext } from '../../context/ChannelListProvider';\nimport { useLocalization } from '../../../../lib/LocalizationContext';\nimport { GroupChannel } from '@sendbird/chat/groupChannel';\n\nexport type LeaveChannelProps = {\n  channel?: GroupChannel;\n  onSubmit: () => void;\n  onCancel: () => void;\n};\n\nconst LeaveChannel: React.FC<LeaveChannelProps> = (props: LeaveChannelProps) => {\n  const {\n    channel = null,\n    onSubmit = noop,\n    onCancel = noop,\n  } = props;\n\n  const channelFromContext = useChannelListContext()?.currentChannel;\n  const leavingChannel = channel || channelFromContext;\n  const state = useSendbirdStateContext();\n  const { stringSet } = useLocalization();\n\n  const logger = state?.config?.logger;\n  const isOnline = state?.config?.isOnline;\n  if (leavingChannel) {\n    return (\n      <Modal\n        disabled={!isOnline}\n        onCancel={onCancel}\n        onSubmit={() => {\n          logger.info('ChannelSettings: Leaving channel', leavingChannel);\n          leavingChannel?.leave()\n            .then(() => {\n              logger.info('ChannelSettings: Leaving channel successful!', leavingChannel);\n              onSubmit();\n            });\n        }}\n        submitText={stringSet.MODAL__LEAVE_CHANNEL__FOOTER}\n        titleText={stringSet.MODAL__LEAVE_CHANNEL__TITLE}\n      />\n    );\n  }\n};\n\nexport default LeaveChannel;\n","import React, {\n  useState,\n  useRef,\n  useContext,\n} from 'react';\nimport PropTypes from 'prop-types';\n\nimport { LocalizationContext } from '../../../lib/LocalizationContext';\nimport ContextMenu, { MenuItem, MenuItems } from '../../../ui/ContextMenu';\nimport IconButton from '../../../ui/IconButton';\nimport Icon, { IconTypes, IconColors } from '../../../ui/Icon';\nimport LeaveChannelModal from './LeaveChannel';\n\nexport default function ChannelPreviewAction({\n  channel,\n  disabled,\n  onLeaveChannel,\n}) {\n  const parentRef = useRef(null);\n  const parentContainerRef = useRef(null);\n  const [showModal, setShowModal] = useState(false);\n  const { stringSet } = useContext(LocalizationContext);\n\n  return (\n    <div\n      role=\"button\"\n      style={{ display: 'inline-block' }}\n      onKeyDown={(e) => { e.stopPropagation(); }}\n      tabIndex={0}\n      onClick={(e) => { e.stopPropagation(); }}\n      ref={parentContainerRef}\n    >\n      <ContextMenu\n      /* eslint-disable react/no-unstable-nested-components */\n        menuTrigger={(toggleDropdown) => (\n          <IconButton\n            ref={parentRef}\n            onClick={toggleDropdown}\n            height=\"32px\"\n            width=\"32px\"\n          >\n            <Icon\n              type={IconTypes.MORE}\n              fillColor={IconColors.PRIMARY}\n              width=\"24px\"\n              height=\"24px\"\n            />\n          </IconButton>\n        )}\n        /* eslint-disable react/no-unstable-nested-components */\n        menuItems={(closeDropdown) => (\n          <MenuItems\n            parentRef={parentRef}\n            parentContainRef={parentContainerRef}\n            closeDropdown={closeDropdown}\n          >\n            <MenuItem\n              onClick={() => {\n                if (disabled) { return; }\n                setShowModal(true);\n                closeDropdown();\n              }}\n              dataSbId=\"channel_list_item_context_menu_leave_channel\"\n            >\n              {stringSet.CHANNEL_SETTING__LEAVE_CHANNEL__TITLE}\n            </MenuItem>\n          </MenuItems>\n        )}\n      />\n      {\n        showModal && (\n          <LeaveChannelModal\n            channel={channel}\n            onSubmit={() => {\n              setShowModal(false);\n              onLeaveChannel();\n            }}\n            onCancel={() => setShowModal(false)}\n          />\n        )\n      }\n    </div>\n  );\n}\n\nChannelPreviewAction.propTypes = {\n  disabled: PropTypes.bool,\n  onLeaveChannel: PropTypes.func.isRequired,\n  channel: PropTypes.shape({}),\n};\n\nChannelPreviewAction.defaultProps = {\n  disabled: false,\n  channel: null,\n};\n"]},"metadata":{},"sourceType":"module"}