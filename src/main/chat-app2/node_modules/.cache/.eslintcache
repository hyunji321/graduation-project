[{"C:\\Users\\user\\IdeaProjects\\project\\homeReviewSite\\src\\main\\chat-app2\\src\\index.js":"1","C:\\Users\\user\\IdeaProjects\\project\\homeReviewSite\\src\\main\\chat-app2\\src\\App.js":"2","C:\\Users\\user\\IdeaProjects\\project\\homeReviewSite\\src\\main\\chat-app2\\src\\MobileView.js":"3","C:\\Users\\user\\IdeaProjects\\project\\homeReviewSite\\src\\main\\chat-app2\\src\\DesktopView.js":"4"},{"size":544,"mtime":1697431542723,"results":"5","hashOfConfig":"6"},{"size":4133,"mtime":1697431542716,"results":"7","hashOfConfig":"6"},{"size":2111,"mtime":1694409940152,"results":"8","hashOfConfig":"6"},{"size":1751,"mtime":1694409940151,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1plxj0b",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\user\\IdeaProjects\\project\\homeReviewSite\\src\\main\\chat-app2\\src\\index.js",[],[],"C:\\Users\\user\\IdeaProjects\\project\\homeReviewSite\\src\\main\\chat-app2\\src\\App.js",["24","25","26","27","28"],[],"import React, { useEffect, useState } from \"react\";\r\nimport SBProvider from \"@sendbird/uikit-react/SendbirdProvider\";\r\nimport MessageContent from \"@sendbird/uikit-react/ui/MessageContent\";\r\nimport MobileView from \"./MobileView\";\r\nimport DesktopView from \"./DesktopView\";\r\nimport \"./styles.css\";\r\nimport \"./App.css\";\r\nimport \"@sendbird/uikit-react/dist/index.css\";\r\nimport kr from \"date-fns/locale/ko\";\r\n\r\nconst sendAdminMessage = async (channel_url) => {\r\n  const response = await fetch(`https://api-${process.env.REACT_APP_APP_ID}.sendbird.com/v3/group_channels/${channel_url}/messages`,{\r\n    method: \"POST\",\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Api-token': process.env.REACT_APP_API_TOKEN\r\n    },\r\n    body: JSON.stringify({\r\n      message_type: \"MESG\",\r\n      user_id: \"test_id1\",\r\n      message: \"[승계 매물에 관심있어요]\"\r\n    })\r\n  })\r\n}\r\n\r\nconst showEmptyChannels = async (USER_ID) => {\r\n  const response = await fetch(`https://api-${process.env.REACT_APP_APP_ID}.sendbird.com/v3/users/${USER_ID}/my_group_channels?show_empty=true&show_member=true`);\r\n}\r\n\r\nconst createChannel = async () => {\r\n  const response = await fetch(`https://api-${process.env.REACT_APP_APP_ID}.sendbird.com/v3/group_channels`,{\r\n    method: \"POST\",\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Api-Token': process.env.REACT_APP_API_TOKEN\r\n    },\r\n    body: JSON.stringify({\r\n      \"users\": [\r\n        {\"user_id\": \"test_id1\"},\r\n        {\"user_id\": \"test_id2\"}\r\n      ],\r\n      \"is_distinct\": true\r\n  })})\r\n  .then((response) => response.json())\r\n  .then((data) => {\r\n    console.log(data.channel_url);\r\n    showEmptyChannels(\"test_id1\");\r\n    sendAdminMessage(data.channel_url);\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Error(`Failed to create channel: ${response.status} - ${response.statusText}`);\r\n  }\r\n}\r\n\r\n\r\nconst getUserId = async()=>{\r\n  const response = await fetch(\"https://5aa7cf1d-ae78-4b47-ae33-7322ea838a30.mock.pstmn.io/login\", {\r\n    method: \"POST\"\r\n  });\r\n  const data = await response.json();\r\n  return data;\r\n}\r\n\r\nfunction App() {\r\n  let [data, setData] = useState({\r\n    id: \"\",\r\n    nickname: \"\"\r\n  });\r\n  let USER_ID = data ? data.id : null;\r\n  let NICKNAME = data ? data.nickname : null;\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const result = await getUserId();\r\n        setData(result);\r\n        USER_ID = result? result.id : \"NO ID\";\r\n        NICKNAME = result ? result.nickname : \"NO NAME\";\r\n        console.log(result.id);\r\n        console.log(result.nickname);\r\n      } catch (error) {\r\n        console.error('Error:', error);\r\n      }\r\n    }\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  createChannel();\r\n\r\n  const APP_ID = process.env.REACT_APP_APP_ID;\r\n  const PROFILE_URL = process.env.REACT_APP_PROFILE_URL;\r\n  const myColorSet = {\r\n    \"--sendbird-light-primary-100\": \"rgb(195, 241, 169)\",\r\n    \"--sendbird-light-primary-300\": \"rgb(165, 211, 149)\",\r\n    \"--sendbird-light-primary-400\": \"rgb(136, 188, 132)\",\r\n  };\r\n\r\n  const [stringSet] = useState({\r\n    MESSAGE_STATUS__YESTERDAY: \"어제\",\r\n    CHANNEL_PREVIEW_MOBILE_LEAVE: \"채팅방 나가기\",\r\n    CHANNEL_SETTING__LEAVE_CHANNEL__TITLE: \"채팅방 나가기\",\r\n    MESSAGE_INPUT__PLACE_HOLDER: \"메세지를 입력해주세요.\",\r\n    PLACE_HOLDER__NO_CHANNEL: \" \",\r\n  });\r\n\r\n  const [mobileViewOpen, setMobileViewOpen] = React.useState(false);\r\n  window.addEventListener(\"resize\", function () {\r\n    if (window.innerWidth < 900) {\r\n      setMobileViewOpen(true);\r\n    } else {\r\n      setMobileViewOpen(false);\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (window.innerWidth < 900) {\r\n      setMobileViewOpen(true);\r\n    } else {\r\n      setMobileViewOpen(false);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <SBProvider\r\n        appId={APP_ID}\r\n        userId={USER_ID}\r\n        nickname={NICKNAME}\r\n        colorSet={myColorSet}\r\n        dateLocale={kr}\r\n        stringSet={stringSet}\r\n        profileUrl={PROFILE_URL}\r\n      >\r\n        {mobileViewOpen ? <MobileView /> : <DesktopView />}\r\n      </SBProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\user\\IdeaProjects\\project\\homeReviewSite\\src\\main\\chat-app2\\src\\MobileView.js",[],[],[],"C:\\Users\\user\\IdeaProjects\\project\\homeReviewSite\\src\\main\\chat-app2\\src\\DesktopView.js",[],[],{"ruleId":"29","severity":1,"message":"30","line":3,"column":8,"nodeType":"31","messageId":"32","endLine":3,"endColumn":22},{"ruleId":"29","severity":1,"message":"33","line":12,"column":9,"nodeType":"31","messageId":"32","endLine":12,"endColumn":17},{"ruleId":"29","severity":1,"message":"33","line":27,"column":9,"nodeType":"31","messageId":"32","endLine":27,"endColumn":17},{"ruleId":"34","severity":1,"message":"35","line":77,"column":19,"nodeType":"36","endLine":77,"endColumn":46},{"ruleId":"34","severity":1,"message":"37","line":78,"column":20,"nodeType":"36","endLine":78,"endColumn":56},"no-unused-vars","'MessageContent' is defined but never used.","Identifier","unusedVar","'response' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'USER_ID' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","ConditionalExpression","Assignments to the 'NICKNAME' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect."]